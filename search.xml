[{"title":"食谱","url":"http://example.com/2025/04/22/食谱/","content":"<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>餐次</th>\n<th>食材</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>07:30</strong></td>\n<td><strong>早餐</strong></td>\n<td>黑咖啡 1杯 香蕉 1根 包子 1个（约80g）</td>\n<td>黑咖啡有助于加速新陈代谢，包子少油少盐。</td>\n</tr>\n<tr>\n<td><strong>10:30</strong></td>\n<td><strong>上午加餐</strong></td>\n<td>苹果 1个</td>\n<td>快速补充能量，增加纤维。</td>\n</tr>\n<tr>\n<td><strong>12:30</strong></td>\n<td><strong>午餐</strong></td>\n<td>面条（全麦/细面）100g 小炒青菜（青菜100g+橄榄油5g） 空气炸锅去皮鸡腿肉100g</td>\n<td>面条换全麦，增加纤维和蛋白。</td>\n</tr>\n<tr>\n<td><strong>15:30</strong></td>\n<td><strong>下午加餐</strong></td>\n<td>无糖酸奶200g 巴旦木10g</td>\n<td>提供蛋白和健康脂肪，控制血糖波动。</td>\n</tr>\n<tr>\n<td><strong>18:30</strong></td>\n<td><strong>晚餐</strong></td>\n<td>外面的小炒（选择低油低盐的菜品，如清炒时蔬、豆腐类等）</td>\n<td>外面吃时尽量控制油盐量，避免油腻食物。</td>\n</tr>\n<tr>\n<td><strong>21:00</strong></td>\n<td><strong>夜宵</strong></td>\n<td>水果（如苹果或橙子）或一根香蕉</td>\n<td>如果晚上饿，可以轻量水果作为夜宵。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>喝水 &amp; 运动</strong></p>\n<ul>\n<li>全天 ≥ 2 L 水。</li>\n<li>训练前 1–2 h 加 ≈ 20 g 碳水（半根香蕉）；训练后 30 min 内补 ≈ 20 g 蛋白（酸奶或乳清）。</li>\n</ul>\n","categories":[],"tags":[]},{"title":"Java基础","url":"http://example.com/2025/02/10/Java基础/","content":"<h2 id=\"TIPS\">TIPS</h2>\n<h3 id=\"数据类型\">数据类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">字节数</th>\n<th style=\"text-align:center\">范围</th>\n<th style=\"text-align:center\">举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">$-128\\sim 127$ （$-2^7\\sim 2^7 - 1$）</td>\n<td style=\"text-align:center\">123</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">$-2^{15}\\sim 2^{15} - 1$</td>\n<td style=\"text-align:center\">12345</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">$-2^{31}\\sim 2^{31} - 1$</td>\n<td style=\"text-align:center\">12345678</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">$-2^{63}\\sim 2^{63} - 1$</td>\n<td style=\"text-align:center\">1234567890123L</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float(高精度)</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">$-2^{31}\\sim 2^{31} - 1$</td>\n<td style=\"text-align:center\">1.2F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double(高精度)</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">$-2^{63}\\sim 2^{63} - 1$</td>\n<td style=\"text-align:center\">1.3, 1.3D</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">true/false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">‘A’</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>为什么byte的范围为$-2^7\\sim 2^7 - 1$？</p>\n<p>Java中所有整数类型都是使用<strong>补码来表示有符号整数</strong></p>\n<p>1 byte = 8 bit<br>\n8 bit的表示方法：0000 0000，每一位只有0 1，也就是二进制</p>\n<p>在字节数范围表示中规定：</p>\n<ul>\n<li>第一位如果是0：表示正数</li>\n<li>第一位如果是1：表示负数</li>\n</ul>\n<p>最小值：1000 0000 表示-128<br>\n最大值：0111 1111 表示127</p>\n<table>\n<thead>\n<tr>\n<th>十进制</th>\n<th>原码（二进制）</th>\n<th>反码</th>\n<th>补码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+5</code></td>\n<td><code>0000 0101</code></td>\n<td>-</td>\n<td><code>0000 0101</code></td>\n</tr>\n<tr>\n<td><code>-5</code></td>\n<td><code>1000 0101</code>（原码）</td>\n<td><code>1111 1010</code>（反码）</td>\n<td><code>1111 1011</code>（补码）</td>\n</tr>\n<tr>\n<td><code>-1</code></td>\n<td><code>1000 0001</code>（原码）</td>\n<td><code>1111 1110</code>（反码）</td>\n<td><code>1111 1111</code>（补码）</td>\n</tr>\n<tr>\n<td><code>-128</code></td>\n<td>无</td>\n<td>无</td>\n<td><code>1000 0000</code>（特殊情况）</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<ol>\n<li>原码<br>\n定义： 原码是最简单的表示形式，符号位为 0 表示正数，为 1 表示负数，数值部分为该数的绝对值的二进制表示。<br>\n示例：</li>\n</ol>\n<ul>\n<li>+7 的原码为 00000111</li>\n<li>-7 的原码为 10000111</li>\n</ul>\n<ol start=\"2\">\n<li>反码<br>\n定义：<br>\n对于正数，反码与原码相同。<br>\n对于负数，反码符号位不变，其余位按位取反。<br>\n示例：</li>\n</ol>\n<ul>\n<li>+7 的反码为 00000111</li>\n<li>-7 的反码为 11111000</li>\n</ul>\n<ol start=\"3\">\n<li>补码<br>\n定义：<br>\n对于正数，补码与原码相同。<br>\n对于负数，补码是在反码的基础上加 1。<br>\n示例：</li>\n</ol>\n<ul>\n<li>+7 的补码为 00000111</li>\n<li>-7 的补码为 11111001</li>\n</ul>\n<p>总结</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表示形式</th>\n<th style=\"text-align:center\">符号位</th>\n<th style=\"text-align:center\">数值位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">原码</td>\n<td style=\"text-align:center\">0 表示正数，1 表示负数</td>\n<td style=\"text-align:center\">绝对值的二进制表示</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">反码</td>\n<td style=\"text-align:center\">0 表示正数，1 表示负数</td>\n<td style=\"text-align:center\"><strong>正数与原码相同</strong>，负数按位取反</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">补码</td>\n<td style=\"text-align:center\">0 表示正数，1 表示负数</td>\n<td style=\"text-align:center\"><strong>正数与原码相同</strong>，负数在反码基础上加 1</td>\n</tr>\n</tbody>\n</table>\n<p>补码的作用用于给计算机识别做加法<br>\n如，计算$7 - 3$<br>\n$7$的原码：<code>0000 0111</code><br>\n$-3$的原码：<code>1000 0011</code></p>\n<p>$7$的反码：<code>0000 0111</code><br>\n$-3$的反码：<code>1111 1100</code></p>\n<p>$7$的补码：<code>0000 0111</code><br>\n$-3$的补码：<code>1111 1110</code></p>\n<p><code>0000 0111</code><br>\n加<br>\n<code>1111 1110</code><br>\n等于<br>\n<code>0000 0101</code></p>\n<p>不是<code>1 0000 0101</code>的原因是，最高位的进位会被丢弃，称为溢出。</p>\n<blockquote>\n<p>可以使用如下方法调用可变个数形参</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> ... argc)</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(String ... argc)</span> &#123;&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span>[] argc)</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">func</span><span class=\"params\">(String[] argc)</span> &#123;&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></blockquote>\n","categories":[],"tags":[]},{"title":"AtCoder-Beginner-Contest-380","url":"http://example.com/2024/11/19/AtCoder-Beginner-Contest-380/","content":"<h2 id=\"A-123233\">A. <strong>123233</strong></h2>\n<h3 id=\"题目描述-22\">题目描述</h3>\n<p>给定一串数字，判断它是否满足以下条件：</p>\n<ol>\n<li><code>1</code>只出现一次</li>\n<li><code>2</code>只出现两次</li>\n<li><code>3</code>只出现三次</li>\n</ol>\n<h3 id=\"思路-2\">思路</h3>\n<p>直接输入string，开一个数组统计出现的次数即可。</p>\n<h3 id=\"代码\">代码</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> cnt[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : str)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt[i - <span class=\"string\">&#x27;0&#x27;</span>] ++ ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt[<span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; cnt[<span class=\"number\">2</span>] == <span class=\"number\">2</span> &amp;&amp; cnt[<span class=\"number\">3</span>] == <span class=\"number\">3</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"B-Hurdle-Parsing\">B. Hurdle Parsing</h2>\n<h3 id=\"题目描述-23\">题目描述</h3>\n<p>给定一个字符串，输入型如<code>|---|-|----|-|-----|</code>，判断每个<code>|</code>内的<code>-</code>的个数。</p>\n<p>上述输出为<code>3 1 4 1 5</code></p>\n<h3 id=\"思路-3\">思路</h3>\n<p>string+双指针扫描一遍即可。</p>\n<h3 id=\"代码-2\">代码</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>; j &lt; str.<span class=\"built_in\">size</span>(); j ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[j] == <span class=\"string\">&#x27;|&#x27;</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; j - i - <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            i = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-Move-Segment\"><strong>C - Move Segment</strong></h2>\n<h3 id=\"题目描述-24\">题目描述</h3>\n<p>将第<code>k</code>段的数字放在第<code>k-1</code>段后面。</p>\n<h3 id=\"思路-4\">思路</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t15 3</span></span><br><span class=\"line\"><span class=\"comment\">    【input】 010011100011001</span></span><br><span class=\"line\"><span class=\"comment\">    【output】010011111000001</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>记录<code>01</code>块的数量，如<code>input</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数字</th>\n<th style=\"text-align:center\">个数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1（第二块）</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1（第三块）</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>​    如果想将第$3$块放在第$2$块后，只需要将第$3$块$1$与前面的$0$交换位置即可。</p>\n<p>用<code>vector&lt;int&gt; zero、vector&lt;int&gt; one</code>记录01块的个数。</p>\n<h3 id=\"代码-3\">代码</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\">string str;</span><br><span class=\"line\">string ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; zero, one;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(str[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cnt ++ ;</span><br><span class=\"line\">                i ++ ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            one.<span class=\"built_in\">push</span>(cnt);</span><br><span class=\"line\">            i -- ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(str[i] == <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cnt ++ ;</span><br><span class=\"line\">                i ++ ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            zero.<span class=\"built_in\">push</span>(cnt);</span><br><span class=\"line\">            i -- ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ans.<span class=\"built_in\">size</span>(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt ++ ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt == k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(ans[i - <span class=\"number\">1</span>], ans[i]);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : ans)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> t = one.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            one.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; t; j ++ ) cout &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> t = zero.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            zero.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; t; j ++ ) cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"D-Strange-Mirroring\"><strong>D - Strange Mirroring</strong></h2>\n<h3 id=\"题目描述-25\">题目描述</h3>\n<p>给定一个字符串，每一次倍增，并且字符串内的字母大小写改变，询问第$i$个字母是什么？</p>\n<h3 id=\"思路-5\">思路</h3>\n<blockquote>\n<p>aB  （<strong>0次</strong>）</p>\n<p>aB   Ab  （<strong>1次</strong>）</p>\n<p>aB   Ab   Ab   aB  （<strong>2次</strong>）</p>\n<p>aB   Ab   Ab   aB   Ab   aB   aB   Ab  （<strong>3次</strong>）</p>\n</blockquote>\n<p>【位置】</p>\n<p>对于一组字符串aB，假设需要查询第$15$个字母是什么，可以通过模字符串长度的方式，计算出第$15$个字母在第一组字符串中的相对位置，再通过【变换】确定字母是什么。</p>\n<p>eg.</p>\n<p>$15%2=1$，那么第$15$个字母要么是a，要么是A。</p>\n<p>【变换】</p>\n<p>假设计算第$15$个字母是什么，看它从哪里变换过来的</p>\n<blockquote>\n<p>aB   <strong>Ab</strong>   Ab   <strong>aB</strong>  <strong>|</strong>  Ab   aB   aB   <strong>A</strong>$_{15}$<strong>b</strong>  （<strong>3次</strong>）</p>\n</blockquote>\n<p>从aB开始，一共变换了$3$次。记为$111$</p>\n<p>再假设计算第$13$个字母是什么，看它从哪里变换过来的</p>\n<blockquote>\n<p>aB   Ab   <strong>Ab</strong>   aB  <strong>|</strong>  Ab   aB   <strong>a</strong>$_{13}$<strong>B</strong>   Ab  （<strong>3次</strong>）</p>\n</blockquote>\n<p>从aB开始，一共变换了$2$次。记为$11$</p>\n<p>可以看出变换的次数与字符串长度有关系。如$15/2=7(111)、13/2=6(110)$</p>\n<p>商的二进制中的$1$如果是双数，就要变换，如果是单数就不用变换。</p>\n<p>【注意】</p>\n<p>如果遇见整除，如计算第$14$个字母是什么?</p>\n<p>$14/2=7、14%2=0$，当模的结果为$0$的时候，需要将商减一，模的结果变为字符串长度。如$(7,0)—&gt;(6,2)$，这是因为字符串<code>str[0]</code>在此题中不合法。</p>\n<h3 id=\"代码-4\">代码</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\">string str;</span><br><span class=\"line\"><span class=\"type\">int</span> q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">popcount</span><span class=\"params\">(LL a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt += a &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        a &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">char</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; a &lt;= <span class=\"string\">&#x27;z&#x27;</span>) a -= <span class=\"number\">32</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> a += <span class=\"number\">32</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; str &gt;&gt; q;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> len = str.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LL x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        </span><br><span class=\"line\">        LL di = x / len;</span><br><span class=\"line\">        <span class=\"type\">int</span> mod = x % len;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mod = len;</span><br><span class=\"line\">            di -- ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"built_in\">popcount</span>(di);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt % <span class=\"number\">2</span>)  <span class=\"comment\">// 如果商的二进制中的1为奇数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">change</span>(str[mod - <span class=\"number\">1</span>]) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout &lt;&lt; str[mod - <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"E-1D-Bucket-Tool\">E. 1D Bucket Tool</h2>\n<h3 id=\"题目描述-26\">题目描述</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411251512835.png\" alt=\"image-20241125151207764\"></p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411251512013.png\" alt=\"image-20241125151233937\" style=\"zoom:50%;\" />\n<h3 id=\"思路-6\">思路</h3>\n<p>【并查集】</p>\n<p><code>l[i]</code>：$i$点颜色块的<strong>左端点</strong></p>\n<p><code>r[i]</code>：$i$点颜色块的<strong>右端点</strong></p>\n<p><code>sz[i]</code>：以$i$点为右端点颜色块的<strong>个数</strong></p>\n<p><code>col[i]</code>：以$i$点为右端点颜色块的<strong>颜色</strong></p>\n<p><code>ans[i]</code>：颜色$i$有多少<strong>个数</strong></p>\n<ol>\n<li>初始化以上数据</li>\n<li>若染颜色\n<ol>\n<li>更新<code>ans</code></li>\n<li>判断左右区间是否是一样的颜色$c$，如果是则<strong>合并</strong></li>\n<li>更新<code>col</code></li>\n</ol>\n</li>\n<li>若求答案，<code>ans[c]</code></li>\n</ol>\n<p>**合并两个区间（a，b）**的时候</p>\n<p><code>v1</code>：a的左区间，<code>v2</code>：b的左区间</p>\n<p><code>u1</code>：a的右区间，<code>u2</code>：b的右区间</p>\n<p>判断<code>v1 v2</code>是否相等，若不相等—&gt;a的右区间变为b的右区间，b的左区间变为a的左区间</p>\n<h3 id=\"代码-5\">代码</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">500010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> l[N], r[N], sz[N], col[N], ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findl</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x != l[x]) l[x] = <span class=\"built_in\">findl</span>(l[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findr</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x != r[x]) r[x] = <span class=\"built_in\">findr</span>(r[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> v1 = <span class=\"built_in\">findl</span>(a), v2 = <span class=\"built_in\">findl</span>(b);</span><br><span class=\"line\">    <span class=\"type\">int</span> u1 = <span class=\"built_in\">findr</span>(a), u2 = <span class=\"built_in\">findr</span>(b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v1 != v2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sz[u2] += sz[u1];</span><br><span class=\"line\">        l[v2] = v1;</span><br><span class=\"line\">        r[u1] = u2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l[i] = i, r[i] = i, sz[i] = <span class=\"number\">1</span>, col[i] = i, ans[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> op, x, c;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; x &gt;&gt; c;</span><br><span class=\"line\">            ans[col[<span class=\"built_in\">findr</span>(x)]] -= sz[<span class=\"built_in\">findr</span>(x)], ans[c] += sz[<span class=\"built_in\">findr</span>(x)];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(col[<span class=\"built_in\">findr</span>(<span class=\"built_in\">findl</span>(x) - <span class=\"number\">1</span>)] == c) <span class=\"built_in\">merge</span>(<span class=\"built_in\">findl</span>(x) - <span class=\"number\">1</span>, <span class=\"built_in\">findl</span>(x));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(col[<span class=\"built_in\">findr</span>(<span class=\"built_in\">findr</span>(x) + <span class=\"number\">1</span>)] == c) <span class=\"built_in\">merge</span>(<span class=\"built_in\">findr</span>(x), <span class=\"built_in\">findr</span>(x) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            col[<span class=\"built_in\">findr</span>(x)] = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; c;</span><br><span class=\"line\">            cout &lt;&lt; ans[c] &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","categories":[],"tags":["AtCoder题解集"]},{"title":"阀门图示","url":"http://example.com/2024/11/19/阀门图示/","content":"<p><strong>ESDV：</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191042930.png\" alt=\"image-20241119104159792\"></p>\n<p><strong>ROV</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191046080.png\" alt=\"image-20241119104530162\"></p>\n<p><strong>PCV</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191046863.png\" alt=\"image-20241119104644329\"></p>\n<p><strong>SSV</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191047639.png\" alt=\"image-20241119104743145\"></p>\n<p><strong>PV</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191048551.png\" alt=\"image-20241119104832231\"></p>\n<p><strong>手阀</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191105610.png\" alt=\"image-20241119110512306\"></p>\n<p><strong>流量计</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191108397.png\" alt=\"image-20241119110743037\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411191108176.png\" alt=\"image-20241119110817010\"></p>\n","categories":[],"tags":[]},{"title":"trend主背景Init代码","url":"http://example.com/2024/11/09/trend主背景Init代码/","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> linesize = <span class=\"number\">0</span>;  <span class=\"comment\">// linesize用于使刷新的时候不会生成多余的行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">main</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">startThread</span>(<span class=\"string\">&quot;initTrend&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">0.5</span>);  <span class=\"comment\">// delay 0.5s 为了让Trend初始化</span></span><br><span class=\"line\">  <span class=\"built_in\">startThread</span>(<span class=\"string\">&quot;showAlert&quot;</span>);  <span class=\"comment\">// 创建一个线程，用于每隔5秒取一次报警信息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initTrend</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将数据读入dyn_string中</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 打开文件</span></span><br><span class=\"line\">  file fileHandle = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;D://test1.txt&quot;</span>, <span class=\"string\">&quot;r+&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  string line = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  dyn_string lines;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!<span class=\"built_in\">feof</span>(fileHandle))  <span class=\"comment\">// 没有读取到最后一行</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(line, <span class=\"number\">100</span>, fileHandle);  <span class=\"comment\">// 每一行读取100个字符，多读一点数据</span></span><br><span class=\"line\">    dyn_string str = <span class=\"built_in\">strsplit</span>(line, <span class=\"string\">&quot;\\n&quot;</span>);  <span class=\"comment\">// 去掉回车符</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dynlen</span>(str) &gt; <span class=\"number\">0</span>) line = str[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"built_in\">strlen</span>(line);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len &gt; <span class=\"number\">0</span> &amp;&amp; line[len - <span class=\"number\">1</span>] == <span class=\"string\">&quot; &quot;</span>) len -- ;  <span class=\"comment\">// 去掉后缀空格</span></span><br><span class=\"line\">    line = <span class=\"built_in\">substr</span>(line, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">    lines.<span class=\"built_in\">append</span>(line);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">fclose</span>(fileHandle);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对dyn_string中的数据进行处理</span></span><br><span class=\"line\">  string trendName;</span><br><span class=\"line\">  <span class=\"type\">int</span> trendCount;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">dynlen</span>(lines); i ++ )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lines[i] == <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有内容不做处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strpos</span>(lines[i], <span class=\"string\">&quot;trendName&quot;</span>, <span class=\"number\">0</span>) &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 记录trend名字</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      i ++ ;</span><br><span class=\"line\">      trendName = lines[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strpos</span>(lines[i], <span class=\"string\">&quot;curveCount&quot;</span>, <span class=\"number\">0</span>) &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 记录有多少条曲线</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      i ++ ;</span><br><span class=\"line\">      trendCount = (<span class=\"type\">int</span>)lines[i];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= trendCount; j ++ )  <span class=\"comment\">// 初始化曲线</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j != <span class=\"number\">1</span>) <span class=\"built_in\">setValue</span>(trendName, <span class=\"string\">&quot;curveScaleVisibility&quot;</span>, <span class=\"string\">&quot;curve&quot;</span> + j, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &lt; trendCount) <span class=\"built_in\">setValue</span>(trendName, <span class=\"string\">&quot;linkCurves&quot;</span>, <span class=\"string\">&quot;curve&quot;</span> + j, <span class=\"string\">&quot;curve&quot;</span> + (j + <span class=\"number\">1</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strpos</span>(lines[i], <span class=\"string\">&quot;dp&quot;</span>, <span class=\"number\">0</span>) &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 添加dp</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      i ++ ;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= trendCount; j ++ )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setValue</span>(trendName, <span class=\"string\">&quot;connectDirectly&quot;</span>, <span class=\"string\">&quot;curve&quot;</span> + j, lines[i ++ ]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i -- ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strpos</span>(lines[i], <span class=\"string\">&quot;curveName&quot;</span>, <span class=\"number\">0</span>) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      i ++ ;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= trendCount; j ++ )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setValue</span>(trendName, <span class=\"string\">&quot;curveLegendName&quot;</span>, <span class=\"string\">&quot;curve&quot;</span> + j, lines[i ++ ]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i -- ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">strpos</span>(lines[i], <span class=\"string\">&quot;end&quot;</span>, <span class=\"number\">0</span>) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setValue</span>(trendName, <span class=\"string\">&quot;legendFont&quot;</span>, <span class=\"string\">&quot;Arial Black, -1, 14, 0, 0, 0, 0, 0, 0, 0&quot;</span>);</span><br><span class=\"line\">       <span class=\"built_in\">setValue</span>(trendName, <span class=\"string\">&quot;trendRun&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">alertLevel</span><span class=\"params\">(string key)</span>  <span class=\"comment\">// 将报警等级转化为对应的报警说明</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  string tmpkey;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(key)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;-2&quot;</span>: tmpkey = <span class=\"string\">&quot;断网&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;-1&quot;</span>: tmpkey = <span class=\"string\">&quot;停机&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;0&quot;</span>: tmpkey = <span class=\"string\">&quot;正常&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;1&quot;</span>: tmpkey = <span class=\"string\">&quot;智能一级&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;2&quot;</span>: tmpkey = <span class=\"string\">&quot;智能二级&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;3&quot;</span>: tmpkey = <span class=\"string\">&quot;智能三级&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;4&quot;</span>: tmpkey = <span class=\"string\">&quot;固定高报&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;5&quot;</span>: tmpkey = <span class=\"string\">&quot;固定高高报&quot;</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tmpkey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showAlert</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  string url = <span class=\"string\">&quot;http://10.217.3.118:18000/wepp_compressor_query_alert&quot;</span>;  <span class=\"comment\">// 报警查询地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mapping data = <span class=\"built_in\">makeMapping</span>(</span><br><span class=\"line\">          <span class=\"string\">&quot;equipmentUuid&quot;</span>, <span class=\"string\">&quot;1c43870a56802127f80a2829feb3294c&quot;</span>,</span><br><span class=\"line\">           <span class=\"string\">&quot;pageNumber&quot;</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">           <span class=\"string\">&quot;size&quot;</span>, <span class=\"number\">20</span></span><br><span class=\"line\">      );  <span class=\"comment\">// 请求数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mapping result;  <span class=\"comment\">// 返回的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用Post请求，读取数据，存入result中</span></span><br><span class=\"line\">    <span class=\"built_in\">netPost</span>(url,</span><br><span class=\"line\">        <span class=\"built_in\">makeMapping</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;content&quot;</span>, <span class=\"built_in\">jsonEncode</span>(data, <span class=\"literal\">false</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;headers&quot;</span>, <span class=\"built_in\">makeMapping</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json; charset=utf-8&quot;</span>)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        result</span><br><span class=\"line\">      );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 验证传输数据是否有异常</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">mappingHasKey</span>(result, <span class=\"string\">&quot;content&quot;</span>))</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"built_in\">mappingHasKey</span>(result, <span class=\"string\">&quot;httpStatusText&quot;</span>) &amp;&amp; result[<span class=\"string\">&quot;httpStatusText&quot;</span>] == <span class=\"string\">&quot;OK&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">mappingHasKey</span>(result, <span class=\"string\">&quot;httpStatusCode&quot;</span>) &amp;&amp; result[<span class=\"string\">&quot;httpStatusCode&quot;</span>] == <span class=\"number\">200</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          mapping mData = <span class=\"built_in\">jsonDecode</span>(result[<span class=\"string\">&quot;content&quot;</span>]);</span><br><span class=\"line\">          dyn_mapping dmData = mData[<span class=\"string\">&quot;data&quot;</span>][<span class=\"string\">&quot;content&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            可以debugtn看看dmData是什么样的</span></span><br><span class=\"line\"><span class=\"comment\">            DebugTN(dmData);</span></span><br><span class=\"line\"><span class=\"comment\">          */</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 从dmData中取报警数据</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">dynlen</span>(dmData); i ++ )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            mapping mItem = dmData[i];</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">              这里的mItem里面的数据大概为：</span></span><br><span class=\"line\"><span class=\"comment\">              key                 value</span></span><br><span class=\"line\"><span class=\"comment\">              alarmLevel            5</span></span><br><span class=\"line\"><span class=\"comment\">              alarmStartTime  32142145325231</span></span><br><span class=\"line\"><span class=\"comment\">              alarmEndTime    32582165325231</span></span><br><span class=\"line\"><span class=\"comment\">              pointName        高速轴驱温度</span></span><br><span class=\"line\"><span class=\"comment\">              ...             ...</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(linesize &lt; <span class=\"number\">20</span>) Table.<span class=\"built_in\">appendLine</span>(<span class=\"string\">&quot;ID&quot;</span>, i);</span><br><span class=\"line\">            linesize ++ ;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 开始绘制数据</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"built_in\">mappinglen</span>(mItem); k ++ )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              string key = <span class=\"built_in\">mappingGetKey</span>(mItem, k);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">// 将不需要的信息舍去</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(key != <span class=\"string\">&quot;alarmLevel&quot;</span> &amp;&amp; key != <span class=\"string\">&quot;alarmEndTime&quot;</span></span><br><span class=\"line\">                   &amp;&amp; key != <span class=\"string\">&quot;alarmStartTime&quot;</span> &amp;&amp; key != <span class=\"string\">&quot;pointName&quot;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">// 如果是</span></span><br><span class=\"line\">              <span class=\"comment\">// 1. 时间     按照时间的显示格式</span></span><br><span class=\"line\">              <span class=\"comment\">// 2. 报警等级  按照报警等级描述显示</span></span><br><span class=\"line\">              <span class=\"comment\">// 3. 其他     正常显示</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(key == <span class=\"string\">&quot;alarmEndTime&quot;</span> || key == <span class=\"string\">&quot;alarmStartTime&quot;</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                Table.<span class=\"built_in\">cellValueRC</span>(i - <span class=\"number\">1</span>, key, formatTime(<span class=\"string\">&quot;%y-%m-%d %H:%M:%S&quot;</span>, (time)(mItem[key] / <span class=\"number\">1000</span>)));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key == <span class=\"string\">&quot;alarmLevel&quot;</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                string tmpkey = <span class=\"built_in\">alertLevel</span>(mItem[key]);</span><br><span class=\"line\">                Table.<span class=\"built_in\">cellValueRC</span>(i - <span class=\"number\">1</span>, key, tmpkey);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                Table.<span class=\"built_in\">cellValueRC</span>(i - <span class=\"number\">1</span>, key, mItem[key]);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(linesize &gt; <span class=\"number\">10000</span>) linesize = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">delay</span>(<span class=\"number\">5</span>);  <span class=\"comment\">// 每5秒查询一次</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"报警自动亮屏","url":"http://example.com/2024/11/09/报警自动亮屏/","content":"<p>附属文件有：<code>WakeScreen.ps1</code>、<code>wakeUp.ctl</code></p>\n<h3 id=\"一、修改睡眠时间\">一、修改睡眠时间</h3>\n<p>将进入睡眠模式的时间改为<code>从不</code>。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091525491.png\" alt=\"alt text\"></p>\n<h3 id=\"二、powershell脚本\">二、powershell脚本</h3>\n<p>将<code>WakeScreen.ps1</code>脚本放在<code>项目名称/bin</code>路径下</p>\n<p>此脚本可以自动按一次<strong>空格键</strong></p>\n<blockquote>\n<p>如果需要更改按键，只需要修改<code>WakeScreen.ps1</code>文件里<code>keybd_event</code>里面的<code>0x20</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">16进制</th>\n<th style=\"text-align:center\">对应键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0x01</td>\n<td style=\"text-align:center\">鼠标左键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x02</td>\n<td style=\"text-align:center\">鼠标右键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x04</td>\n<td style=\"text-align:center\">鼠标中键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x08</td>\n<td style=\"text-align:center\">Backspace键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x09</td>\n<td style=\"text-align:center\">Tab键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x0D</td>\n<td style=\"text-align:center\">Enter键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x10</td>\n<td style=\"text-align:center\">Shift键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0x20</td>\n<td style=\"text-align:center\">Space键</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"panel脚本\">panel脚本</h3>\n<h4 id=\"步骤一：\">步骤一：</h4>\n<p>将<code>wakeUp.ctl</code>文件放入<code>Scripts</code>中</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091525083.png\" alt=\"alt text\"></p>\n<blockquote>\n<p>此脚本作用：<br>\n监听报警是否发生，发生了就执行上面的脚本</p>\n</blockquote>\n<p>如果想要<strong>根据报警级别来处理是否亮屏</strong>，可以修改<code>wakeUp.ctl</code>文件中的注释部分。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> dpClass;</span><br><span class=\"line\">dpGet(dp + <span class=\"string\">&quot;:_alert_hdl.._class&quot;</span>, dpClass);  <span class=\"comment\">// 获取报警级别</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  可以在此处根据报警级dpClass别来处理</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  例如</span></span><br><span class=\"line\"><span class=\"comment\">  if(dpClass == &quot;System1:alert.&quot;) return;  </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤二\">步骤二</h4>\n<p>创建一个<code>manager</code></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091525015.png\" alt=\"alt text\"></p>\n<hr>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091526166.png\" alt=\"alt text\"></p>\n<hr>\n<p><strong>双击</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091526637.png\" alt=\"alt text\"></p>\n<hr>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091526122.png\" alt=\"alt text\"></p>\n<hr>\n<p><strong>启动</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091526830.png\" alt=\"alt text\"></p>\n","categories":[],"tags":[]},{"title":"trend导入dp说明","url":"http://example.com/2024/11/09/trend导入dp说明/","content":"<h2 id=\"说明\">说明</h2>\n<p>在主页面的<code>Initialize</code>代码中</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091518662.png\" alt=\"image-20241109151611991\" style=\"zoom: 80%;\" />\n<p>将需要打开的<code>txt</code>文件路径写在这里。</p>\n<blockquote>\n<p>【<strong>注意</strong>】<code>txt</code>编码格式需要是<code>UFT8</code></p>\n</blockquote>\n<hr>\n<p>这是折线图<code>trend1</code>的配置。</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091514242.png\" alt=\"image-20241109151419090\" style=\"zoom:50%;\" />\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091459397.png\" alt=\"image-20241109145936101\" style=\"zoom:80%;\" />\n<blockquote>\n<p>【<strong>注意</strong>】每一个配置项下的参数必须写在配置项名称<strong>下面</strong>，<strong>不能留空</strong>。如</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091506381.png\" alt=\"image-20241109150450758\" style=\"zoom:50%;\" />\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091506516.png\" alt=\"image-20241109150550231\" style=\"zoom:50%;\" />\n<p>参数前面<strong>不能留空格</strong></p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411091514870.png\" alt=\"image-20241109150737928\" style=\"zoom:50%;\" />\n</blockquote>\n","categories":[],"tags":[]},{"title":"viewstar 折线图","url":"http://example.com/2024/11/07/viewstar-折线图/","content":"<h1>界面配置</h1>\n<p>这里介绍的折线图为【<code>value over time</code>】，更多详细配置可在<code>viewstar</code>参考手册中搜索：<strong>Trend widget</strong></p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411081132801.png\" alt=\"image-20241108113222152\" style=\"zoom: 67%;\" />\n<h2 id=\"Common—基础设置\">Common—基础设置</h2>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071703027.png\" alt=\"image-20241107170312744\" style=\"zoom:67%;\" />\n<h3 id=\"Display-time-range\">Display time range</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071708329.png\" alt=\"image-20241107170338031\" style=\"zoom:50%;\" />\n<p>设置每一大格的时间间距</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071708626.png\" alt=\"image-20241107170412005\" style=\"zoom: 50%;\" />\n<h3 id=\"Legend-Toolbar\">Legend/Toolbar</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071708837.png\" alt=\"image-20241107170809244\" style=\"zoom:80%;\" />\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071708366.png\" alt=\"image-20241107170743532\" style=\"zoom:80%;\" />\n<h3 id=\"font\">font</h3>\n<p>设置字体格式</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071709854.png\" alt=\"image-20241107170904908\" style=\"zoom:80%;\" />\n<h3 id=\"Time-and-value-grid\">Time and value grid</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720694.png\" alt=\"image-20241107170953067\" style=\"zoom:67%;\" />\n<ol>\n<li><strong>Draw grid</strong>：会在每一个时间段出现一条虚线</li>\n</ol>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720824.png\" alt=\"image-20241107171056153\" style=\"zoom:67%;\" />\n<ol start=\"2\">\n<li><strong>Draw background grid</strong>：意义不明</li>\n</ol>\n<h2 id=\"Area\">Area</h2>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720630.png\" alt=\"image-20241107171218382\" style=\"zoom:67%;\" />\n<h3 id=\"Area-2\">Area</h3>\n<p>一般只需要一个即可，如果是两个，效果如下</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720865.png\" alt=\"image-20241107171413447\" style=\"zoom:67%;\" />\n<h3 id=\"Time-Scale\">Time Scale</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720017.png\" alt=\"image-20241107171454975\" style=\"zoom: 80%;\" />\n<p>时间轴显示在下方还是上方</p>\n<hr>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720027.png\" alt=\"image-20241107171557869\" style=\"zoom:67%;\" />\n<p>设置第一个显示时间，一般为【时：分】。通过<code>User defined</code>自定义设置</p>\n<p>里面的参数可以通过<code>viewstar</code>的帮助手册搜索：<code>formatTime</code>。</p>\n<p>内容如下：</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071720130.png\" alt=\"image-20241107172001780\" style=\"zoom: 67%;\" />\n<hr>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071723099.png\" alt=\"image-20241107172246884\" style=\"zoom:67%;\" />\n<p>设置第一个显示时间，一般为【月：天】，设置方法同上。</p>\n<h2 id=\"Curve\">Curve</h2>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071724681.png\" alt=\"image-20241107172354477\" style=\"zoom:67%;\" />\n<h3 id=\"添加曲线\">添加曲线</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745362.png\" alt=\"image-20241107172502634\" style=\"zoom:67%;\" />\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745436.png\" alt=\"image-20241107172510430\" style=\"zoom:67%;\" />\n<p>当点击添加曲线后，可以输入一个DP element。曲线就会随着这个DP值的变化而改变。（也可以不输入，在初始化中使用脚本添加）</p>\n<h3 id=\"Common\">Common</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745885.png\" alt=\"image-20241107172723721\" style=\"zoom:67%;\" />\n<p><strong>Data source</strong></p>\n<ol>\n<li><code>DP-element</code>：检测的数据点名</li>\n<li><code>Curve name</code>：曲线名称</li>\n<li><code>From DPE</code>：默认勾选上</li>\n</ol>\n<p><strong>type</strong></p>\n<ol>\n<li>\n<p><code>Curve type</code></p>\n<ul>\n<li>\n<p>Points</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745156.png\" alt=\"image-20241107173525872\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>Steps</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745016.png\" alt=\"image-20241107173427373\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>Linear</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745598.png\" alt=\"image-20241107173309774\" style=\"zoom: 50%;\" />\n</li>\n<li>\n<p>Event（感觉用不到）</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Point type</code></p>\n</li>\n</ol>\n<p>​\t<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745060.png\" alt=\"image-20241107173639237\" style=\"zoom: 80%;\" /></p>\n<p>当数据点改变的形状。</p>\n<p>如：</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745071.png\" alt=\"image-20241107173933889\" style=\"zoom:80%;\" />\n<ol start=\"3\">\n<li>\n<p><code>Filling</code></p>\n<ul>\n<li>None</li>\n<li>Bottom</li>\n<li>Ref.value</li>\n<li>对比：<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071745605.png\" alt=\"image-20241107174419686\" style=\"zoom:67%;\" /></li>\n</ul>\n</li>\n<li>\n<p><code>Line color</code>、<code>Line style</code></p>\n</li>\n</ol>\n<p>设置曲线颜色，样式</p>\n<h3 id=\"Legend\">Legend</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071806022.png\" alt=\"image-20241107174937094\" style=\"zoom:80%;\" />\n<ol>\n<li><code>Value visible</code>：显示顶部数据</li>\n</ol>\n<p>​\t勾选情况下：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071806430.png\" alt=\"image-20241107175453708\"></p>\n<ol start=\"2\">\n<li><code>Auto format x</code>：</li>\n</ol>\n<p>​\t<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071822086.png\" alt=\"image-20241107175853585\" style=\"zoom: 80%;\" /></p>\n<p>若这样设置，（第一个数字意义不明）第二个数字<code>3</code>表示，小数点保留三位。</p>\n<h3 id=\"Grid\">Grid</h3>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071822290.png\" alt=\"image-20241107181704743\" style=\"zoom:67%;\" />\n<p>感觉没啥用，可以看看手册。</p>\n<h3 id=\"Scale\">Scale</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071822076.png\" alt=\"image-20241107181748087\"></p>\n<p><strong>Y-scale</strong></p>\n<ol>\n<li><code>Auto format</code>：Y轴上的数保留几位小数</li>\n<li><code>Auto scale</code>：Y轴上的数最小显示多少、最大显示多少（<strong>设置这个可以防止Y轴乱跳</strong>）</li>\n</ol>\n<p>​\t<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071822443.png\" alt=\"image-20241107182055946\"></p>\n<h2 id=\"Options\">Options</h2>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202411071822802.png\" alt=\"image-20241107182212483\" style=\"zoom:80%;\" />\n<p>折现从哪个地方开始绘制</p>\n<h1>代码配置</h1>\n<p>更多详细配置可在<code>viewstar</code>参考手册中搜索：<strong>Trend</strong></p>\n<h3 id=\"曲线添加数据点\"><strong>曲线添加数据点</strong></h3>\n<p><code>connectDirectly</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape.<span class=\"built_in\">connectDirectly</span>(string Name, string dp);</span><br><span class=\"line\"><span class=\"comment\">// name: 曲线名称  dp: dp名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例：</span></span><br><span class=\"line\">Trend.<span class=\"built_in\">connectDirectly</span>(<span class=\"string\">&quot;curve1&quot;</span>, <span class=\"string\">&quot;trendTest1.:_original.._value&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行曲线\"><strong>运行曲线</strong></h3>\n<p><code>trendRun</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape.<span class=\"built_in\">trendRun</span>();</span><br><span class=\"line\"><span class=\"comment\">// 一般用于给曲线添加数据点之后</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改Legend字体\"><strong>修改Legend字体</strong></h3>\n<p><code>legendFont</code></p>\n<h3 id=\"连接曲线\">连接曲线</h3>\n<p><code>linkCurves</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trend.<span class=\"built_in\">linkCurves</span>(<span class=\"string\">&quot;curve1&quot;</span>, <span class=\"string\">&quot;curve2&quot;</span>, <span class=\"string\">&quot;curve3&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改Legend文字\"><strong>修改Legend文字</strong></h3>\n<p><code>curveLegendName</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trend.<span class=\"built_in\">legendFont</span>(<span class=\"string\">&quot;Arial Black, -1, 11, 5, 87, 0, 0, 0, 0, 0&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>“Arial Black”</strong>：字体名称。这里设置为 “Arial Black”，即粗体的 Arial 字体。</p>\n<p><strong>-1</strong>：字符集（charset），通常 -1 表示使用系统默认字符集。</p>\n<p><strong>11</strong>：字体大小。这里指定字体大小为 11 点。</p>\n<p><strong>5</strong>：字体的粗细（weight）。<code>5</code> 表示中等粗细。不同值通常表示：</p>\n<ul>\n<li><code>0</code> 表示常规（Regular）</li>\n<li><code>5</code> 表示半粗体（Medium）</li>\n<li><code>9</code> 表示粗体（Bold）</li>\n</ul>\n<p><strong>87</strong>：字体角度（angle），指定字体的倾斜角度。通常 <code>0</code> 表示正常，不倾斜。</p>\n<p><strong>0,0,0,0,0</strong>：这五个值一般用于指定额外的样式属性，通常在默认设置中都为 <code>0</code>，表示没有其他特殊效果。</p>\n<h3 id=\"设置Y轴曲线的自动缩放\"><strong>设置Y轴曲线的自动缩放</strong></h3>\n<p><code>trendSetYaxisIndex</code></p>\n<h3 id=\"隐藏左侧Y轴曲线\"><strong>隐藏左侧Y轴曲线</strong></h3>\n<p><code>curveScaleVisibility</code></p>\n<h3 id=\"设置左侧Y轴曲线格式\"><strong>设置左侧Y轴曲线格式</strong></h3>\n<p><code>scaleFont</code></p>\n<h3 id=\"隐藏Y轴曲线\"><strong>隐藏Y轴曲线</strong></h3>\n<p><code>linkCurves</code></p>\n<p>配合着<code>curveScaleVisibility</code>可以<strong>实现左边只有一条轴</strong></p>\n<p>如果有3条及以上的曲线，<code>linkCurves</code>连接时</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 隐藏掉2、3条曲线的Y轴</span></span><br><span class=\"line\">Trend.<span class=\"built_in\">curveScaleVisibility</span>(<span class=\"string\">&quot;curve2&quot;</span>) = <span class=\"literal\">false</span>;</span><br><span class=\"line\">Trend.<span class=\"built_in\">curveScaleVisibility</span>(<span class=\"string\">&quot;curve3&quot;</span>) = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接1、2、3条曲线</span></span><br><span class=\"line\">Trend.<span class=\"built_in\">linkCurves</span>(<span class=\"string\">&quot;curve1&quot;</span>, <span class=\"string\">&quot;curve2&quot;</span>);</span><br><span class=\"line\">Trend.<span class=\"built_in\">linkCurves</span>(<span class=\"string\">&quot;curve2&quot;</span>, <span class=\"string\">&quot;curve3&quot;</span>);</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"vba演示代码","url":"http://example.com/2024/10/14/vba演示代码/","content":"<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Sub</span> main()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">&#x27; wb：工作簿</span></span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> wb <span class=\"keyword\">As</span> Workbook</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; ws：工作表</span></span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> ws <span class=\"keyword\">As</span> Worksheet</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; file：打开的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> file <span class=\"keyword\">As</span> <span class=\"type\">String</span></span><br><span class=\"line\">    file = <span class=\"string\">&quot;C:\\Users\\25276\\Desktop\\test.xlsx&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 打开工作簿</span></span><br><span class=\"line\">    <span class=\"keyword\">Set</span> wb = Workbooks.Open(file)</span><br><span class=\"line\">    <span class=\"comment\">&#x27; 打开【指定】工作表</span></span><br><span class=\"line\">    <span class=\"keyword\">Set</span> ws = Worksheets(<span class=\"string\">&quot;JasonQian&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">&#x27; 激活工作表</span></span><br><span class=\"line\">    ws.Activate</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 调用函数</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; Dim totalCount As Long</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; totalCount = rowsCount(ws)</span></span><br><span class=\"line\">    handleElement ws</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&#x27; Sub不返回值 操作表中的一些值</span></span><br><span class=\"line\"><span class=\"keyword\">Sub</span> modifyElement(<span class=\"keyword\">ByRef</span> ws <span class=\"keyword\">As</span> Worksheet)</span><br><span class=\"line\">    <span class=\"comment\">&#x27; 修改表名字</span></span><br><span class=\"line\">    ws.Name = <span class=\"string\">&quot;JasonQian&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; Celss属性</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 返回表中的一个单元格，可以进行操作</span></span><br><span class=\"line\">    ws.Cells(<span class=\"number\">2</span>, <span class=\"number\">3</span>).Value = <span class=\"string\">&quot;Cells(2, 3)&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; Range属性</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; 单个值</span></span><br><span class=\"line\">    ws.Range(<span class=\"string\">&quot;A1&quot;</span>).Value = <span class=\"string\">&quot;Range(&#x27;A1&#x27;)&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; 区域内的值</span></span><br><span class=\"line\">    ws.Range(<span class=\"string\">&quot;A2:B4&quot;</span>).Value = <span class=\"string\">&quot;Range(&#x27;A2:B4&#x27;)&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; UsedRange属性</span></span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> rng <span class=\"keyword\">As</span> Range</span><br><span class=\"line\">    <span class=\"keyword\">Set</span> rng = ws.UsedRange</span><br><span class=\"line\">    <span class=\"comment\">&#x27; 显示以及使用过的单元格数</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; MsgBox rng.Cells.Count</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; Rows和Columns属性</span></span><br><span class=\"line\">    ws.Rows(<span class=\"number\">2</span>).Hidden = <span class=\"literal\">False</span></span><br><span class=\"line\">    ws.Columns(<span class=\"number\">3</span>).Delete</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; ClearContents方法</span></span><br><span class=\"line\">    ws.Cells.ClearContents  <span class=\"comment\">&#x27; 清除所有</span></span><br><span class=\"line\">    ws.Range(<span class=\"string\">&quot;A3:B3&quot;</span>).ClearContents  <span class=\"comment\">&#x27; 清楚指定区域</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&#x27; Function返回值 返回第一列的长度</span></span><br><span class=\"line\"><span class=\"keyword\">Function</span> rowsCount(<span class=\"keyword\">ByVal</span> ws <span class=\"keyword\">As</span> Worksheet) <span class=\"keyword\">As</span> <span class=\"type\">Long</span></span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> rc <span class=\"keyword\">As</span> <span class=\"type\">Long</span></span><br><span class=\"line\">    rc = ws.Cells(ws.Rows.Count, <span class=\"string\">&quot;A&quot;</span>).<span class=\"keyword\">End</span>(xlUp).Row  <span class=\"comment\">&#x27; 获取工作表中A列的最后一个有效单元格位置</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; End(xlUp)用于从列底部向上找到第一个非空单元格</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 如果是行，使用End(xlToLeft)查找第一行</span></span><br><span class=\"line\">    <span class=\"comment\">&#x27; ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; MsgBox rc</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    rowsCount = rc  <span class=\"comment\">&#x27; 返回行数</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&#x27; for循环操作</span></span><br><span class=\"line\"><span class=\"keyword\">Sub</span> forOperator(<span class=\"keyword\">ByVal</span> ws <span class=\"keyword\">As</span> Worksheet)</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> rc <span class=\"keyword\">As</span> <span class=\"type\">Long</span></span><br><span class=\"line\">    rc = rowsCount(ws)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">For</span> i = <span class=\"number\">1</span> <span class=\"keyword\">To</span> rc</span><br><span class=\"line\">        Debug.Print i</span><br><span class=\"line\">    <span class=\"keyword\">Next</span> i</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&#x27; if操作</span></span><br><span class=\"line\"><span class=\"keyword\">Sub</span> IfOeprator(<span class=\"keyword\">ByVal</span> ws <span class=\"keyword\">As</span> Worksheet)</span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> rc <span class=\"keyword\">As</span> <span class=\"type\">Long</span></span><br><span class=\"line\">    rc = rowsCount(ws)</span><br><span class=\"line\">    <span class=\"keyword\">If</span> rc &gt; <span class=\"number\">10</span> <span class=\"keyword\">Then</span></span><br><span class=\"line\">        Debug.Print <span class=\"string\">&quot;G&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">Else</span></span><br><span class=\"line\">        Debug.Print <span class=\"string\">&quot;GG&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">If</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Function</span> CountDots(cellValue <span class=\"keyword\">As</span> <span class=\"type\">String</span>) <span class=\"keyword\">As</span> <span class=\"type\">Integer</span></span><br><span class=\"line\">    <span class=\"keyword\">Dim</span> dotCount <span class=\"keyword\">As</span> <span class=\"type\">Integer</span></span><br><span class=\"line\">    dotCount = Len(cellValue) - Len(Replace(cellValue, <span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&#x27; 返回层级 (点号的数量 + 1)</span></span><br><span class=\"line\">    CountDots = dotCount + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"pnl页面切换","url":"http://example.com/2024/10/13/pnl页面切换/","content":"<p>附属文件有：<code>basePanel_web.xml</code>、<code>test_web.xml</code>、<code>background.png</code></p>\n<h3 id=\"页面脚本\">页面脚本</h3>\n<p>该脚本在【<code>basePanel_web.xml</code>】</p>\n<p>创建用户访问的文件，如<code>basePanel_web.xml</code>放在<code>panel</code>路径下</p>\n<p>测试访问的网址：<code>http://127.0.0.1/data/ulc/ulc.html?panel=basePanel_web.xml,$token:123</code></p>\n<p>正式访问的网址：<code>https://scadarts11:8081/data/ulc/ulc.html?panel=basePanel_web.xml</code></p>\n<p>内容如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#uses <span class=\"string\">&quot;classes/auth/OaAuthUI&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#uses <span class=\"string\">&quot;panel&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">OaAuthUI AuthUI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  需要创建一个Groups为root的用户</span></span><br><span class=\"line\"><span class=\"comment\">  如果没有用户，就不能触发点击事件</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"built_in\">string</span> username = <span class=\"string\">&quot;web_embed&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"built_in\">string</span> password = <span class=\"string\">&quot;web_embed&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 保存的内容</span></span><br><span class=\"line\"><span class=\"comment\">      1. 需要跳转到哪一个页面(node)</span></span><br><span class=\"line\"><span class=\"comment\">      2. token验证(token)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"built_in\">string</span> DP_WEB_CONTROL = <span class=\"string\">&quot;Message_.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于存储网页发来的token</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> token;</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 验证用户信息</span></span><br><span class=\"line\">  AuthUI.setUsername(username);</span><br><span class=\"line\">  AuthUI.setPassword(password);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(AuthUI.getUsername() != <span class=\"string\">&quot;&quot;</span> &amp;&amp;</span><br><span class=\"line\">     AuthUI.login() == OaAuthenticationError::None &amp;&amp;</span><br><span class=\"line\">     AuthUI.setUiUser())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    AuthUI.setManagerUser(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    noticeFailed.visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将顶部标题栏去除</span></span><br><span class=\"line\">  titleBar(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将画面移动到左上角</span></span><br><span class=\"line\">  moveModule(webModule.ModuleName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 添加全局变量，防止报错</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!globalExists(<span class=\"string\">&quot;NCC_PT_NODENAMES_GLOBAL&quot;</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_NODENAMES_GLOBAL&quot;</span>, DYN_LANGSTRING_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_PANELNUMBER_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_PARENTNUMBER_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_DOWNWARDPANEL_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_UPWARDPANEL_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_PERMISSIONBIT_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_FILENAME_GLOBAL&quot;</span>, DYN_STRING_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_PANELTYPE_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_MODULENAME_GLOBAL&quot;</span>, DYN_STRING_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_SUMALERTNUMBER_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_MENUBAR_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_ICONBAR_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_MODAL_GLOBAL&quot;</span>, DYN_BOOL_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_CENTERED_GLOBAL&quot;</span>, DYN_BOOL_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_PARAMETER_GLOBAL&quot;</span>, DYN_STRING_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_ICONNAME_GLOBAL&quot;</span>, DYN_STRING_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_BACKWARDPANEL_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\">    addGlobal(<span class=\"string\">&quot;NCC_PT_FOREWARDPANEL_GLOBAL&quot;</span>, DYN_UINT_VAR);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> error = dpGet(<span class=\"string\">&quot;_PanelTopology.nodeName:_online.._value&quot;</span>, NCC_PT_NODENAMES_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.panelNumber:_online.._value&quot;</span>, NCC_PT_PANELNUMBER_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.parentNumber:_online.._value&quot;</span>, NCC_PT_PARENTNUMBER_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.downwardPanel:_online.._value&quot;</span>, NCC_PT_DOWNWARDPANEL_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.upwardPanel:_online.._value&quot;</span>, NCC_PT_UPWARDPANEL_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.permissionBit:_online.._value&quot;</span>, NCC_PT_PERMISSIONBIT_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.fileName:_online.._value&quot;</span>, NCC_PT_FILENAME_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.panelType:_online.._value&quot;</span>, NCC_PT_PANELTYPE_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.moduleName:_online.._value&quot;</span>, NCC_PT_MODULENAME_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.sumAlertNumber:_online.._value&quot;</span>, NCC_PT_SUMALERTNUMBER_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.menuBar:_online.._value&quot;</span>,NCC_PT_MENUBAR_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.iconBar:_online.._value&quot;</span>, NCC_PT_ICONBAR_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.modal:_online.._value&quot;</span>, NCC_PT_MODAL_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.centered:_online.._value&quot;</span>, NCC_PT_CENTERED_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.parameter:_online.._value&quot;</span>, NCC_PT_PARAMETER_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.iconName:_online.._value&quot;</span>, NCC_PT_ICONNAME_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.backwardPanel:_online.._value&quot;</span>, NCC_PT_BACKWARDPANEL_GLOBAL,</span><br><span class=\"line\">          <span class=\"string\">&quot;_PanelTopology.forwardPanel:_online.._value&quot;</span>, NCC_PT_FOREWARDPANEL_GLOBAL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      pt_showErrorCeg(error, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 存储网页传来的token</span></span><br><span class=\"line\">  token = $token;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听函数，监听是否接收到post请求</span></span><br><span class=\"line\">  dpConnect(<span class=\"string\">&quot;listenning&quot;</span>, <span class=\"number\">0</span>, DP_WEB_CONTROL);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 监听函数，监听页面是否切换</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> dp;</span><br><span class=\"line\">  dp = myUiDpName()+<span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">  dpConnect(<span class=\"string\">&quot;SetBackground&quot;</span>,</span><br><span class=\"line\">             <span class=\"literal\">false</span>,</span><br><span class=\"line\">             dp + <span class=\"string\">&quot;RootPanelOrigOn.PanelName:_online.._value&quot;</span>,</span><br><span class=\"line\">             dp + <span class=\"string\">&quot;RootPanelOrigOn.ModuleName:_online.._value&quot;</span>,</span><br><span class=\"line\">             dp + <span class=\"string\">&quot;RootPanelOrigOn.FileName:_online.._value&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">listenning</span><span class=\"params\">(<span class=\"built_in\">string</span> name, <span class=\"built_in\">string</span> message)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mapping m = jsonDecode(message);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 验证token信息</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(m[<span class=\"string\">&quot;token&quot;</span>] != token)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取跳转页面的名称</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> node = m[<span class=\"string\">&quot;node&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取跳转页面的索引，根据这个索引可以查询它的所有信息</span></span><br><span class=\"line\">  <span class=\"type\">int</span> ptIndex = getPTIndex(node);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取对应的pnl或xml文件名称</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> path = getPTFileByID(ptIndex);</span><br><span class=\"line\">  mapping m = getPTParameter(node);</span><br><span class=\"line\">  dyn_string para;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m.count(); i ++ )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    para.append(m.keyAt(i) + <span class=\"string\">&quot;:&quot;</span> + m.valueAt(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 页面跳转函数</span></span><br><span class=\"line\">  RootPanelOnModule(path,</span><br><span class=\"line\">                    node,</span><br><span class=\"line\">                    webModule.ModuleName,</span><br><span class=\"line\">                    para);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SetBackground</span><span class=\"params\">(<span class=\"built_in\">string</span> dpPN, <span class=\"built_in\">string</span> fNewValuePN, <span class=\"built_in\">string</span> dpMN, <span class=\"built_in\">string</span> fNewValueMN, <span class=\"built_in\">string</span> dpFN, <span class=\"built_in\">string</span> fNewValueFN)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> index = getPTIndex(fNewValuePN);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(strpos(fNewValueFN, <span class=\"string\">&quot;ProjectPanels&quot;</span>) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">string</span> sName;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dyn_string sList = getShapes(fNewValueMN, fNewValuePN, <span class=\"string\">&quot;visible&quot;</span>);</span><br><span class=\"line\">        sName = sList[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DebugTN(__LINE__, getLastException());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shape sh = getShape(fNewValueMN, fNewValuePN, sName);</span><br><span class=\"line\"></span><br><span class=\"line\">  shape p = sh.panel;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置背景颜色</span></span><br><span class=\"line\">  p.type = <span class=\"string\">&quot;WebPanel&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> myStyle = <span class=\"string\">&quot;PanelQT[type = \\&quot;WebPanel\\&quot;] &#123; background-color: rgb(7, 14, 50); &#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  p.styleSheet(myStyle);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化table(防止颜色更改)</span></span><br><span class=\"line\">  myStyle = <span class=\"string\">&quot;PanelQT[type = \\&quot;table\\&quot;] &#123; background-color: rgb(7, 14, 50); foreground-color: white; &#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  p.styleSheet(myStyle);</span><br><span class=\"line\">  <span class=\"comment\">// p.styleSheet = &quot;PanelQT &#123; background-image: url(pictures:background.png); &#125;&quot;;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"httpServer\">httpServer</h3>\n<p>该脚本在【<code>test_web.xml</code>】</p>\n<p><strong>正式内容</strong>在<code>webclient_http.ctl</code>中，在<code>webclient_http.ctl</code>通过搜索<code>web_switchCB</code>可以定位到对应位置</p>\n<p>测试内容如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开启http服务，（由于测试没有证书，只能开启http服务。在服务器上开启的是https服务）</span></span><br><span class=\"line\">  httpServer(<span class=\"literal\">false</span>, <span class=\"number\">80</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 当有数据通过post请求发送给http://localhost:80/web_switch的时候</span></span><br><span class=\"line\">  <span class=\"comment\">// 会触发web_switchCB监听函数</span></span><br><span class=\"line\">  httpConnect(<span class=\"string\">&quot;web_switchCB&quot;</span>, <span class=\"string\">&quot;/web_switch&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"built_in\">string</span> DP_WEB_MESSAGE = <span class=\"string\">&quot;Message_.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储node、token</span></span><br><span class=\"line\">synchronized <span class=\"built_in\">string</span> <span class=\"title function_\">web_switchCB</span><span class=\"params\">(blob content, <span class=\"built_in\">string</span> user, <span class=\"built_in\">string</span> ip, dyn_string headerNames, dyn_string headerValues, <span class=\"type\">int</span> connectionIndex)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mapping m;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> str;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(bloblen(content) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    blobGetValue(content, <span class=\"number\">0</span>, str, bloblen(content));</span><br><span class=\"line\">    dpSet(DP_WEB_MESSAGE, str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;false&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试脚本（用于发送POST请求）\">测试脚本（用于发送POST请求）</h3>\n<p>该脚本在【<code>test_web.xml</code>】</p>\n<p>发<code>post</code>请求给<code>viewstar</code>，将<code>node</code>和<code>token</code>存入数据库中。</p>\n<p>内容如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mapping result;</span><br><span class=\"line\">  netPost(<span class=\"string\">&quot;http://localhost:80/web_switch&quot;</span>,</span><br><span class=\"line\">          makeMapping(<span class=\"string\">&quot;content&quot;</span>,</span><br><span class=\"line\">                      jsonEncode(makeMapping(<span class=\"string\">&quot;token&quot;</span>, tbTokenName.text, <span class=\"string\">&quot;node&quot;</span>, tbNodeName.text)),</span><br><span class=\"line\">                      <span class=\"string\">&quot;headers&quot;</span>,</span><br><span class=\"line\">                      makeMapping(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>)),</span><br><span class=\"line\">         result</span><br><span class=\"line\">         );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"make构建","url":"http://example.com/2024/10/11/make构建/","content":"<p>对于一个C/C++项目，可以使用make命令进行项目的编译，将这个项目生产出一个可执行文件。</p>\n<p>比如一个C/C++项目结构为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- makefile_test</span><br><span class=\"line\">    - main.cpp</span><br><span class=\"line\">    - func_a.h</span><br><span class=\"line\">    - func_a.cpp</span><br><span class=\"line\">    - func_b.h</span><br><span class=\"line\">    - func_b.cpp</span><br><span class=\"line\">    - Makefile</span><br></pre></td></tr></table></figure>\n<p>对Makefile进行编辑</p>\n<p>【<strong>注</strong>】：Makefile文件缩进需要使用<code>Tab</code>按钮</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Makefile 示例</span></span><br><span class=\"line\"></span><br><span class=\"line\">CC = g++</span><br><span class=\"line\">CXXFLAGS = -Wall -g</span><br><span class=\"line\"></span><br><span class=\"line\">TARGET = main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: <span class=\"variable\">$(TARGET)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>: main.o func_a.o func_b.o</span><br><span class=\"line\">&gt;---<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -o <span class=\"variable\">$(TARGET)</span> main.o func_a.o func_b.o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">main.o: main.cpp</span></span><br><span class=\"line\">&gt;---<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c main.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">func_a.o: func_a.cpp</span></span><br><span class=\"line\">&gt;---<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c func_a.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">func_b.o: func_b.cpp</span></span><br><span class=\"line\">&gt;---<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c func_b.cpp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">&gt;---rm -f *.o <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: all clean</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CC = g++</span><br></pre></td></tr></table></figure>\n<p>CC变量指定了编译器的名称</p>\n<p>g++：当使用了C++程序时使用</p>\n<p>CC可选项：g++、gcc</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CXXFLAGS = -Wall -g</span><br></pre></td></tr></table></figure>\n<p><code>CFLAGS</code>与<code>CXXFLAGS</code>的区别：</p>\n<ul>\n<li><code>CFLAGS</code>用于给C语言配置</li>\n<li><code>CXXFLAGS</code>用于给C++语言配置</li>\n</ul>\n<p><code>-Wall</code>：启用所有常用的编译警告</p>\n<p><code>-g</code>：启用后，可以使用gdb或者其他调试工具进行调试</p>\n<p>【<strong>其他参数</strong>】：</p>\n<p><code>-Wextra</code>：启用额外的警告信息，进一步严格化代码</p>\n<p><code>-O2</code>或<code>-O3</code>：优化选项，推荐<code>-O2</code>（吸氧或吸臭氧）</p>\n<p><code>-std=c++11</code> 或 <code>-std=c++17</code>：C++ 标准版本。</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET = main</span><br></pre></td></tr></table></figure>\n<p><code>TARGET</code> 变量通常用于指定 <strong>生成的最终可执行文件名称</strong>，也就是编译完成后所要生成的目标文件</p>\n<p>也可以指定为其他文件格式：</p>\n<ol>\n<li>\n<p><strong>可执行文件</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET = main</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>静态库</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET = main.a</span><br></pre></td></tr></table></figure>\n<p>生成一个静态库文件</p>\n</li>\n<li>\n<p><strong>动态库</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET = main.so</span><br></pre></td></tr></table></figure>\n<p>生成一个动态库文件</p>\n</li>\n<li>\n<p><strong>中间目标文件</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET = main.o</span><br></pre></td></tr></table></figure>\n<p>生成一个中间目标文件</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">all: <span class=\"variable\">$(TARGET)</span></span></span><br></pre></td></tr></table></figure>\n<p>表示 <code>all</code> 目标依赖于 <code>main</code>，当 <code>make</code> 被执行时，<code>make</code> 会尝试生成 <code>main</code> 可执行文件。</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$(TARGET)</span>: main.o func_a.o func_b.o</span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -o <span class=\"variable\">$(TARGET)</span> main.o func_a.o func_b.o</span><br></pre></td></tr></table></figure>\n<p>在 <code>Makefile</code> 中，规则的格式如下：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">target: dependencies</span></span><br><span class=\"line\">\t&lt;TAB&gt;command</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li><strong><code>target</code></strong>：表示要生成的目标文件（通常是一个文件名或伪目标），在这个例子中，<code>target</code> 是 <code>$(TARGET)</code>，代表要生成的目标文件（比如 <code>main</code>）。</li>\n<li><strong><code>dependencies</code></strong>：表示生成 <code>target</code> 所依赖的文件或其他目标。每当依赖文件发生改变时，<code>make</code> 会自动重新生成 <code>target</code>，在这个例子中，<code>dependencies</code> 是 <code>main.o</code>、<code>func_a.o</code> 和 <code>func_b.o</code>。也就是说<strong>会执行一遍下面定义的命令</strong><code>make main.o</code>，<code>make func_a.o</code>，<code>make func_b.o</code>，<strong>生成三个文件</strong>：<code>main.o、func_a.o、func_b.o</code>。</li>\n<li><strong><code>command</code></strong>：是用 <code>TAB</code> 缩进的命令行，用于生成 <code>target</code> 的实际命令（例如编译器命令）。</li>\n</ul>\n<hr>\n<p>command显示结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -Wall -g -o main main.o func_a.o func_b.o</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p><strong><code>g++</code></strong>：表示使用 <code>g++</code> 编译器进行链接（<code>g++</code> 会自动链接 C++ 标准库）。</p>\n</li>\n<li>\n<p><strong><code>-Wall -g</code></strong>：编译选项：</p>\n</li>\n</ol>\n<ul>\n<li><code>-Wall</code>：启用所有常见的编译警告，帮助程序员发现潜在的代码问题。</li>\n<li><code>-g</code>：包含调试信息，方便使用 <code>gdb</code> 进行调试。</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p><strong><code>-o main</code></strong>：表示输出文件名为 <code>main</code>，生成的可执行文件将被命名为 <code>main</code>。</p>\n</li>\n<li>\n<p><strong><code>main.o func_a.o func_b.o</code></strong>：这三个目标文件是链接时使用的中间文件，分别对应 <code>main.cpp</code>、<code>func_a.cpp</code> 和 <code>func_b.cpp</code> 编译生成的 <code>.o</code> 文件。</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">main.o: main.cpp</span></span><br><span class=\"line\">&gt;---<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c main.cpp</span><br></pre></td></tr></table></figure>\n<p>将<code>main.cpp</code>编译为<code>main.o</code>（目标文件），但不会生成可执行文件。目的是汇总成TARGET这一个可执行文件。</p>\n<p><code>func_a.o、func_b.o</code>同理。</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">&gt;---rm -f *.o <span class=\"variable\">$(TARGET)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: all clean</span></span><br></pre></td></tr></table></figure>\n<p>在终端中执行<code>make clean</code>可以将<code>*.o</code>、<code>TARGET</code>文件删除</p>\n<p><code>-f</code>当删除一个不存在的文件不会报错</p>\n<hr>\n<p><code>.PHONY: all clean</code>：将<code>Makefile</code>文件中的<code>all</code>与<code>clean</code>隔离，防止与项目目录中的实际文件名产生冲突</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"nodejs学习","url":"http://example.com/2024/10/07/nodejs学习/","content":"<h2 id=\"1-安装Node-js、npm、express\">1. 安装Node.js、npm、express</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm</span><br><span class=\"line\">npm install express --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建项目目录\">2. 创建项目目录</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> nodejs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nodejs</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-编写服务器代码\">3. 编写服务器代码</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置跨域访问</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;GET, POST, PUT, DELETE&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;Content-Type&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个简单的 API 路由</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/webapi_dpGet&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>);  <span class=\"comment\">// 随机生成一个 0-100 的整数</span></span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123; value &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动服务器并监听指定端口</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Server is running on http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码解释\">代码解释</h3>\n<p>这个代码是用 Node.js 和 Express 框架编写的一个简单的服务器程序。下面逐行解析这段代码的功能：</p>\n<ol>\n<li><strong>引入依赖库</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>express</code> 是一个常用的 Node.js 框架，用于创建 Web 服务器。</li>\n<li><code>app</code> 是 Express 实例，代表整个 Web 应用，接下来我们会使用 <code>app</code> 来配置路由、设置中间件等。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>定义端口</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PORT</span> = <span class=\"number\">3000</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>PORT</code> 变量设置服务器监听的端口号为 <code>3000</code>。</li>\n<li>这意味着服务器启动后可以通过 <code>http://localhost:3000</code> 进行访问。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>设置跨域访问 (CORS)</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;GET, POST, PUT, DELETE&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"string\">&#x27;Content-Type&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>app.use</code> 是 Express 中间件，用于配置 HTTP 请求的预处理逻辑。</li>\n<li>该中间件的作用是配置 CORS（跨域资源共享），允许客户端从不同的域名访问该服务器提供的资源。</li>\n<li>具体配置项如下：\n<ul>\n<li><code>Access-Control-Allow-Origin: '*'</code>：允许所有域名（<code>*</code>）访问本服务器。</li>\n<li><code>Access-Control-Allow-Methods: 'GET, POST, PUT, DELETE'</code>：允许客户端使用 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等 HTTP 方法。</li>\n<li><code>Access-Control-Allow-Headers: 'Content-Type'</code>：允许客户端请求头中包含 <code>Content-Type</code> 字段（用于指定请求数据类型）。</li>\n</ul>\n</li>\n<li><code>next()</code>：表示当前中间件执行完毕，继续处理后续的中间件或路由。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>定义路由和处理逻辑</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/webapi_dpGet&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>);  <span class=\"comment\">// 随机生成一个 0-100 的整数</span></span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123; value &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>app.get('/webapi_dpGet', (req, res) =&gt; &#123; ... &#125;)</code> 定义了一个 <code>GET</code> 请求的路由。\n<ul>\n<li>路由路径为 <code>/webapi_dpGet</code>。</li>\n<li>当客户端访问 <code>http://localhost:3000/webapi_dpGet</code> 时，服务器会执行该路由中的回调函数。</li>\n</ul>\n</li>\n<li><code>Math.floor(Math.random() * 100)</code>：生成一个 0 到 100 之间的随机整数。</li>\n<li><code>res.json(&#123; value &#125;)</code>：将生成的整数封装成 JSON 格式并返回给客户端。\n<ul>\n<li>返回的内容形如 <code>&#123; value: 42 &#125;</code>，其中 <code>value</code> 的值是随机生成的整数。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对于json可以传入多个数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    后端</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/webapi_dpGet&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>);  <span class=\"comment\">// 随机生成一个 0-100 的整数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&quot;jasonqian&quot;</span>;</span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123; value, name &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    前端</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchDataAndUpdateChart</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;http://47.108.233.225:3000/webapi_dpGet&quot;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">value</span> !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                    gaugeOptionUser.<span class=\"property\">series</span>[<span class=\"number\">0</span>].<span class=\"property\">data</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span> = data.<span class=\"property\">value</span>; </span><br><span class=\"line\">                    userChart.<span class=\"title function_\">setOption</span>(gaugeOptionUser, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"property\">name</span>);  <span class=\"comment\">// 可以使用data.name将jasonqian打印出来</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error fetching data:&#x27;</span>, error));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(fetchDataAndUpdateChart, <span class=\"number\">4000</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>启动服务器并监听端口</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"variable constant_\">PORT</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Server is running on http://localhost:<span class=\"subst\">$&#123;PORT&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>app.listen(PORT, callback)</code>：启动服务器并监听指定端口（<code>3000</code>）。\n<ul>\n<li>当服务器启动成功后，会在控制台打印 <code>Server is running on http://localhost:3000</code> 这条信息。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li><strong>代码整体作用</strong></li>\n</ol>\n<ul>\n<li>这个服务器是一个简单的 API 服务。</li>\n<li>它监听 <code>3000</code> 端口，并提供一个 <code>/webapi_dpGet</code> 路由，用于客户端获取一个随机生成的整数。</li>\n<li>由于启用了跨域访问设置，该服务器可以被任何域名（<code>*</code>）访问，非常适合用来进行前后端分离项目的简单数据测试。</li>\n</ul>\n<p><strong>示例请求</strong><br>\n启动该服务器后，可以通过以下方式进行测试：</p>\n<ul>\n<li>在浏览器中输入 <code>http://localhost:3000/webapi_dpGet</code>，会看到如下类似的 JSON 响应：<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">42</span> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>这个响应中的 <code>value</code> 是一个 0 到 100 之间的随机整数。每次刷新页面或重新请求该 API，都会得到不同的随机值。</li>\n</ul>\n<h2 id=\"4-启动服务器\">4. 启动服务器</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node server.js</span><br></pre></td></tr></table></figure>\n<p>看见输出</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Server</span> is running on http:<span class=\"comment\">//localhost:3000</span></span><br></pre></td></tr></table></figure>\n<p>表示成功</p>\n","categories":[],"tags":[]},{"title":"html导航栏学习","url":"http://example.com/2024/10/01/html导航栏学习/","content":"<h3 id=\"控制body、html等元素的样式\">控制body、html等元素的样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class=\"line\">    <span class=\"comment\">/*background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./background.jpg&#x27;</span>);  <span class=\"comment\">/* 背景图片的路径 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-repeat</span>: no-repeat;            <span class=\"comment\">/* 禁止背景图片重复 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>: cover;                  <span class=\"comment\">/* 背景图片适应整个容器 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>: center center;      <span class=\"comment\">/* 背景图片居中 */</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要设置某一个大类，如<code>body</code>、<code>header</code>、<code>header</code>下的<code>nav</code>参数<br>\n可以使用如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来解释<code>body, html &#123;&#125;</code>中的参数</p>\n<ol>\n<li>\n<p><code>margin: 0;</code>：去除元素的默认外边距，使得页面四周不会留白</p>\n</li>\n<li>\n<p><code>padding: 0;</code>：去除元素默认内边距，使得布局从页面左上角开始</p>\n</li>\n<li>\n<p><code>width: 100%; height: 100%;</code>：设置元素的宽高为浏览器窗口的<code>100%</code>，确保整个页面的宽高始终与浏览器的宽度相等，并能占据整个页面。</p>\n</li>\n<li>\n<p><code>font-family: 'Arial', sans-serif;</code>：设置字体类型，如果系统中没有<code>Arial</code>类型，则使用另外的<code>sans-serif</code>类型。</p>\n</li>\n<li>\n<p><code>background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);</code>：</p>\n<ul>\n<li><code>linear-gradient</code>是一种CSS渐变效果，用于创建平滑的颜色过度效果。</li>\n<li><code>135deg</code>：表示渐变的角度，<code>135deg</code>代表<code>135°</code>，从左上角到右下角形成渐变效果</li>\n<li><code>#0f0c29，#302b63，#24243e</code>：分别是深蓝色、蓝紫色和紫色。在这三种颜色之间平滑过渡，形成一种科幻风格的渐变背景。</li>\n</ul>\n</li>\n<li>\n<p><code>color: #ffffff;</code>：设置文本颜色，<code>#ffffff</code>代表白色。</p>\n</li>\n<li>\n<p><code>overflow: auto;</code>：自动处理<code>html</code>、<code>body</code>范围的内容。用于防止直接出现右端滚动条，影响视觉感官。</p>\n</li>\n</ol>\n<h3 id=\"设置header\">设置header</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>XXXXX系统入口<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.6</span>);</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>header&#123;&#125;</code>中的参数解释：</p>\n<ol>\n<li>\n<p><code>text-align: center;</code>：将元素内部的文本对齐</p>\n</li>\n<li>\n<p><code>padding: 20px;</code>：设置元素内边距，设置一个值，就代表设置上下左右的距离。如果设置两个值<code>padding: 20px 20px;</code>代表设置上下、左右的距离。</p>\n</li>\n<li>\n<p><code>background-color: rgba(0, 0, 0, 0.6);</code>：设置背景颜色，并附加透明效果</p>\n</li>\n<li>\n<p><code>box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);</code>：设置四周阴影效果，使其具有立体感，层次感。</p>\n<ul>\n<li><code>0</code>：水平偏移量，正值表示向右移动，负值表示向左移动。这里是 0，表示阴影与元素在水平方向对齐。</li>\n<li><code>2px</code>：垂直偏移量，正值表示向下移动，负值表示向上移动。这里是 2px，表示阴影在元素下方显示2个像素的偏移。</li>\n<li><code>10px</code>：模糊半径，表示阴影的模糊程度。较大的值会使阴影更加模糊和扩散。这里设置为 10px，表示阴影边缘会有一定的模糊效果</li>\n<li><code>rgba(0, 0, 0, 0.5)</code>：阴影颜色。带有50%的透明度。这是为了使阴影不显得过于浓重，而是带有一定的透光感。</li>\n</ul>\n</li>\n</ol>\n<p>实测<code>box-shadow</code>并没有什么效果。</p>\n<h3 id=\"设置header-h1\">设置header h1</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">15px</span> <span class=\"number\">#00e6e6</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">#ff00ff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>: glow <span class=\"number\">2s</span> ease-in-out infinite alternate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>header h1&#123;&#125;</code>中的参数解释：</p>\n<ol>\n<li>\n<p><code>font-size: 40px;</code>：设置字体的大小</p>\n</li>\n<li>\n<p><code>margin: 0;</code>：设置上下左右的边距为<code>0</code></p>\n</li>\n<li>\n<p><code>letter-spacing: 5px;</code>：设置标题中每个字的间距为<code>5px</code></p>\n</li>\n<li>\n<p><code>text-shadow: 0 0 15px #00e6e6, 0 0 20px #ff00ff;</code>：文本添加多重阴影效果</p>\n<ul>\n<li>语法格式为 <code>text-shadow: 水平偏移 垂直偏移 模糊半径 阴影颜色</code>;在此demo下设置了两个，它们会产生多重阴影。</li>\n</ul>\n</li>\n<li>\n<p><code>animation: glow 2s ease-in-out infinite alternate;</code>：为文本应用动画效果，使其阴影随着时间变化而动态闪烁。</p>\n<ul>\n<li><code>glow</code>：指向下面定义的<code>keyframes</code>动画名称</li>\n<li><code>2s</code>：动画时长，播放一次需要<code>2s</code></li>\n<li><code>ease-in-out</code>：动画曲线效果，动画开始、结束很快，中间很慢。类似的效果还有<code>linear</code>（匀速变化）、<code>ease-in</code>（开始慢，然后逐渐加速）、<code>ease-out</code>（开始快，然后逐渐减速）</li>\n<li><code>infinite</code>：无限循环播放</li>\n<li><code>alternate</code>：每次循环的时候会切换方向</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"设置keyframes\">设置keyframes</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> glow &#123;</span><br><span class=\"line\">    <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">#00e6e6</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#ff00ff</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">#00e6e6</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">30px</span> <span class=\"number\">#ff00ff</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>keyframes</code>中的参数解释：</p>\n<ol>\n<li><code>@keyframes</code>：这是CSS中的一种规则，用于创建帧动画。它定义了一个动画的关键帧序列，从 <code>0%</code> 到 <code>100%</code> 的不同状态，表示动画的起点、终点或中间状态。</li>\n<li><code>glow</code>：这是自定义动画的名称，可以用在 <code>animation</code> 属性中引用（如 <code>animation: glow 2s ease-in-out infinite alternate;</code>）。</li>\n<li><code>0%</code>：表示动画的开始状态（即 <code>0%</code> 时的样式）。\n<ul>\n<li><code>text-shadow: 0 0 5px #00e6e6, 0 0 10px #ff00ff;</code></li>\n<li>两种颜色的阴影分别设置为较小的模糊半径（<code>5px</code> 和 <code>10px</code>），表示此时阴影看起来很弱。</li>\n</ul>\n</li>\n<li><code>100%</code>：表示动画的结束状态（即 <code>100%</code> 时的样式）。\n<ul>\n<li><code>text-shadow: 0 0 20px #00e6e6, 0 0 30px #ff00ff</code>;</li>\n<li>模糊半径变大（<code>20px</code> 和 <code>30px</code>），表示阴影的发光效果更强、更加柔和和模糊。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"设置nav\">设置nav</h3>\n<p>设置网页导航栏样式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#444</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>nav</code>中的参数解释：</p>\n<ol>\n<li>\n<p><code>border-top: 1px solid #444</code>：为 <code>nav</code> 元素的顶部设置一个宽度为 <code>1px</code> 的实线边框，并定义其颜色为 <code>#444</code>（深灰色）。</p>\n</li>\n<li>\n<p><code>border-bottom: 1px solid #444;</code>：为 <code>nav</code> 元素的底部设置一个宽度为 <code>1px</code> 的实线边框，并定义其颜色为 <code>#444</code>（深灰色）。</p>\n</li>\n</ol>\n<h3 id=\"设置nav-a\">设置nav a</h3>\n<p>设置导航栏中的网站属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span> <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">18px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#00e6e6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: all <span class=\"number\">0.3s</span> ease;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#00e6e6</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#00e6e6</span>, <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"number\">#ff00ff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>nav a</code>中的参数解释：</p>\n<ol>\n<li>\n<p><code>display: inline-block;</code>：将链接<code>&lt;a&gt;</code>设置为行内块级元素，具体效果看<a href=\"https://www.jasonqian.com/2023/01/14/AcWing-Web%E8%AF%BE/\">2.8 元素展示格式</a></p>\n</li>\n<li>\n<p><code>margin: 0 15px;</code>：设置上下、左右的外边距离。</p>\n</li>\n<li>\n<p><code>padding: 15px 25px;</code>：设置上下、左右的内边距离</p>\n</li>\n<li>\n<p><code>font-size: 18px;</code>：设置字体大小</p>\n</li>\n<li>\n<p><code>color: #00e6e6;</code>：设置字体颜色</p>\n</li>\n<li>\n<p><code>text-decoration: none;</code>：去除链接文本的默认下划线</p>\n</li>\n<li>\n<p><code>border: 2px solid transparent;</code>：为链接设置透明的边框</p>\n<ul>\n<li><code>2px</code>：表示边框宽度为2像素。</li>\n<li><code>solid</code>：表示边框样式为实线。</li>\n<li><code>transparent</code>：表示边框颜色为透明。</li>\n</ul>\n</li>\n<li>\n<p><code>border-radius: 5px</code>：设置按钮圆角效果</p>\n</li>\n<li>\n<p><code>transition: all 0.3s ease;</code>：设置链接在状态改变（如 <code>hover</code>）时的过渡效果<br>\n<code>transition</code> 属性用于控制元素在样式变化时的过渡效果。<br>\n<code>all</code>：表示所有属性都使用此过渡效果。<br>\n<code>0.3s</code>：表示过渡持续时间为 0.3 秒。<br>\n<code>ease</code>：表示过渡效果为缓动模式。</p>\n</li>\n<li>\n<p><code>nav a:hover;</code>：当鼠标放在链接上的时候，会在 0.3 秒(由上面的<code>transition</code>所设计的)内实现：</p>\n<ul>\n<li><code>border-color: #00e6e6;</code>：边框颜色变为亮青色。</li>\n<li><code>box-shadow: 0 0 10px #00e6e6, 0 0 20px #ff00ff;</code>：为链接按钮添加青色和紫色的发光阴影效果，增强按钮的视觉吸引力。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"设置自定义名称dashboard\">设置自定义名称dashboard</h3>\n<p>对于此类自定义的<code>class</code>可以使用如下设置方式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dashboard&quot;</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">.类名称 &#123;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.dashboard</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: : flex;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">gap</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>dashboard</code>中的参数解释：</p>\n<ol>\n<li><code>display: flex;</code>：将 .dashboard 容器设置为 弹性布局。</li>\n</ol>\n<p>【<strong>注</strong>】<code>display: flex;</code> 与 <code>display: inline-block;</code> 的主要区别</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">display: flex;</th>\n<th style=\"text-align:center\">display: inline-block;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">排列方式</td>\n<td style=\"text-align:center\">水平方向和垂直方向均可控制</td>\n<td style=\"text-align:center\">仅能进行水平方向排列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对子元素的控制</td>\n<td style=\"text-align:center\">可以轻松控制子元素的对齐、分布、伸缩</td>\n<td style=\"text-align:center\">无法轻松控制子元素的对齐和分布</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">响应式布局</td>\n<td style=\"text-align:center\">支持动态调整子元素尺寸，适合响应式布局</td>\n<td style=\"text-align:center\">需要通过媒体查询来手动控制子元素的大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">是否占据一行</td>\n<td style=\"text-align:center\">默认情况下不占据一整行，但可以轻松通过 <code>flex</code> 属性进行调整</td>\n<td style=\"text-align:center\"><code>inline-block</code> 元素本身不会占据整行，但父容器可能会换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">子元素换行</td>\n<td style=\"text-align:center\">可以通过 <code>flex-wrap</code> 实现多行排列</td>\n<td style=\"text-align:center\">如果父级元素宽度不足，则会自动换行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">空白字符影响</td>\n<td style=\"text-align:center\">不受空白字符影响</td>\n<td style=\"text-align:center\">会受 HTML 源代码中的空白字符影响</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">布局复杂度</td>\n<td style=\"text-align:center\">可以轻松实现复杂布局（如等间距、居中、分散）</td>\n<td style=\"text-align:center\">适用于较简单的水平排列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">兼容性</td>\n<td style=\"text-align:center\">支持主流浏览器，但在旧版浏览器中支持不佳（如IE10及以下）</td>\n<td style=\"text-align:center\">兼容所有主流浏览器</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>\n<p><code>justify-content: center;</code>：设置 <strong>主轴</strong> 上的子元素（卡片或图表）的排列方式，使子元素在主轴方向上 <strong>居中对齐</strong>。</p>\n<ul>\n<li><code>justify-content</code> 用于控制 弹性项目 在主轴（通常是水平方向）上的对齐方式。</li>\n<li>设为 <code>center</code> 时，表示所有 <code>.dashboard</code> 容器内的子元素（如卡片）在水平方向居中排列。</li>\n</ul>\n</li>\n<li>\n<p><code>align-items: center;</code>：设置 <strong>交叉轴</strong> 上的子元素（卡片或图表）的排列方式，使子元素在交叉轴方向上 <strong>垂直居中对齐</strong>。</p>\n<ul>\n<li>效果同<code>justify-content</code>，只不过用于垂直居中对齐。</li>\n</ul>\n</li>\n<li>\n<p><code>flex-wrap: wrap;</code>：允许 <code>.dashboard</code> 容器内的子元素在 <strong>主轴方向（通常是水平）</strong> 超出容器<code>.dashboard</code>宽度时自动换行。</p>\n</li>\n<li>\n<p><code>margin: 50px 20px;</code>：设置 <code>.dashboard</code> 容器与其外部元素之间的 <strong>外边距</strong>。</p>\n</li>\n<li>\n<p><code>gap: 20px;</code>：设置 <code>.dashboard</code> 容器中 <strong>子元素</strong>之间的间距。</p>\n</li>\n</ol>\n<h3 id=\"设置dashboard-card\">设置dashboard-card</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.dashboard-card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">20px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dashboard-card</span> <span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>dashboard-card</code>中的参数解释</p>\n<ol>\n<li>\n<p><code>box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);</code>：为卡片添加 阴影效果，提升立体感。</p>\n<ul>\n<li><code>0</code>：水平偏移量（horizontal offset），表示阴影相对于卡片在水平方向上的位移。这里为 0，表示阴影没有水平偏移。</li>\n<li><code>0</code>：垂直偏移量（vertical offset），表示阴影在垂直方向上的位移。这里为 0，表示阴影没有垂直偏移。</li>\n<li><code>20px</code>：模糊半径（blur radius），表示阴影的模糊程度。值越大，阴影越模糊和扩散。这里的 20px 表示阴影在卡片四周呈现柔和的扩散效果。</li>\n<li><code>rgba(255, 255, 255, 0.2)</code>：阴影的颜色，使用 rgba 表示带有透明度的白色阴影（20%的不透明度）。</li>\n</ul>\n</li>\n<li>\n<p><code>position: relative;</code>：设置卡片的 定位上下文。</p>\n</li>\n<li>\n<p><code>overflow: hidden;</code>：隐藏超出卡片边界的内容。</p>\n</li>\n<li>\n<p><code>display: flex;</code>：将 <code>.dashboard-card</code> 设置为 弹性容器</p>\n</li>\n<li>\n<p><code>flex-direction: column;</code>：设置 <code>.dashboard-card</code> 中子元素沿 垂直方向（列方向）排列。</p>\n</li>\n<li>\n<p><code>justify-content: center;</code>：设置 <code>.dashboard-card</code> 内子元素在 主轴方向（垂直方向） 上 居中对齐。</p>\n</li>\n<li>\n<p><code>align-items: center;</code>：设置 <code>.dashboard-card</code> 内子元素在 交叉轴（水平方向） 上 居中对齐。</p>\n</li>\n</ol>\n<h3 id=\"仪表盘的设置\">仪表盘的设置</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;gauge1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gauge-container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.gauge-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化ECharts实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> userChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;gauge1&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仪表盘配置项</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gaugeOption = &#123;</span><br><span class=\"line\">    <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;用户总数&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;gauge&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">detail</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;value&#125;%&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">textStyle</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#ffffff&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">fontSize</span>: <span class=\"number\">20</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">axisLine</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">lineStyle</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">width</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: [[<span class=\"number\">0.3</span>, <span class=\"string\">&#x27;#00ff00&#x27;</span>], [<span class=\"number\">0.7</span>, <span class=\"string\">&#x27;#00e6e6&#x27;</span>], [<span class=\"number\">1</span>, <span class=\"string\">&#x27;#ff0000&#x27;</span>]]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [&#123; <span class=\"attr\">value</span>: <span class=\"number\">50</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;完成率&#x27;</span> &#125;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置图表选项并渲染</span></span><br><span class=\"line\">userChart.<span class=\"title function_\">setOption</span>(gaugeOption);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模拟数据动态更新</span></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gaugeOption.<span class=\"property\">series</span>[<span class=\"number\">0</span>].<span class=\"property\">data</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span> = (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    userChart.<span class=\"title function_\">setOption</span>(gaugeOption, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n<p>使用了 <code>ECharts</code> 库来创建一个 <strong>动态更新的仪表盘图表</strong>。</p>\n<p>在<code>html</code>代码顶部定义了<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>【<strong>步骤一</strong>：初始化<code>ECharts</code>实例】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;gauge1&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>echarts.init()</code>：初始化 <code>ECharts</code> 实例，并绑定到指定的 <code>DOM</code> 元素上。</li>\n<li><code>document.getElementById('gauge1')</code>：获取 HTML 中的 <code>id</code> 为 <code>gauge1</code> 的元素（一个用于显示仪表盘的 <code>&lt;div&gt;</code> 容器）。</li>\n</ol>\n<p>【<strong>步骤二</strong>：定义<code>ECharts</code>配置项】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gaugeOption = &#123;</span><br><span class=\"line\">    <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;用户总数&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;gauge&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">detail</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">formatter</span>: <span class=\"string\">&#x27;&#123;value&#125;%&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">textStyle</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#ffffff&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">fontSize</span>: <span class=\"number\">20</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">axisLine</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">lineStyle</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">width</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: [[<span class=\"number\">0.3</span>, <span class=\"string\">&#x27;#00ff00&#x27;</span>], [<span class=\"number\">0.7</span>, <span class=\"string\">&#x27;#00e6e6&#x27;</span>], [<span class=\"number\">1</span>, <span class=\"string\">&#x27;#ff0000&#x27;</span>]]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: [&#123; <span class=\"attr\">value</span>: <span class=\"number\">50</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;完成率&#x27;</span> &#125;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>tooltip</code>：工具提示配置项，用于显示鼠标悬停时的提示信息。</p>\n<ul>\n<li><code>formatter: '&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;%'</code>：格式化工具提示文本，<code>&#123;a&#125;</code> 表示系列名称，<code>&#123;b&#125;</code> 表示数据项名称，<code>&#123;c&#125;</code> 表示当前数据值。</li>\n<li><strong>作用</strong>：当鼠标悬停在仪表盘指针上时，会显示：</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户总数</span><br><span class=\"line\">完成率 ：50%</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>series</code>：图表的系列列表。<code>series</code>是ECharts中<strong>核心配置项</strong>，用于配置一个<strong>仪表盘图表</strong></p>\n<ul>\n<li><code>name</code>：就是<code>tooltip</code>中的<code>formatter</code>里的<code>&#123;a&#125;</code>，用于鼠标悬浮显示的名称。</li>\n<li><code>type: 'gauge'</code>：图表类型，这里是<code>gauge</code>（仪表盘）</li>\n<li><code>detail</code>：指示仪表盘指针当前值的显示样式设置\n<ul>\n<li><code>formatter: '&#123;value&#125;%'</code>：格式化显示当前值，<code>&#123;value&#125;</code> 表示仪表盘的当前值（如 <code>50%</code>）。</li>\n<li><code>textStyle</code>：\n<ul>\n<li><code>color: '#ffffff'</code>：显示当前值的文本颜色为白色。</li>\n<li><code>fontSize: 20</code>：设置字体大小为 <code>20</code> 像素。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>axisLine</code>：设置仪表盘的轴线样式（即背景圆环样式）。\n<ul>\n<li><code>lineStyle</code>：\n<ul>\n<li><code>width: 15</code>：设置轴线的宽度为<code>15</code>像素</li>\n<li><code>color</code>：设置不同区间对应的颜色：比如\n<ul>\n<li><code>[[0.3, '#00ff00']]</code>：表示 <code>0-30%</code> 区间的轴线颜色为绿色（<code>#00ff00</code>）。</li>\n<li><code>[[0.7, '#00e6e6']]</code>：表示 <code>30%-70%</code> 的区间为亮青色（<code>#00e6e6</code>）。</li>\n<li><code>[[1, '#ff0000']]</code>：表示 <code>70%-100%</code> 的区间为红色（<code>#ff0000</code>）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>data</code>：仪表盘当前显示的数据。\n<ul>\n<li><code>[&#123; value: 50, name: '完成率' &#125;]</code>：表示仪表盘初始显示的值为 <code>50</code>，数据名称为 <code>完成率</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>【<strong>步骤三</strong>：将配置项应用到图表实例】</p>\n<p>更新<code>userChart</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userChart.<span class=\"title function_\">setOption</span>(gaugeOption);</span><br></pre></td></tr></table></figure>\n<p>【<strong>步骤四</strong>：动态更新数据】</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gaugeOption.<span class=\"property\">series</span>[<span class=\"number\">0</span>].<span class=\"property\">data</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span> = (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    userChart.<span class=\"title function_\">setOption</span>(gaugeOption, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>setInterval(function, 2000);</code></p>\n<ul>\n<li>设置一个 <strong>定时器</strong>，每隔 2000 毫秒（2秒）执行一次 <code>function</code> 回调函数，从而实现数据的动态更新。</li>\n</ul>\n</li>\n<li>\n<p><code>function() &#123; ... &#125;</code></p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成随机数据</span></span><br><span class=\"line\">gaugeOption.<span class=\"property\">series</span>[<span class=\"number\">0</span>].<span class=\"property\">data</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span> = (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Math.random()</code>：生成一个 <code>0</code> 到 <code>1</code> 之间的随机浮点数。</li>\n<li><code>Math.random() * 100</code>：将随机数放大到 <code>0</code> 到 <code>100</code> 之间。</li>\n<li><code>.toFixed(2)</code>：将随机数保留两位小数。</li>\n<li>这一行代码的作用是生成一个 <code>0-100</code> 之间的随机数，并将其赋值给 <code>gaugeOption.series[0].data[0].value</code>，即仪表盘当前显示的值。</li>\n</ul>\n</li>\n<li>\n<p>跟新图表数据</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userChart.<span class=\"title function_\">setOption</span>(gaugeOption, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>调用 <code>setOption()</code> 方法再次渲染图表，并设置 <code>true</code> 表示不合并，而是直接更新现有配置项。</li>\n<li>通过 <code>setOption</code> 使图表的指针指向新的值，从而实现动态更新效果。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ECharts其他图像\">ECharts其他图像</h3>\n<p><a href=\"https://echarts.apache.org/examples/zh/index.html#chart-type-pie\">ECharts官网</a></p>\n<table>\n<thead>\n<tr>\n<th><strong>图表类型</strong></th>\n<th><strong><code>type</code> 取值</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>典型应用场景</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>折线图</td>\n<td><code>'line'</code></td>\n<td>展示数据的趋势变化，支持平滑、阶梯样式。</td>\n<td>数据趋势分析、时间序列数据展示</td>\n</tr>\n<tr>\n<td>柱状图</td>\n<td><code>'bar'</code></td>\n<td>通过柱状条表示不同数据项的大小。</td>\n<td>类别数据对比、分布分析</td>\n</tr>\n<tr>\n<td>饼图</td>\n<td><code>'pie'</code></td>\n<td>通过扇形表示各部分占整体的比例。</td>\n<td>百分比分析、市场份额分布</td>\n</tr>\n<tr>\n<td>散点图</td>\n<td><code>'scatter'</code></td>\n<td>用点表示数据分布，支持气泡图等变种。</td>\n<td>数据分布分析、相关性分析</td>\n</tr>\n<tr>\n<td>仪表盘</td>\n<td><code>'gauge'</code></td>\n<td>用于显示仪表盘样式的数据，适合监控类数据展示。</td>\n<td>系统状态监控、指标达成度</td>\n</tr>\n<tr>\n<td>雷达图</td>\n<td><code>'radar'</code></td>\n<td>通过多维数据展示各项指标的表现。</td>\n<td>多维数据分析、属性对比</td>\n</tr>\n<tr>\n<td>K 线图</td>\n<td><code>'candlestick'</code></td>\n<td>主要用于金融市场数据的 K 线（蜡烛图）展示。</td>\n<td>股票价格波动、外汇市场数据</td>\n</tr>\n<tr>\n<td>热力图</td>\n<td><code>'heatmap'</code></td>\n<td>用颜色深浅表示数据密度分布。</td>\n<td>地理数据分析、分布热图</td>\n</tr>\n<tr>\n<td>漏斗图</td>\n<td><code>'funnel'</code></td>\n<td>表示数据的逐级流失或转化。</td>\n<td>销售转化、营销分析</td>\n</tr>\n<tr>\n<td>词云图</td>\n<td><code>'wordCloud'</code></td>\n<td>用不同大小和颜色的文字展示关键词频率。</td>\n<td>关键词分析、社交媒体热点词展示</td>\n</tr>\n<tr>\n<td>箱线图</td>\n<td><code>'boxplot'</code></td>\n<td>显示数据的分布情况，包含四分位数和极值。</td>\n<td>数据分布分析、异常值检测</td>\n</tr>\n<tr>\n<td>桑基图</td>\n<td><code>'sankey'</code></td>\n<td>用流向图表示数据的流转和分布。</td>\n<td>数据流动、能量流动分析</td>\n</tr>\n<tr>\n<td>地图</td>\n<td><code>'map'</code></td>\n<td>地理数据可视化，支持各种地理地图数据格式。</td>\n<td>地理数据展示、分布图</td>\n</tr>\n<tr>\n<td>关系图</td>\n<td><code>'graph'</code></td>\n<td>显示节点之间的关系，适合用于社交网络分析。</td>\n<td>关系网络图、社交网络图</td>\n</tr>\n<tr>\n<td>平行坐标图</td>\n<td><code>'parallel'</code></td>\n<td>多个坐标轴展示多维数据的分布情况。</td>\n<td>多维数据分析、多特征数据分布</td>\n</tr>\n<tr>\n<td>矩形树图</td>\n<td><code>'treemap'</code></td>\n<td>用嵌套矩形表示数据的层次结构和大小对比。</td>\n<td>数据分层分析、文件大小占比</td>\n</tr>\n<tr>\n<td>树图</td>\n<td><code>'tree'</code></td>\n<td>通过树形结构表示层次关系。</td>\n<td>组织架构图、层次结构展示</td>\n</tr>\n<tr>\n<td>日历图</td>\n<td><code>'calendar'</code></td>\n<td>显示按日、月、年排列的数据。</td>\n<td>日历数据分析、时间趋势展示</td>\n</tr>\n<tr>\n<td>流图</td>\n<td><code>'lines'</code></td>\n<td>用线条表示数据的流动方向，通常配合地图使用。</td>\n<td>航线图、物流流向分析</td>\n</tr>\n<tr>\n<td>区域图</td>\n<td><code>'area'</code></td>\n<td>折线图的变种，使用区域填充方式展示数据量大小。</td>\n<td>面积比较、趋势分析</td>\n</tr>\n<tr>\n<td>水球图</td>\n<td><code>'liquidFill'</code></td>\n<td>显示液面高度及波动，适合用来展示进度或百分比。</td>\n<td>百分比进度、进度条</td>\n</tr>\n<tr>\n<td>烛光图（漏斗图变种）</td>\n<td><code>'pictorialBar'</code></td>\n<td>使用图片或自定义图形绘制漏斗图或条形图。</td>\n<td>自定义形状的漏斗图或柱形图</td>\n</tr>\n<tr>\n<td>图表混合类型</td>\n<td><code>'custom'</code></td>\n<td>允许自定义数据渲染。</td>\n<td>实现复杂的图表类型或效果</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"fetch\">fetch</h3>\n<p>以下是 <code>fetch</code> 的基本使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://api.example.com/data&#x27;</span>)  <span class=\"comment\">// 向指定 URL 发送 GET 请求</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>())   <span class=\"comment\">// 将响应数据解析为 JSON 格式</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data))     <span class=\"comment\">// 处理解析后的 JSON 数据</span></span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Error:&#x27;</span>, error));  <span class=\"comment\">// 处理错误</span></span><br></pre></td></tr></table></figure>\n<p>代码解释：</p>\n<ol>\n<li><code>fetch('https://api.example.com/data')</code>：向 <code>https://api.example.com/data</code> 发送 HTTP GET 请求。</li>\n<li><code>.then(response =&gt; response.json())</code>：<code>fetch</code> 返回的 <code>Promise</code> 对象代表一个 <code>Response</code>，使用 <code>.json()</code> 方法将 <code>Response</code> 中的数据解析为 JSON 格式的 JavaScript 对象。</li>\n<li><code>.then(data =&gt; console.log(data))</code>：当解析完成后，将结果输出到控制台。</li>\n<li><code>.catch(error =&gt; console.error('Error:', error))</code>：处理请求过程中可能发生的任何错误（如网络问题）。</li>\n</ol>\n","categories":[],"tags":[]},{"title":"Python3_Sort","url":"http://example.com/2024/09/25/Python3-Sort/","content":"<h2 id=\"beat-sort\">beat_sort</h2>\n<h3 id=\"算法思想\">算法思想</h3>\n<p>遍历两遍<code>list</code>，第一遍[<strong>遍历次数</strong>]，第二遍[<strong>遍历数据</strong>]。相邻的两个数，如果后面的数<code>rod_lower</code>大于前面的数<code>rod_upper</code>，就进行两个数的交换。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 交换两个数</span></span><br><span class=\"line\">sequence[i] -= rod_upper - rod_lower</span><br><span class=\"line\">sequence[i + <span class=\"number\">1</span>] += rod_upper - rod_lower</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 它就类似于</span></span><br><span class=\"line\">t = sequence[i]</span><br><span class=\"line\">sequence[i] = sequence[i + <span class=\"number\">1</span>]</span><br><span class=\"line\">sequence[i + <span class=\"number\">1</span>] = t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 优点：两行代码</span></span><br><span class=\"line\"><span class=\"comment\"># 缺点：不能处理负数</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：$O(n^2)$</p>\n<h3 id=\"代码-6\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bead_sort</span>(<span class=\"params\">sequence: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">any</span>(<span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(x, <span class=\"built_in\">int</span>) <span class=\"keyword\">or</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> sequence):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&quot;Sequence must be list of non-negative integers&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(sequence)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, (rod_upper, rod_lower) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(<span class=\"built_in\">zip</span>(sequence, sequence[<span class=\"number\">1</span>:])):  <span class=\"comment\"># noqa: RUF007</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> rod_upper &gt; rod_lower:</span><br><span class=\"line\">                sequence[i] -= rod_upper - rod_lower</span><br><span class=\"line\">                sequence[i + <span class=\"number\">1</span>] += rod_upper - rod_lower</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sequence</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> bead_sort([<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]) == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> bead_sort([<span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]) == [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<p>【<strong>语法解释</strong>】：</p>\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">any</span>(<span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(x, <span class=\"built_in\">int</span>) <span class=\"keyword\">or</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> sequence):</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&quot;Sequence must be list of non-negative integers&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>any()</code>：用于查找迭代对象中是否有一个为<code>True</code>，有就返回<code>True</code>，否则返回<code>False</code></p>\n<p>这一句话的意思就是：在<code>sequence</code>的<code>list</code>中查找，是否有一个值满足[<strong>1.不为整数</strong>][<strong>2.小于0</strong>]，如果满足就返回<code>True</code>，触发<code>raise TypeError</code>。</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(sequence)):</span><br></pre></td></tr></table></figure>\n<p>循环<code>sequence</code>中的个数，类似于C++中的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sequence.length; i ++ )</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, (rod_upper, rod_lower) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(<span class=\"built_in\">zip</span>(sequence, sequence[<span class=\"number\">1</span>:])):</span><br></pre></td></tr></table></figure>\n<p>这一行代码的作用是同时遍历 <code>sequence</code> 列表中的相邻元素。具体解释如下：</p>\n<ol>\n<li>\n<p><strong><code>zip(sequence, sequence[1:])</code></strong>：<code>zip()</code> 函数将 <code>sequence</code> 和其从第二个元素开始的切片（即 <code>sequence[1:]</code>）打包成一对对的元组。这样，每个元组包含相邻的两个元素，例如 <code>(sequence[0], sequence[1])</code>、<code>(sequence[1], sequence[2])</code> 等。</p>\n</li>\n<li>\n<p><strong><code>for i, (rod_upper, rod_lower)</code></strong>：<code>enumerate()</code> 函数在遍历这些元组的同时，提供当前的索引 <code>i</code>。对于每一对相邻元素，<code>rod_upper</code> 代表前一个元素，<code>rod_lower</code> 代表后一个元素。</p>\n</li>\n<li>\n<p><strong>遍历过程</strong>：在循环中，<code>i</code> 是当前索引，<code>rod_upper</code> 和 <code>rod_lower</code> 分别是当前和下一个元素，可以用来比较和调整它们的值。</p>\n</li>\n</ol>\n<h2 id=\"binary-insertion-sort\">binary_insertion_sort</h2>\n<h3 id=\"算法思想-2\">算法思想</h3>\n<p>遍历两遍<code>list</code>，第一遍[<strong>遍历次数</strong>]，第二遍[<strong>遍历数据</strong>]。遍历数据的时候，假设当前遍历的下标为<code>i</code>，需要在$[0, i - 1]$中找到<code>collection[i]</code>的位置，假设位置为<code>j</code>，接着需要将$[j,i - 1]$的元素往后移动一位到$[j+1,i]$，再将<code>collection[i]</code>赋值给<code>collection[j]</code>。</p>\n<p>时间复杂度：$O(nlogn)$</p>\n<h3 id=\"代码-7\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binary_insertion_sort</span>(<span class=\"params\">collection: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(collection)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">        value_to_insert = collection[i]</span><br><span class=\"line\">        low = <span class=\"number\">0</span></span><br><span class=\"line\">        high = i - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low &lt;= high:</span><br><span class=\"line\">            mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> value_to_insert &lt; collection[mid]:</span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i, low, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            collection[j] = collection[j - <span class=\"number\">1</span>]</span><br><span class=\"line\">        collection[low] = value_to_insert</span><br><span class=\"line\">    <span class=\"keyword\">return</span> collection</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    user_input = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        unsorted = [<span class=\"built_in\">int</span>(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> user_input.split(<span class=\"string\">&quot;,&quot;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Invalid input. Please enter valid integers separated by commas.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;binary_insertion_sort(unsorted) = &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>[<strong>语法解释</strong>]</p>\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unsorted = [<span class=\"built_in\">int</span>(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> user_input.split(<span class=\"string\">&quot;,&quot;</span>)]</span><br></pre></td></tr></table></figure>\n<h2 id=\"bogo-sort\">bogo_sort</h2>\n<h3 id=\"算法思想-3\">算法思想</h3>\n<p>每次一重新打乱所有元素，直到元素满足排序要求</p>\n<p>时间复杂度：$O(未知)$</p>\n<h3 id=\"代码-8\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bogo_sort</span>(<span class=\"params\">collection</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_sorted</span>(<span class=\"params\">collection</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(collection) - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> collection[i] &gt; collection[i + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> is_sorted(collection):</span><br><span class=\"line\">        random.shuffle(collection)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> collection</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    user_input = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()</span><br><span class=\"line\">    unsorted = [<span class=\"built_in\">int</span>(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> user_input.split(<span class=\"string\">&quot;,&quot;</span>)]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(bogo_sort(unsorted))</span><br></pre></td></tr></table></figure>\n<h2 id=\"bubble-sort\">bubble_sort</h2>\n<h3 id=\"算法思想-4\">算法思想</h3>\n<p>遍历两遍<code>list</code>，第一遍[<strong>遍历区间</strong>]，第二遍[<strong>遍历数据</strong>]。<br>\n第一遍遍历的区间为$[0, len]$，$[0,len - 1]$，…，$[0,1]$<br>\n第二遍遍历从$0\\to len$，$0\\to len-1$，…，$0\\to 1$。<br>\n遇见后者比前者小，就交换两个值<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311939394.gif\" alt=\"\"></p>\n<h3 id=\"代码-9\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort_iterative</span>(<span class=\"params\">collection: <span class=\"built_in\">list</span>[<span class=\"type\">Any</span>]</span>) -&gt; <span class=\"built_in\">list</span>[<span class=\"type\">Any</span>]:</span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(collection)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(length)):</span><br><span class=\"line\">        swapped = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> collection[j] &gt; collection[j + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                swapped = <span class=\"literal\">True</span></span><br><span class=\"line\">                collection[j], collection[j + <span class=\"number\">1</span>] = collection[j + <span class=\"number\">1</span>], collection[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> swapped:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>  <span class=\"comment\"># Stop iteration if the collection is sorted.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> collection</span><br></pre></td></tr></table></figure>\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length = <span class=\"built_in\">len</span>(collection)  <span class=\"comment\"># 假设length = 5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">reversed</span>(<span class=\"built_in\">range</span>(length)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)  <span class=\"comment\"># 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>\n<p><code>reversed()</code> 函数用于返回一个反向迭代器，表示该对象的元素从最后一个到第一个依次迭代。</p>\n<h2 id=\"bucket-sort\">bucket_sort</h2>\n<h3 id=\"代码思想\">代码思想</h3>\n<p>桶排序是计算出每个元素应该被插入的地方。</p>\n<p>定义一个二维<code>list</code>，第一维视作桶，第二维视作该桶中存在的元素</p>\n<p>通过<code>bucket_size = (max_value - min_value) / bucket_count</code>获取</p>\n<p>对于每一个<code>val</code>，通过计算</p>\n<p><code>  ((val - min_value) / bucket_size)</code><br>\n<code>= (val - min_value) / [(max_value - min_value) / bucket_count]</code><br>\n<code>= (val - min_value) / (max_value - min_value) * bucket_count</code></p>\n<p>其中<code>(val - min_value) / (max_value - min_value)</code>作用就是将<code>val</code>值的下标，映射到从$0$开始，到<code>bucket_count</code>结束的<code>list</code>中，也就是计算出<code>val</code>下标在<code>list</code>中的百分比相对位置。再$\\times$<code>bucket_count</code>就可以得到在<code>list</code>中的相对位置了。</p>\n<h3 id=\"代码-10\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bucket_sort</span>(<span class=\"params\">my_list: <span class=\"built_in\">list</span>, bucket_count: <span class=\"built_in\">int</span> = <span class=\"number\">10</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(my_list) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> bucket_count &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    min_value, max_value = <span class=\"built_in\">min</span>(my_list), <span class=\"built_in\">max</span>(my_list)</span><br><span class=\"line\">    bucket_size = (max_value - min_value) / bucket_count</span><br><span class=\"line\">    buckets: <span class=\"built_in\">list</span>[<span class=\"built_in\">list</span>] = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(bucket_count)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> my_list:</span><br><span class=\"line\">        index = <span class=\"built_in\">min</span>(<span class=\"built_in\">int</span>((val - min_value) / bucket_size), bucket_count - <span class=\"number\">1</span>)</span><br><span class=\"line\">        buckets[index].append(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [val <span class=\"keyword\">for</span> bucket <span class=\"keyword\">in</span> buckets <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(bucket)]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol>\n<li></li>\n</ol>\n<p><code>return [val for bucket in buckets for val in sorted(bucket)]</code></p>\n<p>这段代码 <code>return [val for bucket in buckets for val in sorted(bucket)]</code> 是一个<strong>列表推导式</strong>，它用于将多个桶（<code>buckets</code>）中的元素合并成一个排序好的列表，作为 <code>bucket_sort</code> 的最终输出。</p>\n<p>等价于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> bucket <span class=\"keyword\">in</span> buckets:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(bucket):</span><br><span class=\"line\">        result.append(val)</span><br><span class=\"line\"><span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h2 id=\"comb-sort\">comb_sort</h2>\n<h3 id=\"代码思想-2\">代码思想</h3>\n<p>类似于冒泡排序+希尔排序</p>\n<p>假设第一次排序的<code>gap = 3、shrink_factor= 1.3</code><br>\n就是从<code>&#123;data[0]、data[3]&#125; &#123;data[1]、data[4]&#125; &#123;data[2]、data[5]&#125;</code>进行比较</p>\n<p>第二次通过计算后，排序的<code>gap = 2</code><br>\n就是从<code>&#123;data[0]、data[2]&#125; &#123;data[1]、data[3]&#125; &#123;data[2]、data[4]&#125;</code>进行比较</p>\n<p>…</p>\n<p>直到<code>gap &lt;= 1</code></p>\n<h3 id=\"代码-11\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">comb_sort</span>(<span class=\"params\">data: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    shrink_factor = <span class=\"number\">1.3</span></span><br><span class=\"line\">    gap = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    completed = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> completed:</span><br><span class=\"line\">        <span class=\"comment\"># Update the gap value for a next comb</span></span><br><span class=\"line\">        gap = <span class=\"built_in\">int</span>(gap / shrink_factor)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> gap &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            completed = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> index + gap &lt; <span class=\"built_in\">len</span>(data):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[index] &gt; data[index + gap]:</span><br><span class=\"line\">                <span class=\"comment\"># Swap values</span></span><br><span class=\"line\">                data[index], data[index + gap] = data[index + gap], data[index]</span><br><span class=\"line\">                completed = <span class=\"literal\">False</span></span><br><span class=\"line\">            index += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<ol>\n<li></li>\n</ol>\n<p><code>shrink_factor</code>：决定着<code>gap</code>的大小</p>\n<p><code>shrink_factor</code>越小，<code>gap</code>越大，时间复杂度越高，结果越精确</p>\n<h2 id=\"merge-sort\">merge_sort</h2>\n<h3 id=\"算法思想-5\">算法思想</h3>\n<p>通过递归将列表分为左右两段，使得左右两段都是有序的，通过合并两段组合成新的有序列表。</p>\n<h3 id=\"代码-12\">代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">collection: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"comment\"># 用于合并两个list</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">left: <span class=\"built_in\">list</span>, right: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left <span class=\"keyword\">and</span> right:  <span class=\"comment\"># 当左、右半区间都有值</span></span><br><span class=\"line\">            result.append(left.pop(<span class=\"number\">0</span>) <span class=\"keyword\">if</span> left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>] <span class=\"keyword\">else</span> right.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">        result.extend(left)  <span class=\"comment\"># 处理剩余的左半区间</span></span><br><span class=\"line\">        result.extend(right)  <span class=\"comment\"># 处理剩余的右半区间</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(collection) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> collection</span><br><span class=\"line\">    mid_index = <span class=\"built_in\">len</span>(collection) // <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 递归调用merge_sort(左半区)、merge_sort(右半区)</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过merge合并</span></span><br><span class=\"line\">    <span class=\"comment\"># [0, mid_index) 、 [mid_index, len(collection))</span></span><br><span class=\"line\">    <span class=\"comment\"># 左开右闭</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(merge_sort(collection[:mid_index]), merge_sort(collection[mid_index:]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol>\n<li></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result.append(left.pop(<span class=\"number\">0</span>) <span class=\"keyword\">if</span> left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>] <span class=\"keyword\">else</span> right.pop(<span class=\"number\">0</span>))</span><br></pre></td></tr></table></figure>\n<p>这句话的意思：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]:</span><br><span class=\"line\">    left.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    right.pop(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p><code>pop(0)</code>用于删除并返回列表中的第一个元素，$0$代表下标的索引。</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p><code>append</code>与<code>extend</code>的区别</p>\n","categories":[],"tags":["python"]},{"title":"Python3在Leetcode中的学习","url":"http://example.com/2024/09/20/Python3在Leetcode中的学习/","content":"<h3 id=\"1-两数之和\">1. 两数之和</h3>\n<p><a href=\"https://leetcode.cn/problems/two-sum/description/\">题目链接</a></p>\n<h4 id=\"题目思路\">题目思路</h4>\n<p>定义一个<code>idx</code>的<code>map</code>，用于存储遍历到的每一个数所对应的下标。</p>\n<p>当遍历到下标为$j$的数时，先查找在<code>idx</code>中是否存在<code>target - nums[j]</code>，<br>\n如果存在，直接返回答案。<br>\n如果不存在，将<code>nums[j]</code>存入<code>idx</code>中</p>\n<h4 id=\"Code-7\">Code</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        idx = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j, x <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target - x <span class=\"keyword\">in</span> idx:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [idx[target - x], j]</span><br><span class=\"line\">            idx[x] = j</span><br></pre></td></tr></table></figure>\n<h5 id=\"map定义\">map定义</h5>\n<p><code>idx = &#123;&#125;</code>：</p>\n<h5 id=\"enumerate关键字\">enumerate关键字</h5>\n<p>返回一个枚举对象。iterable 必须是一个序列，或 iterator，或其他支持迭代的对象。 enumerate() 返回的迭代器的 <strong>next</strong>() 方法返回一个元组，里面包含一个计数值（从 start 开始，默认为 0）和通过迭代 iterable 获得的值。</p>\n<p>【<strong>例1</strong>】</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seasons = [<span class=\"string\">&#x27;Spring&#x27;</span>, <span class=\"string\">&#x27;Summer&#x27;</span>, <span class=\"string\">&#x27;Fall&#x27;</span>, <span class=\"string\">&#x27;Winter&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">enumerate</span>(seasons))</span><br><span class=\"line\"></span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"string\">&#x27;Spring&#x27;</span>), (<span class=\"number\">1</span>, <span class=\"string\">&#x27;Summer&#x27;</span>), (<span class=\"number\">2</span>, <span class=\"string\">&#x27;Fall&#x27;</span>), (<span class=\"number\">3</span>, <span class=\"string\">&#x27;Winter&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n<p>【<strong>例2</strong>】</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> j, x <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br></pre></td></tr></table></figure>\n<p>此时$j$就是遍历当前的下标，$x$就是遍历当前的值</p>\n<h3 id=\"9-回文数\">9. 回文数</h3>\n<p><a href=\"https://leetcode.cn/problems/palindrome-number/\">题目链接</a></p>\n<h4 id=\"题目思路-2\">题目思路</h4>\n<p>利用python的切片</p>\n<h4 id=\"Code-8\">Code</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isPalindrome</span>(<span class=\"params\">self, x: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        y = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(x)[::-<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y == x</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h5 id=\"切片\">切片</h5>\n<p>字符串、List都可以使用切片的功能</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&#x27;Runoob&#x27;</span>  <span class=\"comment\"># 定义一个字符串变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>)           <span class=\"comment\"># 打印整个字符串</span></span><br><span class=\"line\"><span class=\"comment\"># Runoob</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">0</span>:-<span class=\"number\">1</span>])     <span class=\"comment\"># 打印字符串第一个到倒数第二个字符（不包含倒数第一个字符）</span></span><br><span class=\"line\"><span class=\"comment\"># Runoo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">0</span>])        <span class=\"comment\"># 打印字符串的第一个字符</span></span><br><span class=\"line\"><span class=\"comment\"># R</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">5</span>])      <span class=\"comment\"># 打印字符串第三到第五个字符（包含第五个字符）</span></span><br><span class=\"line\"><span class=\"comment\"># noo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>[<span class=\"number\">2</span>:])       <span class=\"comment\"># 打印字符串从第三个字符开始到末尾</span></span><br><span class=\"line\"><span class=\"comment\"># noob</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span> * <span class=\"number\">2</span>)       <span class=\"comment\"># 打印字符串两次</span></span><br><span class=\"line\"><span class=\"comment\"># RunoobRunoob</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span> + <span class=\"string\">&quot;TEST&quot;</span>)  <span class=\"comment\"># 打印字符串和&quot;TEST&quot;拼接在一起</span></span><br><span class=\"line\"><span class=\"comment\"># RunoobTEST</span></span><br></pre></td></tr></table></figure>\n<p>字符串、List从$0$开始遍历</p>\n<p><code>str[i:j]</code>：将$[i, j)$的元素截取下来</p>\n<h3 id=\"9-回文数-2\">9. 回文数</h3>\n<p><a href=\"\">题目链接</a></p>\n<h4 id=\"题目思路-3\">题目思路</h4>\n<h4 id=\"Code-9\">Code</h4>\n","categories":[],"tags":["python"]},{"title":"SDL播放音频","url":"http://example.com/2024/08/31/SDL播放音频/","content":"<h3 id=\"代码-14\">代码</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">undef</span> main</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =======（四）=======</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AudioCallBack</span><span class=\"params\">(<span class=\"type\">void</span>* userdata, Uint8* stream, <span class=\"type\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;AudioCallBack&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_memset</span>(stream, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> ifs = (ifstream *)userdata;</span><br><span class=\"line\">\tifs-&gt;<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)stream, len);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ifs-&gt;<span class=\"built_in\">gcount</span>() &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_PauseAudio</span>(<span class=\"number\">1</span>);  <span class=\"comment\">// 暂停播放</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化SDL音频</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Init</span>(SDL_INIT_AUDIO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =======（一）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// 打开音频设备</span></span><br><span class=\"line\">\tSDL_AudioSpec spec;</span><br><span class=\"line\">\tspec.freq = <span class=\"number\">44100</span>;  <span class=\"comment\">// 音频一秒采样率</span></span><br><span class=\"line\">\tspec.format = AUDIO_S16SYS;  <span class=\"comment\">// 音频样本类型，使用系统字节序</span></span><br><span class=\"line\">\tspec.channels = <span class=\"number\">2</span>;  <span class=\"comment\">// 音频通道数（双声道，立体声）</span></span><br><span class=\"line\">\tspec.silence = <span class=\"number\">0</span>;  <span class=\"comment\">// 静音的值</span></span><br><span class=\"line\">\tspec.samples = <span class=\"number\">1024</span>;  <span class=\"comment\">// 样本数量，2的n次方，</span></span><br><span class=\"line\">\t\t\t\t\t\t  <span class=\"comment\">// 用于分割平面模式的多通道数据</span></span><br><span class=\"line\">\t\t\t\t\t\t  <span class=\"comment\">// 例如 samples = 8</span></span><br><span class=\"line\">\t\t\t\t\t\t  <span class=\"comment\">//     LLLL RRRR</span></span><br><span class=\"line\">\tspec.callback = AudioCallBack;  <span class=\"comment\">// 音频播放回调函数</span></span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(<span class=\"string\">&quot;test_pcm.pcm&quot;</span>, ios::binary)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tspec.userdata = &amp;ifs;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =======（二）=======</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_OpenAudio</span>(&amp;spec, <span class=\"literal\">nullptr</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;SDL_OpenAudio failed!&quot;</span> &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =======（三）=======</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_PauseAudio</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// 开始播放</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_QuitSubSystem</span>(SDL_INIT_AUDIO);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"（一）-2\">（一）</h3>\n<p><code>SDL_AudioSpec</code> 是 SDL 库中的一个结构体，用于描述音频设备的配置和格式。它包含了音频播放和录制所需的各种参数，包括采样率、音频格式、通道数、样本大小、回调函数等。</p>\n<p>以下是 <code>SDL_AudioSpec</code> 结构体的主要成员及其解释：</p>\n<ol>\n<li>\n<p><strong><code>int freq</code></strong>：音频采样率，表示每秒钟播放或录制的样本数。常见的值是 44100（CD 音质）、48000（DVD 音质）等。</p>\n<ul>\n<li>代码中示例：<code>spec.freq = 44100;</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>SDL_AudioFormat format</code></strong>：音频格式，用于指定每个音频样本的格式（例如 8 位、16 位等）和字节序。常用的值有 <code>AUDIO_U8</code>（无符号 8 位 PCM 数据）、<code>AUDIO_S16SYS</code>（有符号 16 位 PCM 数据，系统字节序）等。</p>\n<ul>\n<li>代码中示例：<code>spec.format = AUDIO_S16SYS;</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Uint8 channels</code></strong>：音频通道数，1 表示单声道（Mono），2 表示立体声（Stereo）。</p>\n<ul>\n<li>代码中示例：<code>spec.channels = 2;</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Uint8 silence</code></strong>：静音值。当音频缓冲区为空时，SDL 用于填充静音的值。对于 8 位音频格式，这通常是 128，对于 16 位音频格式，这通常是 0。</p>\n<ul>\n<li>代码中示例：<code>spec.silence = 0;</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Uint16 samples</code></strong>：每个音频缓冲区的样本数，通常是 2 的幂。这个值决定了音频回调函数的调用频率，值越大，延迟越高，值越小，延迟越低，但会增加回调的调用频率。</p>\n<ul>\n<li>代码中示例：<code>spec.samples = 1024;</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>SDL_AudioCallback callback</code></strong>：音频回调函数指针。当音频设备需要更多数据时，SDL 会调用这个回调函数，以便用户提供数据。</p>\n<ul>\n<li>代码中示例：<code>spec.callback = AudioCallBack;</code>。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>类似于<code>Qt</code> 中的 <code>TimerEvent</code>，会每时每刻调用</li>\n</ul>\n<ol start=\"9\">\n<li><strong><code>void *userdata</code></strong>：用户数据指针。在回调函数中传递给用户的自定义数据，用户可以用它来传递上下文信息或者其他所需的数据。\n<ul>\n<li>代码中示例：<code>spec.userdata = &amp;ifs;</code>，其中 <code>ifs</code> 是指向输入文件流的指针。</li>\n</ul>\n</li>\n</ol>\n<p><code>SDL_AudioSpec</code> 结构体的这些成员允许开发者自定义音频设备的行为，使得 SDL 可以灵活地支持各种音频硬件和格式。通过适当配置这些参数，可以确保音频的播放和录制与期望的音频质量和性能相符。</p>\n<hr>\n<p>【<strong>关于PCM 8位和16位的区别</strong>】</p>\n<p>8位和16位 PCM 数据的主要区别在于 <strong>量化精度</strong>，即每个样本使用多少位来表示声音的振幅。</p>\n<ol>\n<li><strong>8位 PCM 数据</strong>：\n<ul>\n<li>使用 8 位（1 字节）来表示每个音频样本。</li>\n<li>由于每个样本只有 8 位，量化的数值范围是 0 到 255（无符号）或 -128 到 127（有符号）。</li>\n<li>8 位音频的精度较低，噪声较大，音质相对较差，通常用于简单的声音效果或需要降低数据量的场景。</li>\n<li>文件大小相对较小，因为每个样本的字节数较少。</li>\n</ul>\n</li>\n<li><strong>16位 PCM 数据</strong>：\n<ul>\n<li>使用 16 位（2 字节）来表示每个音频样本。</li>\n<li>量化的数值范围是 -32768 到 32767（有符号整数），这提供了更大的动态范围和更高的音频精度。</li>\n<li>16 位音频的音质明显优于 8 位音频，因为它能更精确地表示声音的细节和动态变化，通常用于高质量的音频文件，如音频 CD（44.1 kHz, 16-bit PCM）。</li>\n<li>文件大小较大，因为每个样本需要 2 个字节。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>8位 PCM</strong>：音质较低，适合用于<strong>简单音效或数据传输速率较低</strong>的场景。</li>\n<li><strong>16位 PCM</strong>：音质较高，适合用于音乐、视频和其他对音质有<strong>较高要求</strong>的场合。</li>\n</ul>\n<h3 id=\"（二）-2\">（二）</h3>\n<p><code>SDL_OpenAudio</code> 是 SDL（Simple DirectMedia Layer）库中的一个函数，用于打开音频设备并进行音频播放的初始化。这个函数配置音频硬件的播放参数，并分配资源，使音频设备能够开始工作。</p>\n<p><code>SDL_OpenAudio</code> 函数的作用</p>\n<ol>\n<li><strong>配置音频设备</strong>：它使用一个 <code>SDL_AudioSpec</code> 结构体来设置音频设备的参数，比如采样率、音频格式、通道数和缓冲区大小等。</li>\n<li><strong>初始化音频设备</strong>：根据提供的配置参数，SDL 会初始化音频硬件或虚拟音频设备，使其准备好播放音频。</li>\n<li><strong>注册回调函数</strong>：在初始化过程中，SDL 注册一个回调函数（<code>SDL_AudioSpec</code> 中的 <code>callback</code> 成员），当音频设备需要新的音频数据时，SDL 会调用这个回调函数。</li>\n</ol>\n<p><strong>函数签名</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SDL_OpenAudio</span><span class=\"params\">(SDL_AudioSpec *desired, SDL_AudioSpec *obtained)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明</strong></p>\n<ol>\n<li><strong><code>desired</code>（指针）</strong>：指向 <code>SDL_AudioSpec</code> 结构体，该结构体描述了你希望音频设备采用的音频参数（如采样率、格式、通道数、缓冲区大小等）。\n<ul>\n<li>你在这个结构体中指定你所期望的音频设置，包括回调函数。</li>\n<li>这是一个输入参数，SDL 使用这些信息来尝试匹配最接近的硬件配置。</li>\n</ul>\n</li>\n<li><strong><code>obtained</code>（指针）</strong>：指向一个 <code>SDL_AudioSpec</code> 结构体，用于接收实际音频设备支持的参数。\n<ul>\n<li>如果你不关心实际的音频参数，可以传入 <code>nullptr</code>。</li>\n<li>这是一个输出参数，SDL 将音频设备实际使用的参数写入该结构体中。通常用于检测音频设备的实际配置与期望配置之间的差异。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"（三）-2\">（三）</h3>\n<p>【<strong>关于callback函数什么时候调用</strong>】</p>\n<ol>\n<li><strong>初始化 SDL 音频子系统</strong>（<code>SDL_Init(SDL_INIT_AUDIO);</code>）。</li>\n<li><strong>配置并打开音频设备</strong>（<code>SDL_OpenAudio(&amp;spec, nullptr);</code>）。</li>\n<li><strong>开始音频播放</strong>（<code>SDL_PauseAudio(0);</code>）：这是<strong>启动音频播放的关键点</strong>。此时，SDL 开始工作，音频设备开始请求数据，触发 <code>AudioCallBack</code> 回调函数。</li>\n</ol>\n<h3 id=\"（四）\">（四）</h3>\n<p>这个回调函数 <code>AudioCallBack</code> 是在 SDL 音频设备需要新的音频数据时调用的。它的主要任务是从音频文件中读取数据并填充到音频缓冲区（<code>stream</code>），以确保音频播放的连续性。以下是这个回调函数的详细解释：</p>\n<p><strong>函数参数解释</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AudioCallBack</span><span class=\"params\">(<span class=\"type\">void</span>* userdata, Uint8* stream, <span class=\"type\">int</span> len)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><code>void* userdata</code></strong>：用户自定义的数据指针。在设置音频设备时（<code>SDL_AudioSpec</code> 的 <code>userdata</code> 成员），你可以传递任何需要在回调函数中使用的数据。在这个例子中，它是一个指向 <code>ifstream</code> 的指针，用于读取音频文件数据。</li>\n<li><strong><code>Uint8* stream</code></strong>：指向音频缓冲区的指针。这个缓冲区是 SDL 用来播放音频的。当 SDL 需要更多数据时，它会调用回调函数并传递这个缓冲区指针。<strong>回调函数的任务是将新的音频数据填充到这个缓冲区。</strong></li>\n<li><strong><code>int len</code></strong>：需要填充到缓冲区 <code>stream</code> 中的音频数据长度（字节数）。这个长度由 SDL 提供，通常由 <code>SDL_AudioSpec</code> 结构体中的 <code>samples</code> 字段决定。</li>\n</ul>\n<p><strong>函数执行流程</strong></p>\n<ol>\n<li>\n<p><strong>清零音频缓冲区</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SDL_memset</span>(stream, <span class=\"number\">0</span>, len);</span><br></pre></td></tr></table></figure>\n<p><code>SDL_memset</code> 函数将音频缓冲区 <code>stream</code> 的所有字节设置为 0。这个步骤是为了确保缓冲区在填充新数据之前是清零的，防止之前的数据残留。对于一些应用场景，这可以避免噪声或不期望的声音出现。</p>\n</li>\n<li>\n<p><strong>读取音频数据</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> ifs = (ifstream *)userdata;</span><br><span class=\"line\">ifs-&gt;<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)stream, len);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>auto ifs = (ifstream *)userdata;</code>：将 <code>userdata</code> 转换为 <code>ifstream</code> 指针。这里 <code>userdata</code> 是在初始化 <code>SDL_AudioSpec</code> 时传入的，指向一个打开的音频文件流（<code>ifstream</code>）。</li>\n<li><code>ifs-&gt;read((char*)stream, len);</code>：从音频文件中读取 <code>len</code> 字节的数据并填充到 <code>stream</code> 缓冲区。这个操作将音频文件中的 PCM 数据读入到 SDL 的播放缓冲区中。</li>\n</ul>\n</li>\n<li>\n<p><strong>检查文件是否读完</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ifs-&gt;<span class=\"built_in\">gcount</span>() &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">SDL_PauseAudio</span>(<span class=\"number\">1</span>);  <span class=\"comment\">// 暂停播放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ifs-&gt;gcount()</code>：返回 <code>read</code> 操作实际读取的字节数。如果返回值小于或等于 0，表示文件已经读完或者没有更多数据可以读取。</li>\n<li>如果文件读取完毕（<code>ifs-&gt;gcount() &lt;= 0</code>），打印 “end” 表示音频文件已结束，然后调用 <code>SDL_PauseAudio(1);</code> 暂停音频播放。暂停播放是为了避免播放空的缓冲区，产生噪音或无效的音频输出。</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong></p>\n<ul>\n<li><strong>回调函数的主要任务</strong>是从音频文件读取数据，并填充 SDL 的音频缓冲区，确保音频的连续播放。</li>\n<li><strong><code>userdata</code></strong> 用于传递自定义数据（如音频文件流），以便在回调函数中使用。</li>\n<li>当音频数据用尽时，回调函数暂停音频播放，防止播放空数据。</li>\n</ul>\n<p>这确保了音频播放的稳定性和数据的准确性。</p>\n<h3 id=\"（五）\">（五）</h3>\n<p>【<strong>播放过程的详细解释</strong>】</p>\n<ol>\n<li><strong>音频设备开始工作</strong>：调用 <code>SDL_PauseAudio(0)</code> 后，SDL 的音频子系统开始工作，音频设备会开始播放缓冲区中的数据。</li>\n<li><strong>音频数据的填充</strong>：当音频设备播放时，它会消耗缓冲区中的音频数据。当缓冲区中剩余的数据不足时，SDL 会调用你在 <code>SDL_AudioSpec</code> 中指定的回调函数 <code>AudioCallBack</code>。</li>\n<li><strong>音频数据的提供</strong>：<code>AudioCallBack</code> 函数从音频文件中读取新的音频数据并填充到音频缓冲区中。这些数据就是音频设备播放的内容。</li>\n<li><strong>持续播放</strong>：只要有新的音频数据可用，并且音频设备没有被暂停（调用 <code>SDL_PauseAudio(1)</code>），音频设备就会持续播放数据。</li>\n</ol>\n<p><strong>总结</strong></p>\n<p>声音的实际播放是由 <code>SDL_PauseAudio(0)</code> 启动的，它解除音频设备的暂停状态，让音频设备开始请求和播放数据。回调函数 <code>AudioCallBack</code> 在音频数据不足时被调用，用于填充更多的音频数据，从而实现连续播放。</p>\n","categories":[],"tags":[]},{"title":"责任链设计模式","url":"http://example.com/2024/08/28/责任链设计模式/","content":"<h2 id=\"责任链\">责任链</h2>\n<p>责任链设计模式（Chain of Responsibility Pattern）是一种行为设计模式，它允许多个对象有机会处理请求，从而避免请求的发送者与接收者之间的耦合。将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。</p>\n<h3 id=\"责任链模式的核心概念\">责任链模式的核心概念</h3>\n<ul>\n<li><strong>请求的发送者</strong>不需要知道哪个对象会处理请求。</li>\n<li><strong>请求的接收者</strong>可以决定是否处理请求或将其传递给下一个接收者。</li>\n<li>可以<strong>动态地添加或删除</strong>责任链上的处理者（处理对象）。</li>\n</ul>\n<h3 id=\"结构\">结构</h3>\n<ol>\n<li><strong>Handler（处理者）</strong>：定义一个处理请求的接口。如果处理者能够处理该请求，则进行处理，否则将请求传递给链上的下一个处理者。</li>\n<li><strong>ConcreteHandler（具体处理者）</strong>：实现处理者接口，具体处理请求的类。如果不能处理请求，则将请求转发给下一个处理者。</li>\n<li><strong>Client（客户端）</strong>：向链上的具体处理者对象提交请求。</li>\n</ol>\n<h3 id=\"工作流程\">工作流程</h3>\n<ol>\n<li><strong>客户端</strong>创建一个包含多个 <code>ConcreteHandler</code> 对象的链。</li>\n<li>客户端将请求发送到链中的第一个 <code>ConcreteHandler</code>。</li>\n<li>如果 <code>ConcreteHandler</code> 能处理请求，它就会进行处理。</li>\n<li>如果 <code>ConcreteHandler</code> 不能处理请求，它会将请求传递给链中的下一个 <code>ConcreteHandler</code>。</li>\n<li>这个过程会持续到请求被处理或者到达链的末尾为止。</li>\n</ol>\n<h3 id=\"责任链模式的优点\">责任链模式的优点</h3>\n<ul>\n<li><strong>降低耦合度</strong>：请求的发送者和接收者解耦，便于拓展和维护。</li>\n<li><strong>增强灵活性</strong>：在运行时可以动态地添加或删除责任链上的处理者。</li>\n<li><strong>增加可扩展性</strong>：通过增加新的处理类来增加新的请求处理功能，不需要修改现有代码。</li>\n</ul>\n<h3 id=\"责任链模式的缺点\">责任链模式的缺点</h3>\n<ul>\n<li><strong>请求未必会被处理</strong>：如果责任链没有正确配置，某些请求可能会得不到处理。</li>\n<li><strong>调试困难</strong>：由于请求在多个对象间传递，调试时很难跟踪请求的传递过程。</li>\n</ul>\n<h3 id=\"代码示例\">代码示例</h3>\n<p>以下是一个简单的 C++ 示例，演示如何使用责任链模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Handler（处理者）接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Handler</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(std::shared_ptr&lt;Handler&gt; nextHandler)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(<span class=\"type\">const</span> std::string&amp; request)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ConcreteHandler1（具体处理者1）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteHandler1</span> : <span class=\"keyword\">public</span> Handler &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::shared_ptr&lt;Handler&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(std::shared_ptr&lt;Handler&gt; nextHandler)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        next = nextHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(<span class=\"type\">const</span> std::string&amp; request)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request == <span class=\"string\">&quot;Request1&quot;</span>) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;ConcreteHandler1 handled the request.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">            next-&gt;<span class=\"built_in\">handleRequest</span>(request);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;No handler available for &quot;</span> &lt;&lt; request &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ConcreteHandler2（具体处理者2）</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteHandler2</span> : <span class=\"keyword\">public</span> Handler &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::shared_ptr&lt;Handler&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(std::shared_ptr&lt;Handler&gt; nextHandler)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        next = nextHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(<span class=\"type\">const</span> std::string&amp; request)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request == <span class=\"string\">&quot;Request2&quot;</span>) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;ConcreteHandler2 handled the request.&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (next) &#123;</span><br><span class=\"line\">            next-&gt;<span class=\"built_in\">handleRequest</span>(request);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;No handler available for &quot;</span> &lt;&lt; request &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> handler1 = std::<span class=\"built_in\">make_shared</span>&lt;ConcreteHandler1&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> handler2 = std::<span class=\"built_in\">make_shared</span>&lt;ConcreteHandler2&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    handler1-&gt;<span class=\"built_in\">setNext</span>(handler2); <span class=\"comment\">// 设置责任链顺序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    handler1-&gt;<span class=\"built_in\">handleRequest</span>(<span class=\"string\">&quot;Request1&quot;</span>); <span class=\"comment\">// 由 ConcreteHandler1 处理</span></span><br><span class=\"line\">    handler1-&gt;<span class=\"built_in\">handleRequest</span>(<span class=\"string\">&quot;Request2&quot;</span>); <span class=\"comment\">// 由 ConcreteHandler2 处理</span></span><br><span class=\"line\">    handler1-&gt;<span class=\"built_in\">handleRequest</span>(<span class=\"string\">&quot;Request3&quot;</span>); <span class=\"comment\">// 没有处理者处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码解释-2\">代码解释</h3>\n<ol>\n<li>\n<p><strong>Handler 接口</strong>：定义了一个接口，包括 <code>setNext</code> 方法用于设置下一个处理者，以及 <code>handleRequest</code> 方法用于处理请求。</p>\n</li>\n<li>\n<p><strong>ConcreteHandler1 和 ConcreteHandler2</strong>：具体的处理者类实现了 <code>Handler</code> 接口，它们检查能否处理请求，如果不能，则将请求传递给下一个处理者。</p>\n</li>\n<li>\n<p><strong>客户端代码</strong>：</p>\n<ul>\n<li>创建两个处理者对象 <code>handler1</code> 和 <code>handler2</code>。</li>\n<li>设置 <code>handler1</code> 的下一个处理者为 <code>handler2</code>，形成一个责任链。</li>\n<li>通过 <code>handler1</code> 发送请求，验证它们的处理能力。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结-20\">总结</h3>\n<p>责任链设计模式是一种使请求能够被多个对象处理的设计模式。这种模式使得请求的发送者与接收者解耦，并且可以根据需要动态地改变处理链的结构。使用责任链模式可以提高系统的灵活性和可扩展性，适用于需要多个对象依次处理请求的场景。</p>\n<h3 id=\"在此项目中的应用\">在此项目中的应用</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMuxTask mux_task;</span><br><span class=\"line\">XDemuxTask demux_task;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...  // 进行设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 截取5秒监控</span></span><br><span class=\"line\">demux_task.<span class=\"built_in\">set_next</span>(&amp;mux_task);</span><br><span class=\"line\"></span><br><span class=\"line\">demux_task.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">mux_task.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">MSleep</span>(<span class=\"number\">5000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">demux_task.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">mux_task.<span class=\"built_in\">Stop</span>();</span><br></pre></td></tr></table></figure>\n<p>首先<code>demux_task</code>设置下一个责任链的节点，接着启动<code>demux_task</code>，<code>mux_task</code>线程，会调用它们的<code>Main()</code>函数。</p>\n<p>在<code>mux_task</code>的<code>Main()</code>函数中，会不断对<code>pkts_</code>自定义<code>list</code>进行分装。</p>\n<p>在<code>demux_task</code>的<code>Main()</code>函数中，会不断接收数据，进行解封装，并且调用<code>Next(&amp;pkt)</code>函数，由于设置了<code>demux_task.set_next(&amp;mux_task);</code>，因此，会调用<code>mux_task</code>的<code>Do()</code>函数，在<code>Do()</code>函数中，会将<code>AVPacket</code>数据加入<code>pkts_</code>中在<code>mux_task</code>中的<code>Main()</code>中进行处理。</p>\n<hr>\n<h2 id=\"为什么要使用智能指针？\">为什么要使用智能指针？</h2>\n<p>在责任链设计模式的实现中，使用智能指针（如 <code>std::shared_ptr</code> 或 <code>std::unique_ptr</code>）可以带来多方面的好处，特别是在现代 C++ 编程中，智能指针是管理动态分配内存的一种安全、简洁的方式。以下是为什么在责任链中使用智能指针的主要原因：</p>\n<h3 id=\"1-自动内存管理，防止内存泄漏\">1. <strong>自动内存管理，防止内存泄漏</strong></h3>\n<p>智能指针会自动管理指向对象的生命周期，避免手动管理内存可能导致的内存泄漏问题：</p>\n<ul>\n<li>\n<p><strong>自动释放内存</strong>：当智能指针超出其作用范围或者不再使用时，它会自动释放所管理的对象的内存。这在责任链模式中尤为重要，因为链中的每个处理者可能会在不同的时间段被创建和销毁，手动管理内存容易出错。</p>\n</li>\n<li>\n<p><strong>避免内存泄漏</strong>：如果使用普通指针，程序员需要手动调用 <code>delete</code> 来释放内存，稍有不慎就可能忘记释放，导致内存泄漏。而智能指针会确保对象的内存在不再使用时被正确释放。</p>\n</li>\n</ul>\n<h3 id=\"2-简化代码，降低错误风险\">2. <strong>简化代码，降低错误风险</strong></h3>\n<p>智能指针减少了内存管理的复杂性，使代码更加简洁和易于维护：</p>\n<ul>\n<li>\n<p><strong>不需要显式调用 <code>delete</code></strong>：智能指针自动处理对象的销毁工作，避免了在多个地方调用 <code>delete</code> 的需求，简化了代码逻辑。</p>\n</li>\n<li>\n<p><strong>减少空悬指针（Dangling Pointer）风险</strong>：当一个对象被销毁后，普通指针仍然可能指向原地址，导致空悬指针。而智能指针会在对象销毁后自动将自身置为空（<code>nullptr</code>），降低使用已销毁对象的风险。</p>\n</li>\n</ul>\n<h3 id=\"3-更好的所有权管理\">3. <strong>更好的所有权管理</strong></h3>\n<p>智能指针明确了对象的所有权关系，有助于管理责任链中对象的生命周期：</p>\n<ul>\n<li>\n<p><strong><code>std::shared_ptr</code> 的共享所有权</strong>：在责任链模式中，如果某个节点可能会被多个部分同时引用（例如同一个节点可能被多个请求链条共享使用），使用 <code>std::shared_ptr</code> 可以确保对象的内存管理在所有引用结束后才会被释放。</p>\n</li>\n<li>\n<p><strong><code>std::unique_ptr</code> 的独占所有权</strong>：如果责任链的设计保证每个处理者节点只由一个父节点拥有（即没有共享所有权的情况），使用 <code>std::unique_ptr</code> 可以更清楚地表达这种关系，且更高效（没有引用计数的开销）。</p>\n</li>\n</ul>\n<h3 id=\"4-线程安全性\">4. <strong>线程安全性</strong></h3>\n<p>在多线程环境中，智能指针（如 <code>std::shared_ptr</code>）可以提供一定程度的线程安全性，因为它们会使用原子操作来管理引用计数。这在需要跨线程共享责任链中的处理者对象时尤其有用。</p>\n<h3 id=\"5-便于动态构建和修改链条\">5. <strong>便于动态构建和修改链条</strong></h3>\n<p>责任链模式通常允许动态地添加或移除链中的处理者。使用智能指针可以简化链条的动态修改操作：</p>\n<ul>\n<li><strong>插入和移除处理者</strong>：使用智能指针时，插入或移除一个处理者非常简单，因为智能指针自动管理处理者对象的内存。当某个处理者被移除后，智能指针会确保该对象（如果没有其他引用）被正确销毁。</li>\n</ul>\n<h3 id=\"总结-21\">总结</h3>\n<p>在责任链设计模式中使用智能指针是现代 C++ 的最佳实践，因为它能够：</p>\n<ol>\n<li>自动管理内存，防止内存泄漏。</li>\n<li>简化代码，降低错误风险。</li>\n<li>提供明确的对象所有权管理。</li>\n<li>在多线程环境中提供一定的线程安全性。</li>\n<li>更方便地动态构建和修改责任链。</li>\n</ol>\n<p>这些优势使得智能指针成为责任链模式中的一个理想选择，尤其是在需要频繁创建和销毁对象的场景中。</p>\n","categories":[],"tags":[]},{"title":"编码encoder，解码decoder，复用mux，解复用demux关系","url":"http://example.com/2024/08/27/编码encoder，解码decoder，复用mux，解复用demux关系/","content":"<h2 id=\"四者之间的区别\">四者之间的区别</h2>\n<p>编码（encoder）、解码（decoder）、复用（mux），和解复用（demux）是多媒体处理中的四个重要概念，它们各自承担不同的任务，用于处理音频、视频等数据。下面是它们的关系和区别：</p>\n<h3 id=\"1-编码（Encoder）\">1. 编码（Encoder）</h3>\n<p><strong>编码</strong>是将原始的音视频数据转换为另一种格式的过程，这通常是为了压缩数据以减少文件大小，同时保持一定的质量。编码器通过一种算法（如 H.264、AAC 等）对音视频数据进行压缩，生成一种特定的编码格式的数据流。编码的目的是为了更高效地存储和传输音视频数据。</p>\n<p><strong>举例</strong>：</p>\n<ul>\n<li><strong>视频编码器</strong>：H.264、H.265、VP9 等。</li>\n<li><strong>音频编码器</strong>：MP3、AAC、Opus 等。</li>\n</ul>\n<p>编码后的数据称为 <strong>码流（bitstream）</strong>。</p>\n<h3 id=\"2-解码（Decoder）\">2. 解码（Decoder）</h3>\n<p><strong>解码</strong>是将编码后的数据流还原为原始格式或能够播放的格式的过程。解码器使用与编码器相反的算法，读取编码后的数据流，将其解压缩或转换为可以播放或进一步处理的格式。</p>\n<p><strong>举例</strong>：</p>\n<ul>\n<li><strong>视频解码器</strong>：解码 H.264、H.265 格式的视频流。</li>\n<li><strong>音频解码器</strong>：解码 MP3、AAC 格式的音频流。</li>\n</ul>\n<p>解码的目的是使数据可以被音视频播放器或其他应用程序处理和播放。</p>\n<h3 id=\"3-复用（Mux）\">3. 复用（Mux）</h3>\n<p><strong>复用（Multiplexing，简称 mux）</strong> 是将多个数据流（如视频流、音频流、字幕流等）<strong>合并到一个单一容器格式中的过程</strong>。复用的主要目的是将多种类型的媒体数据（如一段视频和其对应的音频）整合在一起，方便传输和存储。</p>\n<p>复用之后的数据存储在一个 <strong>容器（container）</strong> 文件中。常见的容器格式有：</p>\n<ul>\n<li><strong>MP4</strong>：可以包含视频、音频、字幕和其他数据流。</li>\n<li><strong>MKV</strong>：支持几乎所有的视频和音频格式，并且可以包含字幕和多音轨。</li>\n<li><strong>AVI</strong>：较老的容器格式，支持较少的编码格式。</li>\n</ul>\n<h3 id=\"4-解复用（Demux）\">4. 解复用（Demux）</h3>\n<p><strong>解复用（Demultiplexing，简称 demux）</strong> 是从一个容器格式中<strong>分离出各个独立数据流（如音频、视频、字幕等）的过程</strong>。解复用的目的是为了将视频、音频等独立的媒体流分离出来，以便单独处理或解码。</p>\n<p><strong>举例</strong>：</p>\n<ul>\n<li>一个 <code>.mp4</code> 文件可以同时包含视频流和音频流。解复用过程将视频流和音频流分离开来，使得每个流可以被相应的解码器解码。</li>\n</ul>\n<h3 id=\"总结：它们的关系和区别\">总结：它们的关系和区别</h3>\n<ol>\n<li><strong>编码（Encoder）</strong> 和 <strong>解码（Decoder）</strong> 是相互逆向的过程。编码器将原始数据压缩为某种编码格式的码流，解码器将这种码流还原为原始数据或可播放的格式。</li>\n<li><strong>复用（Mux）</strong> 和 <strong>解复用（Demux）</strong> 也是相互逆向的过程。复用将多个数据流（如视频和音频）合并到一个容器文件中，而解复用则从容器文件中提取出各个独立的数据流。</li>\n<li>在一个典型的媒体处理工作流中，原始音视频数据首先被编码器编码为压缩格式，然后通过复用器将这些压缩数据流组合在一起形成一个文件。播放时，这个文件首先通过解复用器提取出独立的数据流，然后通过解码器解码为可以播放的格式。</li>\n</ol>\n<hr>\n<p>复用（Muxing）和编码（Encoding）虽然都可以生成文件，但它们在概念和功能上是完全不同的过程。以下是它们的区别：</p>\n<h2 id=\"编码与复用的区别\">编码与复用的区别</h2>\n<p>复用（Muxing）和编码（Encoding）虽然都可以生成文件，但它们在概念和功能上是完全不同的过程。</p>\n<h3 id=\"1-功能和目的\">1. 功能和目的</h3>\n<ul>\n<li>\n<p><strong>编码（Encoding）</strong>：</p>\n<ul>\n<li><strong>功能</strong>：将原始的音频或视频数据压缩成一种特定的编码格式，如 H.264、H.265（视频编码器）或 AAC、MP3（音频编码器）。</li>\n<li><strong>目的</strong>：减少文件大小、便于传输和存储，同时尽量保持数据的质量。编码后的文件主要是为了在有限带宽或存储空间的情况下高效传输或保存音视频内容。</li>\n</ul>\n</li>\n<li>\n<p><strong>复用（Muxing）</strong>：</p>\n<ul>\n<li><strong>功能</strong>：将多个独立的已编码数据流（如视频流、音频流、字幕流等）合并到一个单一的容器格式中，如 MP4、MKV、AVI 等。</li>\n<li><strong>目的</strong>：整合多个数据流到一个文件中，便于同步播放和传输。复用后的文件可以包含多种类型的媒体数据（例如视频、音频和字幕），并能够在播放时保持它们的同步。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-处理的内容\">2. 处理的内容</h3>\n<ul>\n<li>\n<p><strong>编码</strong>处理的是原始的音视频数据，目的是将这些数据压缩为一种更小、更高效的格式。编码的结果是一个压缩的、格式化的码流（bitstream）。</p>\n</li>\n<li>\n<p><strong>复用</strong>处理的是已编码的数据流（视频、音频等），它并不改变这些数据流的内容或格式，而是将它们合并到一个容器文件中。复用不涉及压缩或编码，它只是一个数据整合的过程。</p>\n</li>\n</ul>\n<h3 id=\"3-生成的文件类型\">3. 生成的文件类型</h3>\n<ul>\n<li>\n<p><strong>编码后的文件</strong>：</p>\n<ul>\n<li>直接生成的是压缩后的码流文件（bitstream），这个文件通常是原始格式的压缩版本。例如，一个编码后的文件可能是 <code>.h264</code>（视频）或 <code>.aac</code>（音频）。这些文件可能只是单一的数据流，且通常不能直接播放（需要一个容器或播放器的支持）。</li>\n</ul>\n</li>\n<li>\n<p><strong>复用后的文件</strong>：</p>\n<ul>\n<li>生成的是容器文件（container file），例如 <code>.mp4</code>、<code>.mkv</code>、<code>.avi</code> 等。这个文件包含了多个编码后的数据流（视频、音频、字幕等），可以直接播放。容器文件不仅仅包括数据流本身，还包括数据流之间的同步信息、元数据（如标题、章节、封面图）等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-工作流程中的位置\">4. 工作流程中的位置</h3>\n<p>在一个典型的媒体处理工作流程中：</p>\n<ol>\n<li>\n<p><strong>编码（Encoding）</strong>：</p>\n<ul>\n<li>首先对原始的音频和视频数据进行压缩，生成单独的音频和视频码流。</li>\n</ul>\n</li>\n<li>\n<p><strong>复用（Muxing）</strong>：</p>\n<ul>\n<li>然后将这些单独的编码数据流（音频、视频、字幕等）合并为一个容器文件，使得这些数据流能够同步播放。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结-19\">总结</h3>\n<ul>\n<li><strong>编码</strong>：是<strong>压缩和格式化音视频数据的过程</strong>。</li>\n<li><strong>复用</strong>：是<strong>将多个已编码的数据流合并到一个容器文件中的过程</strong>。</li>\n</ul>\n<p>编码和复用的主要区别在于前者是数据压缩和格式转换，后者是数据整合和封装。</p>\n","categories":[],"tags":[]},{"title":"截取一段视频","url":"http://example.com/2024/08/18/截取一段视频/","content":"<h2 id=\"代码-19\">代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t使用FFmpeg库打开一个媒体文件（如MP4视频），截取其中10秒到20秒的音频和视频，然后将截取的部分保存到一个新的文件中。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;  <span class=\"comment\">// 指定函数是C语言函数，函数名不包含重载标注</span></span><br><span class=\"line\">\t<span class=\"comment\">// 引入ffmpeg头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat\\avformat.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 预处理指令导入库</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avformat.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avcodec.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于打印错误信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">av_strerror</span>(err, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\tcerr &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CERR(err) <span class=\"keyword\">if</span>(err != 0) &#123;PrintErr(err);getchar();return -1;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打开媒体文件</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span>* url = <span class=\"string\">&quot;v1080.mp4&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 解封装输入上下文</span></span><br><span class=\"line\">\tAVFormatContext* ic = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"comment\">// =======（一）=======</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_open_input</span>(&amp;ic, url,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>,  <span class=\"comment\">// 封装器格式 null 自动探测 根据后缀名或者文件头探测</span></span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>  <span class=\"comment\">// 参数设置， rtsp需要设置</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"built_in\">CERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// =======（二）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// 获取媒体信息，无头部格式</span></span><br><span class=\"line\">\t<span class=\"built_in\">avformat_find_stream_info</span>(ic, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">CERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// =======（三）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// 打印封装信息</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(ic, <span class=\"number\">0</span>, url, </span><br><span class=\"line\">\t\t<span class=\"number\">0</span>  <span class=\"comment\">// 0表示上下文输入  1表示上下文输出</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =======（四）=======</span></span><br><span class=\"line\">\tAVStream* as = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 音频流</span></span><br><span class=\"line\">\tAVStream* vs = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 视频流</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ic-&gt;nb_streams; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ic-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tas = ic-&gt;streams[i];</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;=====音频=====&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;sample_rate：&quot;</span> &lt;&lt; as-&gt;codecpar-&gt;sample_rate &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ic-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tvs = ic-&gt;streams[i];</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;=====视频=====&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;width：&quot;</span> &lt;&lt; vs-&gt;codecpar-&gt;width &lt;&lt; endl;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;height：&quot;</span> &lt;&lt; vs-&gt;codecpar-&gt;height &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 解封装</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *out_url = <span class=\"string\">&quot;test_mux.mp4&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 编码器输出上下文</span></span><br><span class=\"line\">\tAVFormatContext *ec = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// =======（五）=======</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">avformat_alloc_output_context2</span>(&amp;ec, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\tout_url  <span class=\"comment\">// 根据文件名推测分装格式</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"built_in\">CERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加视频流</span></span><br><span class=\"line\">    <span class=\"comment\">// =======（六）=======</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> mvs =  <span class=\"built_in\">avformat_new_stream</span>(ec, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 视频流</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> mas =  <span class=\"built_in\">avformat_new_stream</span>(ec, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 音频流</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开输出IO</span></span><br><span class=\"line\">    <span class=\"comment\">// =======（七）=======</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">avio_open</span>(&amp;ec-&gt;pb, out_url, AVIO_FLAG_WRITE);</span><br><span class=\"line\">\t<span class=\"built_in\">CERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置解码音视频流参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =======（八）=======</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vs)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmvs-&gt;time_base = vs-&gt;time_base;  <span class=\"comment\">// 时间基数与原视频一致</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 从解封装复制参数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_copy</span>(mvs-&gt;codecpar, vs-&gt;codecpar);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (as)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmas-&gt;time_base = as-&gt;time_base;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 从解封装复制参数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_copy</span>(mas-&gt;codecpar, as-&gt;codecpar);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// =======（九）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// 写入文件头</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">avformat_write_header</span>(ec, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">CERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印输出上下文</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(ec, <span class=\"number\">0</span>, out_url, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 截取 10 ~ 20秒的音频视频  取多不取少</span></span><br><span class=\"line\">\t<span class=\"comment\">// 假定9 11秒都有关键帧  取9秒的关键帧</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> begin_sec = <span class=\"number\">10.0</span>;  <span class=\"comment\">// 截取开始时间</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> end_sec = <span class=\"number\">20.0</span>;  <span class=\"comment\">// 截取结束时间</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> begin_pts = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> begin_audio_pts = <span class=\"number\">0</span>;  <span class=\"comment\">// 音频的开始时间</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> end_pts = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// =======（十）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// 换算成pts 换算成输入ic的pts 以视频流为准</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vs &amp;&amp; vs-&gt;time_base.num &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> t = (<span class=\"type\">double</span>)vs-&gt;time_base.den / (<span class=\"type\">double</span>)vs-&gt;time_base.num;  <span class=\"comment\">// den分母 / num分子 </span></span><br><span class=\"line\">\t\tbegin_pts = begin_sec * t;  <span class=\"comment\">// begin对应的pts</span></span><br><span class=\"line\">\t\tend_pts = end_sec * t;  <span class=\"comment\">// end对应的pts</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理音频的pts</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (as &amp;&amp; as-&gt;time_base.num &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tbegin_audio_pts = begin_sec * ((<span class=\"type\">double</span>)as-&gt;time_base.den / (<span class=\"type\">double</span>)as-&gt;time_base.num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =======（十一）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// seek输入媒体文件 移动到地市秒的关键帧为止</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(vs)</span><br><span class=\"line\">\t\tre = <span class=\"built_in\">av_seek_frame</span>(ic, vs-&gt;index, begin_pts, </span><br><span class=\"line\">\t\t\tAVSEEK_FLAG_FRAME || AVSEEK_FLAG_BACKWARD);  </span><br><span class=\"line\">\t<span class=\"built_in\">CERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tAVPacket pkt;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tre = <span class=\"built_in\">av_read_frame</span>(ic, &amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAVStream *in_stream = ic-&gt;streams[pkt.stream_index];</span><br><span class=\"line\">\t\tAVStream *out_stream = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts = <span class=\"number\">0</span>;  <span class=\"comment\">// 偏移pts，用于截断的开头pts运算</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断当前处理的 AVPacket 是否属于视频流的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (vs &amp;&amp; pkt.stream_index == vs-&gt;index)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;视频： &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 超过第20秒退出 只存10 ~ 20秒</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pkt.pts &gt; end_pts)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">av_packet_unref</span>(&amp;pkt);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tout_stream = ec-&gt;streams[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\toffset_pts = begin_pts;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前处理的 AVPacket 是否属于音频流的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (as &amp;&amp; pkt.stream_index == as-&gt;index)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;音频： &quot;</span>;</span><br><span class=\"line\">\t\t\tout_stream = ec-&gt;streams[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\toffset_pts = begin_audio_pts;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; pkt.pts &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; pkt.dts &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; pkt.size &lt;&lt; endl;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// =======（十二）=======</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 重新计算pts dts duration</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a * bq（输入basetime） / cq（输出basetime）</span></span><br><span class=\"line\">\t\tpkt.pts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt.pts - offset_pts, in_stream-&gt;time_base,</span><br><span class=\"line\">\t\t\tout_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tpkt.dts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt.dts - offset_pts, in_stream-&gt;time_base,</span><br><span class=\"line\">\t\t\tout_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tpkt.duration = <span class=\"built_in\">av_rescale_q</span>(pkt.duration, in_stream-&gt;time_base,</span><br><span class=\"line\">\t\t\tout_stream-&gt;time_base);</span><br><span class=\"line\">\t\tpkt.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// =======（十三）=======</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 写入音视频帧 会清理pkt</span></span><br><span class=\"line\">\t\tre = <span class=\"built_in\">av_interleaved_write_frame</span>(ec, &amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// =======（十四）=======</span></span><br><span class=\"line\">\t<span class=\"comment\">// 写入结尾</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">av_write_trailer</span>(ec);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">avformat_close_input</span>(&amp;ic);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">avio_closep</span>(&amp;ec-&gt;pb);</span><br><span class=\"line\">\t<span class=\"built_in\">avformat_free_context</span>(ec);</span><br><span class=\"line\">\tec = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（一）-7\">（一）</h3>\n<p><a href=\"https://www.jasonqian.com/2024/08/18/AVStream%E3%80%81AVFormatContext/\">AVFormatContext</a></p>\n<p>使用FFmpeg库中的<code>avformat_open_input</code>函数来打开一个媒体文件（如MP4视频）的操作。</p>\n<p>这里的<code>ic</code>代表<code>input context</code>，即输入上下文</p>\n<p>同时也是<a href=\"https://www.jasonqian.com/2024/07/24/XDemux/\">XDemux</a>中的<code>AVFormatContext</code>，使用<code>set_c()</code>函数，也就是修改它。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* url = <span class=\"string\">&quot;v1080.mp4&quot;</span>;</span><br><span class=\"line\">AVFormatContext* ic = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_open_input</span>(&amp;ic, url,</span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>,  <span class=\"comment\">// 封装器格式 null 自动探测 根据后缀名或者文件头探测</span></span><br><span class=\"line\">\t<span class=\"literal\">NULL</span>  <span class=\"comment\">// 参数设置， rtsp需要设置</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avformat_open_input</span><span class=\"params\">(AVFormatContext **ps, <span class=\"type\">const</span> <span class=\"type\">char</span> *filename, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVInputFormat *fmt, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVDictionary **options</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><code>AVFormatContext *ps</code>：这是一个指向指针的指针，用于存储打开的媒体文件的上下文信息。在这里，<code>ic</code>是一个<a href=\"https://www.jasonqian.com/2024/08/18/AVStream%E3%80%81AVFormatContext/\">AVFormatContext</a>的指针，函数会通过这个指针返回打开的文件的详细信息，如流信息等。</li>\n<li><code>const char *filename</code>：这是一个字符串，表示要打开的媒体文件的路径。在代码中，这个路径是通过<code>url</code>变量传递的，也就是文件名<code>&quot;v1080.mp4&quot;</code>。</li>\n<li><code>AVInputFormat *fmt</code>：指定输入文件的格式。这通常用于强制指定文件格式，比如你明确知道要处理的是一个特定格式的流或者文件。在大多数情况下，可以传递<code>NULL</code>，FFmpeg会自动根据文件头或者扩展名来检测格式。</li>\n<li><code>AVDictionary **options</code>：这是一个用于传递额外参数的字典指针。一般用于像RTSP、HTTP等流媒体协议设置。对于本地文件操作，这里传递<code>NULL</code>即可。</li>\n</ul>\n<p><strong>代码中的解释</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_open_input</span>(&amp;ic, url, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><code>&amp;ic</code></strong>：传入一个<code>AVFormatContext</code>指针的地址，用于在函数内打开文件并填充这个上下文结构。</li>\n<li><strong><code>url</code></strong>：传入文件路径，即<code>&quot;v1080.mp4&quot;</code>。</li>\n<li><strong><code>NULL</code></strong>（第三个参数）：告诉FFmpeg自动探测文件的封装格式，不需要手动指定。</li>\n<li><strong><code>NULL</code></strong>（第四个参数）：不需要额外的选项设置。</li>\n</ul>\n<p><strong>结果</strong></p>\n<ul>\n<li><code>avformat_open_input</code>函数返回一个整数，表示操作结果。<strong>返回值为0表示成功打开文件</strong>，非零表示出错。这个返回值被存储在<code>re</code>变量中，可以通过<code>CERR(re)</code>来检查是否成功打开了文件。</li>\n</ul>\n<p><strong>总结</strong></p>\n<p>这行代码的目的是打开一个名为<code>v1080.mp4</code>的媒体文件，并使用FFmpeg自动检测文件的封装格式，同时不需要额外的参数设置。如果成功打开文件，<code>ic</code>指针将指向包含媒体文件信息的<code>AVFormatContext</code>结构，<strong>后续代码可以通过ic这个结构来操作文件的流信息</strong>。</p>\n<h3 id=\"（二）-7\">（二）</h3>\n<p>调用了FFmpeg库中的<code>avformat_find_stream_info</code>函数，分析打开的媒体文件，提取并填充其流信息。这一步是非常重要的，因为后续的音视频处理（如解码、截取等）都依赖于这些流的详细信息。同时<code>ic</code>中的<code>streams</code><strong>数组将会被填充</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">avformat_find_stream_info</span>(ic, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avformat_find_stream_info</span><span class=\"params\">(AVFormatContext *ic, AVDictionary **options)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVFormatContext \\*ic</code></strong>：这是一个指向<code>AVFormatContext</code>结构的指针，该结构包含了媒体文件的上下文信息。<code>ic</code>是在之前通过<code>avformat_open_input</code>函数打开文件后获取的。</li>\n<li><strong><code>AVDictionary \\**options</code></strong>：这是一个指向字典的指针，用于传递额外的选项，通常用于解码器的设置。如果不需要设置特殊选项，可以传递<code>NULL</code>。</li>\n</ul>\n<p><strong>功能解释</strong></p>\n<p><code>avformat_find_stream_info</code>函数的主要功能是从已打开的媒体文件中读取和分析流信息，填充<code>AVFormatContext</code>结构中的流信息数组（<code>streams</code>）。</p>\n<p>具体来说，FFmpeg会分析文件头部的数据，尝试找到文件中的所有流（如视频流、音频流、字幕流等），并收集这些流的编码信息（如编码器类型、分辨率、采样率、比特率等）。这个过程可能涉及解码几帧数据，以便正确推断和填充这些信息。</p>\n<p>这行代码调用了FFmpeg库中的<code>avformat_find_stream_info</code>函数，用于从打开的媒体文件中提取流（音频、视频、字幕等）的相关信息。让我们详细解析一下：</p>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avformat_find_stream_info</span><span class=\"params\">(AVFormatContext *ic, AVDictionary **options)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVFormatContext \\*ic</code></strong>：这是一个指向<code>AVFormatContext</code>结构的指针，该结构包含了媒体文件的上下文信息。<code>ic</code>是在之前通过<code>avformat_open_input</code>函数打开文件后获取的。</li>\n<li><strong><code>AVDictionary \\**options</code></strong>：这是一个指向字典的指针，用于传递额外的选项，通常用于解码器的设置。如果不需要设置特殊选项，可以传递<code>NULL</code>。</li>\n</ul>\n<p><strong>功能解释</strong></p>\n<p><code>avformat_find_stream_info</code>函数的主要功能是从已打开的媒体文件中读取和分析流信息，填充<code>AVFormatContext</code>结构中的流信息数组（<code>streams</code>）。</p>\n<p>具体来说，FFmpeg会分析文件头部的数据，尝试找到文件中的所有流（如视频流、音频流、字幕流等），并收集这些流的编码信息（如编码器类型、分辨率、采样率、比特率等）。这个过程可能涉及解码几帧数据，以便正确推断和填充这些信息。</p>\n<p><strong>代码中的解释</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">avformat_find_stream_info</span>(ic, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><code>ic</code></strong>：传入已经由<code>avformat_open_input</code>函数打开的媒体文件上下文。FFmpeg将在这个上下文中查找并填充流的信息。</li>\n<li><strong><code>NULL</code></strong>：这里不传递任何特殊选项，表示采用默认的设置。</li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>该函数返回一个整数。如果返回值为0，则表示成功找到了流信息并进行了正确填充；如果返回值为负数，则表示发生了错误，通常是因为文件格式不支持或文件损坏等原因。</li>\n</ul>\n<p><strong>结果</strong></p>\n<p>在成功调用<code>avformat_find_stream_info</code>之后，<code>ic</code>中的<code>streams</code><strong>数组将会被填充</strong>，包含文件中每个流的详细信息。你可以通过遍历这个数组来获取每个流的具体参数（如视频的宽高、音频的采样率等）。</p>\n<h3 id=\"（三）-7\">（三）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">av_dump_format</span>(ic, <span class=\"number\">0</span>, url, </span><br><span class=\"line\">\t<span class=\"number\">0</span>  <span class=\"comment\">// 0表示上下文输入  1表示上下文输出</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>调用了FFmpeg库中的<code>av_dump_format</code>函数，用于打印媒体文件的封装格式信息和流信息。具体来说，这个函数会将媒体文件的元数据和流信息输出到标准输出（通常是控制台），这对于调试和了解媒体文件结构非常有用。</p>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">av_dump_format</span><span class=\"params\">(AVFormatContext *ic, <span class=\"type\">int</span> index, <span class=\"type\">const</span> <span class=\"type\">char</span> *url, <span class=\"type\">int</span> is_output)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><code>AVFormatContext *ic</code>：这是一个指向<code>AVFormatContext</code>结构的指针，表示已打开的媒体文件的上下文信息。在前面的步骤中，通过<code>avformat_open_input</code>和<code>avformat_find_stream_info</code>已经获取并填充了这个结构。</li>\n<li><code>int index</code>：流索引号，这里通常设置为0，表示从第一个流开始打印。实际上，这个参数主要用于多路复用（muxing）或解复用（demuxing）情况。在这种情况下，你可以指定某个特定的流进行详细打印，但一般用0表示从第一个流开始。</li>\n<li><code>const char *url</code>：这是一个字符串，表示媒体文件的路径或URL。在这段代码中，它是之前定义的<code>url</code>变量，即文件的路径名<code>&quot;v1080.mp4&quot;</code>。</li>\n<li><code>int is_output</code>：一个标志位，用于指示上下文是输入（0）还是输出（1）。如果是输入文件，则设置为0；如果是输出文件，则设置为1。在这个示例中，由于我们是在处理输入媒体文件，所以这个参数设置为0。</li>\n</ul>\n<p><strong>代码中的解释</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">av_dump_format</span>(ic, <span class=\"number\">0</span>, url, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><code>ic</code></strong>：传入之前打开的<code>AVFormatContext</code>，该上下文包含了媒体文件的所有信息。</li>\n<li><strong><code>0</code>（index）</strong>：表示从第一个流开始打印信息。</li>\n<li><strong><code>url</code></strong>：媒体文件的路径，即<code>&quot;v1080.mp4&quot;</code>。</li>\n<li><strong><code>0</code>（is_output）</strong>：表示这是一个输入文件，因此打印的是输入媒体文件的信息。</li>\n</ul>\n<p><strong>功能解释</strong></p>\n<p><code>av_dump_format</code>函数将会打印以下信息：</p>\n<ul>\n<li>文件的封装格式（如MP4、MKV等）。</li>\n<li>各个流的信息，如视频流的分辨率、帧率，音频流的采样率、声道数等。</li>\n<li>每个流使用的编码器类型（如H.264视频编码器，AAC音频编码器）。</li>\n</ul>\n<p>这些信息将直接输出到控制台，非常有助于了解文件的结构和内容，尤其在调试和开发过程中，帮助确认文件是否正确打开、流信息是否正确读取。</p>\n<h3 id=\"（四）-5\">（四）</h3>\n<p><a href=\"https://www.jasonqian.com/2024/08/18/AVStream%E3%80%81AVFormatContext/\">AVStream、AVFormatContext结构</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVStream* as = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 音频流</span></span><br><span class=\"line\">AVStream* vs = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 视频流</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ic-&gt;nb_streams; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ic-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tas = ic-&gt;streams[i];</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;=====音频=====&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;sample_rate：&quot;</span> &lt;&lt; as-&gt;codecpar-&gt;sample_rate &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ic-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvs = ic-&gt;streams[i];</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;=====视频=====&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;width：&quot;</span> &lt;&lt; vs-&gt;codecpar-&gt;width &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;height：&quot;</span> &lt;&lt; vs-&gt;codecpar-&gt;height &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><code>AVStream</code> 结构</strong></p>\n<p><code>AVStream</code> 是 FFmpeg 中用于表示媒体文件中**每个流（如视频流、音频流、字幕流等）**的数据结构。每个媒体文件通常包含一个或多个流，例如一个视频文件可能包含一个视频流和一个音频流。</p>\n<p><strong>用途</strong></p>\n<p>在代码中，这两个指针<code>AVStream *as, *vs</code>通常用于以下几种用途：</p>\n<ol>\n<li><strong>区分和处理不同类型的流</strong>：通过判断<code>AVStream</code>结构中的<code>codecpar-&gt;codec_type</code>，可以确定流的类型（视频、音频、字幕等）。然后，代码可以分别对音频流和视频流进行不同的处理。例如，音频流的采样率、声道数和音频编码器设置，视频流的分辨率、帧率和视频编码器设置等。</li>\n<li><strong>保存和使用流的参数</strong>：在找到音频和视频流后，代码可以使用这些指针来访问和操作流的参数（如分辨率、采样率、时间基等）。这些参数在后续处理（如解码、编码、截取片段等）中至关重要。</li>\n<li><strong>流遍历</strong>：代码通常会遍历媒体文件中的所有流，识别出音频流和视频流，并将它们分别存储在<code>as</code>和<code>vs</code>中，供后续处理使用。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ic-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO</span><br></pre></td></tr></table></figure>\n<p>每一个 <code>streams</code> 数组中的元素（即每个 <code>AVStream</code> 结构体）都会有一个 <code>codecpar</code> 成员，而 <code>codecpar</code> 是一个指向 <a href=\"https://www.jasonqian.com/2024/08/18/AVCodecParameters/\">AVCodecParameters</a>结构体的指针。</p>\n<h3 id=\"（五）-4\">（五）</h3>\n<p><code>avformat_alloc_output_context2</code> 函数，用于分配并初始化一个 <code>AVFormatContext</code>，该上下文用于输出操作（即写入一个新的媒体文件）。这个函数为即将创建的输出文件提供了一个封装格式的上下文环境，类似于打开一个现有的媒体文件时创建的输入上下文。</p>\n<p>这里的<code>ec</code>代表<code>output context</code>，即输出上下文。</p>\n<p>同时也是<a href=\"https://www.jasonqian.com/2024/07/24/XMux/\">XMux</a>中的<code>AVFormatContext</code>，使用<code>set_c()</code>函数，也就是修改它。</p>\n<ul>\n<li>在很多编程范式中，<code>ec</code> 被广泛使用来表示输出上下文。虽然 <code>oc</code> 似乎更符合逻辑，因为它直接与 “Output Context” 对应，但 <code>ec</code> 是从某种编程习惯或历史项目中沿袭下来的。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVFormatContext *ec = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">re = <span class=\"built_in\">avformat_alloc_output_context2</span>(&amp;ec, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\tout_url  <span class=\"comment\">// 根据文件名推测分装格式</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avformat_alloc_output_context2</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    AVFormatContext **ctx, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVOutputFormat *oformat, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *format_name, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *filename</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVFormatContext \\**ctx</code></strong>：这是一个指向 <code>AVFormatContext</code> 指针的指针，用于存储函数创建的输出上下文。函数会通过这个指针返回一个新的 <code>AVFormatContext</code>，表示输出文件的上下文。</li>\n<li><strong><code>AVOutputFormat *oformat</code></strong>：用于指定输出文件的封装格式。如果传递 <code>NULL</code>，FFmpeg 会根据文件名或文件扩展名自动检测适当的封装格式。</li>\n<li><strong><code>const char *format_name</code></strong>：用于指定输出格式的名称（如 <code>&quot;mp4&quot;</code> 或 <code>&quot;flv&quot;</code>）。如果不指定（即传递 <code>NULL</code>），FFmpeg 将尝试根据文件扩展名或 <code>filename</code> 参数来推断封装格式。</li>\n<li><strong><code>const char *filename</code></strong>：输出文件的路径或名称。FFmpeg 会基于这个文件名的扩展名来推测合适的封装格式。</li>\n</ul>\n<h3 id=\"（六）-3\">（六）</h3>\n<p><strong>输出文件</strong>的上下文中创建新的音频流和视频流。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> mvs =  <span class=\"built_in\">avformat_new_stream</span>(ec, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 视频流</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> mas =  <span class=\"built_in\">avformat_new_stream</span>(ec, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 音频流</span></span><br></pre></td></tr></table></figure>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVStream *<span class=\"title\">avformat_new_stream</span><span class=\"params\">(AVFormatContext *s, <span class=\"type\">const</span> AVCodec *c)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVFormatContext *s</code></strong>：这是一个指向 <code>AVFormatContext</code> 结构体的指针，表示当前输出文件的上下文。<code>s</code> 是你在 <code>avformat_alloc_output_context2</code> 中创建并初始化的上下文。在这段代码中，<code>ec</code> 是这个上下文，用于描述输出文件。</li>\n<li><strong><code>const AVCodec *c</code></strong>：这是一个指向 <code>AVCodec</code> 结构体的指针，表示新流将要使用的编解码器。如果你传递 <code>NULL</code>，FFmpeg 将<strong>不会在创建流时设置编解码器</strong>。这通常用于稍后再设置具体的编解码器。</li>\n</ul>\n<h3 id=\"（七）\">（七）</h3>\n<p><code>avio_open</code> 函数，用于打开一个输出文件并为其分配和初始化 <code>AVIOContext</code>。<code>AVIOContext</code> 是 FFmpeg 中用于管理输入/输出操作的结构体。通过这行代码，可以将输出文件与 <code>AVFormatContext</code> 关联起来，从而能够将<strong>编码后的数据写入该文件</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *out_url = <span class=\"string\">&quot;test_mux.mp4&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">re = <span class=\"built_in\">avio_open</span>(&amp;ec-&gt;pb, out_url, AVIO_FLAG_WRITE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avio_open</span><span class=\"params\">(AVIOContext **s, <span class=\"type\">const</span> <span class=\"type\">char</span> *url, <span class=\"type\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVIOContext \\**s</code></strong>：这是一个指向 <code>AVIOContext</code> 指针的指针，表示用于文件 I/O 操作的上下文。<code>avio_open</code> 函数会为指定的文件分配并初始化一个 <code>AVIOContext</code>，并通过这个指针返回。</li>\n<li><strong><code>const char *url</code></strong>：这是输出文件的路径或 URL。在这段代码中，<code>out_url</code> 是文件路径的字符串。例如，如果你想创建一个名为 <code>&quot;output.mp4&quot;</code> 的文件，则 <code>out_url</code> 可以是 <code>&quot;output.mp4&quot;</code>。</li>\n<li><strong><code>int flags</code></strong>：这是一个标志位，用于指定文件的打开模式。在这种情况下，使用 <code>AVIO_FLAG_WRITE</code>，表示<strong>以写入模式打开文件</strong>。</li>\n</ul>\n<h3 id=\"（八）\">（八）</h3>\n<p>为新创建的输出视频流（<code>mvs</code>）设置时间基数（<code>time_base</code>）并复制输入视频流（<code>vs</code>）的编解码参数（<code>codecpar</code>），以确保输出的视频流与输入的视频流在时间轴和编码参数上保持一致。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (vs)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmvs-&gt;time_base = vs-&gt;time_base;  <span class=\"comment\">// 时间基数与原视频一致</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从解封装复制参数</span></span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_copy</span>(mvs-&gt;codecpar, vs-&gt;codecpar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【<strong>提问：为什么要进行复制，直接使用不行吗？</strong>】</p>\n<p>直接使用 <code>vs</code> 的参数而不进行赋值或复制是不行的，原因在于 <code>vs</code> 是一个指向<strong>输入文件</strong>中流的指针，而 <code>mvs</code> 是<strong>输出文件</strong>中流的指针。</p>\n<p>这两个指针分别属于不同的 <code>AVFormatContext</code>，它们代表的是两个不同的媒体文件的上下文和状态。</p>\n<ol>\n<li>关于<code>vs</code>的<strong>输入文件流</strong>代码片段：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVFormatContext* ic = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_open_input</span>(&amp;ic, url, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 打开输入文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取媒体信息和流信息</span></span><br><span class=\"line\"><span class=\"built_in\">avformat_find_stream_info</span>(ic, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找视频流</span></span><br><span class=\"line\">AVStream* vs = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ic-&gt;nb_streams; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ic-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class=\"line\">        vs = ic-&gt;streams[i];</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>里面通过<code>avformat_find_stream_info(ic, NULL);</code>对<code>AVFormatContext *ic</code>进行初始化，并通过<code>ic</code>初始化<code>vs</code>。</p>\n<ol start=\"2\">\n<li>关于<code>mvs</code>的<strong>输出文件流</strong>代码片段：</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVFormatContext* ec = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">re = <span class=\"built_in\">avformat_alloc_output_context2</span>(&amp;ec, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, out_url);  <span class=\"comment\">// 创建输出文件的上下文</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加视频流到输出文件中</span></span><br><span class=\"line\">AVStream* mvs = <span class=\"built_in\">avformat_new_stream</span>(ec, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>里面通过<code>avformat_alloc_output_context2(&amp;ec, NULL, NULL, out_url);</code>对<code>AVFormatContext *ec</code>进行初始化，并通过<code>ec</code>初始化<code>mvs</code>。</p>\n<h3 id=\"（九）\">（九）</h3>\n<p>用于将媒体文件的头部信息（header）<strong>写入到输出文件中</strong>。这个头部信息包含了文件的全局元数据和每个流（如音频流、视频流）的编解码参数。写入文件头是<strong>准备输出文件</strong>的关键步骤之一，确保文件格式正确，并为后续的音视频数据写入做好准备。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">avformat_write_header</span>(ec, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avformat_write_header</span><span class=\"params\">(AVFormatContext *s, AVDictionary **options)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVFormatContext *s</code></strong>：这是一个指向 <code>AVFormatContext</code> 结构体的指针，表示<strong>输出文件</strong>的上下文。在这段代码中，<code>ec</code> 是之前使用 <code>avformat_alloc_output_context2</code> 创建并初始化的 <code>AVFormatContext</code>，用于管理输出文件的信息。</li>\n<li><strong><code>AVDictionary \\**options</code></strong>：这是一个指向 <code>AVDictionary</code> 指针的指针，用于设置额外的选项或元数据。通常在不需要设置额外选项时，这里传递 <code>NULL</code>。</li>\n</ul>\n<h3 id=\"（十）\">（十）</h3>\n<p>在视频和音频处理过程中，时间戳 (PTS，Presentation Timestamp) 是一个非常重要的概念，它表示<strong>解码后</strong>的帧在播放时应该展示的时间点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (vs &amp;&amp; vs-&gt;time_base.num &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> t = (<span class=\"type\">double</span>)vs-&gt;time_base.den / (<span class=\"type\">double</span>)vs-&gt;time_base.num;  <span class=\"comment\">// den分母 / num分子 </span></span><br><span class=\"line\">\t\tbegin_pts = begin_sec * t;  <span class=\"comment\">// begin对应的pts</span></span><br><span class=\"line\">\t\tend_pts = end_sec * t;  <span class=\"comment\">// end对应的pts</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理音频的pts</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (as &amp;&amp; as-&gt;time_base.num &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tbegin_audio_pts = begin_sec * ((<span class=\"type\">double</span>)as-&gt;time_base.den / (<span class=\"type\">double</span>)as-&gt;time_base.num);</span><br></pre></td></tr></table></figure>\n<p><strong>时间基数 (<code>time_base</code>)</strong></p>\n<ul>\n<li><code>time_base</code> 是一个 <code>AVRational</code> 结构体，表示<strong>时间戳的单位</strong>。它通常是一个分数，表示一秒被分成多少个单位。例如，如果 <code>time_base = &#123;1, 1000&#125;</code>，表示时间戳的单位是毫秒（1 秒 = 1000 毫秒）。</li>\n</ul>\n<p><strong>计算转换因子</strong></p>\n<p>这里计算了一个转换因子 <code>t</code>，表示每秒钟对应的 PTS 值。<code>time_base</code> 是一个分数，表示每 <code>num</code> 个单位内经过 <code>den</code> 个时间单位。因此，每秒对应的 PTS 值是 <code>den / num</code>。这个因子 <code>t</code> 用于将秒转换为 PTS。</p>\n<ul>\n<li>假设 <code>time_base = &#123;1, 1000&#125;</code>，这意味着时间基数是 1 毫秒（1 秒 = 1000 毫秒）。<code>t</code> 的计算结果为 <code>1000 / 1 = 1000</code>，<strong>表示每秒钟有 1000 个 PTS 单位</strong>。</li>\n</ul>\n<p><strong>计算 <code>begin_pts</code> 和 <code>end_pts</code></strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin_pts = begin_sec * t;  <span class=\"comment\">// begin 对应的 PTS</span></span><br><span class=\"line\">end_pts = end_sec * t;  <span class=\"comment\">// end 对应的 PTS</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>begin_sec * t</code>：计算给定的开始时间 <code>begin_sec</code>（如 10 秒）对应的 PTS 值。假设 <code>begin_sec = 10</code> 且 <code>t = 1000</code>，则 <code>begin_pts = 10 * 1000 = 10000</code>。这意味着在<strong>时间轴上 10 秒对应的 PTS 值是 10000</strong>。</li>\n<li><code>end_sec * t</code>：计算给定的结束时间 <code>end_sec</code>（如 20 秒）对应的 PTS 值。同样地，如果 <code>end_sec = 20</code> 且 <code>t = 1000</code>，则 <code>end_pts = 20 * 1000 = 20000</code>。这意味着在<strong>时间轴上 20 秒对应的 PTS 值是 20000</strong>。</li>\n</ul>\n<p><strong>为什么要这样计算？</strong></p>\n<ol>\n<li><strong>精确定位</strong>：PTS 是流中每一帧的时间戳，通过计算 <code>begin_pts</code> 和 <code>end_pts</code>，你可以精确地定位到流中的哪一帧对应于你希望截取的时间段（如 10 秒到 20 秒）。</li>\n<li><strong>用于剪辑操作</strong>：在进行视频剪辑或提取操作时，你需要知道在给定的时间范围内应该提取哪些帧。通过计算 PTS，你可以告诉 FFmpeg 从哪里开始读取帧，以及何时停止。</li>\n<li><strong>与时间基数一致</strong>：因为不同的流可能有不同的时间基数（<code>time_base</code>），所以直接用秒数进行操作是不准确的。通过将秒数转换为 PTS，可以确保操作与流的时间基数一致，从而保证了时间精度。</li>\n</ol>\n<h3 id=\"（十一）\">（十一）</h3>\n<p><code>av_seek_frame</code> 函数，用于在媒体文件中<strong>查找并定位到指定的帧位置</strong>。具体来说，这行代码尝试在输入文件的指定流（通常是视频流）中，按照给定的时间戳 <code>begin_pts</code> 查找最接近的关键帧位置，以便从这个位置开始读取或处理数据。</p>\n<p><strong>这个函数也可以用作进度条的拖动</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re = <span class=\"built_in\">av_seek_frame</span>(ic, vs-&gt;index, begin_pts, </span><br><span class=\"line\">\t\t\tAVSEEK_FLAG_FRAME || AVSEEK_FLAG_BACKWARD);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">av_seek_frame</span><span class=\"params\">(AVFormatContext *s, <span class=\"type\">int</span> stream_index, <span class=\"type\">int64_t</span> timestamp, <span class=\"type\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li>\n<p><strong><code>AVFormatContext *s</code></strong>：这是指向 <code>AVFormatContext</code> 的指针，表示<strong>输入媒体文件的上下文</strong>。在这行代码中，<code>ic</code> 是输入文件的上下文，包含了文件的流信息、解封装器等。</p>\n</li>\n<li>\n<p><strong><code>int stream_index</code></strong>：表示要在其中进行查找的流的索引。在这行代码中，<code>vs-&gt;index</code> 是视频流的索引，表示希望在视频流中执行查找操作。</p>\n</li>\n<li>\n<p><strong><code>int64_t timestamp</code></strong>：这是一个时间戳，表示要查找的目标位置。在这行代码中，<code>begin_pts</code> 是之前计算的 PTS 值，表示希望查找到的时间点（对应于实际时间，比如10秒）。</p>\n</li>\n<li>\n<p><strong><code>int flags</code></strong>：这是一个标志位，用于控制查找行为。常用的标志包括：</p>\n<ul>\n<li><strong><code>AVSEEK_FLAG_BACKWARD</code></strong>：向后查找，即查找小于等于指定时间戳的最接近的关键帧。</li>\n<li><strong><code>AVSEEK_FLAG_FRAME</code></strong>：按照帧进行查找，通常与其他标志结合使用。</li>\n<li><strong><code>AVSEEK_FLAG_ANY</code></strong>：查找可以是关键帧，也可以是非关键帧（一般用于特定情况）。</li>\n</ul>\n<p>在这段代码中，使用了 <code>AVSEEK_FLAG_FRAME || AVSEEK_FLAG_BACKWARD</code>，表示希望找到小于或等于 <code>begin_pts</code> 的最接近的关键帧，并且以帧为单位进行查找。</p>\n</li>\n</ul>\n<p><strong>功能和作用</strong></p>\n<ol>\n<li><strong>定位到指定时间段</strong>：\n<ul>\n<li>这行代码的目的是在视频流中找到最接近 <code>begin_pts</code> 的关键帧位置，并将文件读取位置移动到这个位置。这对于在媒体文件中准确定位到某个时间段非常重要，尤其是在进行剪辑或播放操作时。</li>\n</ul>\n</li>\n<li><strong>确保从关键帧开始</strong>：\n<ul>\n<li>使用 <code>AVSEEK_FLAG_BACKWARD</code> 标志<strong>确保查找操作找到的帧是一个关键帧</strong>，因为解码通常必须从关键帧开始。如果不是从关键帧开始，后续的帧可能无法正确解码。</li>\n</ul>\n</li>\n<li><strong>优化数据处理</strong>：\n<ul>\n<li>查找到合适的关键帧后，可以更高效地从这个位置开始读取和处理数据，避免了不必要的帧解码操作。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"（十二）\">（十二）</h3>\n<ul>\n<li>\n<p>使用 <code>av_rescale_q_rnd</code> 函数将 PTS 和 DTS 从<strong>输入流</strong>的时间基转换到<strong>输出流</strong>的时间基。</p>\n</li>\n<li>\n<p>减去 <code>offset_pts</code>，调整时间戳，使其在输出流中从正确的时间点开始。</p>\n</li>\n<li>\n<p><code>AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX</code> 是用于控制舍入方式的标志，确保时间戳的舍入行为在最小和最大值范围内正确执行。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkt.pts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt.pts - offset_pts, in_stream-&gt;time_base,</span><br><span class=\"line\">    out_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">);</span><br><span class=\"line\">pkt.dts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt.dts - offset_pts, in_stream-&gt;time_base,</span><br><span class=\"line\">    out_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">);</span><br><span class=\"line\">pkt.duration = <span class=\"built_in\">av_rescale_q</span>(pkt.duration, in_stream-&gt;time_base,</span><br><span class=\"line\">    out_stream-&gt;time_base);</span><br><span class=\"line\">pkt.pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int64_t</span> <span class=\"title\">av_rescale_q_rnd</span><span class=\"params\">(<span class=\"type\">int64_t</span> a, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVRational bq, AVRational cq, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"keyword\">enum</span> AVRounding round</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释</p>\n<ul>\n<li><strong><code>int64_t a</code></strong>：要转换的时间戳或其他值。通常，这个值表示一个时间戳，如 PTS（显示时间戳）或 DTS（解码时间戳）。</li>\n<li><strong><code>AVRational bq</code></strong>：输入时间戳的时间基（源时间基），是一个 <code>AVRational</code> 结构体，表示一个分数，通常用来描述时间单位。例如 <code>&#123;1, 1000&#125;</code> 表示时间单位是毫秒。</li>\n<li><strong><code>AVRational cq</code></strong>：输出时间戳的时间基（目标时间基），也是一个 <code>AVRational</code> 结构体。这个参数定义了目标时间基的时间单位。</li>\n<li><strong><code>enum AVRounding round</code></strong>：用于指定舍入模式的枚举值。舍入模式定义了在缩放过程中如何处理非整数结果，常用的舍入模式包括：\n<ul>\n<li><strong><code>AV_ROUND_ZERO</code></strong>：向零方向舍入（截断小数）。</li>\n<li><strong><code>AV_ROUND_INF</code></strong>：向最近的整数舍入。</li>\n<li><strong><code>AV_ROUND_DOWN</code></strong>：向下舍入（向负无穷方向）。</li>\n<li><strong><code>AV_ROUND_UP</code></strong>：向上舍入（向正无穷方向）。</li>\n<li><strong><code>AV_ROUND_NEAR_INF</code></strong>：向最近的整数舍入；如果刚好在两个整数中间，则选择绝对值较大的整数。</li>\n<li><strong><code>AV_ROUND_PASS_MINMAX</code></strong>：确保最小值和最大值不会溢出。</li>\n</ul>\n</li>\n</ul>\n<p><strong>计算过程</strong></p>\n<p>时间戳转换的公式如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = a * (cq.num * bq.den) / (cq.den * bq.num)</span><br></pre></td></tr></table></figure>\n<p>其中 <code>cq</code> 是目标时间基，<code>bq</code> 是源时间基。转换结果会应用舍入模式来决定最终的整数值。</p>\n<p><strong>代码示例</strong></p>\n<p>假设你有一个时间戳 <code>a</code>，它的时间基是 <code>&#123;1, 1000&#125;</code>（表示毫秒），你想要将其转换为另一种时间基 <code>&#123;1, 90000&#125;</code>（表示单位是 1/90000 秒，即常见的视频时间基），你可以使用如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int64_t</span> timestamp_ms = <span class=\"number\">5000</span>;  <span class=\"comment\">// 5 秒，单位为毫秒</span></span><br><span class=\"line\">AVRational src_time_base = &#123;<span class=\"number\">1</span>, <span class=\"number\">1000</span>&#125;;  <span class=\"comment\">// 源时间基：毫秒 bq</span></span><br><span class=\"line\">AVRational dst_time_base = &#123;<span class=\"number\">1</span>, <span class=\"number\">90000</span>&#125;;  <span class=\"comment\">// 目标时间基：1/90000 秒 cq</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int64_t</span> rescaled_pts = <span class=\"built_in\">av_rescale_q_rnd</span>(timestamp_ms, src_time_base, dst_time_base, AV_ROUND_NEAR_INF);</span><br></pre></td></tr></table></figure>\n<p>在这个例子中：</p>\n<ul>\n<li>你将 5000 毫秒转换为以 1/90000 秒为单位的时间戳。</li>\n<li>使用 <code>AV_ROUND_NEAR_INF</code> 确保舍入到最近的整数。</li>\n</ul>\n<h3 id=\"（十三）\">（十三）</h3>\n<p><code>av_interleaved_write_frame()</code> 是 FFmpeg 库中的一个函数，用于将数据包写入输出媒体文件中。它是处理多路复用器的关键函数，通常用于将编码后的音频、视频或其他媒体数据写入输出文件。它通常用于需要将<strong>多个流（如音频和视频）写入同一个文件的场景</strong>，确保数据的同步性。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re = <span class=\"built_in\">av_interleaved_write_frame</span>(ec, &amp;pkt);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">av_interleaved_write_frame</span><span class=\"params\">(AVFormatContext *s, AVPacket *pkt)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong><code>AVFormatContext *s</code></strong>: 这是一个指向 <code>AVFormatContext</code> 结构的指针，它代表了输出格式的上下文。这个结构包含了输出文件的格式信息、文件名、IO 上下文等。</p>\n<p><strong><code>AVPacket *pkt</code></strong>: 这是一个指向 <code>AVPacket</code> 结构的指针，<code>AVPacket</code> 代表了一个<strong>解码前或编码后的数据包</strong>。它包含了要写入的实际数据和相关的元数据，比如时间戳、数据大小等。</p>\n<h3 id=\"（十四）\">（十四）</h3>\n<p><code>av_write_trailer</code> 是 FFmpeg 库中的一个函数，用于在<strong>结束多媒体文件的写入操作时</strong>写入文件尾部的相关信息。这个函数通常在你完成所有音视频数据的写入后调用，以确保文件格式的完整性和正确性。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re = <span class=\"built_in\">av_write_trailer</span>(ec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">av_write_trailer</span><span class=\"params\">(AVFormatContext *s)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><strong><code>AVFormatContext \\*s</code></strong>：这是一个指向 <code>AVFormatContext</code> 结构体的指针，表示输出文件的上下文。在这段代码中，<code>ec</code> 是输出文件的上下文，包含了所有与文件格式、流信息和 I/O 操作相关的数据。</li>\n</ul>\n<p><strong>功能和作用</strong></p>\n<ol>\n<li><strong>写入文件尾部信息</strong>：\n<ul>\n<li><code>av_write_trailer</code> 函数会在<strong>输出文件的末尾写入必要的尾部信息</strong>，这些信息对于某些文件格式（如 MP4、MKV 等）是必需的。尾部信息通常包括索引数据、元数据和其他与流相关的信息，这些信息有助于播放器在播放文件时快速定位和访问数据。</li>\n</ul>\n</li>\n<li><strong>刷新缓冲区</strong>：\n<ul>\n<li>在写入文件尾部信息的过程中，FFmpeg 会确保所有缓存的数据被写入到输出文件中。这包括还没有写入的帧数据、流信息和其他需要在文件结束时写入的内容。</li>\n</ul>\n</li>\n<li><strong>关闭输出文件</strong>：\n<ul>\n<li>在写入完尾部信息后，<code>av_write_trailer</code> 会准备关闭输出文件。虽然它不会直接关闭文件，但它标志着写入操作的结束。通常在调用这个函数后，你会关闭文件 I/O 操作（例如通过 <code>avio_close</code> 或 <code>avio_closep</code> 函数）。</li>\n</ul>\n</li>\n</ol>\n","categories":[],"tags":[]},{"title":"AVPacket","url":"http://example.com/2024/08/18/AVPacket/","content":"<h2 id=\"基本介绍\">基本介绍</h2>\n<p><code>AVPacket</code> 是 FFmpeg 库中的一个重要结构体，用于表示音频、视频或字幕等媒体数据的一个数据包（packet）。在多媒体处理流程中，<code>AVPacket</code> 是最基本的传输和处理单元，它包含了<strong>编解码数据</strong>以及与数据相关的元信息，如时间戳、数据大小等。</p>\n<h2 id=\"AVPacket-的作用\"><code>AVPacket</code> 的作用</h2>\n<p><code>AVPacket</code> 是在解复用（demuxing）和复用（muxing）过程中传递音视频数据的结构体。解复用器从多媒体文件中提取出 <code>AVPacket</code>，解码器处理 <code>AVPacket</code> 中的数据，并生成帧（<code>AVFrame</code>）。同样，编码器会将帧编码成 <code>AVPacket</code>，复用器会将这些 <code>AVPacket</code> 写入多媒体文件。</p>\n<h2 id=\"AVPacket-结构体的主要成员\"><code>AVPacket</code> 结构体的主要成员</h2>\n<p>以下是 <code>AVPacket</code> 结构体中一些关键的成员变量及其作用：</p>\n<ul>\n<li><strong><code>uint8_t *data</code></strong>：指向数据包的实际数据。它包含了经过编码的音频或视频数据，通常是压缩的格式（如 H.264 视频或 AAC 音频）。</li>\n<li><strong><code>int size</code></strong>：表示数据包的大小，以字节为单位。这个值表示 <code>data</code> 指针指向的数据区域的大小。</li>\n<li><strong><code>int64_t pts</code></strong>：表示显示时间戳（Presentation Timestamp）。PTS 用于确定该数据包中的数据在播放时应该何时显示，确保音视频同步。</li>\n<li><strong><code>int64_t dts</code></strong>：表示解码时间戳（Decoding Timestamp）。DTS 用于指示解码器何时解码这个数据包。对于一些复杂的编码格式，如包含 B 帧的视频，DTS 和 PTS 可能不一样。</li>\n<li><strong><code>int64_t duration</code></strong>：表示该数据包在时间轴上的持续时间。这个值用于计算帧之间的显示间隔。</li>\n<li><strong><code>int stream_index</code></strong>：表示该数据包所属的流的索引。一个多媒体文件可能包含多个流（音频流、视频流、字幕流等），这个索引用于标识 <code>AVPacket</code> 属于哪个流。</li>\n<li><strong><code>int64_t pos</code></strong>：表示数据包在输入文件中的字节位置。这个值在某些情况下用于回溯或者调试。</li>\n<li><strong><code>int flags</code></strong>：用于指示数据包的特殊属性，如是否是关键帧（<code>AV_PKT_FLAG_KEY</code>）等。</li>\n<li><strong><code>AVBufferRef *buf</code></strong>：引用计数的缓冲区指针，用于管理 <code>AVPacket</code> 的数据内存。如果你复制或分配了 <code>AVPacket</code>，它帮助管理数据的生命周期。</li>\n</ul>\n<h2 id=\"PTS、DTS、duration介绍\">PTS、DTS、duration介绍</h2>\n<ol>\n<li><strong>PTS（Presentation Timestamp）</strong></li>\n</ol>\n<ul>\n<li><strong>含义</strong>：PTS 表示帧应该在<strong>什么时候被显示出来</strong>。它是控制视频或音频在播放时的<strong>显示顺序和时间</strong>的关键参数。</li>\n<li><strong>作用</strong>：PTS 用于确保帧在正确的时间被显示，从而保持音视频的同步。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>DTS（Decoding Timestamp）</strong></li>\n</ol>\n<ul>\n<li><strong>含义</strong>：DTS 表示帧应该在<strong>什么时候被解码</strong>。与 PTS 不同，DTS 用于控制帧的解码顺序。DTS 通常用于处理包含 B 帧（双向预测帧）的流，因为这些帧的解码顺序和显示顺序可能不同。</li>\n<li><strong>作用</strong>：DTS 确保解码器按正确的顺序处理帧，从而生成正确的图像序列。</li>\n</ul>\n<ol start=\"3\">\n<li><strong><code>duration</code>（持续时间）</strong></li>\n</ol>\n<ul>\n<li><strong>含义</strong>：<code>duration</code> 表示帧的持续时间，<strong>即在没有下一个帧到达之前</strong>，这个帧应该保持显示多长时间。</li>\n<li><strong>作用</strong>：它用于确定帧之间的间隔，以维持正确的帧率。</li>\n</ul>\n<p>关于<code>duration * num / den</code></p>\n<ul>\n<li><code>duration * num / den</code> 是将时间长度从一个时间基转换为另一个时间基的常用计算方式。</li>\n<li>它确保在进行时间戳操作时，<code>duration</code> 的单位能够正确匹配新的时间基，使得时间轴上的所有操作（如解码、显示等）都能够正确同步。</li>\n</ul>\n<p>【<strong>duration举例</strong>】</p>\n<p>假设：</p>\n<ul>\n<li><code>duration = 5000</code>（表示 5000 个时间单位）</li>\n<li>源时间基 <code>time_base = &#123;1, 1000&#125;</code>（表示单位是毫秒）</li>\n</ul>\n<p>那么：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">duration * num / den = 5000 * 1 / 1000</span><br><span class=\"line\">                     = 5000 / 1000</span><br><span class=\"line\">                     = 5</span><br></pre></td></tr></table></figure>\n<p>这意味着在新的时间基下，<code>duration</code> 对应的时<strong>间长度是 <code>5</code> 秒</strong>。</p>\n<p>【<strong>注意</strong>】：在编码的时候$PTS &gt;= DTS$</p>\n<h2 id=\"AVPacket-的生命周期\"><code>AVPacket</code> 的生命周期</h2>\n<ul>\n<li><strong>分配</strong>：在处理前，<code>AVPacket</code> 需要被分配内存。你可以使用 <code>av_init_packet()</code> 函数初始化 <code>AVPacket</code> 结构，或者使用 <code>av_packet_alloc()</code> 动态分配一个新的 <code>AVPacket</code>。</li>\n<li><strong>填充数据</strong>：在解复用时，<code>AVPacket</code> 由解复用器填充数据，并将数据传递给解码器。或者，在编码时，编码器将生成的数据填充到 <code>AVPacket</code> 中，然后传递给复用器。</li>\n<li><strong>释放</strong>：当一个 <code>AVPacket</code> 使用完毕后，需要释放它占用的内存。你可以使用 <code>av_packet_unref()</code> 来释放 <code>AVPacket</code> 持有的数据，并将其重置为默认状态。这样可以重复使用该 <code>AVPacket</code>。或者使用 <code>av_packet_free()</code> 来释放整个 <code>AVPacket</code> 结构体及其数据。</li>\n</ul>\n<h2 id=\"总结-3\">总结</h2>\n<p><code>AVPacket</code> 是 FFmpeg 中用于表示媒体数据包的重要结构体，它封装了音频、视频或字幕数据以及相关的元数据。在媒体处理过程中，<code>AVPacket</code> 是数据传递的基本单元，广泛应用于解复用、解码、编码和复用等过程中。了解并正确使用 <code>AVPacket</code> 对于有效地处理多媒体数据至关重要。</p>\n","categories":[],"tags":[]},{"title":"AVCodecParameters","url":"http://example.com/2024/08/18/AVCodecParameters/","content":"<p><code>AVCodecParameters</code> 是 FFmpeg 库中的一个数据结构，用于存储与媒体流（如视频流、音频流、字幕流等）<strong>相关的编解码参数</strong>。这些参数包括编解码器的类型、编码格式、分辨率、比特率、采样率等。<code>AVCodecParameters</code> 的引入是为了分离编解码器相关的参数信息，以便在不同的上下文中使用这些参数，而<strong>不需要依赖</strong>于实际的编解码器上下文。</p>\n<h3 id=\"AVCodecParameters-的主要成员变量\"><code>AVCodecParameters</code> 的主要成员变量</h3>\n<p>以下是 <code>AVCodecParameters</code> 结构中一些关键的成员变量及其作用：</p>\n<ul>\n<li><strong><code>enum AVMediaType codec_type</code></strong>：表示媒体类型，即流的类型。它是一个枚举类型，可能的值包括 <code>AVMEDIA_TYPE_VIDEO</code>、<code>AVMEDIA_TYPE_AUDIO</code>、<code>AVMEDIA_TYPE_SUBTITLE</code> 等。</li>\n<li><strong><code>enum AVCodecID codec_id</code></strong>：表示编解码器的 ID，指示该流使用的具体编解码器类型（例如 <code>AV_CODEC_ID_H264</code> 表示 H.264 视频编码，<code>AV_CODEC_ID_AAC</code> 表示 AAC 音频编码）。</li>\n<li><strong><code>int64_t bit_rate</code></strong>：流的比特率，表示每秒传输的比特数。比特率通常用于衡量视频或音频流的质量。<code>extradata_size</code> 表示额外数据的大小，而 <code>extradata</code> 是一个指向额外数据的指针。</li>\n<li><strong><code>int width</code></strong> 和 <strong><code>int height</code></strong>：对于视频流，这两个字段表示视频帧的宽度和高度（以像素为单位）。</li>\n<li><strong><code>int format</code></strong>：表示像素格式（对于视频流）或采样格式（对于音频流）。对于视频流，它通常是一个枚举值，如 <code>AV_PIX_FMT_YUV420P</code>，对于音频流，它表示音频样本格式，如 <code>AV_SAMPLE_FMT_FLTP</code>。</li>\n<li><strong><code>int sample_rate</code></strong>：对于音频流，表示音频的采样率（每秒钟采样的次数，单位为赫兹）。</li>\n<li><strong><code>int channels</code></strong>：对于音频流，表示音频通道的数量（如单声道、立体声等）。</li>\n<li><strong><code>uint64_t channel_layout</code></strong>：对于音频流，表示音频通道的布局，例如单声道、立体声、5.1声道等。它是一个位掩码，用于标识音频通道的位置。</li>\n<li><strong><code>int frame_size</code></strong>：对于音频流，表示每个音频帧中的样本数量。</li>\n<li><strong><code>int block_align</code></strong>：对于音频流，表示每个音频块的对齐大小。</li>\n<li><strong><code>int initial_padding</code></strong>：表示初始填充量，用于音频解码器缓冲的开始部分。</li>\n<li><strong><code>int profile</code></strong>：表示编解码器的配置文件（profile），用于确定编解码器的功能级别。</li>\n<li><strong><code>int level</code></strong>：表示编解码器的级别（level），通常用于视频流，表示编解码器的复杂度和性能要求。</li>\n</ul>\n<h3 id=\"用途\">用途</h3>\n<p><code>AVCodecParameters</code> 的主要用途是：</p>\n<ul>\n<li><strong>描述流的编码参数</strong>：它包含了关于流的所有编解码器相关信息，允许开发者在解码、编码、复用（muxing）、解复用（demuxing）等操作中使用这些参数。</li>\n<li><strong>传递和共享参数</strong>：在不同的组件（如解复用器、解码器、编码器等）之间共享和传递流的参数，而无需直接操作实际的编解码器上下文。</li>\n</ul>\n<h3 id=\"与-AVCodecContext-的关系\">与 <code>AVCodecContext</code> 的关系</h3>\n<ul>\n<li><code>AVCodecContext</code> 是另一个与编解码器相关的数据结构，<strong>包含更多的状态信息</strong>，并且用于实际的编码和解码操作。</li>\n<li><code>AVCodecParameters</code> <strong>主要用于传递参数</strong>，而 <code>AVCodecContext</code> 则用于<strong>实际的编解码过程</strong>。</li>\n<li>通过 <code>avcodec_parameters_to_context</code> 可以将 <code>AVCodecParameters</code> 中的参数复制到 <code>AVCodecContext</code> 中，用于初始化解码器或编码器。</li>\n</ul>\n","categories":[],"tags":[]},{"title":"AVStream、AVFormatContext","url":"http://example.com/2024/08/18/AVStream、AVFormatContext/","content":"<h2 id=\"AVStream\">AVStream</h2>\n<p><code>AVStream</code> 是 FFmpeg 中用于表示媒体文件中每个流（如视频流、音频流、字幕流等）的数据结构。每个媒体文件通常包含一个或多个流，例如一个视频文件可能包含一个视频流和一个音频流。</p>\n<h2 id=\"AVFormatContext\">AVFormatContext</h2>\n<p><code>AVFormatContext</code> 是 FFmpeg 库中的一个核心数据结构，用于表示一个多媒体文件或流的上下文。它包含了文件或流的全局信息以及其中的各个流（如视频流、音频流、字幕流等）的详细信息。这个结构体在处理多媒体文件的过程中起着至关重要的作用，几乎所有与多媒体文件相关的操作都依赖于它。</p>\n<h3 id=\"AVFormatContext-的主要作用\"><code>AVFormatContext</code> 的主要作用</h3>\n<p><code>AVFormatContext</code> 是处理多媒体文件的中心，它负责：</p>\n<ol>\n<li><strong>管理文件的全局信息</strong>：包括文件的格式、持续时间、比特率等。</li>\n<li><strong>管理文件中的各个流</strong>：如视频流、音频流、字幕流等，每个流的信息都保存在 <code>AVStream</code> 结构中，<code>AVFormatContext</code> 通过一个流数组（<code>streams</code>）来管理这些流。</li>\n<li><strong>与多媒体文件的 I/O 操作相关</strong>：它包含文件的输入输出上下文，可以通过它来打开、读取、写入文件。</li>\n<li><strong>与编解码器交互</strong>：它存储了与多媒体文件中各个流的编解码器相关的参数。</li>\n</ol>\n<p><code>AVFormatContext</code> 是 FFmpeg 库中的一个核心数据结构，用于表示一个多媒体文件或流的上下文。它包含了文件或流的全局信息以及其中的各个流（如视频流、音频流、字幕流等）的详细信息。这个结构体在处理多媒体文件的过程中起着至关重要的作用，几乎所有与多媒体文件相关的操作都依赖于它。</p>\n<h3 id=\"AVFormatContext-的主要作用-2\"><code>AVFormatContext</code> 的主要作用</h3>\n<p><code>AVFormatContext</code> 是处理多媒体文件的中心，它负责：</p>\n<ol>\n<li><strong>管理文件的全局信息</strong>：包括文件的格式、持续时间、比特率等。</li>\n<li><strong>管理文件中的各个流</strong>：如视频流、音频流、字幕流等，每个流的信息都保存在 <code>AVStream</code> 结构中，<code>AVFormatContext</code> 通过一个流数组（<code>streams</code>）来管理这些流。</li>\n<li><strong>与多媒体文件的 I/O 操作相关</strong>：它包含文件的输入输出上下文，可以通过它来打开、读取、写入文件。</li>\n<li><strong>与编解码器交互</strong>：它存储了与多媒体文件中各个流的编解码器相关的参数。</li>\n</ol>\n<h3 id=\"AVFormatContext-的主要成员变量\"><code>AVFormatContext</code> 的主要成员变量</h3>\n<p>以下是 <code>AVFormatContext</code> 中一些重要的成员变量：</p>\n<ul>\n<li><strong><code>AVInputFormat *iformat</code></strong>：输入文件的格式，如果这是一个输入文件，这个指针指向相应的格式结构体。</li>\n<li><strong><code>AVOutputFormat *oformat</code></strong>：输出文件的格式，如果这是一个输出文件，这个指针指向相应的格式结构体。</li>\n<li><strong><code>void *priv_data</code></strong>：私有数据指针，用于存储特定格式的私有数据。</li>\n<li><strong><code>AVIOContext *pb</code></strong>：指向 <code>AVIOContext</code> 的指针，表示输入输出的上下文，用于管理 I/O 操作。</li>\n<li><strong><code>unsigned int nb_streams</code></strong>：表示媒体文件中<strong>包含的流的数量</strong>（如有多少个视频流、音频流等）。</li>\n<li><strong><code>AVStream \\**streams</code></strong>：一个指向 <code>AVStream</code> 指针数组的指针，<strong>保存了文件中所有的流信息</strong>。</li>\n<li><strong><code>int64_t duration</code></strong>：媒体文件的持续时间（以微秒为单位）。</li>\n<li><strong><code>int bit_rate</code></strong>：文件的总比特率。</li>\n<li><strong><code>char filename[1024]</code></strong>：文件名或 URL，保存当前处理的文件的路径。</li>\n</ul>\n<h3 id=\"AVFormatContext-的使用流程\"><code>AVFormatContext</code> 的使用流程</h3>\n<p>在典型的使用流程中，<code>AVFormatContext</code> 的操作步骤如下：</p>\n<ol>\n<li><strong>分配并初始化</strong>：\n<ul>\n<li>使用 <code>avformat_alloc_context()</code> 或者通过 <code>avformat_open_input()</code> 直接创建并打开一个媒体文件，<code>AVFormatContext</code> 被初始化。</li>\n</ul>\n</li>\n<li><strong>打开多媒体文件</strong>：\n<ul>\n<li>使用 <code>avformat_open_input()</code> 函数将 <code>AVFormatContext</code> 与一个多媒体文件关联，并打开该文件。</li>\n</ul>\n</li>\n<li><strong>读取流信息</strong>：\n<ul>\n<li>使用 <code>avformat_find_stream_info()</code> 函数分析文件，获取所有流的信息，并将这些信息填充到 <code>AVFormatContext</code> 的 <code>streams</code> 数组中。</li>\n</ul>\n</li>\n<li><strong>访问和处理流数据</strong>：\n<ul>\n<li>使用 <code>av_read_frame()</code> 从文件中读取音频或视频帧，通过 <code>streams</code> 数组中的 <code>AVStream</code> 访问和处理这些帧。</li>\n</ul>\n</li>\n<li><strong>写入输出文件</strong>（如果是处理输出文件的场景）：\n<ul>\n<li>使用 <code>avformat_write_header()</code> 和 <code>av_interleaved_write_frame()</code> 等函数，向输出文件中写入数据。</li>\n</ul>\n</li>\n<li><strong>释放资源</strong>：\n<ul>\n<li>使用 <code>avformat_close_input()</code> 关闭文件，释放 <code>AVFormatContext</code> 及其相关资源。</li>\n</ul>\n</li>\n</ol>\n","categories":[],"tags":[]},{"title":"AVCodec、AVCodecContext","url":"http://example.com/2024/08/17/AVCodec、AVCodecContext/","content":"<h2 id=\"AVCodec\">AVCodec</h2>\n<p><code>AVCodec</code> 是 FFmpeg 中用于表示一个编解码器（encoder 或 decoder）的结构体。编解码器是用于对音频、视频、字幕等媒体数据进行编码或解码的核心组件。<code>AVCodec</code> 结构体包含了编解码器的基本信息和功能指针，FFmpeg 通过这个结构体来管理和操作各种编解码器。</p>\n<h3 id=\"AVCodec-结构体的基本介绍\"><code>AVCodec</code> 结构体的基本介绍</h3>\n<ul>\n<li><strong>用途</strong>：<code>AVCodec</code> 结构体用于描述 FFmpeg 支持的每一个编解码器（如 H.264 解码器、MP3 编码器等）。它既可以表示一个解码器，也可以表示一个编码器。</li>\n<li><strong>位置</strong>：<code>AVCodec</code> 结构体定义在 <code>libavcodec/avcodec.h</code> 头文件中。</li>\n</ul>\n<h3 id=\"如何使用-AVCodec\">如何使用 <code>AVCodec</code></h3>\n<p><code>AVCodec</code> 结构体通常<strong>不会直接使用</strong>，而是与 <code>AVCodecContext</code> 一起配合使用。下面是一个简单的使用流程：</p>\n<ol>\n<li>\n<p><strong>查找编解码器</strong>：</p>\n<ul>\n<li>\n<p>使用 <code>avcodec_find_decoder()</code> 或 <code>avcodec_find_encoder()</code> 函数查找你需要的编解码器，并获取相应的 <code>AVCodec</code> 指针。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVCodec *codec = <span class=\"built_in\">avcodec_find_decoder</span>(AV_CODEC_ID_H264);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!codec) &#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Decoder not found!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>分配上下文</strong>：</p>\n<ul>\n<li>\n<p>使用 <code>avcodec_alloc_context3()</code> 为找到的编解码器分配一个上下文（<code>AVCodecContext</code>）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVCodecContext *context = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>打开编解码器</strong>：</p>\n<ul>\n<li>\n<p>使用 <code>avcodec_open2()</code> 打开编解码器，将其与上下文关联。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_open2</span>(context, codec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    std::cerr &lt;&lt; <span class=\"string\">&quot;Could not open codec!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>进行编码或解码</strong>：</p>\n<ul>\n<li>使用 <code>avcodec_send_packet()</code> 和 <code>avcodec_receive_frame()</code>（用于解码）或 <code>avcodec_send_frame()</code> 和 <code>avcodec_receive_packet()</code>（用于编码）来处理数据。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结\">总结</h3>\n<p><code>AVCodec</code> 是 FFmpeg 中核心的结构体，用于描述和管理各种编解码器。它包含了有关编解码器的所有必要信息，并通过函数指针与实际的编码或解码操作相关联。用户通常通过查找、分配上下文、打开编解码器来使用它，然后进行实际的数据处理。</p>\n<h2 id=\"ACodecContext\">ACodecContext</h2>\n<p><code>AVCodecContext</code> 是 FFmpeg 中用于管理和配置编解码器的核心结构体。它保存了与特定编解码器相关的所有状态、参数和设置，是编码和解码操作的上下文环境。无论是处理音频、视频，还是其他媒体类型，<code>AVCodecContext</code> 都是必须的。</p>\n<h3 id=\"AVCodecContext-的主要作用\"><code>AVCodecContext</code> 的主要作用</h3>\n<ul>\n<li><strong>配置编解码器</strong>：<code>AVCodecContext</code> 保存了编解码器的配置参数，如比特率、分辨率、帧率、采样率、通道数等。通过设置这些参数，你可以控制编码或解码的具体行为。</li>\n<li><strong>保存状态</strong>：在实际的编码或解码过程中，<code>AVCodecContext</code> 还保存了编解码器的运行状态，例如当前处理的位置、内部缓冲区的内容等。</li>\n<li><strong>处理流程的核心</strong>：每次调用 <code>avcodec_send_frame()</code>、<code>avcodec_receive_packet()</code>、<code>avcodec_send_packet()</code> 或 <code>avcodec_receive_frame()</code> 时，<code>AVCodecContext</code> 是函数的主要参数，因为它提供了所有操作所需的上下文。</li>\n</ul>\n<h3 id=\"如何使用-AVCodecContext\">如何使用 <code>AVCodecContext</code></h3>\n<ol>\n<li>\n<p><strong>分配和初始化</strong>：</p>\n<ul>\n<li>\n<p>你可以使用 <code>avcodec_alloc_context3(codec)</code> 来分配并初始化一个 <code>AVCodecContext</code>，<code>codec</code> 是一个指向 <code>AVCodec</code> 的指针，表示你想使用的具体编解码器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVCodecContext *context = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理错误：分配失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>设置参数</strong>：</p>\n<ul>\n<li>\n<p>分配并初始化上下文后，你可以设置必要的参数，例如比特率、分辨率、像素格式等。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context-&gt;bit_rate = <span class=\"number\">400000</span>;  <span class=\"comment\">// 设置比特率为 400kbps</span></span><br><span class=\"line\">context-&gt;width = <span class=\"number\">1280</span>;       <span class=\"comment\">// 设置视频宽度</span></span><br><span class=\"line\">context-&gt;height = <span class=\"number\">720</span>;       <span class=\"comment\">// 设置视频高度</span></span><br><span class=\"line\">context-&gt;time_base = (AVRational)&#123;<span class=\"number\">1</span>, <span class=\"number\">25</span>&#125;;  <span class=\"comment\">// 设置时间基数</span></span><br><span class=\"line\">context-&gt;pix_fmt = AV_PIX_FMT_YUV420P;     <span class=\"comment\">// 设置像素格式</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>打开编解码器</strong>：</p>\n<ul>\n<li>\n<p>使用 <code>avcodec_open2()</code> 打开编解码器并将其与上下文关联。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">avcodec_open2</span>(context, codec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理错误：无法打开编解码器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>处理数据</strong>：</p>\n<ul>\n<li>一旦打开了编解码器，你可以通过 <code>avcodec_send_packet()</code> 和 <code>avcodec_receive_frame()</code>（解码）或 <code>avcodec_send_frame()</code> 和 <code>avcodec_receive_packet()</code>（编码）来处理数据。</li>\n</ul>\n</li>\n<li>\n<p><strong>释放资源</strong>：</p>\n<ul>\n<li>\n<p>编解码操作完成后，使用 <code>avcodec_free_context()</code> 来释放 <code>AVCodecContext</code> 及其分配的所有资源。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">avcodec_free_context</span>(&amp;context);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"总结-2\">总结</h3>\n<p><code>AVCodecContext</code> 是 FFmpeg 编解码操作中的关键结构体，保存了编解码器的所有必要信息和状态。通过配置 <code>AVCodecContext</code>，你可以精细控制编码和解码的行为，并管理整个编解码过程中的数据流。它与 <code>AVCodec</code> 和其他核心结构体一起，构成了 FFmpeg 强大的多媒体处理框架。</p>\n","categories":[],"tags":[]},{"title":"ffmpeg库进行解码","url":"http://example.com/2024/08/17/ffmpeg库进行解码/","content":"<h2 id=\"代码-16\">代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t这段代码的作用是使用 FFmpeg 库解码 H.264 视频文件。</span></span><br><span class=\"line\"><span class=\"comment\">\t它读取 H.264 编码的视频文件 test.h264，将数据分割成帧，并将每一帧数据传递给解码器，解码后输出帧格式。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;  <span class=\"comment\">// 指定函数是C语言函数，函数名不包含重载标注</span></span><br><span class=\"line\">\t<span class=\"comment\">// 引入ffmpeg头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/opt.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 预处理指令导入库</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avcodec.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 分割h264 存入AVPacket</span></span><br><span class=\"line\">\tstring filename = <span class=\"string\">&quot;test.h264&quot;</span>;</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(filename, ios::binary)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ifs) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓冲区，用于存储从文件读取的原始数据块。</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> inbuf[<span class=\"number\">4096</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVCodecID codec_id = AV_CODEC_ID_H264;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ========（一）========</span></span><br><span class=\"line\">\t<span class=\"comment\">// 找到指定的解码器（如 H.264 解码器）。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> codec = <span class=\"built_in\">avcodec_find_decoder</span>(codec_id);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 分配并初始化一个 AVCodecContext。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 打开这个解码器，并将其与上下文 c 关联，准备好解码操作。</span></span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_open2</span>(c, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 分割上下文</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ========（二）========</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化一个解析器（parser）</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> parser = <span class=\"built_in\">av_parser_init</span>(codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建并分配一个 AVPacket，用于存储原始数据分割后的单帧数据。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pkt = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建并分配一个 AVFrame，用于存储解码后的帧数据。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> frame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!ifs.<span class=\"built_in\">eof</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次读取 4096 字节的数据到 inbuf 缓冲区中。</span></span><br><span class=\"line\">\t\tifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)inbuf, <span class=\"built_in\">sizeof</span>(inbuf));</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> data_size = ifs.<span class=\"built_in\">gcount</span>();  <span class=\"comment\">// 读取的字节数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (data_size &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> data = inbuf;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (data_size &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 一次有多帧数据</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// =======（三）=======</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 函数将读取到的数据解析成一个个完整的帧，存储在 pkt 中。</span></span><br><span class=\"line\">             <span class=\"comment\">// data 和 data_size 用来跟踪剩余未处理的数据。</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> ret = <span class=\"built_in\">av_parser_parse2</span>(parser, c,</span><br><span class=\"line\">\t\t\t\t&amp;pkt-&gt;data, &amp;pkt-&gt;size,  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">\t\t\t\tdata, data_size,  <span class=\"comment\">// 输入</span></span><br><span class=\"line\">\t\t\t\tAV_NOPTS_VALUE, AV_NOPTS_VALUE, <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdata += ret;</span><br><span class=\"line\">\t\t\tdata_size -= ret;  <span class=\"comment\">// 已经处理的数据</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 处理已经存储的数据pkt-&gt;size</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pkt-&gt;size)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// cout &lt;&lt; pkt-&gt;size &lt;&lt; &quot; &quot; &lt;&lt; flush;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 发送packet到解码线程</span></span><br><span class=\"line\">\t\t\t\tret = <span class=\"built_in\">avcodec_send_packet</span>(c, pkt);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获取多帧解码数据</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (ret &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 每次会调用av_frame_unref </span></span><br><span class=\"line\">\t\t\t\t\tret = <span class=\"built_in\">avcodec_receive_frame</span>(c, frame);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                     <span class=\"comment\">// =======（四）=======</span></span><br><span class=\"line\">\t\t\t\t\tcout &lt;&lt; frame-&gt;format &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过发送一个 NULL 数据包，通知编码器或解码器当前已没有更多的数据需要处理，</span></span><br><span class=\"line\">    <span class=\"comment\">// 编码器或解码器可以开始《处理并输出剩余的缓冲数据》。</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"built_in\">avcodec_send_packet</span>(c, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ret &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">avcodec_receive_frame</span>(c, frame);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; frame-&gt;format &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">av_parser_close</span>(parser);</span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_free</span>(&amp;frame);</span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_free_context</span>(&amp;c);</span><br><span class=\"line\">\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>【<strong>运行结果</strong>】</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408171535042.png\" alt=\"image-20240817153459901\" style=\"zoom: 80%;\" />\n<h3 id=\"（一）-4\">（一）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> codec = <span class=\"built_in\">avcodec_find_decoder</span>(codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AVCodec* <span class=\"title\">avcodec_find_decoder</span><span class=\"params\">(<span class=\"keyword\">enum</span> AVCodecID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>【<strong>作用</strong>】：这行代码的作用是通过给定的编解码器 ID 来查找并返回一个指向相应解码器的指针。它是 FFmpeg 中用于初始化解码操作的第一步。</p>\n<p><strong>参数 <code>codec_id</code></strong>：</p>\n<ul>\n<li><code>codec_id</code> 是一个枚举类型 <code>AVCodecID</code>，用于标识你想要使用的具体编解码器。例如，<code>AV_CODEC_ID_H264</code> 是 H.264 解码器的标识符。</li>\n<li>在这段代码中，<code>codec_id</code> 是通过提前定义或通过某种方式传递进来的，代表需要使用的解码器类型。</li>\n</ul>\n<p><strong>返回值 <code>codec</code></strong>：</p>\n<ul>\n<li><code>avcodec_find_decoder(codec_id)</code> 返回一个 <code>const AVCodec*</code> 类型的指针，指向找到的解码器（<code>AVCodec</code>）结构体。</li>\n<li>如果成功找到解码器，返回一个有效的指针；如果没有找到对应的解码器，返回 <code>NULL</code>。</li>\n</ul>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> c = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数签名</span></span><br><span class=\"line\"><span class=\"function\">AVCodecContext* <span class=\"title\">avcodec_alloc_context3</span><span class=\"params\">(<span class=\"type\">const</span> AVCodec *codec)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>【<strong>作用</strong>】：这行代码的作用是为指定的编解码器（编码器或解码器）分配并初始化一个编解码器上下文（<code>AVCodecContext</code>）。这个上下文将包含编解码操作所需的所有配置信息和状态。</p>\n<p><strong>参数 <code>codec</code></strong>：</p>\n<ul>\n<li><code>codec</code> 是一个指向 <code>AVCodec</code> 结构体的指针，表示你将要使用的具体编解码器（如 H.264、H.265 编解码器）。</li>\n<li>通过 <code>avcodec_find_decoder()</code> 或 <code>avcodec_find_encoder()</code> 找到的 <code>AVCodec</code> 指针会作为参数传递给 <code>avcodec_alloc_context3()</code>。</li>\n<li>如果 <code>codec</code> 参数为 <code>NULL</code>，则函数会创建一个通用的 <code>AVCodecContext</code>，稍后可以通过其他方式设置编码器或解码器。</li>\n</ul>\n<p><strong>返回值 <code>c</code></strong>：</p>\n<ul>\n<li><code>avcodec_alloc_context3()</code> 返回一个指向 <code>AVCodecContext</code> 结构体的指针，即 <code>c</code>。</li>\n<li>这个返回的 <code>AVCodecContext</code> 是新分配的，并初始化为默认值的上下文，它可以在后续操作中进行配置和使用。</li>\n</ul>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">avcodec_open2</span>(c, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avcodec_open2</span><span class=\"params\">(AVCodecContext *avctx, <span class=\"type\">const</span> AVCodec *codec, AVDictionary **options)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>【<strong>作用</strong>】：用于打开一个编解码器（编码器或解码器），并将其与指定的编解码器上下文（<code>AVCodecContext</code>）<strong>关联起来</strong>，使其准备好进行编码或解码操作。</p>\n<p><strong>参数解释</strong></p>\n<ol>\n<li><code>AVCodecContext *avctx</code>：\n<ul>\n<li>这是一个指向 <code>AVCodecContext</code> 的指针，表示编解码器的上下文。上下文包含了编解码器运行所需的所有配置信息，例如比特率、分辨率、帧率等。</li>\n<li>在调用 <code>avcodec_open2</code> 之前，<code>AVCodecContext</code> 通常已经通过 <code>avcodec_alloc_context3()</code> 函数分配并初始化。</li>\n</ul>\n</li>\n<li><code>const AVCodec *codec</code>：\n<ul>\n<li>这是一个指向 <code>AVCodec</code> 的指针，表示要使用的具体编解码器（如 H.264、H.265 等）。</li>\n<li>在这段代码中，<code>codec</code> 参数被传递为 <code>NULL</code>，表示使用上下文 <code>avctx</code> 中已经设置的编解码器。这意味着 <code>AVCodecContext</code> 必须在调用之前已经正确设置了编解码器。</li>\n</ul>\n</li>\n<li><code>AVDictionary **options</code>：\n<ul>\n<li>这是一个指向 <code>AVDictionary</code> 的指针，用于传递给编解码器的额外选项，可以设置一些特殊的编码或解码参数。</li>\n<li>在这段代码中，<code>options</code> 被传递为 <code>NULL</code>，表示不传递任何额外选项。</li>\n</ul>\n</li>\n</ol>\n<p><strong>返回值</strong></p>\n<ul>\n<li><code>int</code>函数的返回值类型为  <code>int</code></li>\n<li>如果返回值为 <code>0</code>，表示编解码器成功打开并准备好进行操作。\n<ul>\n<li>如果返回负值，则表示出现错误。具体错误原因可以通过返回的错误代码进行判断。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（二）-4\">（二）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> parser = <span class=\"built_in\">av_parser_init</span>(codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数签名</span></span><br><span class=\"line\"><span class=\"function\">AVCodecParserContext* <span class=\"title\">av_parser_init</span><span class=\"params\">(<span class=\"type\">int</span> codec_id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>【<strong>作用</strong>】：</p>\n<ol>\n<li>\n<p>使用 <code>av_parser_init(codec_id)</code> 初始化一个解析器，用于解析特定编码格式的数据流。解析器的类型由 <code>codec_id</code> 决定，如 <code>AV_CODEC_ID_H264</code> 对应 H.264 格式。</p>\n</li>\n<li>\n<p>初始化完成后，<code>parser</code> 可以与其他函数配合使用，比如 <code>av_parser_parse2()</code>，来处理输入的编码数据流，并将其分割成一个个完整的帧或其他数据包。</p>\n</li>\n</ol>\n<p><strong>参数 <code>codec_id</code></strong>：</p>\n<ul>\n<li><code>codec_id</code> 是一个 <code>AVCodecID</code> 枚举值，用于标识你希望解析的具体编解码器类型（如 H.264、H.265 等）。</li>\n<li>这个参数告诉解析器它即将处理的是哪种格式的数据流，从而选择适当的解析方式。</li>\n</ul>\n<p><strong>返回值 <code>parser</code></strong>：</p>\n<ul>\n<li><code>av_parser_init(codec_id)</code> 返回一个指向 <code>AVCodecParserContext</code> 的指针，即 <code>parser</code>。</li>\n<li>如果初始化成功，<code>parser</code> 是一个有效的指针，表示解析器已经准备好使用。如果初始化失败，返回值为 <code>NULL</code>。</li>\n</ul>\n<p><strong><code>AVCodecParserContext</code> 结构体</strong>：</p>\n<ul>\n<li><code>AVCodecParserContext</code> 是 FFmpeg 中用于解析原始数据流的结构体。</li>\n<li>它负责将连续的字节流解析成独立的帧或包，供解码器进一步处理。这个过程对于处理<strong>实时流媒体或分割数据包</strong>非常重要。</li>\n</ul>\n<h3 id=\"（三）-4\">（三）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 【注】data数据为unsigned char，data_size数据为int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> ret = <span class=\"built_in\">av_parser_parse2</span>(</span><br><span class=\"line\">\tparser, c,</span><br><span class=\"line\">\t&amp;pkt-&gt;data, &amp;pkt-&gt;size,  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">\tdata, data_size,  <span class=\"comment\">// 输入</span></span><br><span class=\"line\">\tAV_NOPTS_VALUE, AV_NOPTS_VALUE, <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数签名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">av_parser_parse2</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    AVCodecParserContext *s, AVCodecContext *avctx,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> **poutbuf, <span class=\"type\">int</span> *poutbuf_size,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *buf, <span class=\"type\">int</span> buf_size,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">int64_t</span> pts, <span class=\"type\">int64_t</span> dts, <span class=\"type\">int64_t</span> pos</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>【<strong>作用</strong>】:使用 FFmpeg 的解析器 (<code>parser</code>) 对原始的编码数据流（如 H.264 数据）进行解析，并从中<strong>提取出一帧或多个帧的数据包</strong>。这个函数会处理输入的数据，并将解析出的帧数据存储在 <code>AVPacket</code> 结构中，以便后续的解码使用。</p>\n<p><strong>参数解释</strong></p>\n<ul>\n<li><code>AVCodecParserContext *s(parser)</code>：\n<ul>\n<li>这是解析器上下文，<code>parser</code> 是通过 <code>av_parser_init()</code> 初始化的。它持有解析器的状态信息，并在多次调用过程中保持。</li>\n</ul>\n</li>\n<li><code>AVCodecContext *avctx (c)</code>：\n<ul>\n<li>这是编解码器上下文，包含了解析器关联的编解码器信息（如 H.264 解码器）。这个上下文用于配置和管理解码器的状态和参数。</li>\n</ul>\n</li>\n<li><code>uint8_t poutbuf(&amp;pkt-&gt;data)</code> 和 <code>int poutbuf_size (&amp;pkt-&gt;size)</code>：\n<ul>\n<li>这些是输出参数，用于存储解析出的帧数据。<code>poutbuf</code> 指向数据<strong>输出缓冲区的指针</strong>，<code>poutbuf_size</code> 是该<strong>缓冲区的大小</strong>。</li>\n<li><code>pkt-&gt;data</code> 和 <code>pkt-&gt;size</code> 分别存储了解析后的一帧或部分帧的数据和大小。</li>\n</ul>\n</li>\n<li><code>const uint8_t *buf (data)</code> 和 <code>int buf_size (data_size)</code>：\n<ul>\n<li>这些是输入参数，指向<strong>输入数据缓冲区</strong>（具体指向输入数据缓冲区的<strong>起始位置</strong>，如从文件或网络流中读取的数据）<strong>及其大小</strong>。<code>data</code> 是指向数据缓冲区的指针，<code>data_size</code> 是该缓冲区的大小。</li>\n</ul>\n</li>\n<li><code>int64_t pts (AV_NOPTS_VALUE), int64_t dts (AV_NOPTS_VALUE), int64_t pos (0)</code>：\n<ul>\n<li>这些是时间戳和位置信息，通常用于解码过程中同步音视频流。这里传入 <code>AV_NOPTS_VALUE</code> 和 <code>0</code> 表示没有特定的时间戳或位置需要处理。</li>\n</ul>\n</li>\n</ul>\n<p><strong>返回值 ret</strong></p>\n<ul>\n<li>函数返回值 <code>ret</code> 表示<strong>处理的数据量</strong>（以字节为单位）。<code>ret</code> 值告诉你在当前调用中解析了多少字节的数据。</li>\n<li>如果 <code>ret</code> 为负值，则表示解析过程中出现了错误。</li>\n</ul>\n<h3 id=\"（四）-3\">（四）</h3>\n<p>解码后的操作</p>\n<p>调用这个函数<code>ret = avcodec_receive_frame(c, frame);</code></p>\n<p>意味着将一帧的数据通过函数处理后，传递给了<code>frame</code>这个参数，此时的<code>frame</code>就有这一帧的所有信息</p>\n<p>比如：<code>format</code>，<code>height</code>，<code>width</code>等</p>\n<p>之后就可以通过<a href=\"https://www.jasonqian.com/2024/07/22/XSDL/\">XSDL</a>进行窗口初始化，以及<code>Draw()</code>函数的处理，之后调用<a href=\"https://www.jasonqian.com/2024/07/22/XVideoView/\">XVideoView</a>中的<code>DrawFrame()</code>函数将这一帧数据显示在窗口上</p>\n","categories":[],"tags":[]},{"title":"编码压缩(I、P、B帧，GOP)","url":"http://example.com/2024/08/17/编码压缩/","content":"<h2 id=\"视频为什么需要进行编码压缩\">视频为什么需要进行编码压缩</h2>\n<ul>\n<li>一张为$720\\times 480$的图像，用YUV420P的格式来表示，其大小为：$720\\times 480\\times 1.5$约等于$0.5$MB\n<ul>\n<li>如果是$25$帧，$10$分钟的数据量$0.5M\\times 10 \\times 60\\times 25=7500MB \\rightarrow 7G$多</li>\n</ul>\n</li>\n<li>视频编码压缩的目的就是降低视频数据大小，方便存储和传输。</li>\n</ul>\n<h2 id=\"图像帧的类型\">图像帧的类型</h2>\n<p><strong>I帧、P帧和B帧</strong>是视频压缩领域中的基础概念，用于提升视频压缩效率、视频质量和视频恢复能力。</p>\n<p>I帧能够独立解码，P帧、B帧需要依赖I帧进行解码，如果I帧出现数据丢失，解码就会出现马赛克。</p>\n<ul>\n<li><strong>I帧</strong>(关键帧)仅由帧内预测的宏块组成。</li>\n<li><strong>P帧</strong>代表预测帧，除<strong>帧内空域</strong>预测以外，它还可以通过<strong>时域</strong>预测来进行压缩。P帧通过使用已经编码的帧进行运动估计。</li>\n<li><strong>B帧</strong>可以参考在其<strong>前后出现的帧</strong>，B帧中的B代表双向(Bi-Directional)</li>\n</ul>\n<p>【<strong>帧内空域</strong>】：也叫空间冗余:，像相邻像素之间有较强的相关性，比如一帧图像划分成多个 16x16 的块之后，相邻的块很多时候都有比较明显的相似性。</p>\n<p>【<strong>时域</strong>】：时间冗余，视频序列的相邻前后帧图像之间内容相似，比如帧率为 25fps 的视频中前后两帧图像相差只有 40ms，前后两张图像的变化较小，相似性很高。</p>\n<p>I帧、B帧、P帧的读取</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送顺序       I1        P3        B2</span><br><span class=\"line\">\t      第1帧为I帧  第2帧为P帧  第3帧为B帧</span><br><span class=\"line\">\t      </span><br><span class=\"line\">解码顺序       I1        P3        B2</span><br><span class=\"line\"></span><br><span class=\"line\">读取顺序       I1                  B2        P3</span><br><span class=\"line\"></span><br><span class=\"line\">显示顺序       I1                  B2        P3</span><br></pre></td></tr></table></figure>\n<p>这会导致一个问题：【<strong>引用B帧代码编码延迟</strong>】</p>\n<p><strong>读取</strong>B2的时候，需要当<strong>解码</strong>的时候P3、B2解码完毕</p>\n<p>为了减小 B 帧带来的延迟，通常有几种方法：</p>\n<ol>\n<li><strong>减少 B 帧的数量</strong>: 减少每组图片（GOP，Group of Pictures）中 B 帧的数量可以降低延迟。通过减少 B 帧数量，编码器不需要等待过多的未来帧来完成当前帧的编码。</li>\n<li><strong>使用较小的 GOP 大小</strong>: GOP 是指在视频编码中，一组连续的帧，其中包含一个 I 帧（关键帧），若干个 P 帧（前向预测帧），以及 B 帧。减小 GOP 的大小会使得 B 帧在视频流中的使用减少，进而降低编码延迟。</li>\n<li><strong>采用低延迟配置</strong>: 一些编码器（如 x264 和 x265）提供低延迟配置选项。这些配置通常会禁用或减少 B 帧的使用，并使用其他策略来减少编码和解码延迟。使用这些配置选项可以帮助实现实时编码。</li>\n<li><strong>实时流媒体应用中禁用 B 帧</strong>: 对于需要极低延迟的应用（如视频会议、游戏直播），可以完全禁用 B 帧。这种情况下，编码器只使用 I 帧和 P 帧，虽然压缩效率会有所降低，但可以显著减少延迟。</li>\n<li><strong>调整 B 帧参考结构</strong>: 一些高级编码器允许配置 B 帧的参考结构，例如双重 B 帧（hierarchical B-frames）或者限制 B 帧仅向前参考。这些配置可以帮助在一定程度上减少延迟，同时保留一定的压缩效率。</li>\n</ol>\n<h2 id=\"GOP、GOP长度\">GOP、GOP长度</h2>\n<p>GOP（一组图像，Group of Pictures）</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408161514981.png\" alt=\"image-20240816151436332\" style=\"zoom:67%;\" />\n<p><strong>GOP长度</strong></p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408161527057.png\" alt=\"image-20240816152036564\" style=\"zoom: 67%;\" />\n<p>假设1秒25帧常见的视频帧率，10秒钟的数据只有一个GOP</p>\n<p>GOP的长度就为$25 \\times 10 = 250$</p>\n<p>GOP太长会导致的问题：</p>\n<ol>\n<li>如果GOP太长了，I帧数据异常，这个GOP显示会有问题，导致10秒钟画面不正常</li>\n<li>拖动播放时，I帧距离太长，点播场景进行视频的seek操作就会不方便</li>\n</ol>\n<p>GOP太短会导致的问题：</p>\n<ol>\n<li>I帧码率会上升</li>\n</ol>\n<p>对于25帧的视频，一般GOP为$1\\sim 2$秒设置一个GOP</p>\n","categories":[],"tags":[]},{"title":"ffmpeg库进行编码","url":"http://example.com/2024/08/17/ffmpeg库进行编码/","content":"<p>“encode” 是指将原始或解码后的媒体数据（如视频帧或音频样本）转换为一种特定的压缩格式或编码格式。</p>\n<p>编码过程将未压缩的媒体数据（如原始的 RGB 图像数据或 PCM 音频数据）转换为压缩格式（如 H.264 视频或 AAC 音频），<br>\n以便于存储或传输。</p>\n<p>这段代码展示了如何使用 FFmpeg 库进行视频编码。</p>\n<p>整个过程包括查找编码器、分配和配置编码器上下文、生成未压缩数据帧、编码数据帧、处理编码后的数据包，并将其写入文件。<br>\n通过这种方式，可以将未压缩的视频帧转换为压缩的视频格式（如 H.264 或 H.265），以便于存储和传输。</p>\n<p>编码生成一段10秒的h.264视频</p>\n<p>【<strong>效果展示</strong>】</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408170941467.gif\" alt=\"output\"  />\n<h2 id=\"代码-15\">代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;  <span class=\"comment\">// 指定函数是C语言函数，函数名不包含重载标注</span></span><br><span class=\"line\">\t<span class=\"comment\">// 引入ffmpeg头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 预处理指令导入库</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avcodec.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstring filename = <span class=\"string\">&quot;400_300_25&quot;</span>;</span><br><span class=\"line\">\tAVCodecID codec_id = AV_CODEC_ID_H264;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据控制台输入的数据选择codec_id</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstring codec = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (codec == <span class=\"string\">&quot;h265&quot;</span> || codec == <span class=\"string\">&quot;hevc&quot;</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcodec_id = AV_CODEC_ID_HEVC;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (codec_id == AV_CODEC_ID_H264)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfilename += <span class=\"string\">&quot;.h264&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (codec_id == AV_CODEC_ID_HEVC)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfilename += <span class=\"string\">&quot;.h265&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tofstream ofs;</span><br><span class=\"line\">\tofs.<span class=\"built_in\">open</span>(filename, ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1.找到编码器 AV_CODEC_ID_H265</span></span><br><span class=\"line\">    <span class=\"comment\">// ========（一）========</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> codec = <span class=\"built_in\">avcodec_find_encoder</span>(codec_id);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2.编码上下文</span></span><br><span class=\"line\">    <span class=\"comment\">// ========（二）========</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3.设定上下文参数</span></span><br><span class=\"line\">\tc-&gt;width = <span class=\"number\">400</span>;  <span class=\"comment\">// 视频宽度</span></span><br><span class=\"line\">\tc-&gt;height = <span class=\"number\">300</span>;  <span class=\"comment\">// 视频高度</span></span><br><span class=\"line\">\t<span class=\"comment\">// 帧时间戳的时间单位 pts * time_base = 播放时间的位置</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ========（三）========</span></span><br><span class=\"line\">\tc-&gt;time_base = &#123; <span class=\"number\">1</span>, <span class=\"number\">25</span> &#125;;  <span class=\"comment\">// 分数代表 1/25</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tc-&gt;pix_fmt = AV_PIX_FMT_YUV420P;  <span class=\"comment\">// 元数据像素格式，与编码算法相关</span></span><br><span class=\"line\">\tc-&gt;thread_count = <span class=\"number\">16</span>;  <span class=\"comment\">// 编码线程数，可以通过调用系统接口获取CPU核心数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 4.打开编码上下文</span></span><br><span class=\"line\">    <span class=\"comment\">// ========（四）========</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> re = <span class=\"built_in\">avcodec_open2</span>(c, codec, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建好AVFrame空间 未压缩的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> frame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\tframe-&gt;width = c-&gt;width;</span><br><span class=\"line\">\tframe-&gt;height = c-&gt;height;</span><br><span class=\"line\">\tframe-&gt;format = c-&gt;pix_fmt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 分配内存缓冲区，以存储未压缩的视频数据</span></span><br><span class=\"line\">    <span class=\"comment\">// ========（五）========</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配并初始化一个 AVPacket 结构体</span></span><br><span class=\"line\">    <span class=\"comment\">// 用于存储编码后的数据包（packet），即压缩后的音频或视频数据。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pkt = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 10秒视频 250帧  (因为时间基数为1 / 25)</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">250</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ========（五）========</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成AVFrame 数据 每帧数据不同</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> y = <span class=\"number\">0</span>; y &lt; c-&gt;height; y++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; c-&gt;width; x++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                <span class=\"comment\">// data[0]代表Y</span></span><br><span class=\"line\">\t\t\t\tframe-&gt;data[<span class=\"number\">0</span>][y * frame-&gt;linesize[<span class=\"number\">0</span>] + x] = x + y + i * <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// U、V</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> y = <span class=\"number\">0</span>; y &lt; c-&gt;height / <span class=\"number\">2</span>; y++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; c-&gt;width / <span class=\"number\">2</span>; x++)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                <span class=\"comment\">// data[1]代表U、data[2]代表V</span></span><br><span class=\"line\">\t\t\t\tframe-&gt;data[<span class=\"number\">1</span>][y * frame-&gt;linesize[<span class=\"number\">1</span>] + x] = <span class=\"number\">128</span> + y + i * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t\tframe-&gt;data[<span class=\"number\">2</span>][y * frame-&gt;linesize[<span class=\"number\">2</span>] + x] = <span class=\"number\">64</span> + y + i * <span class=\"number\">5</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        \t为什么要设置pts？</span></span><br><span class=\"line\"><span class=\"comment\">        \t</span></span><br><span class=\"line\"><span class=\"comment\">        \t设置 frame-&gt;pts 是为了确保每一帧视频在正确的时间点显示，</span></span><br><span class=\"line\"><span class=\"comment\">        \t以维持视频的流畅性和时间同步性。</span></span><br><span class=\"line\"><span class=\"comment\">        \t通过 PTS，播放器可以准确控制视频帧的显示时机，</span></span><br><span class=\"line\"><span class=\"comment\">        \t保证视频按预期的帧率播放，并与其他媒体流（如音频）同步。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">\t\tframe-&gt;pts = i;  <span class=\"comment\">// 显示时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ========（六）========</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 发送未压缩帧到线程中压缩</span></span><br><span class=\"line\">\t\tre = <span class=\"built_in\">avcodec_send_frame</span>(c, frame);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (re &gt;= <span class=\"number\">0</span>)  <span class=\"comment\">// &gt;= 0表示有数据返回</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收通过avcodec_send_frame发送的帧数据</span></span><br><span class=\"line\">\t\t\tre = <span class=\"built_in\">avcodec_receive_packet</span>(c, pkt);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// AVERROR(EAGAIN) 表示当前没有可用的输出数据包</span></span><br><span class=\"line\">            <span class=\"comment\">// AVERROR_EOF 表示编码器已经完成了所有的帧处理</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re == <span class=\"built_in\">AVERROR</span>(EAGAIN) || re == AVERROR_EOF)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">av_strerror</span>(re, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tcerr &lt;&lt; <span class=\"string\">&quot;avcodec_receive_packet failed!&quot;</span> &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t\tcout &lt;&lt; pkt-&gt;size &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 将解码出来的一帧数据存储下来</span></span><br><span class=\"line\">\t\t\tofs.<span class=\"built_in\">write</span>((<span class=\"type\">char</span>*)pkt-&gt;data, pkt-&gt;size);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_unref</span>(pkt);  <span class=\"comment\">// 释放内存 防止内存泄漏</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_free</span>(&amp;frame);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 释放编码器上下文</span></span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_free_context</span>(&amp;c);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"（一）-3\">（一）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVCodec *<span class=\"title\">avcodec_find_encoder</span><span class=\"params\">(<span class=\"keyword\">enum</span> AVCodecID id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>avcodec_find_encoder</code> 是 FFmpeg 库中用于查找指定编码器的函数。编码器是将<strong>未压缩的媒体数据</strong>（如视频帧或音频样本）<strong>转换为压缩格式</strong>的组件。该函数返回一个指向 <code>AVCodec</code> 结构的指针，代表找到的编码器。</p>\n<p><strong>参数说明</strong></p>\n<ul>\n<li>\n<p><code>id</code></p>\n<ul>\n<li>\n<p>这是 <code>AVCodecID</code>枚举类型，表示要查找的编码器的标识符。FFmpeg 定义了许多编码器的标识符，例如：</p>\n<ul>\n<li><code>AV_CODEC_ID_H264</code>：表示 H.264 视频编码器。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>AV_CODEC_ID_HEVC</code>（或 <code>AV_CODEC_ID_H265</code>）：表示 H.265/HEVC 视频编码器。</p>\n<ul>\n<li>\n<p><code>AV_CODEC_ID_AAC</code>：表示 AAC 音频编码器。</p>\n</li>\n<li>\n<p><code>AV_CODEC_ID_MP3</code>：表示 MP3 音频编码器。</p>\n</li>\n<li>\n<p>你需要根据你要编码的媒体格式选择合适的编码器 ID。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>\n<p>返回值</p>\n<ul>\n<li>成功时返回一个指向 <code>AVCodec</code> 结构的指针，该结构包含了编码器的相关信息。</li>\n</ul>\n</li>\n<li>\n<p>如果函数找不到与 <code>id</code> 对应的编码器，则返回 <code>NULL</code>。</p>\n</li>\n</ul>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>当你想要将未压缩的视频帧编码为 H.264、H.265 或其他格式时，首先需要通过 <code>avcodec_find_encoder</code> 查找对应的编码器，然后通过编码器生成编码上下文，进行编码操作。</li>\n</ul>\n<h3 id=\"（二）-3\">（二）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVCodecContext *<span class=\"title\">avcodec_alloc_context3</span><span class=\"params\">(<span class=\"type\">const</span> AVCodec *codec)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>avcodec_alloc_context3</code> 是 FFmpeg 库中的一个函数，用于分配并<strong>初始化一个编码器或解码器上下文</strong> (<code>AVCodecContext</code>)。这个上下文是编码或解码过程中的核心结构，包含了所有相关的配置信息，如视频或音频的格式、分辨率、码率等。</p>\n<p><strong>参数说明</strong></p>\n<ul>\n<li><code>codec</code>\n<ul>\n<li>这是一个指向 <code>AVCodec</code> 结构的指针，表示你想要使用的编码器或解码器。通常这个指针是通过 <code>avcodec_find_encoder</code> 或 <code>avcodec_find_decoder</code> 函数获取的。</li>\n<li>如果你传递 <code>NULL</code>，则会分配一个未初始化的 <code>AVCodecContext</code>，稍后你可以手动初始化它。</li>\n</ul>\n</li>\n</ul>\n<p><strong>返回值</strong></p>\n<ul>\n<li>返回值\n<ul>\n<li>成功时，返回一个指向 <code>AVCodecContext</code> 结构的指针，这个结构已经分配了内存，并且部分字段已经初始化。</li>\n<li>如果分配失败，则返回 <code>NULL</code>。</li>\n</ul>\n</li>\n</ul>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>\n<p><code>avcodec_alloc_context3</code> 分配并初始化一个 <code>AVCodecContext</code> 结构。这个上下文结构在编码或解码过程中存储所有的配置信息和状态。</p>\n</li>\n<li>\n<p>如果传入了有效的 <code>AVCodec</code> 指针，函数将根据编码器或解码器的默认设置初始化一些字段（如时间基、像素格式、采样率等）。</p>\n</li>\n</ul>\n<h3 id=\"（三）-3\">（三）</h3>\n<p><code>c-&gt;time_base = &#123; 1, 25 &#125;;</code></p>\n<p>设置<code>AVCodecContext</code>中的时间单位的长度</p>\n<ul>\n<li>\n<p><code>time_base</code> 是一个分数形式的结构体，<code>&#123; 1, 25 &#125;</code> 表示的就是分数 <code>1/25</code>。其中 <code>1</code> 是分子，<code>25</code> 是分母。</p>\n</li>\n<li>\n<p>这个设置的意思是：每个时间单位代表 1/25 秒，也就是说每秒钟有 25 个时间单位。</p>\n</li>\n</ul>\n<p>对于每一帧视频，都会有一个显示时间戳 <code>pts</code>（Presentation Time Stamp），用来标识该帧在视频播放过程中的<strong>显示时间</strong>。<code>pts * time_base</code> 就代表该帧应该在视频播放的第几秒显示。</p>\n<p>【<strong>例子</strong>】：</p>\n<p>通过<code>c-&gt;time_base = &#123; 1, 25 &#125;;</code>定义时间单位的长度</p>\n<ul>\n<li>\n<p>如果 <code>pts</code> 为 0，则这帧应该在视频播放的第 <code>0 * (1/25) = 0</code> 秒显示。</p>\n</li>\n<li>\n<p>如果 <code>pts</code> 为 24，则这帧应该在视频播放的第 <code>24 * (1/25) = 0.96</code> 秒显示。</p>\n</li>\n<li>\n<p>如果 <code>pts</code> 为 25，则这帧应该在视频播放的第 <code>25 * (1/25) = 1</code> 秒显示。</p>\n</li>\n</ul>\n<h3 id=\"（四）-2\">（四）</h3>\n<p><code>int re = avcodec_open2(c, codec, NULL);</code></p>\n<p>打开指定的编码器，使其与编码上下文<strong>关联</strong>，并准备好编码操作。</p>\n<p><strong>函数作用</strong>：</p>\n<ul>\n<li><code>avcodec_open2()</code> 是 FFmpeg 库中的一个函数，用于初始化编码器或解码器并将其与给定的编码上下文（<code>AVCodecContext</code>）关联。</li>\n<li>它会配置编码器，使其准备好处理数据（即编码或解码操作）。</li>\n</ul>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li><code>c</code>: 这是一个指向 <code>AVCodecContext</code> 的指针，也就是编码上下文。它包含了编码器的配置信息，比如视频的宽度、高度、像素格式等。<code>c</code> 是通过之前的 <code>avcodec_alloc_context3()</code> 函数分配和初始化的。</li>\n<li><code>codec</code>: 这是一个指向 <code>AVCodec</code> 结构的指针，代表你要使用的编码器。在你的代码中，<code>codec</code> 是通过 <code>avcodec_find_encoder(codec_id)</code> 查找到的，表示具体的编码器（如 H.264 或 H.265 编码器）。</li>\n<li><code>NULL</code>: 这是一个 <code>AVDictionary</code> 类型的指针，可以用来传递额外的选项给编码器。在这里传入 <code>NULL</code> 表示没有额外的选项。</li>\n</ul>\n<p><strong>返回值</strong>：</p>\n<ul>\n<li><code>re</code>: 这是 <code>avcodec_open2()</code> 函数的返回值，类型为 <code>int</code>。</li>\n<li>如果返回值 <code>re</code> 为 <code>0</code>，表示编码器成功打开，编码上下文已准备好进行编码操作。</li>\n<li>如果返回值为负数，表示出现错误，具体的错误代码可以通过 FFmpeg 的相关函数或宏定义来解析。</li>\n</ul>\n<p><strong>流程总结</strong>：</p>\n<ul>\n<li>通过 <code>avcodec_open2()</code>，编码器 <code>codec</code> 被正式初始化，并与编码上下文 <code>c</code> 关联。这一步骤之后，就可以使用该上下文 <code>c</code> 进行帧的编码了。</li>\n</ul>\n<h3 id=\"（五）-2\">（五）</h3>\n<p>分配内存，存储未压缩的数据，并将为每一帧画面填充数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> y = <span class=\"number\">0</span>; y &lt; c-&gt;height; y++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; c-&gt;width; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data[0]代表Y</span></span><br><span class=\"line\">        frame-&gt;data[<span class=\"number\">0</span>][y * frame-&gt;linesize[<span class=\"number\">0</span>] + x] = x + y + i * <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// U、V</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> y = <span class=\"number\">0</span>; y &lt; c-&gt;height / <span class=\"number\">2</span>; y++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; c-&gt;width / <span class=\"number\">2</span>; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data[1]代表U、data[2]代表V</span></span><br><span class=\"line\">        frame-&gt;data[<span class=\"number\">1</span>][y * frame-&gt;linesize[<span class=\"number\">1</span>] + x] = <span class=\"number\">128</span> + y + i * <span class=\"number\">2</span>;</span><br><span class=\"line\">        frame-&gt;data[<span class=\"number\">2</span>][y * frame-&gt;linesize[<span class=\"number\">2</span>] + x] = <span class=\"number\">64</span> + y + i * <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>frame-&gt;data[0]</code> 并不是自动拥有数据的，<code>AVFrame</code> 创建时它的初始值为 <code>NULL</code>。</p>\n</li>\n<li>\n<p>需要通过 <code>av_frame_get_buffer()</code> 函数或手动分配内存来初始化 <code>data[0]</code>，使其指向合适的缓冲区，以存储帧的像素数据。</p>\n</li>\n<li>\n<p>初始化后，你可以通过 <code>data[0]</code> 来访问或操作具体的像素数据，这是图像处理的基础步骤之一。</p>\n</li>\n</ul>\n<p>【<strong>如何给每一帧填充画面</strong>？】</p>\n<p>Y平面</p>\n<ul>\n<li>\n<p>外层循环遍历每一<strong>行</strong> (<code>y</code>)，内层循环遍历每一<strong>列</strong> (<code>x</code>)。</p>\n</li>\n<li>\n<p><code>frame-&gt;data[0][y * frame-&gt;linesize[0] + x]</code> 用于访问第 <code>y</code> 行第 <code>x</code> 列的像素。</p>\n</li>\n</ul>\n<p>U、V平面</p>\n<ul>\n<li>\n<p>U 和 V 平面的分辨率是 Y 平面的二分之一，因此这两个平面的循环分别只遍历一半的高度和宽度。</p>\n</li>\n<li>\n<p><code>frame-&gt;data[1][y * frame-&gt;linesize[1] + x]</code> 访问 U 平面的第 <code>y</code> 行第 <code>x</code> 列的像素</p>\n</li>\n<li>\n<p>V平面同理</p>\n</li>\n</ul>\n<h3 id=\"（六）\">（六）</h3>\n<p><code>re = avcodec_send_frame(c, frame);</code></p>\n<p><strong>函数作用</strong>：</p>\n<ul>\n<li>\n<p><code>avcodec_send_frame()</code> 是 FFmpeg 库中的一个函数，用于将<strong>一帧视频数据</strong>发送给编码器。</p>\n</li>\n<li>\n<p>编码器会在接收到帧后开始处理，编码为压缩数据。</p>\n</li>\n<li>\n<p>这个函数是非阻塞的，它将帧推送到编码器的内部队列中，并立即返回。</p>\n</li>\n</ul>\n<p>由于<code>for(int i = 0; i &lt; 250; i ++ )</code></p>\n<p>循环250次，250帧，也就是10秒，每一帧都会调用<code>avcodec_send_frame()</code>从而进行编码</p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li><code>c</code>：这是一个指向 <code>AVCodecContext</code> 的指针，表示编码上下文。编码上下文包含了编码器的配置信息和状态，是编码操作的核心对象。</li>\n<li><code>frame</code>：这是一个指向 <code>AVFrame</code> 的指针，表示要发送的一帧未压缩的原始视频数据。这个帧可能包含亮度（Y）和色度（U、V）的数据，具体格式取决于编码上下文的设置。</li>\n<li><code>frame</code> 可以是实际的图像数据，也可以是 <code>NULL</code>。如果传入 <code>NULL</code>，则表示告诉编码器已经没有更多的帧需要编码，这个操作通常用于结束编码并刷新编码器的缓冲区。</li>\n</ul>\n<p><strong>返回值</strong>：</p>\n<ul>\n<li><code>re</code>：这是 <code>avcodec_send_frame()</code> 函数的返回值，类型为 <code>int</code>。</li>\n<li>如果返回值为 <code>0</code>，表示帧已经成功发送给编码器。</li>\n<li>如果返回负数，表示发送帧失败。可能的错误包括：\n<ul>\n<li><code>AVERROR(EAGAIN)</code>：编码器的内部队列已满，需要调用 <code>avcodec_receive_packet()</code> 函数来提取已经编码好的数据包，以腾出空间。</li>\n<li><code>AVERROR_EOF</code>：编码器已经被标记为结束（例如在发送 <code>NULL</code> 帧之后），不再接受新的帧。</li>\n<li><code>AVERROR(EINVAL)</code>：编码器的状态无效，可能是由于上下文配置错误。</li>\n</ul>\n</li>\n</ul>\n<p><strong>编码流程</strong>：</p>\n<ul>\n<li>\n<p>在实际的编码过程中，</p>\n<p><code> avcodec_send_frame()</code> 通常与 <code> avcodec_receive_packet()</code>配合使用：</p>\n<ul>\n<li>首先通过 <code>avcodec_send_frame()</code> 将帧发送给编码器。</li>\n</ul>\n</li>\n<li>\n<p>然后通过 <code>avcodec_receive_packet()</code> 提取编码后的数据包（<code>AVPacket</code>），该数据包包含了压缩后的视频数据。</p>\n</li>\n<li>\n<p>这个过程会反复进行，直到所有帧都被发送并编码完成。</p>\n</li>\n</ul>\n<p><strong>所谓的编码就是通过avcodec_send_frame将帧数据传给编码器，在通过avcodec_receive_packet提取编码后的数据，然后将其存储下来</strong></p>\n<h2 id=\"补充\">补充</h2>\n<p>设置<code>AVCodecContext</code>一些参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> c = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.设定上下文参数</span></span><br><span class=\"line\">c-&gt;width = <span class=\"number\">400</span>;  <span class=\"comment\">// 视频宽度</span></span><br><span class=\"line\">c-&gt;height = <span class=\"number\">300</span>;  <span class=\"comment\">// 视频高度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此处还可以设置视频编码器的不同参数</span></span><br><span class=\"line\"><span class=\"comment\">// 旨在控制编码质量、比特率、延迟等特性。</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>c-&gt;max_b_frames = 0;</code></li>\n</ol>\n<p><strong><code>max_b_frames</code></strong>：控制 B 帧的数量。B 帧是双向预测帧，通常在提高编码效率时使用，但会增加延迟。将 <code>max_b_frames</code> 设置为 <code>0</code> 可以禁用 B 帧，从而减少延迟，虽然这样可能会增加文件大小或降低压缩效率。</p>\n<ol start=\"2\">\n<li><code>int opt_re = av_opt_set(c-&gt;priv_data, &quot;preset&quot;, &quot;ultrafast&quot;, 0);</code></li>\n</ol>\n<p><strong><code>preset</code></strong>：这是编码器的一种预设配置，用于控制编码速度和质量的平衡。<code>ultrafast</code> 是一个选项，表示最快的编码速度，但质量和压缩率可能会较低。其他常见的预设包括 <code>fast</code>、<code>medium</code>、<code>slow</code> 等。</p>\n<p>具体设置可以看<a href=\"https://www.jasonqian.com/2024/07/22/XCodec/\">XCodec</a>中的<code>SetOpt()</code>，里面有介绍。</p>\n","categories":[],"tags":[]},{"title":"YUV、RGBA相互转换","url":"http://example.com/2024/08/12/YUV、RGBA相互转换/","content":"<h2 id=\"转化前准备\">转化前准备</h2>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/%E8%A7%86%E9%A2%91%E3%80%81%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/\">视频、图片格式介绍</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> YUV_FILE <span class=\"string\">&quot;400_300_25.yuv&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RGBA_FILE <span class=\"string\">&quot;800_600_25.rgba&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// YUV</span></span><br><span class=\"line\"><span class=\"type\">int</span> width = <span class=\"number\">400</span>, height = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RGBA</span></span><br><span class=\"line\"><span class=\"type\">int</span> rgb_width = <span class=\"number\">800</span>, rgb_height = <span class=\"number\">600</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *yuv[<span class=\"number\">3</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> yuv_linesize[<span class=\"number\">3</span>] = &#123; width, width / <span class=\"number\">2</span>, width / <span class=\"number\">2</span> &#125;;  <span class=\"comment\">// Y、U、V的每行数量</span></span><br><span class=\"line\">yuv[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[width * height];  <span class=\"comment\">// Y的数量</span></span><br><span class=\"line\">yuv[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[width * height / <span class=\"number\">4</span>];  <span class=\"comment\">// U的数量</span></span><br><span class=\"line\">yuv[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[width * height / <span class=\"number\">4</span>];  <span class=\"comment\">// V的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RGBA存储 rgba rgba</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *rgba = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[rgb_width * rgb_height * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rgba_linesize = rgb_width * <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取YUV_FILE数据</span></span><br><span class=\"line\">ifstream ifs;</span><br><span class=\"line\">ifs.<span class=\"built_in\">open</span>(YUV_FILE, ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入RGBA_FILE数据</span></span><br><span class=\"line\">ofstream ofs;</span><br><span class=\"line\">ofs.<span class=\"built_in\">open</span>(RGBA_FILE, ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">SwsContext *yuvTorgb = <span class=\"literal\">nullptr</span>;</span><br></pre></td></tr></table></figure>\n<p><code>SwsContext *yuvTorgb = nullptr;</code></p>\n<p><code>SwsContext</code> 是 FFmpeg 中 libswscale 库的一部分。libswscale 是一个用于图像缩放和像素格式转换的库。</p>\n<p><code>SwsContext</code> 保存了图像转换操作的上下文信息，包括输入输出格式、大小、缩放选项等。</p>\n<h2 id=\"YUV转RGBA\">YUV转RGBA</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取YUV帧,将其存储到yuv[]中</span></span><br><span class=\"line\">    ifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv[<span class=\"number\">0</span>], width * height);</span><br><span class=\"line\">    ifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv[<span class=\"number\">1</span>], width * height / <span class=\"number\">4</span>);</span><br><span class=\"line\">    ifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv[<span class=\"number\">2</span>], width * height / <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当 gcount() 返回 0 时，表示已经没有更多的数据可供读取，或者读取操作遇到了文件末尾（EOF）。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ifs.<span class=\"built_in\">gcount</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// YUV 转 RGBA</span></span><br><span class=\"line\">    <span class=\"comment\">// 上下文件创建和获取</span></span><br><span class=\"line\">    yuvTorgb = <span class=\"built_in\">sws_getCachedContext</span>(</span><br><span class=\"line\">        yuvTorgb,\t\t\t\t<span class=\"comment\">// 转换上下文、NULL表示新创建，非NULL则判断与现有参数是否一致，</span></span><br><span class=\"line\">        <span class=\"comment\">// 一致直接返回，不一致先清理当前然后再次创建</span></span><br><span class=\"line\">        width, height,\t\t\t<span class=\"comment\">// 输入宽高</span></span><br><span class=\"line\">        AV_PIX_FMT_YUV420P,\t\t<span class=\"comment\">// 输入像素格式</span></span><br><span class=\"line\">        rgb_width, rgb_height,\t<span class=\"comment\">// 输出的宽高</span></span><br><span class=\"line\">        AV_PIX_FMT_RGBA,\t\t<span class=\"comment\">// 输出的像素格式</span></span><br><span class=\"line\">        SWS_BILINEAR,\t\t\t<span class=\"comment\">// 选择尺寸变换的算法，双线性插值算法</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>\t\t\t\t\t<span class=\"comment\">// 过滤器参数</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!yuvTorgb)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cerr &lt;&lt; <span class=\"string\">&quot;sws_getCachedContext failed!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = rgba;</span><br><span class=\"line\">    <span class=\"type\">int</span> lines[<span class=\"number\">1</span>] = &#123; rgba_linesize &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sws_scale()返回转换的行数，如果失败则会返回负数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> re = <span class=\"built_in\">sws_scale</span>(</span><br><span class=\"line\">        yuvTorgb, </span><br><span class=\"line\">        yuv,\t\t\t<span class=\"comment\">// 输入数据</span></span><br><span class=\"line\">        yuv_linesize,\t<span class=\"comment\">// 输入数据行字节数，上面定义的yuv_linesize[3]</span></span><br><span class=\"line\">        <span class=\"number\">0</span>,\t\t\t\t<span class=\"comment\">// 转换的起始行</span></span><br><span class=\"line\">        height,\t\t\t<span class=\"comment\">// 输入高度</span></span><br><span class=\"line\">        data,\t\t\t<span class=\"comment\">// 输出的数据的存储位置</span></span><br><span class=\"line\">        lines\t\t\t<span class=\"comment\">// 输出的数据的字节数</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    std::cout &lt;&lt; re &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; flush;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将rgba数据写入ofs中</span></span><br><span class=\"line\">    ofs.<span class=\"built_in\">write</span>((<span class=\"type\">char</span>*)rgba, rgb_width * rgb_height * <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ifs.<span class=\"built_in\">close</span>();  <span class=\"comment\">// 关闭文件流，释放相关资源</span></span><br><span class=\"line\">ofs.<span class=\"built_in\">close</span>();  <span class=\"comment\">// 将缓冲区中的所有数据写入800_600_25.rgba中，之后释放相关资源</span></span><br></pre></td></tr></table></figure>\n<p>【<strong>重要函数</strong>】</p>\n<h3 id=\"sws-getCachedContext\">sws_getCachedContext</h3>\n<p><code>sws_getCachedContext</code>是一个非常有用的函数，可以简化和优化<strong>图像缩放</strong>和<strong>格式转换</strong>过程中的上下文管理。它允许你在不同的参数设置之间<strong>动态调整</strong> <code>SwsContext</code>，而无需手动管理内存，同时提供了对图像缩放算法的灵活选择。</p>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SwsContext</span> *<span class=\"built_in\">sws_getCachedContext</span>(</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> SwsContext *context, </span><br><span class=\"line\">    <span class=\"type\">int</span> srcW, <span class=\"type\">int</span> srcH, <span class=\"keyword\">enum</span> AVPixelFormat srcFormat, </span><br><span class=\"line\">    <span class=\"type\">int</span> dstW, <span class=\"type\">int</span> dstH, <span class=\"keyword\">enum</span> AVPixelFormat dstFormat, </span><br><span class=\"line\">    <span class=\"type\">int</span> flags, SwsFilter *srcFilter, SwsFilter *dstFilter, </span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> *param</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ol>\n<li><strong>context</strong>: 之前创建的 SwsContext 上下文指针。如果是 NULL，函数会创建一个新的上下文。</li>\n<li><strong>srcW</strong>: 源图像的宽度。</li>\n<li><strong>srcH</strong>: 源图像的高度。</li>\n<li><strong>srcFormat</strong>: 源图像的像素格式（如 AV_PIX_FMT_YUV420P 等）。</li>\n<li><strong>dstW</strong>: 目标图像的宽度。</li>\n<li><strong>dstH</strong>: 目标图像的高度。</li>\n<li><strong>dstFormat</strong>: 目标图像的像素格式。</li>\n<li><strong>flags</strong>: 用于指定缩放和转换的算法，比如 SWS_BILINEAR（双线性插值）或 SWS_BICUBIC（三次插值）等。</li>\n<li><strong>srcFilter</strong>: 源图像的过滤器，通常可以是 NULL。</li>\n<li><strong>dstFilter</strong>: 目标图像的过滤器，通常可以是 NULL。</li>\n<li><strong>param</strong>: 一个指向双精度浮点数组的指针，用于设置特定的缩放参数，可以为 NULL。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yuvTorgb = <span class=\"built_in\">sws_getCachedContext</span>(</span><br><span class=\"line\">            yuvTorgb,\t\t\t\t<span class=\"comment\">// SwsContext 指针、NULL表示新创建，非NULL则判断与现有参数是否一致，</span></span><br><span class=\"line\">            <span class=\"comment\">// 一致直接返回，不一致先清理当前然后再次创建</span></span><br><span class=\"line\">            width, height,\t\t\t<span class=\"comment\">// 输入宽高</span></span><br><span class=\"line\">            AV_PIX_FMT_YUV420P,\t\t<span class=\"comment\">// 输入像素格式</span></span><br><span class=\"line\">            rgb_width, rgb_height,\t<span class=\"comment\">// 输出的宽高</span></span><br><span class=\"line\">            AV_PIX_FMT_RGBA,\t\t<span class=\"comment\">// 输出的像素格式</span></span><br><span class=\"line\">            SWS_BILINEAR,\t\t\t<span class=\"comment\">// 选择尺寸变换的算法，双线性插值算法</span></span><br><span class=\"line\">            <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>\t\t\t\t\t<span class=\"comment\">// 过滤器参数</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"sws-scale\">sws_scale</h3>\n<p><code>sws_scale</code> 是 FFmpeg 中 <code>libswscale</code> 库的核心函数之一，用于执行图像缩放和像素格式转换操作。它利用 <code>SwsContext</code> 上下文中的配置信息，将<strong>源图像数据转换为目标图像数据</strong>。</p>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sws_scale</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"keyword\">struct</span> SwsContext *c, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *<span class=\"type\">const</span> srcSlice[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> <span class=\"type\">int</span> srcStride[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">int</span> srcSliceY, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">int</span> srcSliceH, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">uint8_t</span> *<span class=\"type\">const</span> dst[], </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> <span class=\"type\">int</span> dstStride[]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ol>\n<li><strong>c</strong>:\n<ul>\n<li><strong>类型</strong>: <code>struct SwsContext *</code></li>\n<li><strong>说明</strong>: 这是一个指向 <code>SwsContext</code> 的指针，用于图像缩放和色彩空间转换。<code>SwsContext</code> 包含了图像处理所需的所有参数和状态信息。可以使用 <code>sws_getCachedContext</code> 或 <code>sws_getContext</code> 来创建这个上下文。</li>\n</ul>\n</li>\n<li><strong>srcSlice</strong>:\n<ul>\n<li><strong>类型</strong>: <code>const uint8_t *const srcSlice[]</code></li>\n<li><strong>说明</strong>: 源图像数据的数组，每个元素都是一个指向源图像某个平面的指针（例如，对于 YUV420P 格式，指向 Y、U 和 V 平面）。对于平面图像格式，数组的每个元素对应一个色彩分量（如 Y、U、V）；对于非平面格式（如 RGB），通常只使用数组的第一个元素指向整个图像数据。</li>\n</ul>\n</li>\n<li><strong>srcStride</strong>:\n<ul>\n<li><strong>类型</strong>: <code>const int srcStride[]</code></li>\n<li><strong>说明</strong>: 源图像每一行的字节数的数组，表示每个平面（或通道）在每行的步幅（字节数）。步幅是指相邻行在内存中相距的字节数。对于 YUV420P 图像，<code>srcStride[0]</code> 通常是图像宽度，<code>srcStride[1]</code> 和 <code>srcStride[2]</code> 是色度平面的宽度（通常是亮度平面宽度的一半）。</li>\n</ul>\n</li>\n<li><strong>srcSliceY</strong>:\n<ul>\n<li><strong>类型</strong>: <code>int</code></li>\n<li><strong>说明</strong>: 源图像的起始行的 Y 坐标，表示从图像的哪一行开始处理。通常情况下，值为 0 表示从图像的第一行开始。</li>\n</ul>\n</li>\n<li><strong>srcSliceH</strong>:\n<ul>\n<li><strong>类型</strong>: <code>int</code></li>\n<li><strong>说明</strong>: 要处理的源图像的行数。这决定了 <code>sws_scale</code> 函数在源图像中从 <code>srcSliceY</code> 开始读取多少行进行缩放和转换。</li>\n</ul>\n</li>\n<li><strong>dst</strong>:\n<ul>\n<li><strong>类型</strong>: <code>uint8_t *const dst[]</code></li>\n<li><strong>说明</strong>: 目标图像数据的数组，每个元素是一个指向目标图像某个平面的指针。类似于 <code>srcSlice</code>，对于平面图像格式，数组的每个元素对应一个色彩分量（例如 RGB 格式只有一个平面）；对于非平面格式，通常只使用数组的第一个元素指向整个图像数据。</li>\n</ul>\n</li>\n<li><strong>dstStride</strong>:\n<ul>\n<li><strong>类型</strong>: <code>const int dstStride[]</code></li>\n<li><strong>说明</strong>: 目标图像每一行的字节数的数组，表示每个平面（或通道）在每行的步幅（字节数）。这个值决定了写入目标图像时每行数据在内存中占据的字节数。通常情况下，对于 RGB 图像，<code>dstStride[0]</code> 是图像的宽度乘以 3（因为 RGB 每个像素占用 3 个字节）。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> re = <span class=\"built_in\">sws_scale</span>(</span><br><span class=\"line\">    yuvTorgb,\t\t<span class=\"comment\">// SwsContext 指针 </span></span><br><span class=\"line\">    yuv,\t\t\t<span class=\"comment\">// 输入数据</span></span><br><span class=\"line\">    yuv_linesize,\t<span class=\"comment\">// 输入数据行字节数</span></span><br><span class=\"line\">    <span class=\"number\">0</span>,\t\t\t\t<span class=\"comment\">// 转换的起始行</span></span><br><span class=\"line\">    height,\t\t\t<span class=\"comment\">// 输入高度</span></span><br><span class=\"line\">    data,\t\t\t<span class=\"comment\">// 输出的数据的存储位置</span></span><br><span class=\"line\">    lines\t\t\t<span class=\"comment\">// 输出的数据的字节数</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"两者关系\">两者关系</h3>\n<ol>\n<li>\n<p><code>sws_getCachedContext</code> 是 <code>sws_scale</code> 的<strong>准备步骤</strong>。你必须先使用 <code>sws_getCachedContext</code> 获取一个 <code>SwsContext</code>，然后才能使用这个上下文来调用 <code>sws_scale</code> 进行图像转换。</p>\n</li>\n<li>\n<p><code>sws_getCachedContext</code> 确保你得到一个正确配置的 <code>SwsContext</code>，其中包含了源图像和目标图像的所有必要信息（如尺寸、格式、缩放算法等）。</p>\n</li>\n<li>\n<p><code>sws_scale</code> 使用 <code>sws_getCachedContext</code> 创建或获取的 <code>SwsContext</code> 进行具体的转换操作。</p>\n</li>\n</ol>\n<h2 id=\"RGBA转YUV\">RGBA转YUV</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifs.<span class=\"built_in\">open</span>(RGBA_FILE, ios::binary);</span><br><span class=\"line\">ofs.<span class=\"built_in\">open</span>(YUV_FILE, ios::binary);</span><br><span class=\"line\">SwsContext *rgbToyuv = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读取RGBA帧</span></span><br><span class=\"line\">    ifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)rgba, rgb_width * rgb_height * <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ifs.<span class=\"built_in\">gcount</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// YUV 转 RGBA</span></span><br><span class=\"line\">    <span class=\"comment\">// 上下文件创建和获取</span></span><br><span class=\"line\">    rgbToyuv = <span class=\"built_in\">sws_getCachedContext</span>(</span><br><span class=\"line\">        rgbToyuv,\t\t\t\t<span class=\"comment\">// 转换上下文、NULL表示新创建，非NULL则判断与现有参数是否一致，</span></span><br><span class=\"line\">        <span class=\"comment\">// 一致直接返回，不一致先清理当前然后再次创建</span></span><br><span class=\"line\">        rgb_width, rgb_height,\t<span class=\"comment\">// 输入宽高</span></span><br><span class=\"line\">        AV_PIX_FMT_RGBA,\t\t<span class=\"comment\">// 输入像素格式</span></span><br><span class=\"line\">        width, height,\t\t\t<span class=\"comment\">// 输出的宽高</span></span><br><span class=\"line\">        AV_PIX_FMT_YUV420P,\t\t<span class=\"comment\">// 输出的像素格式</span></span><br><span class=\"line\">        SWS_BILINEAR,\t\t\t<span class=\"comment\">// 选择尺寸变换的算法，双线性插值算法</span></span><br><span class=\"line\">        <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>\t\t\t\t\t<span class=\"comment\">// 过滤器参数</span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rgbToyuv)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cerr &lt;&lt; <span class=\"string\">&quot;sws_getCachedContext failed!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span>*data[<span class=\"number\">1</span>];</span><br><span class=\"line\">    data[<span class=\"number\">0</span>] = rgba;</span><br><span class=\"line\">    <span class=\"type\">int</span> lines[<span class=\"number\">1</span>] = &#123; rgba_linesize &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> re = <span class=\"built_in\">sws_scale</span>(</span><br><span class=\"line\">        rgbToyuv, </span><br><span class=\"line\">        data, </span><br><span class=\"line\">        lines, </span><br><span class=\"line\">        <span class=\"number\">0</span>, </span><br><span class=\"line\">        rgb_height, </span><br><span class=\"line\">        yuv, </span><br><span class=\"line\">        yuv_linesize</span><br><span class=\"line\">    );</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;(re)&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\"></span><br><span class=\"line\">    ofs.<span class=\"built_in\">write</span>((<span class=\"type\">char</span>*)yuv[<span class=\"number\">0</span>], width * height);</span><br><span class=\"line\">    ofs.<span class=\"built_in\">write</span>((<span class=\"type\">char</span>*)yuv[<span class=\"number\">1</span>], width * height / <span class=\"number\">4</span>);</span><br><span class=\"line\">    ofs.<span class=\"built_in\">write</span>((<span class=\"type\">char</span>*)yuv[<span class=\"number\">2</span>], width * height / <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"清理内存数据\">清理内存数据</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> yuv[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">delete</span> yuv[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">delete</span> yuv[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">delete</span> rgba;</span><br><span class=\"line\">ifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">ofs.<span class=\"built_in\">close</span>();</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"IO文件操作","url":"http://example.com/2024/08/12/IO文件操作/","content":"<h2 id=\"打开文件，Open\">打开文件，Open</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::ifstream yuv_file;</span><br><span class=\"line\"></span><br><span class=\"line\">yuv_file.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary);</span><br></pre></td></tr></table></figure>\n<p>第二个参数<code>_Mode</code>默认值为 <code>ios_base::in</code>，表示以只读模式打开文件。常见的模式包括：</p>\n<ul>\n<li><code>ios_base::in</code>：以输入（读）模式打开文件。</li>\n<li><code>ios_base::out</code>：以输出（写）模式打开文件。</li>\n<li><code>ios_base::binary</code>：以二进制模式打开文件。</li>\n<li><code>ios_base::app</code>：以追加模式打开文件，写入的内容会追加到文件末尾。</li>\n<li><code>ios_base::trunc</code>：如果文件存在，则在打开时将其长度截断为 0（通常与 <code>ios_base::out</code> 一起使用）。</li>\n<li><code>ios_base::ate</code>：在打开文件时定位到文件末尾。</li>\n</ul>\n<h2 id=\"移动文件，seekg\">移动文件，seekg</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::ifstream yuv_file;</span><br><span class=\"line\"></span><br><span class=\"line\">yuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, ios::end);</span><br></pre></td></tr></table></figure>\n<p><code>seekg</code> 是 C++ 标准库中用于操作输入文件流（如 <code>std::ifstream</code>）位置的成员函数。<code>seekg</code> 的功能是将文件流的“读指针”移动到指定的位置，从而控制从文件中读取数据的位置。</p>\n<p><code>seekg</code>有两个重载版本：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::istream&amp; <span class=\"title\">seekg</span><span class=\"params\">(std::streampos pos)</span></span>;</span><br><span class=\"line\"><span class=\"function\">std::istream&amp; <span class=\"title\">seekg</span><span class=\"params\">(std::streamoff off, std::ios_base::seekdir dir)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数说明</strong></p>\n<ol>\n<li>\n<p><strong><code>seekg(std::streampos pos)</code></strong>:</p>\n<ul>\n<li><strong><code>pos</code></strong>: 一个绝对位置（<code>std::streampos</code> 类型），表示要将文件指针移动到文件的哪个字节位置。这是一个文件中的字节偏移量，通常相对于文件的起始位置。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>seekg(std::streamoff off, std::ios_base::seekdir dir)</code></strong>:</p>\n<ul>\n<li><strong><code>off</code></strong>: 一个相对偏移量（<code>std::streamoff</code> 类型），表示要从指定的基准位置移动多少字节。</li>\n<li><strong><code>dir</code></strong>: 一个枚举类型（<code>std::ios_base::seekdir</code>），用于指定偏移量的基准位置。它可以取以下值：\n<ul>\n<li><strong><code>std::ios_base::beg</code></strong>: 基于文件的起始位置进行偏移。</li>\n<li><strong><code>std::ios_base::cur</code></strong>: 基于当前读指针位置进行偏移。</li>\n<li><strong><code>std::ios_base::end</code></strong>: 基于文件的末尾进行偏移。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>【<strong>示例代码</strong>】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::ifstream <span class=\"title\">yuv_file</span><span class=\"params\">(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary)</span></span>;</span><br><span class=\"line\">yuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, std::ios::end);</span><br><span class=\"line\">std::streampos file_size = yuv_file.<span class=\"built_in\">tellg</span>();  <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">yuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, std::ios::beg);  <span class=\"comment\">// 重新将读指针移动到文件开头</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"读取指针位置，tellg\">读取指针位置，tellg</h2>\n<p><code>tellg</code> 是 C++ 标准库中的一个成员函数，通常用于文件输入流（如 <code>std::ifstream</code>）中。它的主要作用是返回文件流的当前读指针位置，即返回当前文件读取位置的偏移量（以字节为单位）。</p>\n<p><strong>使用场景</strong></p>\n<ol>\n<li><strong>获取文件大小</strong>：通过将读指针移动到文件末尾，然后使用 <code>tellg</code> 获取文件大小。</li>\n<li><strong>检查文件流中的当前位置</strong>：在处理文件流时，可以随时使用 <code>tellg</code> 检查当前读指针的位置，以便在处理过程中准确定位文件中的数据。</li>\n<li><strong>保存和恢复读指针位置</strong>：你可以使用 <code>tellg</code> 保存当前读指针位置，在需要时使用 <code>seekg</code> 恢复到这个位置，方便文件的随机访问。</li>\n</ol>\n<p>【<strong>示例代码</strong>】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (yuv_file.<span class=\"built_in\">tellg</span>() == file_size)  <span class=\"comment\">// 如果文件到头了</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    yuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, ios::beg);  <span class=\"comment\">// 就将文件移动到开头位置，用于循环播放</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"控制视频播放速度(使用Sleep函数)","url":"http://example.com/2024/08/12/控制视频播放速度-使用Sleep函数/","content":"<p>总体思路：在主函数中初始化SDL，读取文件，将数据交给<strong>线程Main</strong>，在<strong>线程Main</strong>中，通过while循环，以及用户设置的<strong>fps</strong>，根据<strong>fps</strong>的计算，读取数据进入View()函数中进行处理。</p>\n<h2 id=\"主函数\">主函数</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDLQtRGB::<span class=\"built_in\">SDLQtRGB</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t<span class=\"comment\">// 打开yuv文件</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拿到文件大小</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, ios::end);\t<span class=\"comment\">// 移到文件结尾</span></span><br><span class=\"line\">\tfile_size = yuv_file.<span class=\"built_in\">tellg</span>();\t<span class=\"comment\">// 文件指针位置，获取文件大小</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, ios::beg);\t<span class=\"comment\">// 移到文件开头</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 绑定渲染函数信号槽</span></span><br><span class=\"line\">    <span class=\"comment\">// 当调用ViewS()函数，就会触发View()函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(<span class=\"keyword\">this</span>, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">ViewS</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示FPS的控件</span></span><br><span class=\"line\">\tview_fps = <span class=\"keyword\">new</span> <span class=\"built_in\">QLabel</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tview_fps-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;fps: 100&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置fps</span></span><br><span class=\"line\">\tset_fps = <span class=\"keyword\">new</span> <span class=\"built_in\">QSpinBox</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tset_fps-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">200</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tset_fps-&gt;<span class=\"built_in\">setValue</span>(<span class=\"number\">25</span>);</span><br><span class=\"line\">\tset_fps-&gt;<span class=\"built_in\">setRange</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_width = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tsdl_height = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);  <span class=\"comment\">// 调整主窗口的尺寸</span></span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">\tview = XVideoView::<span class=\"built_in\">Create</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Init</span>(sdl_width, sdl_height,</span><br><span class=\"line\">\t\tXVideoView::YUV420P, (<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 生成frame对象空间</span></span><br><span class=\"line\">\tframe = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\tframe-&gt;width = sdl_width;</span><br><span class=\"line\">\tframe-&gt;height = sdl_height;</span><br><span class=\"line\">\tframe-&gt;format = AV_PIX_FMT_YUV420P;</span><br><span class=\"line\"></span><br><span class=\"line\">\tframe-&gt;linesize[<span class=\"number\">0</span>] = sdl_width;\t\t\t<span class=\"comment\">// Y</span></span><br><span class=\"line\">\tframe-&gt;linesize[<span class=\"number\">1</span>] = sdl_width / <span class=\"number\">2</span>;\t\t<span class=\"comment\">// U</span></span><br><span class=\"line\">\tframe-&gt;linesize[<span class=\"number\">2</span>] = sdl_width / <span class=\"number\">2</span>;\t\t<span class=\"comment\">// V</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 生成存储图像空间 默认32字节对齐</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_strerror</span>(re, buf, <span class=\"built_in\">sizeof</span>(buf));</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; buf &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// startTimer(40);使用线程处理，而不使用startTimer</span></span><br><span class=\"line\">\t<span class=\"comment\">// 重新创建一个线程处理Main函数，并且将this指针传递给Main方法</span></span><br><span class=\"line\">\tth_ = std::<span class=\"built_in\">thread</span>(&amp;SDLQtRGB::Main, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/AVFrame%E4%BB%8B%E7%BB%8D/\">AVFrame 介绍</a></p>\n<h2 id=\"线程Main\">线程Main</h2>\n<p><strong>控制播放速度</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// is_eixt_会在主线程的析构函数中设置</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时当前线程才会结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">ViewS</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fps &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 用户设置了的情况</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 自定义休眠函数</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">1000</span> / fps);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义休眠函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MSleep</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> beg = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ms; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"built_in\">clock</span>() - beg) / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>) &gt;= ms)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"View函数\">View函数</h2>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/%E8%A7%86%E9%A2%91%E3%80%81%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/\">YUV格式</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::View</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame-&gt;data[<span class=\"number\">0</span>], sdl_width * sdl_height);\t    <span class=\"comment\">// Y</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame-&gt;data[<span class=\"number\">1</span>], sdl_width * sdl_height / <span class=\"number\">4</span>);   <span class=\"comment\">// U</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame-&gt;data[<span class=\"number\">2</span>], sdl_width * sdl_height / <span class=\"number\">4</span>);\t<span class=\"comment\">// V</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于循环播放</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (yuv_file.<span class=\"built_in\">tellg</span>() == file_size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tyuv_file.<span class=\"built_in\">seekg</span>(<span class=\"number\">0</span>, ios::beg);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (view-&gt;<span class=\"built_in\">IsExit</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tview-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">DrawFrame</span>(frame);</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;fps: &quot;</span> &lt;&lt; view-&gt;<span class=\"built_in\">render_fps</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这个函数只能在槽函数中调用</span></span><br><span class=\"line\">\tview_fps-&gt;<span class=\"built_in\">setText</span>(ss.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\tfps = set_fps-&gt;<span class=\"built_in\">value</span>();  <span class=\"comment\">// 拿到用户设置的播放帧率</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"ffmpeg学习记录","url":"http://example.com/2024/08/11/ffmpeg学习记录/","content":"<p><a href=\"https://www.jasonqian.com/2024/08/11/%E8%A7%86%E9%A2%91%E3%80%81%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/\">视频、图片格式介绍</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/09/%E4%BD%BF%E7%94%A8SDL%E8%BF%9B%E8%A1%8CRGB%E6%B8%B2%E6%9F%93/\">使用 SDL 进行 RGB 渲染</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/%E4%BD%BF%E7%94%A8SDL%E5%B0%86%E4%B8%A4%E5%B9%85%E5%9B%BE%E7%89%87%E5%90%88%E5%B9%B6/\">使用 SDL 将两幅图片合并</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/SDL%E6%92%AD%E6%94%BEYUV%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/\">SDL 播放 YUV 格式视频</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XVideoView/\">XVideoView</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XSDL/\">XSDL</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/AVFrame%E4%BB%8B%E7%BB%8D/\">AVFrame 介绍</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/12/IO%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/\">IO 文件操作</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/12/%E6%8E%A7%E5%88%B6%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E9%80%9F%E5%BA%A6-%E4%BD%BF%E7%94%A8Sleep%E5%87%BD%E6%95%B0/\">控制视频播放速度 (使用 Sleep 函数)</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/12/YUV%E3%80%81RGBA%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/\">YUV、RGBA相互转换</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/17/ffmpeg%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81/\">ffmpeg 库进行编码</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/17/%E7%BC%96%E7%A0%81%E5%8E%8B%E7%BC%A9/\">编码压缩(I、P、B帧，GOP)</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XCodec/\">XCodec</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XEncode/\">XEncode</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/17/AVCodec%E3%80%81AVCodecContext/\">AVCodec、AVCodecContext</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/17/ffmpeg%E5%BA%93%E8%BF%9B%E8%A1%8C%E8%A7%A3%E7%A0%81/\">ffmpeg库进行解码</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XDecode/\">XDecode</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/18/AVStream%E3%80%81AVFormatContext/\">AVStream、AVFormatContext</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/18/AVCodecParameters/\">AVCodecParameters</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/18/AVPacket/\">AVPacket</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/18/%E6%88%AA%E5%8F%96%E4%B8%80%E6%AE%B5%E8%A7%86%E9%A2%91/\">截取一段视频</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/23/XFormat/\">XFormat</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XMux/\">XMux</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XDemux/\">XDemux</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/27/%E7%BC%96%E7%A0%81encoder%EF%BC%8C%E8%A7%A3%E7%A0%81decoder%EF%BC%8C%E5%A4%8D%E7%94%A8mux%EF%BC%8C%E8%A7%A3%E5%A4%8D%E7%94%A8demux%E5%85%B3%E7%B3%BB/\">编码encoder，解码decoder，复用mux，解复用demux关系</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/08/28/%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\">责任链设计模式</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XTools/\">XTools</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XDecodeTask/\">XDecodeTask</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XMuxTask/\">XMuxTask</a></p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XDemuxTask/\">XDemuxTask</a></p>\n","categories":[],"tags":[]},{"title":"AVFrame介绍","url":"http://example.com/2024/08/11/AVFrame介绍/","content":"<h2 id=\"AVFrame介绍\">AVFrame介绍</h2>\n<p><code>AVFrame</code> 是 FFmpeg 库中用于存储音视频数据帧的核心结构体。它在处理视频解码、编码、滤镜以及其他音视频处理任务时非常重要。<code>AVFrame</code> 可以表示原始的未压缩音频或视频数据。</p>\n<ol>\n<li><strong><code>AVFrame</code> 的作用：</strong></li>\n</ol>\n<ul>\n<li><strong>视频帧</strong>：在处理视频时，<code>AVFrame</code> 用于存储解码后的原始视频帧，每个帧包括像素数据、分辨率、格式、时间戳等信息。</li>\n<li><strong>音频帧</strong>：在处理音频时，<code>AVFrame</code> 用于存储解码后的原始音频数据，包括音频样本、通道布局、采样率等信息。</li>\n</ul>\n<ol start=\"2\">\n<li><strong><code>AVFrame</code> 的结构：</strong></li>\n</ol>\n<p><code>AVFrame</code> 是一个复杂的结构体，包含了大量与音视频数据相关的字段。以下是一些主要字段的介绍：</p>\n<ul>\n<li>\n<p><strong>数据和缓冲区相关：</strong></p>\n<p><code>AV_NUM_DATA_POINTERS</code>是 FFmpeg 库中的一个<strong>宏定义</strong>，它定义了用于指向数据平面的指针数组的大小。一般被定义为 <code>8</code>，这意味着数据指针数组 <code>data[AV_NUM_DATA_POINTERS]</code> 可以存储多达 8 个指向不同数据平面的指针。</p>\n<ul>\n<li><code>uint8_t *data[AV_NUM_DATA_POINTERS]</code>：指向存储数据的指针数组。对于视频，<code>data[0]</code> 通常指向 <strong>Y 平面</strong>，<code>data[1]</code> 和 <code>data[2]</code> 分别指向 <strong>U 和 V 平面</strong>。对于音频，这些指针指向音频样本数据。</li>\n<li><code>int linesize[AV_NUM_DATA_POINTERS]</code>：表示每行图像数据（对于视频）或每个音频通道的字节数。对于视频帧，这决定了每行像素数据在内存中的跨度。</li>\n<li><code>AVBufferRef *buf[AV_NUM_DATA_POINTERS]</code>：指向 <code>AVBufferRef</code> 的引用，管理 <code>data</code> 指针的引用计数和生命周期。</li>\n</ul>\n</li>\n<li>\n<p><strong>视频相关：</strong></p>\n<ul>\n<li><code>int width</code>：视频帧的宽度（以像素为单位）。</li>\n<li><code>int height</code>：视频帧的高度（以像素为单位）。</li>\n<li><code>enum AVPixelFormat format</code>：视频帧的像素格式，如 <code>AV_PIX_FMT_YUV420P</code> 或 <code>AV_PIX_FMT_RGB24</code> 等。</li>\n</ul>\n</li>\n<li>\n<p><strong>音频相关：</strong></p>\n<ul>\n<li><code>int nb_samples</code>：音频帧中包含的样本数。</li>\n<li><code>int channels</code>：音频帧的通道数。</li>\n<li><code>enum AVSampleFormat format</code>：音频帧的采样格式，如 <code>AV_SAMPLE_FMT_S16</code>（16位有符号整数）或 <code>AV_SAMPLE_FMT_FLTP</code>（浮点数，平面格式）等。</li>\n<li><code>uint64_t channel_layout</code>：音频通道布局，例如 <code>AV_CH_LAYOUT_STEREO</code> 表示立体声。</li>\n</ul>\n</li>\n<li>\n<p><strong>时间相关：</strong></p>\n<ul>\n<li><code>int64_t pts</code>：表示这个帧的展示时间戳（Presentation Timestamp），通常用来同步音视频。</li>\n<li><code>int64_t pkt_dts</code>：表示解码时间戳（Decoding Timestamp）。</li>\n</ul>\n</li>\n<li>\n<p><strong>引用计数和缓冲区管理：</strong></p>\n<ul>\n<li><code>int *extended_data</code>：与 <code>data</code> 指针类似，但用于扩展通道数的情况，尤其在处理音频数据时。</li>\n<li><code>int refcounted</code>：指示该帧是否使用引用计数。如果为 1，则帧的数据会通过引用计数机制进行管理，多个 <code>AVFrame</code> 可以共享同一块数据。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>常用的 <code>AVFrame</code> 函数：</strong></li>\n</ol>\n<ul>\n<li><code>av_frame_alloc()</code>：分配一个新的 <code>AVFrame</code> 对象，并初始化为默认值。</li>\n<li><code>av_frame_free(AVFrame **frame)</code>：释放 <code>AVFrame</code> 对象及其关联的资源。调用后，<code>frame</code> 指针将被置为 <code>NULL</code>。</li>\n<li><code>av_frame_get_buffer(AVFrame *frame, int align)</code>：为 <code>AVFrame</code> 的数据缓冲区分配内存。<code>align</code> 参数指定内存的对齐方式。</li>\n<li><code>av_frame_unref(AVFrame *frame)</code>：减少 <code>AVFrame</code> 缓冲区的引用计数，并将 <code>AVFrame</code> 重置为空。这个函数不会释放 <code>AVFrame</code> 对象本身，只是释放其数据缓冲区。</li>\n<li><code>av_frame_ref(AVFrame *dst, const AVFrame *src)</code>：使 <code>dst</code> <code>AVFrame</code> 成为 <code>src</code> <code>AVFrame</code> 的引用，即共享相同的缓冲区。</li>\n</ul>\n<ol start=\"4\">\n<li><strong><code>AVFrame</code> 的应用场景：</strong></li>\n</ol>\n<ul>\n<li><strong>视频解码</strong>：从解码器获得原始视频帧后，可以使用 <code>AVFrame</code> 存储并进一步处理或显示。</li>\n<li><strong>音频解码</strong>：类似地，解码后的音频样本数据也可以存储在 <code>AVFrame</code> 中。</li>\n<li><strong>过滤</strong>：在使用 FFmpeg 过滤器链时，<code>AVFrame</code> 作为输入和输出数据结构传递和处理。</li>\n<li><strong>视频编码</strong>：将处理后的帧再次封装或编码时，<code>AVFrame</code> 也是主要的数据结构。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>AVFrame 的生命周期管理：</strong></li>\n</ol>\n<ul>\n<li><strong>分配</strong>：首先，通过 <code>av_frame_alloc()</code> 函数分配一个 <code>AVFrame</code> 对象。</li>\n<li><strong>初始化和填充数据</strong>：可以通过 <code>av_frame_get_buffer()</code> 为其数据分配缓冲区，或者通过解码器等接口直接获得填充了数据的 <code>AVFrame</code>。</li>\n<li><strong>使用</strong>：<code>AVFrame</code> 进行各种处理，比如滤镜、编码、显示等。</li>\n<li><strong>释放</strong>：使用完毕后，通过 <code>av_frame_unref()</code> 或 <code>av_frame_free()</code> 释放 <code>AVFrame</code> 及其数据。</li>\n</ul>\n<p>总结：</p>\n<p><code>AVFrame</code> 是 FFmpeg 中非常重要的数据结构，广泛用于音视频处理的各个阶段。通过引用计数管理缓冲区，<code>AVFrame</code> 提供了高效、安全的内存管理机制，是 FFmpeg 处理多媒体数据的基石。</p>\n<h3 id=\"常用的-AVFrame-函数说明\">常用的 AVFrame 函数说明</h3>\n<h4 id=\"av-frame-get-buffer-AVFrame-frame-int-align\">av_frame_get_buffer(AVFrame *frame, int align)</h4>\n<p><code>align</code> 参数。常见的对齐值有 1、16、32、64 等。默认情况下，FFmpeg 一般使用 32 字节对齐，因为这在大多数平台上是一个较好的平衡选择。</p>\n<p>如果设置的时候，不是 1、16、32、64 ，系统会自动向上取整为最近的 16 字节对齐。比如<code>align</code>为12，系统会自动调整为16</p>\n<p>查看<code>align</code>的代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check_alignment</span><span class=\"params\">(AVFrame *frame, <span class=\"type\">int</span> align)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; AV_NUM_DATA_POINTERS; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (frame-&gt;data[i]) &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;Frame data[&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;] address: &quot;</span> &lt;&lt; (<span class=\"type\">uintptr_t</span>)frame-&gt;data[i] &lt;&lt; std::endl;</span><br><span class=\"line\">            std::cout &lt;&lt; <span class=\"string\">&quot;Alignment check (should be 0 if correctly aligned): &quot;</span></span><br><span class=\"line\">                      &lt;&lt; ((<span class=\"type\">uintptr_t</span>)frame-&gt;data[i] % align) &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">check_alignment</span>(frame, <span class=\"number\">12</span>);</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;======&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"built_in\">check_alignment</span>(frame, <span class=\"number\">16</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>align</code>为12的时候，执行<code>main</code>函数中的代码，会得到</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408121424214.png\" alt=\"image-20240812142347462\"  />\n<p>说明：与12有偏差，但是与16没有偏差</p>\n<h2 id=\"代码样例：\">代码样例：</h2>\n<h3 id=\"引用计数\">引用计数</h3>\n<p>运行结果：</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408111652220.png\" alt=\"image-20240811165246723\"  />\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;AVFrame_test.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;first ffmepg&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"built_in\">avcodec_configuration</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建frame对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> frame1 = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 图像参数</span></span><br><span class=\"line\">\tframe1-&gt;width = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tframe1-&gt;height = <span class=\"number\">300</span>;</span><br><span class=\"line\">\tframe1-&gt;format = AV_PIX_FMT_ARGB;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 分配空间 16字节对齐，默认填0就是32字节</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame1, <span class=\"number\">16</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_strerror</span>(re, buf, <span class=\"built_in\">sizeof</span>(buf));</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; buf &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;frame1-&gt;linesize[0]=&quot;</span> &lt;&lt; frame1-&gt;linesize[<span class=\"number\">0</span>] &lt;&lt; std::endl;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t   由于是ARGB格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   linesize[0] = width × 每个像素的字节数</span></span><br><span class=\"line\"><span class=\"comment\">\t   linesize[0] = width x 4</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(frame1-&gt;buf[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;frame1 ref count = &quot;</span> &lt;&lt;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_buffer_get_ref_count</span>(frame1-&gt;buf[<span class=\"number\">0</span>]) &lt;&lt;  <span class=\"comment\">// 线程安全</span></span><br><span class=\"line\">\t\t\tstd::endl;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;=======&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个新的 AVFrame 对象 frame2，并使其成为 frame1 的引用。</span></span><br><span class=\"line\">\t<span class=\"comment\">// frame2不是复制frame1的数据，而是共享底层数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> frame2 = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_ref</span>(frame2, frame1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;av_frame_ref(frame2, frame1)&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;frame1 ref count = &quot;</span> &lt;&lt;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_buffer_get_ref_count</span>(frame1-&gt;buf[<span class=\"number\">0</span>]) &lt;&lt;  <span class=\"comment\">// 线程安全</span></span><br><span class=\"line\">\t\tstd::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;frame2 ref count = &quot;</span> &lt;&lt;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_buffer_get_ref_count</span>(frame2-&gt;buf[<span class=\"number\">0</span>]) &lt;&lt;  <span class=\"comment\">// 线程安全</span></span><br><span class=\"line\">\t\tstd::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 引用计数-1 并将buf清零</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_unref</span>(frame2);</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;av_frame_unref(frame2)&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; <span class=\"string\">&quot;frame1 ref count = &quot;</span> &lt;&lt;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_buffer_get_ref_count</span>(frame1-&gt;buf[<span class=\"number\">0</span>]) &lt;&lt;  <span class=\"comment\">// 线程安全</span></span><br><span class=\"line\">\t\tstd::endl;</span><br><span class=\"line\">\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 引用计数为1 直接删除buf空间 引用计数变为0 且无法访问</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_unref</span>(frame1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 释放frame对象空间，并且buf引用计数减一</span></span><br><span class=\"line\">\t<span class=\"comment\">// buf已经为空 只删除frame对象空间</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_free</span>(&amp;frame1);</span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_free</span>(&amp;frame2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"工程运用\">工程运用</h3>\n<p>详情看 <a href=\"https://www.jasonqian.com/2024/07/22/XSDL/\">XSDL</a></p>\n","categories":[],"tags":[]},{"title":"视频、图片格式","url":"http://example.com/2024/08/11/视频、图片格式/","content":"<h2 id=\"YUV格式-2\">YUV格式</h2>\n<p>YUV：&quot;Y&quot;表示明亮度（Luminance或Luma），也就是灰阶值，&quot;U&quot;和&quot;V&quot;表示的则是色度（Chrominance或Chroma）</p>\n<h3 id=\"为什么压缩数据一般采用YUV格式\">为什么压缩数据一般采用YUV格式</h3>\n<ul>\n<li>与熟知RGB类似，YUV也是一种颜色编码方法，它是指将<strong>亮度</strong>参量(Y:Luminance或Luma)和<strong>色度</strong>参量(UV:Chrominance或Chroma)分开进行表示的像素编码格式</li>\n<li>这样分开的好处就是不但可以避免相互干扰，没有UV信息一样可以显示完整的图像因而解决了<strong>彩色电视与黑白电视的兼容问题</strong>;还可以<strong>降低色度的采样率</strong>而不会对图像质量影响太大，降低了视屏信号传输时对频宽(带宽)的要求。</li>\n<li>Y共用一组UV分量</li>\n</ul>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408130922811.png\" alt=\"image-20240813092203880\" style=\"zoom:50%;\" />\n<h3 id=\"YUV具体格式\">YUV具体格式</h3>\n<h3 id=\"YUV444-2\">YUV444</h3>\n<p>表示$4:4:4$的YUV取样。</p>\n<p>每个像素都有独立的Y、U、V分量。</p>\n<p><strong>每一个像素</strong>Y占一个字节，U占一个字节，V占一个字节，因此每个像素占：</p>\n<p>$$1 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=24 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$像素的图像为例</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408150940476.png\" alt=\"image-20240815093959105\" style=\"zoom:67%;\" />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U2, V2</span><br><span class=\"line\">像素3：Y3, U3, V3</span><br><span class=\"line\">像素4：Y4, U4, V4</span><br></pre></td></tr></table></figure>\n<h3 id=\"YUV422-2\">YUV422</h3>\n<p>表示$4:2:2$的YUV取样。</p>\n<p><strong>每相邻两个像素</strong>每个像素占一个Y，共享一个U和一个V，因此两个像素占：</p>\n<p>$$2 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=32 bits$$</p>\n<p>每个像素占：</p>\n<p>$$\\displaystyle\\frac{32bits}{2 pixels}=16 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$像素的图像为例</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408150940462.png\" alt=\"image-20240815094054348\" style=\"zoom:67%;\" />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U1, V1</span><br><span class=\"line\">像素3：Y3, U2, V2</span><br><span class=\"line\">像素4：Y4, U2, V2</span><br></pre></td></tr></table></figure>\n<p>YUV422 格式比 YUV444 格式节省了数据量，同时仍然保持较高的图像质量。这就是为什么 YUV422 格式广泛用于视频压缩和传输的原因。</p>\n<h3 id=\"YUV411-2\">YUV411</h3>\n<p>表示$4:1:1$的YUV取样。</p>\n<p><strong>每相邻四个像素</strong>每个像素占一个Y，共享一个U和一个V，因此四个像素占：</p>\n<p>$$4 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=48 bits$$</p>\n<p>每个像素占：</p>\n<p>$$\\displaystyle\\frac{48bits}{4 pixels}=12 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$像素的图像为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U1, V1</span><br><span class=\"line\">像素3：Y3, U1, V1</span><br><span class=\"line\">像素4：Y4, U1, V1</span><br></pre></td></tr></table></figure>\n<h3 id=\"YUV420-2\">YUV420</h3>\n<p>表示$4:2:0$的YUV取样。</p>\n<p><strong>水平每两个像素与垂直每两个像素</strong>中Y取4个，U取1个，V取1个，因此两个像素占：</p>\n<p>$$4 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=48 bits$$</p>\n<p>每个像素占：</p>\n<p>$$\\displaystyle\\frac{48bits}{4 pixels}=12 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$像素的图像为例</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408150941676.png\" alt=\"image-20240815094148920\" style=\"zoom:67%;\" />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U1, V1</span><br><span class=\"line\">像素3：Y3, U1, V1</span><br><span class=\"line\">像素4：Y4, U1, V1</span><br></pre></td></tr></table></figure>\n<p>这里的$4:2:0$代表了$4:2:0$和$4:0:2$两种情况，它们在奇偶行交错出现。</p>\n<p>常见的H.264、H.265、VP8、AV1等都是以它为基础进行编解码的。</p>\n<h3 id=\"存储方式\">存储方式</h3>\n<h4 id=\"YUV420P\">YUV420P</h4>\n<p>先存Y，再存U，再存V</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408171614263.png\" alt=\"image-20240815093500524\"></p>\n<h4 id=\"NV12\">NV12</h4>\n<p>先存Y，再交错存储U、V</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408171614708.png\" alt=\"image-20240815093602289\"></p>\n<h4 id=\"其他\">其他</h4>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408171614582.png\" alt=\"image-20240815094357980\" style=\"zoom:80%;\" />\n<h2 id=\"RGB格式\">RGB格式</h2>\n<p>RGB：红R、绿G、蓝B三基色。</p>\n<p>RGB的排列。通常的图像像素是按RGB顺序进行排列，但有些图像处理要转成其他顺序，比如OpenCV经常转成BGR的排列方式。</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408130917112.png\" alt=\"image-20240813091753383\" style=\"zoom:67%;\" />\n<p>【一些格式】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AV_PIX_FMT_RGB24,  <span class=\"comment\">// RGB 8:8:8 24bpp</span></span><br><span class=\"line\">AV_PIX_FMT_ARGB,   <span class=\"comment\">// ARGB 8:8:8:8 32bpp</span></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"SDL播放YUV格式视频","url":"http://example.com/2024/08/11/SDL播放YUV格式视频/","content":"<h2 id=\"代码-13\">代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMessageBox&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Window* sdl_win = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Renderer* sdl_render = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Texture* sdl_texture = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* yuv = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> std::ifstream yuv_file;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SdlQtRgb::<span class=\"built_in\">SdlQtRgb</span>(QWidget *parent)</span><br><span class=\"line\">\t: <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =====（1）=====</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!yuv_file)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;open yuv failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_width = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tsdl_height = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_win = <span class=\"built_in\">SDL_CreateWindowFrom</span>((<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_render = <span class=\"built_in\">SDL_CreateRenderer</span>(sdl_win, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_texture = <span class=\"built_in\">SDL_CreateTexture</span>(sdl_render,</span><br><span class=\"line\">        <span class=\"comment\">// =====（二）=====</span></span><br><span class=\"line\">\t\tSDL_PIXELFORMAT_IYUV,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">\t\tsdl_width,</span><br><span class=\"line\">\t\tsdl_height</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tyuv = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SdlQtRgb::timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// =====（三）=====</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv, sdl_width * sdl_height * <span class=\"number\">1.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, yuv, sdl_width);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(sdl_render);</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.w = sdl_width;</span><br><span class=\"line\">\trect.h = sdl_height;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderCopy</span>(sdl_render, sdl_texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(sdl_render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SdlQtRgb::~<span class=\"built_in\">SdlQtRgb</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 清理和释放SDL所使用的资源</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（一）\">（一）</h3>\n<p>为什么要用binary打开文件？</p>\n<p>以二进制模式打开文件是为了确保文件内容按原始字节读取或写入，而不经过任何修改或转换。</p>\n<p>在文本模式下（即不使用 <code>std::ios::binary</code> 时），文件的读写操作可能会受到操作系统的影响，特别是在处理不同操作系统的换行符时</p>\n<h3 id=\"（二）\">（二）</h3>\n<p><code>SDL_PIXELFORMAT_IYUV</code>格式？</p>\n<p><code>SDL_PIXELFORMAT_IYUV</code> 是 SDL 库中定义的一种像素格式，表示 YUV420P 格式的图像数据。它是一种压缩的 YUV 格式，通常用于视频和图像处理。下面是对 <code>SDL_PIXELFORMAT_IYUV</code> 的详细介绍：</p>\n<ol>\n<li><strong>YUV 颜色空间</strong>：</li>\n</ol>\n<ul>\n<li><strong>Y</strong> 表示亮度分量（Luminance），它决定了图像的亮度或灰度级别。</li>\n<li><strong>U 和 V</strong> 表示色度分量（Chrominance），它们共同描述了图像的颜色信息。</li>\n<li>YUV <strong>格式通过分离亮度和色度来减少数据量，这在视频压缩和传输中非常有效。</strong></li>\n</ul>\n<ol start=\"2\">\n<li><strong>YUV420P 格式</strong>：</li>\n</ol>\n<ul>\n<li><strong>YUV420P</strong> 是一种常见的 YUV 格式，其中亮度（Y）分量的分辨率与原图一致，而色度（U 和 V）分量的分辨率是亮度的四分之一。</li>\n<li><strong>IYUV 和 YV12</strong> 都是 YUV420P 的变种，它们的区别在于 U 和 V 分量的存储顺序。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>IYUV 格式的结构</strong>：</li>\n</ol>\n<ul>\n<li>在 <code>IYUV</code> 格式中，图像数据按平面（Plane）排列：\n<ul>\n<li><strong>Y 平面</strong>：首先存储所有像素的亮度信息，大小为 <code>width * height</code> 字节。</li>\n<li><strong>U 平面</strong>：接下来存储所有 U 分量数据，大小为 <code>width/2 * height/2</code> 字节。</li>\n<li><strong>V 平面</strong>：最后存储所有 V 分量数据，大小同样为 <code>width/2 * height/2</code> 字节。</li>\n<li><strong>存储</strong>：YYYYYYYY UUUU VVVV</li>\n</ul>\n</li>\n<li>这意味着对于一个 <code>400x300</code> 的图像，IYUV 格式的数据结构如下：\n<ul>\n<li><strong>Y 分量</strong>：400x300 = 120,000 字节</li>\n<li><strong>U 分量</strong>：200x150 = 30,000 字节</li>\n<li><strong>V 分量</strong>：200x150 = 30,000 字节</li>\n<li><strong>总数据量</strong>：120,000 + 30,000 + 30,000 = 180,000 字节</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><strong>与 YV12 的区别</strong>：</li>\n</ol>\n<ul>\n<li><strong>IYUV</strong>：在内存中按 Y -&gt; U -&gt; V 的顺序存储。</li>\n<li><strong>YV12</strong>：在内存中按 Y -&gt; V -&gt; U 的顺序存储。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>在 SDL 中的使用</strong>：</li>\n</ol>\n<ul>\n<li><code>SDL_PIXELFORMAT_IYUV</code> 在 SDL 中用于处理、显示和转换视频帧。开发者可以使用 SDL 的渲染函数（如 <code>SDL_UpdateTexture</code>）来显示这种格式的图像。</li>\n<li>这种格式被广泛用于视频解码和播放，因为它比 RGB 更节省存储空间和带宽。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>应用场景</strong>：</li>\n</ol>\n<ul>\n<li><strong>视频播放</strong>：IYUV 格式常用于视频解码器输出的数据格式，适合直接传递给视频渲染器。</li>\n<li><strong>视频传输和存储</strong>：由于其数据压缩特性，YUV420 格式在视频编码中很常见，例如在 MPEG、H.264 等视频编码标准中。</li>\n</ul>\n<h3 id=\"（三）\">（三）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv, sdl_width * sdl_height * <span class=\"number\">1.5</span>);</span><br></pre></td></tr></table></figure>\n<p>这里$\\times 1.5$为什么？</p>\n<p>具体解释：</p>\n<p>YUV 格式的图像数据通常分为三个平面：</p>\n<ol>\n<li><strong>Y 分量（亮度信息，Luminance）</strong>：每个像素都有一个 Y 分量，因此 Y 平面的大小是图像的宽度乘以高度（<code>sdl_width * sdl_height</code>）。</li>\n<li><strong>U 分量（色度信息，Chrominance）</strong>：U 分量平面通常是 Y 平面大小的四分之一（<code>sdl_width/2 * sdl_height/2</code>），因为 U 分量是 2x2 像素块共享的。</li>\n<li><strong>V 分量（色度信息，Chrominance）</strong>：V 分量平面的大小与 U 分量相同，也是 Y 平面的四分之一。</li>\n</ol>\n<p>因此，对于一个 YUV420 格式的图像（比如 IYUV 或 YV12 格式）：</p>\n<ul>\n<li><strong>Y 平面</strong>：占用 <code>sdl_width * sdl_height</code> 字节。</li>\n<li><strong>U 平面</strong>：占用 <code>(sdl_width/2) * (sdl_height/2)</code> 字节，即 <code>sdl_width * sdl_height / 4</code> 字节。</li>\n<li><strong>V 平面</strong>：占用的字节数与 U 平面相同，也是 <code>sdl_width * sdl_height / 4</code> 字节。</li>\n</ul>\n<p>所以，YUV420 图像的总数据量为：</p>\n<p>总数据量=Y平面+U平面+V平面</p>\n<p>总数据量$=sdl_width \\times sdl_height + \\displaystyle\\frac{sdl_width \\times sdl_height}{4}+\\displaystyle\\frac{sdl_width \\times sdl_height}{4}$</p>\n<p>总数据量$=sdl_width \\times sdl_height\\times (1+\\frac{1}{4}+\\frac{1}{4})=sdl_width \\times sdl_height\\times1.5$</p>\n<p>因此，乘以 <code>1.5</code> 是为了读取包含整个 YUV 图像帧的所有数据，包括 Y、U、V 三个分量。这确保了从文件中读取到的字节数足够填充一个完整的 YUV 图像帧。</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理yuv数据</span></span><br><span class=\"line\"><span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, yuv, sdl_width);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理rgb数据</span></span><br><span class=\"line\"><span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, rgb, sdl_width * pix_size);</span><br></pre></td></tr></table></figure>\n<p>为什么第四个参数一个需要乘<code>pix_size</code>？</p>\n<p>在 <code>SDL_UpdateTexture</code> 函数中，第四个参数表示每一行数据的字节数（通常称为 “pitch” 或 “stride”）。对于不同的像素格式，这个参数的值会有所不同。</p>\n<ul>\n<li><strong>YUV 数据</strong>：通常 YUV 数据的每个像素由<strong>多个平面</strong>（例如 Y、U、V 平面）表示，每个平面可能有不同的分辨率。第四个参数 <code>sdl_width</code> 直接表示一行像素的宽度，因为每个 Y 分量通常占用一个字节。</li>\n<li><strong>RGB 数据</strong>：RGB 数据通常使用<strong>单个平面</strong>表示，每个像素由多个字节（例如 3 个字节的 RGB24 或 4 个字节的 RGBA32）表示。因此，第四个参数需要乘以 <code>pix_size</code>，即每个像素的字节数，以表示一行数据的总字节数。</li>\n</ul>\n","categories":[],"tags":[]},{"title":"使用SDL将两幅图片合并","url":"http://example.com/2024/08/11/使用SDL将两幅图片合并/","content":"<h2 id=\"代码-17\">代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMessageBox&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Window* sdl_win = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Renderer* sdl_render = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Texture* sdl_texture = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* rgb = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SdlQtRgb::<span class=\"built_in\">SdlQtRgb</span>(QWidget *parent)</span><br><span class=\"line\">\t: <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取label的长宽</span></span><br><span class=\"line\">\tsdl_width = ui.label-&gt;<span class=\"built_in\">width</span>();</span><br><span class=\"line\">\tsdl_height = ui.label-&gt;<span class=\"built_in\">height</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化SDL </span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Init</span>(SDL_INIT_EVERYTHING);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用Qt的QLabel来初始化窗口</span></span><br><span class=\"line\">\tsdl_win = <span class=\"built_in\">SDL_CreateWindowFrom</span>((<span class=\"type\">void</span> *)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用窗口来创建渲染器</span></span><br><span class=\"line\">\tsdl_render = <span class=\"built_in\">SDL_CreateRenderer</span>(sdl_win, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">QImage <span class=\"title\">img1</span><span class=\"params\">(<span class=\"string\">&quot;001.jpg&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">QImage <span class=\"title\">img2</span><span class=\"params\">(<span class=\"string\">&quot;002.jpg&quot;</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (img1.<span class=\"built_in\">isNull</span>() || img2.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;open image failed!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 目标大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> target_width = <span class=\"number\">800</span>;  <span class=\"comment\">// 你可以根据需要调整这个值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> target_height = <span class=\"number\">600</span>; <span class=\"comment\">// 你可以根据需要调整这个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算缩放比例</span></span><br><span class=\"line\">    <span class=\"comment\">// =====（一）=====</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> scale1_w = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(target_width) / (img1.<span class=\"built_in\">width</span>() + img2.<span class=\"built_in\">width</span>());</span><br><span class=\"line\">\t<span class=\"type\">float</span> scale1_h = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(target_height) / std::<span class=\"built_in\">max</span>(img1.<span class=\"built_in\">height</span>(), img2.<span class=\"built_in\">height</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 选择最小的缩放比例，确保图片不会超出目标大小</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> scale = std::<span class=\"built_in\">min</span>(scale1_w, scale1_h);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 缩放图片，scaled函数</span></span><br><span class=\"line\">\tQImage img1_resized = img1.<span class=\"built_in\">scaled</span>(img1.<span class=\"built_in\">width</span>() * scale, img1.<span class=\"built_in\">height</span>() * scale);</span><br><span class=\"line\">\tQImage img2_resized = img2.<span class=\"built_in\">scaled</span>(img2.<span class=\"built_in\">width</span>() * scale, img2.<span class=\"built_in\">height</span>() * scale);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算合并后的图片大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> out_w = img1_resized.<span class=\"built_in\">width</span>() + img2_resized.<span class=\"built_in\">width</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> out_h = std::<span class=\"built_in\">max</span>(img1_resized.<span class=\"built_in\">height</span>(), img2_resized.<span class=\"built_in\">height</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新SDL窗口大小</span></span><br><span class=\"line\">\tsdl_width = out_w;</span><br><span class=\"line\">\tsdl_height = out_h;</span><br><span class=\"line\">\t<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建材质</span></span><br><span class=\"line\">\tsdl_texture = <span class=\"built_in\">SDL_CreateTexture</span>(sdl_render,</span><br><span class=\"line\">\t\tSDL_PIXELFORMAT_ARGB8888,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">\t\tsdl_width,</span><br><span class=\"line\">\t\tsdl_height</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建RGBA图像所需要的像素空间</span></span><br><span class=\"line\">\trgb = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(rgb, <span class=\"number\">0</span>, sdl_width * sdl_height * pix_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =====（二）=====</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sdl_height; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b = i * sdl_width * pix_size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; img1_resized.<span class=\"built_in\">height</span>()) <span class=\"built_in\">memcpy</span>(rgb + b, img1_resized.<span class=\"built_in\">scanLine</span>(i), img1_resized.<span class=\"built_in\">width</span>() * pix_size);</span><br><span class=\"line\">\t\tb += img1_resized.<span class=\"built_in\">width</span>() * pix_size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &lt; img2_resized.<span class=\"built_in\">height</span>()) <span class=\"built_in\">memcpy</span>(rgb + b, img2_resized.<span class=\"built_in\">scanLine</span>(i), img2_resized.<span class=\"built_in\">width</span>() * pix_size);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">QImage <span class=\"title\">out</span><span class=\"params\">(rgb, sdl_width, sdl_height, QImage::Format_ARGB32)</span></span>;</span><br><span class=\"line\">\tout.<span class=\"built_in\">save</span>(<span class=\"string\">&quot;jasonqian_out_resized.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SdlQtRgb::timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// =====（三）=====</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, rgb, sdl_width * pix_size);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(sdl_render);</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.w = sdl_width;</span><br><span class=\"line\">\trect.h = sdl_height;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderCopy</span>(sdl_render, sdl_texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(sdl_render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SdlQtRgb::~<span class=\"built_in\">SdlQtRgb</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 清理和释放SDL所使用的资源</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（一）-5\">（一）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> scale1_w = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(target_width) / (img1.<span class=\"built_in\">width</span>() + img2.<span class=\"built_in\">width</span>());</span><br><span class=\"line\"><span class=\"type\">float</span> scale1_h = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">float</span>&gt;(target_height) / std::<span class=\"built_in\">max</span>(img1.<span class=\"built_in\">height</span>(), img2.<span class=\"built_in\">height</span>());</span><br></pre></td></tr></table></figure>\n<p><code>static_cast</code> 是 C++ 中一种类型转换操作符，用于在编译时执行明确的类型转换。它提供了一种比传统的 C 风格类型转换（如 <code>(type)variable</code>）更安全、可控的类型转换方式。</p>\n<p><code>static_cast</code> 的用途：</p>\n<ul>\n<li><strong>基本数据类型之间的转换</strong>：例如，将 <code>int</code> 转换为 <code>float</code>，或将 <code>float</code> 转换为 <code>double</code>。</li>\n<li><strong>指针类型的转换</strong>：在继承关系中，可以使用 <code>static_cast</code> 将基类的指针转换为派生类的指针，前提是这种转换是安全且合法的。</li>\n<li><strong>隐式类型转换</strong>：对于可以通过隐式转换的类型（例如从 <code>int</code> 到 <code>float</code>），<code>static_cast</code> 可以显式地执行这种转换。</li>\n<li><strong>枚举类型和整数之间的转换</strong>：例如，可以将枚举类型转换为整数，反之亦然。</li>\n</ul>\n<p>【<strong>例子</strong>】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> b = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(a); <span class=\"comment\">// 将 int 转换为 double</span></span><br><span class=\"line\">    std::cout &lt;&lt; b &lt;&lt; std::endl; <span class=\"comment\">// 输出 10.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">double</span> d = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(d); <span class=\"comment\">// 将 double 转换为 int</span></span><br><span class=\"line\">    std::cout &lt;&lt; i &lt;&lt; std::endl; <span class=\"comment\">// 输出 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>static_cast</code> 的原因：</p>\n<ol>\n<li><strong>类型安全</strong>：<code>static_cast</code> 只允许合理的、明确的类型转换。如果尝试执行不合理的转换，编译器会发出警告或错误。</li>\n<li><strong>代码可读性</strong>：通过使用 <code>static_cast</code>，程序员和代码审查者可以更清楚地看到何处发生了类型转换，以及转换的目标类型是什么。</li>\n</ol>\n<p>【<strong>不合理的例子</strong>】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> value = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(arr); <span class=\"comment\">// 不合理：数组不能被转换为非数组类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">double</span> d = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>* iptr = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>*&gt;(&amp;d); <span class=\"comment\">// 不合理：double* 和 int* 之间没有关系</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"（二）-5\">（二）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sdl_height; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 复制第i + 1行的数据</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b = i * sdl_width * pix_size;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 复制第一幅图片的第i + 1行数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; img1_resized.<span class=\"built_in\">height</span>()) <span class=\"built_in\">memcpy</span>(rgb + b, img1_resized.<span class=\"built_in\">scanLine</span>(i), img1_resized.<span class=\"built_in\">width</span>() * pix_size);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 复制第二幅图片的第i + 1行数据</span></span><br><span class=\"line\">    b += img1_resized.<span class=\"built_in\">width</span>() * pix_size;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; img2_resized.<span class=\"built_in\">height</span>()) <span class=\"built_in\">memcpy</span>(rgb + b, img2_resized.<span class=\"built_in\">scanLine</span>(i), img2_resized.<span class=\"built_in\">width</span>() * pix_size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408111012040.jpg\" alt=\"2f92e7cca69f85c0d8809b01453f2d4\" style=\"zoom:33%;\" />\n<p><strong>行1</strong>：先复制第一幅图片的第1行，再复制第二幅图片的第1行。</p>\n<p><strong>行2</strong>：先复制第一幅图片的第2行，再复制第二幅图片的第2行。</p>\n<p>依此类推，直到处理完所有行。</p>\n<h3 id=\"（三）-5\">（三）</h3>\n<p>详情见：<a href=\"https://www.jasonqian.com/2024/08/09/%E4%BD%BF%E7%94%A8SDL%E8%BF%9B%E8%A1%8CRGB%E6%B8%B2%E6%9F%93/\">使用 SDL 进行 RGB 渲染</a>。</p>\n","categories":[],"tags":[]},{"title":"使用SDL进行RGB渲染","url":"http://example.com/2024/08/09/使用SDL进行RGB渲染/","content":"<h2 id=\"代码-18\">代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Window* sdl_win = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Renderer* sdl_render = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Texture* sdl_texture = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* rgb = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SdlQtRgb::<span class=\"built_in\">SdlQtRgb</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取视频的长宽</span></span><br><span class=\"line\">\tsdl_width = ui.label-&gt;<span class=\"built_in\">width</span>();</span><br><span class=\"line\">\tsdl_height = ui.label-&gt;<span class=\"built_in\">height</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化SDL </span></span><br><span class=\"line\">\t<span class=\"comment\">// =====（一）=====</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用Qt的QLabel来初始化窗口</span></span><br><span class=\"line\">\tsdl_win = <span class=\"built_in\">SDL_CreateWindowFrom</span>((<span class=\"type\">void</span> *)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用窗口来创建渲染器</span></span><br><span class=\"line\">\t<span class=\"comment\">// =====（二）=====</span></span><br><span class=\"line\">\tsdl_render = <span class=\"built_in\">SDL_CreateRenderer</span>(sdl_win, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建材质</span></span><br><span class=\"line\">\t<span class=\"comment\">// =====（三）=====</span></span><br><span class=\"line\">\tsdl_texture = <span class=\"built_in\">SDL_CreateTexture</span>(sdl_render,</span><br><span class=\"line\">\t\tSDL_PIXELFORMAT_ARGB8888,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">\t\tsdl_width,</span><br><span class=\"line\">\t\tsdl_height</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建RGBA图像所需要的像素空间</span></span><br><span class=\"line\">\trgb = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 触发timerEvent()槽函数，每30ms执行一次</span></span><br><span class=\"line\">\t<span class=\"comment\">// （也可以使用多线程来执行）</span></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SdlQtRgb::timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> tmp = <span class=\"number\">255</span>;</span><br><span class=\"line\">\ttmp--;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// =====（四）=====</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sdl_height; j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b = j * sdl_width * pix_size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sdl_width * pix_size; i += pix_size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\trgb[b + i] = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// B</span></span><br><span class=\"line\">\t\t\trgb[b + i + <span class=\"number\">1</span>] = tmp;\t<span class=\"comment\">// G</span></span><br><span class=\"line\">\t\t\trgb[b + i + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// R</span></span><br><span class=\"line\">\t\t\trgb[b + i + <span class=\"number\">3</span>] = tmp;\t<span class=\"comment\">// A</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// =====（五）=====</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, rgb, sdl_width * pix_size);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(sdl_render);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.w = sdl_width;</span><br><span class=\"line\">\trect.h = sdl_height;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新材质</span></span><br><span class=\"line\">\t<span class=\"comment\">// =====（六）=====</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderCopy</span>(sdl_render, sdl_texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(sdl_render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SdlQtRgb::~<span class=\"built_in\">SdlQtRgb</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 清理和释放SDL所使用的资源</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（一）-6\">（一）</h3>\n<p><code>SDL_Init(SDL_INIT_VIDEO);</code></p>\n<p><code>SDL_Init</code> 是 SDL库中的一个函数，主要初始化SDL的视频子系统。</p>\n<p>除了<code>SDL_INIT_VIDEO</code> 之外，<code>SDL_Init()</code> 函数还可以接受其他多个参数</p>\n<p><strong>SDL_INIT_TIMER</strong>:<br>\n初始化定时器子系统。如果你的应用需要使用 SDL 的定时功能，这个标志是必要的。</p>\n<p><strong>SDL_INIT_AUDIO</strong>:<br>\n初始化音频子系统。如果你的应用需要播放音频或处理声音数据，应该使用这个标志。</p>\n<p><strong>SDL_INIT_VIDEO</strong>:<br>\n初始化视频子系统，这是创建窗口和渲染图形所必须的。</p>\n<p><strong>SDL_INIT_EVERYTHING</strong>:<br>\n初始化上述所有子系统。这是一个方便的标志，如果你希望一开始就初始化 SDL 的所有功能，可以使用它。</p>\n<p>如果想同时初始化视频和音频子系统，可以这样写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO | SDL_INIT_AUDIO) != <span class=\"number\">0</span>) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理初始化失败的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这行代码会同时初始化视频和音频子系统，使应用可以进行图形显示和音频播放。</p>\n<h3 id=\"（二）-6\">（二）</h3>\n<p><code>sdl_render = SDL_CreateRenderer(sdl_win, -1, SDL_RENDERER_ACCELERATED);</code></p>\n<p><code>SDL_CreateRenderer</code> 是 SDL库中的一个函数，用于创建一个与窗口关联的渲染器。渲染器可以用于在窗口上绘制图形，如纹理、形状等。</p>\n<p>函数源码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">SDL_Renderer* <span class=\"title\">SDL_CreateRenderer</span><span class=\"params\">(SDL_Window* window,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                 <span class=\"type\">int</span> index,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                 Uint32 flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>在这个示例中：</p>\n<ol>\n<li><strong><code>sdl_win</code></strong>:\n<ul>\n<li>这是一个已经创建好的窗口，<code>sdl_render</code> 将会与该窗口关联。</li>\n</ul>\n</li>\n<li><strong><code>-1</code></strong>:\n<ul>\n<li>让 SDL 自动选择一个合适的渲染驱动程序。</li>\n</ul>\n</li>\n<li><strong><code>SDL_RENDERER_ACCELERATED</code></strong>:\n<ul>\n<li>指示 SDL 使用硬件加速渲染（通常是通过 GPU）。这种方式比软件渲染（CPU）更高效，尤其是在绘制大量图形时。</li>\n</ul>\n</li>\n</ol>\n<p><strong>参数解释</strong></p>\n<ol>\n<li><strong><code>SDL_Window* window</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Window</code> 对象的指针。这个窗口是渲染器将要绘制内容的目标窗口。例子中，<code>sdl_win</code> 是之前通过 <code>SDL_CreateWindow</code> 创建的窗口。</li>\n</ul>\n</li>\n<li><strong><code>int index</code></strong>:\n<ul>\n<li>这个参数指定要使用的渲染驱动程序的索引。如果设置为 <code>-1</code>，SDL 会自动选择第一个支持 <code>flags</code> 中指定特性的可用渲染驱动程序。通常可以将其设置为 <code>-1</code> 以使用默认的渲染驱动程序。</li>\n</ul>\n</li>\n<li><strong><code>Uint32 flags</code></strong>:\n<ul>\n<li>这是一个位掩码，用于指定渲染器的行为。常用的标志有：\n<ul>\n<li><code>SDL_RENDERER_ACCELERATED</code>: 使用硬件加速渲染。如果可用，SDL 将使用 GPU 进行渲染，这通常会提高渲染的效率和性能。</li>\n<li><code>SDL_RENDERER_SOFTWARE</code>: 使用软件渲染。如果硬件加速不可用或者你明确需要软件渲染，可以使用这个标志。</li>\n<li><code>SDL_RENDERER_PRESENTVSYNC</code>: 使渲染器与显示器的垂直同步（VSync）保持一致，防止屏幕撕裂。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"（三）-6\">（三）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdl_texture = <span class=\"built_in\">SDL_CreateTexture</span>(sdl_render,</span><br><span class=\"line\">\t\tSDL_PIXELFORMAT_ARGB8888,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">\t\tsdl_width,</span><br><span class=\"line\">\t\tsdl_height</span><br><span class=\"line\">\t);</span><br></pre></td></tr></table></figure>\n<p><code>SDL_CreateTexture</code>是SDL库中一个函数，用于创建一个纹理，这个纹理可以被渲染器使用到屏幕上进行绘制图像。</p>\n<p>函数源码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">SDL_Texture* <span class=\"title\">SDL_CreateTexture</span><span class=\"params\">(SDL_Renderer* renderer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               Uint32 format,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               <span class=\"type\">int</span> access,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               <span class=\"type\">int</span> w,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               <span class=\"type\">int</span> h)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释</p>\n<ol>\n<li><strong><code>SDL_Renderer* renderer</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Renderer</code> 对象的指针，表示纹理将要关联的渲染器。在你的例子中，<code>sdl_render</code> 是通过 <code>SDL_CreateRenderer</code> 创建的渲染器。</li>\n</ul>\n</li>\n<li><strong><code>Uint32 format</code></strong>:\n<ul>\n<li>这是一个像素格式的标志，用于指定纹理中的像素数据的格式。常见的像素格式包括：\n<ul>\n<li><code>SDL_PIXELFORMAT_ARGB8888</code>: 32 位像素格式，其中每个像素包含 8 位 alpha 通道、8 位红色、8 位绿色和 8 位蓝色。这种格式常用于高质量图像，支持透明度。</li>\n</ul>\n</li>\n<li>像素格式决定了纹理的颜色深度和排列方式。</li>\n</ul>\n</li>\n<li><strong><code>int access</code></strong>:\n<ul>\n<li>这是一个标志，指定纹理的访问方式。常用的访问模式有：\n<ul>\n<li><code>SDL_TEXTUREACCESS_STATIC</code>: 纹理数据只会被设置一次，不会频繁更新。这种模式下纹理的性能最好。</li>\n<li><code>SDL_TEXTUREACCESS_STREAMING</code>: 纹理数据可能会被频繁更改（例如每帧都更新）。这种模式适用于动态生成或更新纹理内容的场景。</li>\n<li><code>SDL_TEXTUREACCESS_TARGET</code>: 允许将纹理作为渲染目标，即你可以渲染到这个纹理上，而不是直接渲染到屏幕上。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>int w</code></strong>:\n<ul>\n<li>纹理的宽度（像素单位）。在你的例子中，这个值是 <code>sdl_width</code>，代表纹理的宽度。</li>\n</ul>\n</li>\n<li><strong><code>int h</code></strong>:\n<ul>\n<li>纹理的高度（像素单位）。在你的例子中，这个值是 <code>sdl_height</code>，代表纹理的高度。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"（四）-4\">（四）</h3>\n<p>将一维数组视作二维数据进行赋值</p>\n<p><code>width * height * pix_size</code>：以BGRA的数据为一组，一共有<code>width * height</code>这么多组数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rgb = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历高度height</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sdl_height; j++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算当前在一维数据中的位置</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b = j * sdl_width * pix_size;</span><br><span class=\"line\">    <span class=\"comment\">// 给当前宽度赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sdl_width * pix_size; i += pix_size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rgb[b + i] = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// B</span></span><br><span class=\"line\">        rgb[b + i + <span class=\"number\">1</span>] = tmp;\t<span class=\"comment\">// G</span></span><br><span class=\"line\">        rgb[b + i + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// R</span></span><br><span class=\"line\">        rgb[b + i + <span class=\"number\">3</span>] = tmp;\t<span class=\"comment\">// A</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408091559891.jpg\" alt=\"84ca162702e8394616ec33e13a65047\" style=\"zoom: 25%;\" />\n<h3 id=\"（五）-3\">（五）</h3>\n<p><code>SDL_UpdateTexture(sdl_texture, NULL, rgb, sdl_width * pix_size);</code></p>\n<p><code>SDL_UpdateTexture</code> 是 SDL 库中的一个函数，用于更新纹理（<code>SDL_Texture</code>）中的像素数据。这个函数通常用于将内存中的图像数据传递到 SDL 纹理中，以便之后可以使用渲染器将纹理绘制到屏幕上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SDL_UpdateTexture</span><span class=\"params\">(SDL_Texture* texture,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">const</span> SDL_Rect* rect,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">const</span> <span class=\"type\">void</span>* pixels,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                      <span class=\"type\">int</span> pitch)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释</p>\n<ol>\n<li><strong><code>SDL_Texture* texture</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Texture</code> 对象的指针，表示要更新的纹理。例子中，<code>sdl_texture</code> 是通过 <code>SDL_CreateTexture</code> 创建的纹理。</li>\n</ul>\n</li>\n<li><strong><code>const SDL_Rect* rect</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Rect</code> 结构体的指针，表示要更新的纹理区域。如果传递 <code>NULL</code>，则表示更新整个纹理。</li>\n<li><code>SDL_Rect</code> 结构体包含了 <code>x</code>, <code>y</code>, <code>w</code>, <code>h</code> 四个成员，分别表示更新区域的左上角坐标和宽高。</li>\n</ul>\n</li>\n<li><strong><code>const void* pixels</code></strong>:\n<ul>\n<li>这是一个指向原始像素数据的指针。这个数据通常是一个内存缓冲区，包含要上传到纹理的图像数据。例子中，<code>rgb</code> 是一个指向包含图像数据的内存缓冲区的指针。</li>\n</ul>\n</li>\n<li><strong><code>int pitch</code></strong>:\n<ul>\n<li><code>pitch</code> 表示<strong>每行像素数据的字节数</strong>，通常是 <code>(图像宽度 * 每个像素的字节数)</code>。在你的例子中，这个值是 <code>sdl_width * pix_size</code>。</li>\n<li>这个参数告诉 SDL 在内存中如何布局图像数据，特别是每行的起始位置。</li>\n</ul>\n</li>\n</ol>\n<p><strong>纹理更新的用途</strong></p>\n<ul>\n<li>当你有一个动态变化的图像或视频流时，你可以使用 <code>SDL_UpdateTexture</code> 来更新纹理中的像素数据，以反映这些变化。</li>\n<li>在更新纹理数据后，你可以使用 <code>SDL_RenderCopy</code> 或 <code>SDL_RenderCopyEx</code> 将纹理绘制到屏幕上。</li>\n</ul>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><code>SDL_UpdateTexture</code> 会将数据从 <strong>CPU 内存复制到 GPU 内存</strong>，因此频繁调用可能会影响性能。对于静态图像数据，建议在初始化时更新一次纹理，而对于动态数据，尽量减少不必要的更新次数。</li>\n<li>如果你只更新纹理的一部分，可以传递一个非 <code>NULL</code> 的 <code>SDL_Rect</code> 以指定更新区域，从而提高效率。</li>\n</ul>\n<h3 id=\"（六）-2\">（六）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SDL_RenderCopy</span>(sdl_render, sdl_texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br></pre></td></tr></table></figure>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">SDL_RenderCopy</span><span class=\"params\">(SDL_Renderer* renderer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                   SDL_Texture* texture,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                   <span class=\"type\">const</span> SDL_Rect* srcrect,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                   <span class=\"type\">const</span> SDL_Rect* dstrect)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong></p>\n<ol>\n<li><strong><code>SDL_Renderer* renderer</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Renderer</code> 对象的指针，表示渲染操作的目标。代码中，<code>sdl_render</code> 是之前通过 <code>SDL_CreateRenderer</code> 创建的渲染器。</li>\n</ul>\n</li>\n<li><strong><code>SDL_Texture* texture</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Texture</code> 对象的指针，表示要渲染的纹理。代码中，<code>sdl_texture</code> 是之前创建并可能通过 <code>SDL_UpdateTexture</code> 更新过的纹理。</li>\n</ul>\n</li>\n<li><strong><code>const SDL_Rect* srcrect</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Rect</code> 结构体的指针，表示纹理的源矩形区域。<code>srcrect</code> 定义了从纹理中提取的部分。如果传递 <code>NULL</code>，则表示使用整个纹理。</li>\n<li>代码中，传递了 <code>NULL</code>，这意味着将整个纹理内容复制到渲染目标。</li>\n</ul>\n</li>\n<li><strong><code>const SDL_Rect* dstrect</code></strong>:\n<ul>\n<li>这是一个指向 <code>SDL_Rect</code> 结构体的指针，表示渲染器目标（窗口）上的目标矩形区域。纹理将被缩放并绘制到这个矩形区域中。</li>\n<li>代码中，<code>&amp;rect</code> 是一个指向 <code>SDL_Rect</code> 结构体的指针，定义了在窗口中绘制纹理的区域大小和位置。</li>\n</ul>\n</li>\n</ol>\n<p><code>SDL_RenderCopy</code> 的作用是将纹理 <code>sdl_texture</code> 中的图像数据复制到 <code>sdl_render</code> 渲染器的目标区域。目标区域由 <code>&amp;rect</code> 定义。这个操作会将纹理的数据按照 <code>rect</code> 的定义（包括位置和大小）复制到渲染器的后台缓冲区中，准备在下一帧中显示。</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SDL_RenderPresent</span>(sdl_render);</span><br></pre></td></tr></table></figure>\n<p><strong>函数解释</strong></p>\n<ul>\n<li><code>SDL_RenderPresent</code> 是 SDL 渲染过程的最后一步，它将渲染器的后台缓冲区内容呈现到屏幕上。</li>\n<li>在使用 <code>SDL_Renderer</code> 进行渲染时，所有的绘制操作（如 <code>SDL_RenderCopy</code>）都是在后台缓冲区中完成的。后台缓冲区是一块内存区域，用于暂存当前帧的图像内容，以避免直接在屏幕上进行逐步绘制，防止闪烁或不完整的显示效果。</li>\n</ul>\n","categories":[],"tags":[]},{"title":"ffmpeg 搜索栏","url":"http://example.com/2024/08/02/ffmpeg-搜索栏/","content":"<p><a href=\"https://www.jasonqian.com/2024/08/01/XViewer-Project/\">项目地址</a>。</p>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XVideoView/\">XVideoView</a>。</p>\n<p>XVideoView是XSDL的基类。</p>\n<p>XVideoView作用：</p>\n<ol>\n<li>将传入的AVCodecParameters交给XSDL，用于处理sdl初始化</li>\n<li>读取每一帧的数据</li>\n<li>将传入的文件打开</li>\n<li>根据传入的参数，返回XVideoView类，默认为XSDL</li>\n<li>计算 fps，根据 format 进行绘制，Draw () 函数在基类 XSDL 中</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XSDL/\">XSDL</a>。</p>\n<p>XSDL继承于XVideoView。</p>\n<p>XSDL作用：</p>\n<ol>\n<li>初始化sdl</li>\n<li>检查sdl窗口是否关闭</li>\n<li>清理材质、渲染器、窗口句柄指针</li>\n<li>处理YUV或RGB格式，渲染到sdl窗口上</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XCodec/\">XCodec</a>。</p>\n<p>XCodec是编解码的基类，也就是XEncode、XDecode的基类</p>\n<p>XCodec作用：</p>\n<ol>\n<li>根据传入的参数，新创建并返回解码器或编码器AVCodecContext（关于AVCodecContext介绍在这里）</li>\n<li>设置类中的编解码器上下文AVCodecContext</li>\n<li>设置类中编解码器上下文一些参数</li>\n<li>打开编解码器</li>\n<li>根据上下文AVCodecContext创建一个AVFrame</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XEncode/\">XEncode</a>。</p>\n<p>继承于XCodec</p>\n<p>XEncode作用：</p>\n<ol>\n<li>（关于AVPacket介绍在这里）</li>\n<li>将原始的音视频帧（<code>AVFrame</code>）编码成压缩的数据包（<code>AVPacket</code>），并返回<code>AVPacket</code></li>\n<li>编码结束后处理剩余编码数据</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/22/XDecode/\">XDecode</a>。</p>\n<p>继承于XCodec</p>\n<p>XDeocde作用：</p>\n<ol>\n<li>向解码器发送编码数据包</li>\n<li>从解码器接收解码后的帧数据</li>\n<li>初始化硬件加速设备</li>\n<li>获取解码器中剩余所有帧数据</li>\n</ol>\n<hr>\n<p><strong><code>AVFrame</code></strong>：代表<strong>未压缩的媒体数据</strong>（如未压缩的视频帧或音频样本）。在视频处理中，<code>AVFrame</code> 通常包含像素数据；在音频处理中，它包含采样数据。</p>\n<p><strong><code>AVPacket</code></strong>：代表<strong>压缩后的媒体数据</strong>（如经过编码的 H.264 视频数据或 AAC 音频数据）。<code>AVPacket</code> 通常包含完整的一帧压缩数据，或一部分帧数据。</p>\n<p>因此在<strong>编码过程中</strong>，<strong>XEncode</strong>，会使用</p>\n<ol>\n<li>\n<p><strong><code>avcodec_send_frame()</code></strong>：</p>\n<ul>\n<li>用于将未压缩的媒体帧（<code>AVFrame</code>）发送到编码器。也就是说，你将原始的视频或音频数据（如一帧图像或一段音频样本）传递给编码器。</li>\n<li><strong>输入</strong>：<code>AVFrame</code>（未压缩数据）</li>\n<li><strong>处理</strong>：编码器将未压缩的数据压缩为特定的格式（如 H.264 或 AAC）。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>avcodec_receive_packet()</code></strong>：</p>\n<ul>\n<li>用于从编码器中接收压缩后的数据包（<code>AVPacket</code>）。编码器将先前通过 <code>avcodec_send_frame()</code> 传入的未压缩帧数据编码为压缩数据，并通过这个函数返回。</li>\n<li><strong>输出</strong>：<code>AVPacket</code>（压缩数据）</li>\n</ul>\n</li>\n</ol>\n<p>在<strong>解码过程中</strong>，<strong>XDecode</strong>，会使用</p>\n<ol>\n<li>\n<p><strong><code>avcodec_send_packet()</code></strong>：</p>\n<ul>\n<li>用于将压缩的媒体数据包（<code>AVPacket</code>）发送到解码器。也就是说，你将编码后的数据（如从文件或网络流中读取的 H.264 数据包）传递给解码器。</li>\n<li><strong>输入</strong>：<code>AVPacket</code>（压缩数据）</li>\n<li><strong>处理</strong>：解码器处理压缩数据，并准备将其解码成未压缩的帧。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>avcodec_receive_frame()</code></strong>：</p>\n<ul>\n<li>用于从解码器中接收解码后的未压缩帧（<code>AVFrame</code>）。解码器将先前通过 <code>avcodec_send_packet()</code> 传入的压缩数据解码为未压缩的数据（如一帧视频图像），并通过这个函数返回。</li>\n<li><strong>输出</strong>：<code>AVFrame</code>（未压缩数据）</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/23/XFormat/\">XFormat</a>。</p>\n<p>是XMux和XDemux的基类</p>\n<p>XFormat作用：</p>\n<ol>\n<li>判断连接是否超时</li>\n<li>设置 <code>AVFormatContext</code> 对象里面的一些参数</li>\n<li>复制音/视频参数并封装在一个智能指针中返回</li>\n<li>复制相关参数给AVCodecParameters 或者AVCodecContext</li>\n<li>将时间戳（PTS和DTS）和持续时间重新计算</li>\n<li>将时间戳转换（关于PTS、DTS、I帧介绍在这里）</li>\n<li>设置超时时间</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XMux/\">XMux</a>。</p>\n<p>继承于XFormat</p>\n<p>XMux作用：</p>\n<ol>\n<li>（AVFormatContext和AVCodecContext 的区别在这里）</li>\n<li>处理多媒体封装</li>\n<li>设置音视频时间基准</li>\n<li>创建和初始化一个 AVFormatContext 上下文，并为其添加视频和音频流</li>\n<li>将编码后的数据包（AVPacket）写入多媒体文件中</li>\n<li>在音视频数据写入之前，初始化文件头并设置一些初始状态</li>\n<li>结束音视频数据的写入操作</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XDemux/\">XDemux</a>。</p>\n<p>继承于XFormat</p>\n<p>XDemux作用：</p>\n<ol>\n<li>打开指定 URL 的多路复用器上下文，设置连接选项，获取媒体信息，并打印封装信息</li>\n<li>从多路复用器中读取一帧数据并存储在提供的 AVPacket 对象中</li>\n<li>打开的多路复用器中进行时间跳转</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XTools/\">XTools</a>。</p>\n<p>作为一个工具类</p>\n<p>XTools作用：</p>\n<ol>\n<li>打印DEBUG错误</li>\n<li>自定义Sleep函数</li>\n<li>清理AVFrame</li>\n<li>Thread类（责任链模式介绍在这里）</li>\n<li>XPara类，音视频参数，智能指针自动释放</li>\n<li>XAVPacketList类，自定义AVPacket列表</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XMuxTask/\">XMuxTask</a>。</p>\n<p>继承于XThread</p>\n<p>XMuxTask作用：</p>\n<ol>\n<li>实现责任链中的Do函数，用于将音视频数据包存入线程安全的列表中，同时将数据包传递给责任链下一个节点处理</li>\n<li>在独立线程中，持续处理音视频数据包，将它们写入分装文件</li>\n<li>打开一个封装文件并初始化相关参数</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XDecodeTask/\">XDecodeTask</a>。</p>\n<p>继承于XThread</p>\n<p>XDecodeTask作用：</p>\n<ol>\n<li>初始化视频解码器</li>\n<li>实现责任链中的Do函数，用于将音视频数据包存入线程安全的列表中</li>\n<li>获取当前解码的帧</li>\n<li>用于在一个独立的线程中持续接收音视频数据包，将其解码为帧，并在需要时标记为需要渲染</li>\n</ol>\n<hr>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XDemuxTask/\">XDemuxTask</a>。</p>\n<p>继承于XThread</p>\n<p>XDemuxTask作用：</p>\n<ol>\n<li>初始化和配置多路复用器，以便后续从指定的 URL 读取和解析多路复用的音视频流。</li>\n<li>持续读取和处理媒体数据包，并做处理。</li>\n</ol>\n<hr>\n","categories":[],"tags":[]},{"title":"XViewer Project","url":"http://example.com/2024/08/01/XViewer-Project/","content":"<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408010851562.png\" alt=\"image-20240801085121931\"></p>\n<h2 id=\"main-cpp\">main.cpp</h2>\n<p>作为Qt的启动函数，通过创建XViewer对象。</p>\n<p>然后调用show()函数在屏幕上进行显示。</p>\n<p>接着调用exec()函数，启动Qt的循环事件，此时程序可以处理用户输入的一些请求。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">\tXViewer w;</span><br><span class=\"line\">\tw.<span class=\"built_in\">show</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// xr.Stop();</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"xviewer\">xviewer</h2>\n<h3 id=\"xviewer-h\">xviewer.h</h3>\n<p>用于第一个Qt创建的对象，可以通过自定义函数进行一些关于界面事件的处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ui_xviewer.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMenu&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XViewer</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Q_OBJECT是Qt框架中的一个关键组件，用于Qt元对象系统。这个系统提供了一些强大的功能，如信号槽机制。</span></span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// QWidget *parent = nullptr 的作用是为构造函数提供一个默认参数，指定该窗口部件的父对象。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有传递父对象，则默认值为 nullptr，表示这个部件没有父对象。</span></span><br><span class=\"line\">\t<span class=\"built_in\">XViewer</span>(QWidget *parent = <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t~<span class=\"built_in\">XViewer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 鼠标事件 用于拖动窗口</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mouseMoveEvent</span><span class=\"params\">(QMouseEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mousePressEvent</span><span class=\"params\">(QMouseEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mouseReleaseEvent</span><span class=\"params\">(QMouseEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 窗口大小发生变化</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 右键菜单</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">contextMenuEvent</span><span class=\"params\">(QContextMenuEvent *event)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 预览视频窗口</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">View</span><span class=\"params\">(<span class=\"type\">int</span> count)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 刷新左侧相机列表</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RefreshCams</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 编辑摄像机</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SetCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 定时器渲染视频 回调函数 重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MaxWindow</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">NormalWindow</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">View1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">View4</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">View9</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">View16</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AddCam</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 新增摄像机配置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SetCam</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 修改摄像机配置</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">DelCam</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 删除摄像机配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">StartRecord</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 开始全部摄像头录制</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">StopRecord</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 停止全部摄像头录制</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Preview</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 预览界面显示</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Playback</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 回放界面显示</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SelectCamera</span><span class=\"params\">(QModelIndex index)</span></span>;  <span class=\"comment\">// 选择摄像机</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SelectDate</span><span class=\"params\">(QDate date)</span></span>;  <span class=\"comment\">// 选择日期</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PlayVideo</span><span class=\"params\">(QModelIndex index)</span></span>;  <span class=\"comment\">// 选择时间播放视频</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tUi::XViewerClass ui;</span><br><span class=\"line\">\tQMenu left_menu_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"xviewer-cpp\">xviewer.cpp</h3>\n<p>实现xviewer中的函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xviewer.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMouseEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QVBoxLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QHBoxLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QResizeEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QContextMenuEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QGridLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDialog&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QFormLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QLineEdit&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMessageBox&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDir&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xCamera_widget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcamera_config.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcamera_record.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xplayvideo.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAM_CONF_PATH <span class=\"string\">&quot;cams.db&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> C(s) QString::fromLocal8Bit(s)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> XCameraWidget* cam_wids[<span class=\"number\">16</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> vector&lt;XCameraRecord *&gt; records;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">XCamVideo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQString filepath;</span><br><span class=\"line\">\tQDateTime datetime;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> map&lt;QDate, vector&lt;XCamVideo&gt;&gt; cam_videos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SelectCamera</span><span class=\"params\">(QModelIndex index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;SelectCamera&quot;</span> &lt;&lt; index.<span class=\"built_in\">row</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;PlayVideo&quot;</span> &lt;&lt; index.<span class=\"built_in\">row</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> conf = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> cam = conf-&gt;<span class=\"built_in\">GetCam</span>(index.<span class=\"built_in\">row</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cam.name[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; cam.save_path &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; index.<span class=\"built_in\">row</span>() &lt;&lt; <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">QDir <span class=\"title\">dir</span><span class=\"params\">(C(ss.str().c_str()))</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dir.<span class=\"built_in\">exists</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQStringList filters;</span><br><span class=\"line\">\tfilters &lt;&lt; <span class=\"string\">&quot;*.mp4&quot;</span> &lt;&lt; <span class=\"string\">&quot;*.avi&quot;</span>;</span><br><span class=\"line\">\tdir.<span class=\"built_in\">setNameFilters</span>(filters);</span><br><span class=\"line\"></span><br><span class=\"line\">\tui.cal-&gt;<span class=\"built_in\">ClearDate</span>();</span><br><span class=\"line\">\tcam_videos.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> files = dir.<span class=\"built_in\">entryInfoList</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> file : files)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQString filename = file.<span class=\"built_in\">fileName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> tmp = filename.<span class=\"built_in\">left</span>(filename.<span class=\"built_in\">size</span>() - <span class=\"number\">4</span>);</span><br><span class=\"line\">\t\ttmp = tmp.<span class=\"built_in\">right</span>(tmp.<span class=\"built_in\">length</span>() - <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> dt = QDateTime::<span class=\"built_in\">fromString</span>(tmp, <span class=\"string\">&quot;yyyy_MM_dd_hh_mm_ss&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">qDebug</span>() &lt;&lt; dt.<span class=\"built_in\">date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tui.cal-&gt;<span class=\"built_in\">AddDate</span>(dt.<span class=\"built_in\">date</span>());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tXCamVideo video;</span><br><span class=\"line\">\t\tvideo.datetime = dt;</span><br><span class=\"line\">\t\tvideo.filepath = file.<span class=\"built_in\">absoluteFilePath</span>();</span><br><span class=\"line\">\t\tcam_videos[dt.<span class=\"built_in\">date</span>()].<span class=\"built_in\">push_back</span>(video);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tui.cal-&gt;<span class=\"built_in\">showNextMonth</span>();</span><br><span class=\"line\">\tui.cal-&gt;<span class=\"built_in\">showPreviousMonth</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SelectDate</span><span class=\"params\">(QDate date)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;SelectDate&quot;</span> &lt;&lt; date.<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dates = cam_videos[date];</span><br><span class=\"line\">\tui.time_list-&gt;<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> d : dates)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> item = <span class=\"keyword\">new</span> <span class=\"built_in\">QListWidgetItem</span>(d.datetime.<span class=\"built_in\">time</span>().<span class=\"built_in\">toString</span>());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\titem-&gt;<span class=\"built_in\">setData</span>(Qt::UserRole, d.filepath);</span><br><span class=\"line\">\t\tui.time_list-&gt;<span class=\"built_in\">addItem</span>(item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::PlayVideo</span><span class=\"params\">(QModelIndex index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;PlayVideo&quot;</span> &lt;&lt; index.<span class=\"built_in\">row</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> item = ui.time_list-&gt;<span class=\"built_in\">currentItem</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!item) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tQString path = item-&gt;<span class=\"built_in\">data</span>(Qt::UserRole).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; path;</span><br><span class=\"line\">\t<span class=\"type\">static</span> XPlayVideo play;</span><br><span class=\"line\">\tplay.<span class=\"built_in\">Open</span>(path.<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\tplay.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View4</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View9</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View16</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View</span><span class=\"params\">(<span class=\"type\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;View: &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> cols = <span class=\"built_in\">sqrt</span>(count);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"type\">int</span> wid_size = <span class=\"built_in\">sizeof</span>(cam_wids) / <span class=\"built_in\">sizeof</span>(QWidget*);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> lay = (QGridLayout*)ui.cams-&gt;<span class=\"built_in\">layout</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lay)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlay = <span class=\"keyword\">new</span> <span class=\"built_in\">QGridLayout</span>();</span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">setContentsMargins</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">setSpacing</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tui.cams-&gt;<span class=\"built_in\">setLayout</span>(lay);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cam_wids[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcam_wids[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">XCameraWidget</span>();</span><br><span class=\"line\">\t\t\tcam_wids[i]-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;background-color:rgb(51, 51, 51);&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">addWidget</span>(cam_wids[i], i / cols, i % cols);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = count; i &lt; wid_size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cam_wids[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> cam_wids[i];</span><br><span class=\"line\">\t\t\tcam_wids[i] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> wid_size = <span class=\"built_in\">sizeof</span>(cam_wids) / <span class=\"built_in\">sizeof</span>(QWidget*);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; wid_size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cam_wids[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcam_wids[i]-&gt;<span class=\"built_in\">Draw</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::StartRecord</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">StopRecord</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;开始全部摄像头录制&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tui.status-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;录制中...&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> conf = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = conf-&gt;<span class=\"built_in\">GetCamCount</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> cam = conf-&gt;<span class=\"built_in\">GetCam</span>(i);</span><br><span class=\"line\">\t\tstringstream ss;</span><br><span class=\"line\">\t\tss &lt;&lt; cam.save_path &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\">\t\tQDir dir;</span><br><span class=\"line\">\t\tdir.<span class=\"built_in\">mkpath</span>(ss.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t\tXCameraRecord *rec = <span class=\"keyword\">new</span> <span class=\"built_in\">XCameraRecord</span>();</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">set_rtsp_url</span>(cam.url);</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">set_save_path</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">set_file_sec</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\t\trecords.<span class=\"built_in\">push_back</span>(rec);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::StopRecord</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.status-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;监控中...&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> rec : records)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> rec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trecords.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::contextMenuEvent</span><span class=\"params\">(QContextMenuEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tleft_menu_.<span class=\"built_in\">exec</span>(QCursor::<span class=\"built_in\">pos</span>());</span><br><span class=\"line\">\tevent-&gt;<span class=\"built_in\">accept</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SetCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">QDialog <span class=\"title\">dlg</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">\tdlg.<span class=\"built_in\">resize</span>(<span class=\"number\">800</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQFormLayout lay;</span><br><span class=\"line\">\tdlg.<span class=\"built_in\">setLayout</span>(&amp;lay);</span><br><span class=\"line\">\tQLineEdit name_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;名称&quot;</span>), &amp;name_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQLineEdit url_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;主码流&quot;</span>), &amp;url_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQLineEdit sub_url_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;辅码流&quot;</span>), &amp;sub_url_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQLineEdit save_path_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;保存目录&quot;</span>), &amp;save_path_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQPushButton save;</span><br><span class=\"line\">\tsave.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;保存&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(&amp;save, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">clicked</span>()), &amp;dlg, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">accept</span>()));</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"string\">&quot;&quot;</span>, &amp;save);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> cam = c-&gt;<span class=\"built_in\">GetCam</span>(index);</span><br><span class=\"line\">\t\tname_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.name));</span><br><span class=\"line\">\t\turl_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.url));</span><br><span class=\"line\">\t\tsub_url_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.sub_url));</span><br><span class=\"line\">\t\tsave_path_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.save_path));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dlg.<span class=\"built_in\">exec</span>() == QDialog::Accepted)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (name_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入名称&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入主码流&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (sub_url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入辅码流&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (save_path_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入保存目录&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tXCameraData data;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.name, name_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.url, url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.sub_url, sub_url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.save_path, save_path_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc-&gt;<span class=\"built_in\">SetCam</span>(index, data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc-&gt;<span class=\"built_in\">Push</span>(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc-&gt;<span class=\"built_in\">Save</span>(CAM_CONF_PATH);</span><br><span class=\"line\">\t<span class=\"built_in\">RefreshCams</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SetCam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> row = ui.cam_list-&gt;<span class=\"built_in\">currentIndex</span>().<span class=\"built_in\">row</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请选择摄像机&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">SetCam</span>(row);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::DelCam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> row = ui.cam_list-&gt;<span class=\"built_in\">currentIndex</span>().<span class=\"built_in\">row</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请选择摄像机&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;您确认要删除摄像机：&quot;</span> &lt;&lt; ui.cam_list-&gt;<span class=\"built_in\">currentItem</span>()-&gt;<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>().<span class=\"built_in\">constData</span>();</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;吗？&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;confirm&quot;</span>, <span class=\"built_in\">C</span>(ss.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>()), QMessageBox::Yes, QMessageBox::No)</span><br><span class=\"line\">\t\t!= QMessageBox::Yes</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;111&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tXCameraConfig::<span class=\"built_in\">Instance</span>()-&gt;<span class=\"built_in\">DelCam</span>(row);</span><br><span class=\"line\">\t<span class=\"built_in\">RefreshCams</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::AddCam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">SetCam</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::RefreshCams</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\">\tui.cam_list-&gt;<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = c-&gt;<span class=\"built_in\">GetCamCount</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> cam = c-&gt;<span class=\"built_in\">GetCam</span>(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> item = <span class=\"keyword\">new</span> <span class=\"built_in\">QListWidgetItem</span>(<span class=\"built_in\">QIcon</span>(<span class=\"string\">&quot;:/XViewer/img/cam.png&quot;</span>), <span class=\"built_in\">C</span>(cam.name));</span><br><span class=\"line\">\t\tui.cam_list-&gt;<span class=\"built_in\">addItem</span>(item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc-&gt;<span class=\"built_in\">Save</span>(CAM_CONF_PATH);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::Preview</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.cams-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\">\tui.playback_wid-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\">\tui.preview-&gt;<span class=\"built_in\">setChecked</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::Playback</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.cams-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\">\tui.playback_wid-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\">\tui.playback-&gt;<span class=\"built_in\">setChecked</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XViewer::<span class=\"built_in\">XViewer</span>(QWidget *parent)</span><br><span class=\"line\">\t: <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">setWindowFlags</span>(Qt::FramelessWindowHint);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> vlay = <span class=\"keyword\">new</span> <span class=\"built_in\">QVBoxLayout</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">setContentsMargins</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">setSpacing</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">addWidget</span>(ui.head);</span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">addWidget</span>(ui.body);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setLayout</span>(vlay);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> hlay = <span class=\"keyword\">new</span> <span class=\"built_in\">QHBoxLayout</span>();</span><br><span class=\"line\">\tui.body-&gt;<span class=\"built_in\">setLayout</span>(hlay);</span><br><span class=\"line\">\t<span class=\"comment\">// 边框间距</span></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">setContentsMargins</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\thlay-&gt;<span class=\"built_in\">addWidget</span>(ui.left);</span><br><span class=\"line\">\thlay-&gt;<span class=\"built_in\">addWidget</span>(ui.cams);</span><br><span class=\"line\">\thlay-&gt;<span class=\"built_in\">addWidget</span>(ui.playback_wid);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> m = left_menu_.<span class=\"built_in\">addMenu</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;视图&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> a = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;1窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View1</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;4窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View4</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;9窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View9</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;16窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View16</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = left_menu_.<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;全部开始录制&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">StartRecord</span>()));</span><br><span class=\"line\">\ta = left_menu_.<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;全部停止录制&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">StopRecord</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tXCameraConfig::<span class=\"built_in\">Instance</span>()-&gt;<span class=\"built_in\">Load</span>(CAM_CONF_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">\tui.time_list-&gt;<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">RefreshCams</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Playback</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XViewer::~<span class=\"built_in\">XViewer</span>()</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::MaxWindow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.max-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tui.normal-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showMaximized</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::NormalWindow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.max-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tui.normal-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showNormal</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"built_in\">width</span>() - ui.head_button-&gt;<span class=\"built_in\">width</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> y = ui.head_button-&gt;<span class=\"built_in\">y</span>();</span><br><span class=\"line\">\tui.head_button-&gt;<span class=\"built_in\">move</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">bool</span> mouse_press = <span class=\"literal\">false</span>;  <span class=\"comment\">// 鼠标是否按下</span></span><br><span class=\"line\"><span class=\"type\">static</span> QPoint mouse_point;  <span class=\"comment\">// 起始的坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::mouseMoveEvent</span><span class=\"params\">(QMouseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mouse_press)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQWidget::<span class=\"built_in\">mouseMoveEvent</span>(ev);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">move</span>(ev-&gt;<span class=\"built_in\">globalPos</span>() - mouse_point);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::mousePressEvent</span><span class=\"params\">(QMouseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ev-&gt;<span class=\"built_in\">button</span>() == Qt::LeftButton)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmouse_press = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tmouse_point = ev-&gt;<span class=\"built_in\">pos</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::mouseReleaseEvent</span><span class=\"params\">(QMouseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmouse_press = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关自定义参数\">相关自定义参数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用于存储录像机相关数据，如名称，主码流，辅码流，存储地址</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CAM_CONF_PATH <span class=\"string\">&quot;cams.db&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决中文乱码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> C(s) QString::fromLocal8Bit(s)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义渲染窗口XCameraWidget</span></span><br><span class=\"line\"><span class=\"type\">static</span> XCameraWidget* cam_wids[<span class=\"number\">16</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视频录制，自定义的类</span></span><br><span class=\"line\"><span class=\"type\">static</span> vector&lt;XCameraRecord *&gt; records;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储视频日期时间</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">XCamVideo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQString filepath;</span><br><span class=\"line\">\tQDateTime datetime;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主窗口构造函数\">主窗口构造函数</h3>\n<p>XViewer</p>\n<p>主窗口的构造函数，用于初始化主窗口的一些事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XViewer::<span class=\"built_in\">XViewer</span>(QWidget *parent) : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 去除原窗口边框</span></span><br><span class=\"line\">\t<span class=\"built_in\">setWindowFlags</span>(Qt::FramelessWindowHint);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 布局head和body 垂直布局器</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> vlay = <span class=\"keyword\">new</span> <span class=\"built_in\">QVBoxLayout</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 边框间距</span></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">setContentsMargins</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 元素间距</span></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">setSpacing</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将head body添加到垂直布局器中</span></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">addWidget</span>(ui.head);</span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">addWidget</span>(ui.body);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setLayout</span>(vlay);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 相机列表和相机预览</span></span><br><span class=\"line\">\t<span class=\"comment\">// 水平布局器</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> hlay = <span class=\"keyword\">new</span> <span class=\"built_in\">QHBoxLayout</span>();</span><br><span class=\"line\">\tui.body-&gt;<span class=\"built_in\">setLayout</span>(hlay);</span><br><span class=\"line\">\t<span class=\"comment\">// 边框间距</span></span><br><span class=\"line\">\tvlay-&gt;<span class=\"built_in\">setContentsMargins</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\thlay-&gt;<span class=\"built_in\">addWidget</span>(ui.left);  <span class=\"comment\">// 左侧相机列表</span></span><br><span class=\"line\">\thlay-&gt;<span class=\"built_in\">addWidget</span>(ui.cams);  <span class=\"comment\">// 右侧预览窗口</span></span><br><span class=\"line\">\thlay-&gt;<span class=\"built_in\">addWidget</span>(ui.playback_wid);  <span class=\"comment\">// 右侧回放窗口</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化右键菜单</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> m = left_menu_.<span class=\"built_in\">addMenu</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;视图&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> a = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;1窗口&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// SIGNAL(triggered()用于处理上面m-&gt;addAction(C(&quot;1窗口&quot;))创建的Action信号</span></span><br><span class=\"line\">    <span class=\"comment\">//  通过点击，从而调用View1()的槽函数，实现1/4/9/16的多路监控</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View1</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;4窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View4</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;9窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View9</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = m-&gt;<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;16窗口&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">View16</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过点击&quot;全部开始录制&quot;，调用StartRecord()槽函数</span></span><br><span class=\"line\">\ta = left_menu_.<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;全部开始录制&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">StartRecord</span>()));</span><br><span class=\"line\">    <span class=\"comment\">// 通过点击&quot;全部停止录制&quot;，调用StopRecord()槽函数</span></span><br><span class=\"line\">\ta = left_menu_.<span class=\"built_in\">addAction</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;全部停止录制&quot;</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(a, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">triggered</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">StopRecord</span>()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 默认9窗口</span></span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过单例模式，加载录像机数据</span></span><br><span class=\"line\">\tXCameraConfig::<span class=\"built_in\">Instance</span>()-&gt;<span class=\"built_in\">Load</span>(CAM_CONF_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 加载之后</span></span><br><span class=\"line\">    <span class=\"comment\">// 刷新左侧摄像机列表</span></span><br><span class=\"line\">\tui.time_list-&gt;<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">RefreshCams</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动定时器渲染视频</span></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 默认显示预览</span></span><br><span class=\"line\">\t<span class=\"built_in\">Playback</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"右键菜单显示\">右键菜单显示</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 右键菜单</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::contextMenuEvent</span><span class=\"params\">(QContextMenuEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取鼠标位置，显示右键菜单</span></span><br><span class=\"line\">\tleft_menu_.<span class=\"built_in\">exec</span>(QCursor::<span class=\"built_in\">pos</span>());</span><br><span class=\"line\">\tevent-&gt;<span class=\"built_in\">accept</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><code>contextMenuEvent(QContextMenuEvent *event)</code></strong>：</p>\n<ul>\n<li>这是一个事件处理函数，用于处理上下文菜单事件（右键点击事件）。当用户在窗口上点击右键时，Qt 会调用这个方法</li>\n</ul>\n<p><strong><code>left_menu_.exec(QCursor::pos());</code></strong>：</p>\n<ul>\n<li><code>exec</code> 方法显示上下文菜单，并使其在屏幕上的指定位置弹出。</li>\n<li><code>QCursor::pos()</code> 返回当前鼠标指针的位置。将这个位置传递给 <code>exec</code> 方法，菜单将会在用户点击右键的位置弹出。</li>\n</ul>\n<p><strong><code>event-&gt;accept();</code></strong>：</p>\n<ul>\n<li>这行代码表示接受这个事件，通知 Qt 这个事件已经被处理。这样可以防止事件被进一步传递到其他事件处理器中。</li>\n</ul>\n<p>【<strong>示例图片</strong>】：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202407311031451.png\" alt=\"image-20240731103137618\"></p>\n<h3 id=\"自定义放大，缩小，关闭\">自定义放大，缩小，关闭</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过点击右上角正方形进行放大</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::MaxWindow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.max-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tui.normal-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showMaximized</span>();  <span class=\"comment\">// 调用Qt自定义最大化函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当最大化后，通过点击右上角两个正方形进行缩小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::NormalWindow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.max-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\tui.normal-&gt;<span class=\"built_in\">setVisible</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">showNormal</span>();  <span class=\"comment\">// 调用Qt自定义缩小函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关于最小化，关闭是调用了Qt自定义函数</span></span><br><span class=\"line\"><span class=\"comment\">// 关闭: close()</span></span><br><span class=\"line\"><span class=\"comment\">// 最小化: showMinimized();</span></span><br></pre></td></tr></table></figure>\n<p>当窗口放大，缩小时候，将head_button移动到界面右上角</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408010845442.png\" alt=\"image-20240801084502755\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 窗口大小发生变化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// x轴移动到最右边</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> x = <span class=\"built_in\">width</span>() - ui.head_button-&gt;<span class=\"built_in\">width</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// y轴不动</span></span><br><span class=\"line\">    <span class=\"type\">int</span> y = ui.head_button-&gt;<span class=\"built_in\">y</span>();</span><br><span class=\"line\">\tui.head_button-&gt;<span class=\"built_in\">move</span>(x, y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"鼠标拖动窗口进行移动\">鼠标拖动窗口进行移动</h3>\n<p>当鼠标左键按下并拖动时，窗口会跟随鼠标移动；当鼠标左键松开时，停止拖动。这是通过重写<code>mouseMoveEvent</code>、<code>mousePressEvent</code>和<code>mouseReleaseEvent</code>三个事件处理函数来实现的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 鼠标事件 用于拖动窗口</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">bool</span> mouse_press = <span class=\"literal\">false</span>;  <span class=\"comment\">// 鼠标是否按下</span></span><br><span class=\"line\"><span class=\"type\">static</span> QPoint mouse_point;  <span class=\"comment\">// 起始的坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标移动触发的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::mouseMoveEvent</span><span class=\"params\">(QMouseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mouse_press)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQWidget::<span class=\"built_in\">mouseMoveEvent</span>(ev);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">move</span>(ev-&gt;<span class=\"built_in\">globalPos</span>() - mouse_point);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标按下触发的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::mousePressEvent</span><span class=\"params\">(QMouseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ev-&gt;<span class=\"built_in\">button</span>() == Qt::LeftButton)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmouse_press = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tmouse_point = ev-&gt;<span class=\"built_in\">pos</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 鼠标离开触发的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::mouseReleaseEvent</span><span class=\"params\">(QMouseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmouse_press = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-9-16路监控设置\">1/4/9/16路监控设置</h3>\n<p>通过给View()传入几路参数，达到多路监控的设置</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View4</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View9</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View16</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">View</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::View</span><span class=\"params\">(<span class=\"type\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;View: &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2x2 3x3 4x4显示</span></span><br><span class=\"line\">\t<span class=\"comment\">// 确定列数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> cols = <span class=\"built_in\">sqrt</span>(count);</span><br><span class=\"line\">\t<span class=\"comment\">// 总窗口数量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> wid_size = <span class=\"built_in\">sizeof</span>(cam_wids) / <span class=\"built_in\">sizeof</span>(QWidget*);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化网格布局器</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> lay = (QGridLayout*)ui.cams-&gt;<span class=\"built_in\">layout</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!lay)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tlay = <span class=\"keyword\">new</span> <span class=\"built_in\">QGridLayout</span>();</span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">setContentsMargins</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">setSpacing</span>(<span class=\"number\">2</span>);  <span class=\"comment\">// 元素间距</span></span><br><span class=\"line\">\t\tui.cams-&gt;<span class=\"built_in\">setLayout</span>(lay);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据传入的count，进行初始化窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前窗口没有被初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cam_wids[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 给这个窗口创建一个XCameraWidget</span></span><br><span class=\"line\">\t\t\tcam_wids[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">XCameraWidget</span>();</span><br><span class=\"line\">\t\t\tcam_wids[i]-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;background-color:rgb(51, 51, 51);&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">// addWidget(QWidget *widget, int row, int column)</span></span><br><span class=\"line\">        <span class=\"comment\">// 将窗口加入网格布局器中</span></span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">addWidget</span>(cam_wids[i], i / cols, i % cols);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清理多余的窗体</span></span><br><span class=\"line\">    <span class=\"comment\">// 从count开始，wid_size结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = count; i &lt; wid_size; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cam_wids[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> cam_wids[i];</span><br><span class=\"line\">\t\t\tcam_wids[i] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"预览、回放界面\">预览、回放界面</h3>\n<p>通过点击预览、来回放切换两个widget：cams，playback</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408010849550.png\" alt=\"image-20240801084919011\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 预览界面显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::Preview</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.cams-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\">\tui.playback_wid-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\">\tui.preview-&gt;<span class=\"built_in\">setChecked</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回放界面显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::Playback</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.cams-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\">\tui.playback_wid-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\">\tui.playback-&gt;<span class=\"built_in\">setChecked</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新增相机\">新增相机</h3>\n<p>点击左上角新增按钮，触发槽函数，进行添加相机参数</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408010909441.png\" alt=\"image-20240801090919691\" style=\"zoom: 67%;\" />\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::AddCam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">SetCam</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SetCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新创建一个QDialog</span></span><br><span class=\"line\">\t<span class=\"function\">QDialog <span class=\"title\">dlg</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">\tdlg.<span class=\"built_in\">resize</span>(<span class=\"number\">800</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 标题1 输入框1</span></span><br><span class=\"line\">\t<span class=\"comment\">// 标题2 输入框2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置布局管理器</span></span><br><span class=\"line\">\tQFormLayout lay;</span><br><span class=\"line\">\tdlg.<span class=\"built_in\">setLayout</span>(&amp;lay);</span><br><span class=\"line\">\tQLineEdit name_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;名称&quot;</span>), &amp;name_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQLineEdit url_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;主码流&quot;</span>), &amp;url_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQLineEdit sub_url_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;辅码流&quot;</span>), &amp;sub_url_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQLineEdit save_path_edit;</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;保存目录&quot;</span>), &amp;save_path_edit);</span><br><span class=\"line\"></span><br><span class=\"line\">\tQPushButton save;</span><br><span class=\"line\">\tsave.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;保存&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \taccept()函数会关闭对话框。</span></span><br><span class=\"line\"><span class=\"comment\">    \t</span></span><br><span class=\"line\"><span class=\"comment\">    \t关闭对话框时，accept()函数会将对话框的返回状态设置为QDialog::Accepted。</span></span><br><span class=\"line\"><span class=\"comment\">    \t这个返回状态可以在调用对话框的地方通过exec()函数的返回值获取。</span></span><br><span class=\"line\"><span class=\"comment\">    \t</span></span><br><span class=\"line\"><span class=\"comment\">    \t一般来说</span></span><br><span class=\"line\"><span class=\"comment\">    \t点击“确定”按钮时，调用accept()函数关闭对话框并设置返回状态为QDialog::Accepted。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t点击“取消”按钮时，调用reject()函数关闭对话框并设置返回状态为QDialog::Rejected。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t可以通过if(dlg.exec() == QDialog::Accepted)处理判断</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(&amp;save, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">clicked</span>()), &amp;dlg, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">accept</span>()));</span><br><span class=\"line\">\tlay.<span class=\"built_in\">addRow</span>(<span class=\"string\">&quot;&quot;</span>, &amp;save);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果是传入的参数index不是负数，代表编辑数据 读入元数据显示</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> cam = c-&gt;<span class=\"built_in\">GetCam</span>(index);</span><br><span class=\"line\">\t\tname_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.name));</span><br><span class=\"line\">\t\turl_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.url));</span><br><span class=\"line\">\t\tsub_url_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.sub_url));</span><br><span class=\"line\">\t\tsave_path_edit.<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(cam.save_path));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理输入格式是否有问题</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 点击了保存按钮</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dlg.<span class=\"built_in\">exec</span>() == QDialog::Accepted)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (name_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入名称&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入主码流&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (sub_url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入辅码流&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (save_path_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">isEmpty</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请输入保存目录&quot;</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个data，将输入的数据存储下来</span></span><br><span class=\"line\">\tXCameraData data;</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.name, name_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.url, url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.sub_url, sub_url_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(data.save_path, save_path_edit.<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>)  <span class=\"comment\">// 表示修改</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc-&gt;<span class=\"built_in\">SetCam</span>(index, data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>  <span class=\"comment\">// 表示新增</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc-&gt;<span class=\"built_in\">Push</span>(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc-&gt;<span class=\"built_in\">Save</span>(CAM_CONF_PATH);  <span class=\"comment\">// 保存到文件</span></span><br><span class=\"line\">\t<span class=\"built_in\">RefreshCams</span>();  <span class=\"comment\">// 刷新显示</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改，删除相机\">修改，删除相机</h3>\n<p>当用户点击一个相机，然后点击修改、删除按钮。</p>\n<p>不点击相机，点击修改、删除按钮无效。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改摄像机配置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SetCam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取用户点击的相机位置</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> row = ui.cam_list-&gt;<span class=\"built_in\">currentIndex</span>().<span class=\"built_in\">row</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请选择摄像机&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">SetCam</span>(row);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除摄像机配置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::DelCam</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取用户点击的相机位置</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> row = ui.cam_list-&gt;<span class=\"built_in\">currentIndex</span>().<span class=\"built_in\">row</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (row &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;error&quot;</span>, <span class=\"built_in\">C</span>(<span class=\"string\">&quot;请选择摄像机&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;您确认要删除摄像机：&quot;</span> &lt;&lt; ui.cam_list-&gt;<span class=\"built_in\">currentItem</span>()-&gt;<span class=\"built_in\">text</span>().<span class=\"built_in\">toLocal8Bit</span>().<span class=\"built_in\">constData</span>();</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;吗？&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果用户点击No，则返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;confirm&quot;</span>, <span class=\"built_in\">C</span>(ss.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>()), QMessageBox::Yes, QMessageBox::No)</span><br><span class=\"line\">\t\t!= QMessageBox::Yes</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过单例，删除数据</span></span><br><span class=\"line\">\tXCameraConfig::<span class=\"built_in\">Instance</span>()-&gt;<span class=\"built_in\">DelCam</span>(row);</span><br><span class=\"line\">\t<span class=\"built_in\">RefreshCams</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"点击相机，有录像的日期标红\">点击相机，有录像的日期标红</h3>\n<p>点击某一个相机，在cal中有录像的日期标红。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 选择摄像机</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SelectCamera</span><span class=\"params\">(QModelIndex index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> conf = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> cam = conf-&gt;<span class=\"built_in\">GetCam</span>(index.<span class=\"built_in\">row</span>());  <span class=\"comment\">// 获取相机的参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cam.name[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 相机视频存储路径</span></span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; cam.save_path &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; index.<span class=\"built_in\">row</span>() &lt;&lt; <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历此目录</span></span><br><span class=\"line\">\t<span class=\"function\">QDir <span class=\"title\">dir</span><span class=\"params\">(C(ss.str().c_str()))</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dir.<span class=\"built_in\">exists</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取目录下文件列表</span></span><br><span class=\"line\">\tQStringList filters;</span><br><span class=\"line\">    <span class=\"comment\">// 只选择.mp4 .avi格式</span></span><br><span class=\"line\">\tfilters &lt;&lt; <span class=\"string\">&quot;*.mp4&quot;</span> &lt;&lt; <span class=\"string\">&quot;*.avi&quot;</span>;</span><br><span class=\"line\">\tdir.<span class=\"built_in\">setNameFilters</span>(filters);  <span class=\"comment\">// 筛选</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清理其他相机的数据</span></span><br><span class=\"line\">\tui.cal-&gt;<span class=\"built_in\">ClearDate</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 存放&lt;日期-时间&gt;的map</span></span><br><span class=\"line\">\tcam_videos.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 所有文件列表</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> files = dir.<span class=\"built_in\">entryInfoList</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> file : files)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &quot;cam_2024_07_29_10_18_18.mp4&quot;</span></span><br><span class=\"line\">\t\tQString filename = file.<span class=\"built_in\">fileName</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 去掉cam_ 和.mp4</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> tmp = filename.<span class=\"built_in\">left</span>(filename.<span class=\"built_in\">size</span>() - <span class=\"number\">4</span>);</span><br><span class=\"line\">\t\ttmp = tmp.<span class=\"built_in\">right</span>(tmp.<span class=\"built_in\">length</span>() - <span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 剩下2024_07_29_10_18_18</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> dt = QDateTime::<span class=\"built_in\">fromString</span>(tmp, <span class=\"string\">&quot;yyyy_MM_dd_hh_mm_ss&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将数据存入cal的mdate_中，然后在cal中进行渲染。</span></span><br><span class=\"line\">        <span class=\"comment\">// cal中mdate_定义：</span></span><br><span class=\"line\">        <span class=\"comment\">// std::set&lt;QDate&gt; mdate_;  // 存放有视频的日期</span></span><br><span class=\"line\">\t\tui.cal-&gt;<span class=\"built_in\">AddDate</span>(dt.<span class=\"built_in\">date</span>());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">// XCamVideo：自定义存储文件路径，时间的struct</span></span><br><span class=\"line\">\t\tXCamVideo video;</span><br><span class=\"line\">\t\tvideo.datetime = dt;</span><br><span class=\"line\">\t\tvideo.filepath = file.<span class=\"built_in\">absoluteFilePath</span>();</span><br><span class=\"line\">\t\tcam_videos[dt.<span class=\"built_in\">date</span>()].<span class=\"built_in\">push_back</span>(video);  <span class=\"comment\">// 将其存储进行map中</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重新显示日期</span></span><br><span class=\"line\">\tui.cal-&gt;<span class=\"built_in\">showNextMonth</span>();</span><br><span class=\"line\">\tui.cal-&gt;<span class=\"built_in\">showPreviousMonth</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"点击日期，出现录像文件\">点击日期，出现录像文件</h3>\n<p>点击右侧日历中的红色日期，会在中间的time_list出现录像文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 选择日期</span></span><br><span class=\"line\"><span class=\"comment\">// 通过clicked(QDate)传入QDate进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::SelectDate</span><span class=\"params\">(QDate date)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;SelectDate&quot;</span> &lt;&lt; date.<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">    <span class=\"comment\">// // map&lt;QDate, vector&lt;XCamVideo&gt;&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> dates = cam_videos[date];</span><br><span class=\"line\">\tui.time_list-&gt;<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> d : dates)  <span class=\"comment\">// 遍历vector&lt;XCamVideo&gt;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为每个视频创建一个新的 QListWidgetItem 对象，</span></span><br><span class=\"line\">        <span class=\"comment\">// 并将视频的时间（d.datetime.time()）转换为字符串并设置为该项的显示文本。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> item = <span class=\"keyword\">new</span> <span class=\"built_in\">QListWidgetItem</span>(d.datetime.<span class=\"built_in\">time</span>().<span class=\"built_in\">toString</span>());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// item 添加自定义数据 文件路径</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 setData(Qt::UserRole, value) 将每个视频文件的路径存储在 QListWidgetItem 中。</span></span><br><span class=\"line\">        <span class=\"comment\">// 后续可以通过item-&gt;data(Qt::UserRole).toString();进行查询</span></span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        <span class=\"comment\">// 如在void XViewer::PlayVideo(QModelIndex index)函数中</span></span><br><span class=\"line\">\t\titem-&gt;<span class=\"built_in\">setData</span>(Qt::UserRole, d.filepath);</span><br><span class=\"line\">\t\tui.time_list-&gt;<span class=\"built_in\">addItem</span>(item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相机参数设置\">相机参数设置</h2>\n<h3 id=\"单例模式\">单例模式</h3>\n<p>单例模式（Singleton Pattern）是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点。单例模式的主要好处包括以下几个方面：</p>\n<ol>\n<li><strong>控制实例数量</strong></li>\n</ol>\n<ul>\n<li>单例模式确保一个类只有一个实例，这对于某些场景来说是非常重要的，例如：配置管理类、线程池、日志记录类等。这些场景中，一个实例足以满足需求，且多个实例可能导致问题。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>全局访问点</strong></li>\n</ol>\n<ul>\n<li>单例模式提供了一个全局访问点，可以在整个应用程序中方便地访问该实例。这简化了代码中的依赖管理，不需要到处传递实例引用。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>延迟实例化</strong></li>\n</ol>\n<ul>\n<li>单例模式可以延迟实例化，即在第一次访问实例时创建对象。这有助于优化资源的使用，避免在不需要时创建对象，从而节省内存和其他系统资源。</li>\n</ul>\n<ol start=\"4\">\n<li><strong>共享资源</strong></li>\n</ol>\n<ul>\n<li>单例模式允许多个组件或线程共享一个资源，而不需要担心资源的并发访问问题。例如，<strong>单例模式常用于数据库连接池，这样可以确保所有数据库操作使用同一个连接池</strong>，提高资源利用率。</li>\n</ul>\n<ol start=\"5\">\n<li><strong>防止多重实例</strong></li>\n</ol>\n<ul>\n<li>单例模式可以防止多个实例存在，从而避免可能出现的不一致性或逻辑错误。例如，在某些情况下，如果多个实例同时修改同一个文件或数据库，可能会导致数据不一致或冲突。</li>\n</ul>\n<ol start=\"6\">\n<li><strong>提高性能</strong></li>\n</ol>\n<ul>\n<li>由于单例模式只创建一次实例，因此可以减少对象创建和销毁的开销，提高系统的性能。</li>\n</ul>\n<h3 id=\"xcamera-config-h\">xcamera_config.h</h3>\n<p>单例模式，唯一对象实例，外部只能通过Instance来调用接口函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">XCameraData</span>  <span class=\"comment\">// 存储相机参数 XCameraData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> name[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> url[<span class=\"number\">4096</span>] = &#123; <span class=\"number\">0</span> &#125;;  <span class=\"comment\">// 摄像机主码流</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> sub_url[<span class=\"number\">4096</span>] = &#123; <span class=\"number\">0</span> &#125;;  <span class=\"comment\">// 摄像机辅码流</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> save_path[<span class=\"number\">4096</span>] = &#123; <span class=\"number\">0</span> &#125;;  <span class=\"comment\">// 视频录制存放目录</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XCameraConfig</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 唯一对象实例 单例模式</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> XCameraConfig *<span class=\"title\">Instance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> XCameraConfig xc;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;xc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 插入摄像机 线程安全</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Push</span><span class=\"params\">(<span class=\"type\">const</span> XCameraData &amp;data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取摄像头</span></span><br><span class=\"line\">\t<span class=\"comment\">// index：摄像头索引 从0开始</span></span><br><span class=\"line\">\t<span class=\"function\">XCameraData <span class=\"title\">GetCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 修改摄像机数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SetCam</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">const</span> XCameraData &amp;data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除摄像机</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DelCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回相机数量 线程安全</span></span><br><span class=\"line\">\t<span class=\"comment\">// 失败返回0</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetCamCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 存储配置文件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Save</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>*path)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取配置文件 存入cams_</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Load</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>*path)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">XCameraConfig</span>() &#123;&#125;;  <span class=\"comment\">// 构造私有 单例模式</span></span><br><span class=\"line\">\tstd::vector&lt;XCameraData&gt; cams_;  <span class=\"comment\">// 存储所有相机的参数 cams_</span></span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"xcamera-config-cpp\">xcamera_config.cpp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcamera_config.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入摄像机 线程安全</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCameraConfig::Push</span><span class=\"params\">(<span class=\"type\">const</span> XCameraData &amp;data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\tcams_.<span class=\"built_in\">push_back</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取摄像头</span></span><br><span class=\"line\"><span class=\"comment\">// index：摄像头索引 从0开始</span></span><br><span class=\"line\"><span class=\"function\">XCameraData <span class=\"title\">XCameraConfig::GetCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; cams_.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">XCameraData</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cams_[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除摄像机</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCameraConfig::DelCam</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; cams_.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcams_.<span class=\"built_in\">erase</span>(cams_.<span class=\"built_in\">begin</span>() + index);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改摄像机数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCameraConfig::SetCam</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">const</span> XCameraData &amp;data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; cams_.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tcams_[index] = data;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回相机数量 线程安全</span></span><br><span class=\"line\"><span class=\"comment\">// 失败返回0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">XCameraConfig::GetCamCount</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cams_.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取配置文件 存入cams_</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCameraConfig::Load</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>*path)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!path) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">ifs</span><span class=\"params\">(path, ios::binary)</span></span>;  <span class=\"comment\">// 使用二进制打开文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ifs) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tXCameraData data;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\tcams_.<span class=\"built_in\">clear</span>();  <span class=\"comment\">// 清理数据重新读取</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从文件中读取sizeof(data)字节的数据到data中。</span></span><br><span class=\"line\">\t\tifs.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)&amp;data, <span class=\"built_in\">sizeof</span>(data));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果读取的字节数不等于sizeof(data)，说明已经读到文件末尾或发生读取错误。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ifs.<span class=\"built_in\">gcount</span>() != <span class=\"built_in\">sizeof</span>(data))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcams_.<span class=\"built_in\">push_back</span>(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tifs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储配置文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCameraConfig::Save</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>*path)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!path) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"function\">ofstream <span class=\"title\">ofs</span><span class=\"params\">(path, ios::binary)</span></span>;  <span class=\"comment\">// 用二进制存储文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ofs) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> cam : cams_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tofs.<span class=\"built_in\">write</span>((<span class=\"type\">char</span>*)&amp;cam, <span class=\"built_in\">sizeof</span>(cam));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tofs.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"浏览相机\">浏览相机</h2>\n<p>将cam_list属性中的dragEnable打钩（这样就可以进行拖拽了）</p>\n<p>重载XCameraWidget里面的一些函数，使得通过拖拽让窗口获取参数，进行播放</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408010928359.png\" alt=\"image-20240801092830519\" style=\"zoom:67%;\" />\n<p>【<strong>注</strong>】：在XViewer中的<code>void XViewer::View(int count)</code>，在每次用户设置几路播放的时候，初始化了XCameraWidget()，使得每个窗口都是XCameraWidget，从而可以触发XCameraWidget一系列槽函数、函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cam_wids[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// XCameraWidget初始化</span></span><br><span class=\"line\">\t\t\tcam_wids[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">XCameraWidget</span>();</span><br><span class=\"line\">\t\t\tcam_wids[i]-&gt;<span class=\"built_in\">setStyleSheet</span>(<span class=\"string\">&quot;background-color:rgb(51, 51, 51);&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlay-&gt;<span class=\"built_in\">addWidget</span>(cam_wids[i], i / cols, i % cols);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xcamera-widget-h\">xcamera_widget.h</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPaintEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XDecodeTask</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XDemuxTask</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XVideoView</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承于QWidget</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XCameraWidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">XCameraWidget</span>(QWidget *p = <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拖拽进入</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dragEnterEvent</span><span class=\"params\">(QDragEnterEvent *e)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拖拽松开</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dropEvent</span><span class=\"params\">(QDropEvent *e)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 渲染</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">paintEvent</span><span class=\"params\">(QPaintEvent *p)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 渲染视频</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清理资源</span></span><br><span class=\"line\">\t~<span class=\"built_in\">XCameraWidget</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tXDecodeTask *decode_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 解码器</span></span><br><span class=\"line\">\tXDemuxTask *demux_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">\tXVideoView *view_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 初始化SDL，进行窗口渲染</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xcamera-widget-cpp\">xcamera_widget.cpp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xCamera_widget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QStyleOption&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPainter&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDragEnterEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDropEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QListWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdemuxTask.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdecodeTask.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcamera_config.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染样式表</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t对Qt::paintEvent进行了重载</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\tpaintEvent是QWidget类中的一个虚函数，当需要重新绘制控件时会被调用。</span></span><br><span class=\"line\"><span class=\"comment\">\t通过重载这个函数，可以自定义控件的绘制方式。</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\tQPaintEvent *p是一个指向QPaintEvent对象的指针，包含有关绘制事件的信息。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCameraWidget::paintEvent</span><span class=\"params\">(QPaintEvent *p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tQStyleOption opt;  <span class=\"comment\">// 描述控件绘制参数的类</span></span><br><span class=\"line\">\topt.<span class=\"built_in\">init</span>(<span class=\"keyword\">this</span>);  <span class=\"comment\">// 将当前控件的状态信息初始化到opt中。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;  <span class=\"comment\">// 创建一个QPainter对象painter，并将其与当前控件相关联。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这意味着所有的绘制操作都将在当前控件上执行。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">style</span>()-&gt;<span class=\"built_in\">drawPrimitive</span>(QStyle::PE_Widget, &amp;opt, &amp;painter, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \tstyle()返回当前应用的样式（即当前使用的QStyle对象）。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdrawPrimitive是QStyle类中的一个函数，用于绘制基本的元素（Primitive Element）。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tQStyle::PE_Widget表示绘制的是一个普通的窗口部件（Widget）。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t参数依次是绘制的元素类型（QStyle::PE_Widget）、绘制选项（QStyleOption对象opt）、</span></span><br><span class=\"line\"><span class=\"comment\">\t\t绘制设备（QPainter对象painter）和控件本身（this）。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是 XCameraWidget 类的构造函数。</span></span><br><span class=\"line\"><span class=\"comment\">// 它接受一个 QWidget 类型的指针 p 作为参数，并将其传递给基类 QWidget 的构造函数。</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// 使用初始化列表而不是在构造函数体内调用基类构造函数，更加简洁和清晰，同时也能提高性能。</span></span><br><span class=\"line\">XCameraWidget::<span class=\"built_in\">XCameraWidget</span>(QWidget *p):<span class=\"built_in\">QWidget</span>(p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接收拖拽</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置当前小部件可以接收拖拽操作。</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setAcceptDrops</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拖拽进入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCameraWidget::dragEnterEvent</span><span class=\"params\">(QDragEnterEvent *e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 接收拖拽进入</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数调用之后，拖放操作将被认为是可行的，并且后续的 dropEvent 将会被触发。</span></span><br><span class=\"line\">\te-&gt;<span class=\"built_in\">acceptProposedAction</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拖拽松开</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCameraWidget::dropEvent</span><span class=\"params\">(QDropEvent *e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到url</span></span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; e-&gt;<span class=\"built_in\">source</span>()-&gt;<span class=\"built_in\">objectName</span>() &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将拖拽源对象转换为 QListWidget 类型，并存储在 wid 变量中。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> wid = (QListWidget*)e-&gt;<span class=\"built_in\">source</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; wid-&gt;<span class=\"built_in\">currentRow</span>() &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 通过 XCameraConfig 单例类的 GetCam 方法，获取当前选择行对应的摄像头配置。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> cam = XCameraConfig::<span class=\"built_in\">Instance</span>()-&gt;<span class=\"built_in\">GetCam</span>(wid-&gt;<span class=\"built_in\">currentRow</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">Open</span>(cam.url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 播放视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCameraWidget::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (demux_)</span><br><span class=\"line\">\t\tdemux_-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (decode_)</span><br><span class=\"line\">\t\tdecode_-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开解封装器，线程</span></span><br><span class=\"line\">\tdemux_ = <span class=\"keyword\">new</span> <span class=\"built_in\">XDemuxTask</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!demux_-&gt;<span class=\"built_in\">Open</span>(url))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 打开视频解码器，线程</span></span><br><span class=\"line\">\tdecode_ = <span class=\"keyword\">new</span> <span class=\"built_in\">XDecodeTask</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> para = demux_-&gt;<span class=\"built_in\">CopyVideoPara</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!decode_-&gt;<span class=\"built_in\">Open</span>(para-&gt;para))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 设定解码器线程接收解封装数据</span></span><br><span class=\"line\">    <span class=\"comment\">// 【责任链】</span></span><br><span class=\"line\">    <span class=\"comment\">// 将解码器 decode_ 设为解封装器 demux_ 的下一个处理对象。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这意味着当解封装器解封装出数据包后，会传递给解码器进行解码。</span></span><br><span class=\"line\">\tdemux_-&gt;<span class=\"built_in\">set_next</span>(decode_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化渲染参数</span></span><br><span class=\"line\">\tview_ = XVideoView::<span class=\"built_in\">Create</span>();</span><br><span class=\"line\">\tview_-&gt;<span class=\"built_in\">set_win_id</span>((<span class=\"type\">void</span>*)<span class=\"built_in\">winId</span>());</span><br><span class=\"line\">\tview_-&gt;<span class=\"built_in\">Init</span>(para-&gt;para);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动解封装和解码线程</span></span><br><span class=\"line\">\tdemux_-&gt;<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\tdecode_-&gt;<span class=\"built_in\">Start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染视频</span></span><br><span class=\"line\"><span class=\"comment\">// 通过在xviewer.cpp中timerEvent回调函数，每一帧进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCameraWidget::Draw</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!demux_ || !decode_ || !view_) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = decode_-&gt;<span class=\"built_in\">GetFrame</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!f) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tview_-&gt;<span class=\"built_in\">DrawFrame</span>(f);</span><br><span class=\"line\">\t<span class=\"built_in\">XFreeFrame</span>(&amp;f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理资源</span></span><br><span class=\"line\">XCameraWidget::~<span class=\"built_in\">XCameraWidget</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (demux_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdemux_-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> demux_;</span><br><span class=\"line\">\t\tdemux_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (decode_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdecode_-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> decode_;</span><br><span class=\"line\">\t\tdecode_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (view_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tview_-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> view_;</span><br><span class=\"line\">\t\tview_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"录制功能\">录制功能</h2>\n<h3 id=\"xcamera-record-h\">xcamera_record.h</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XCameraRecord</span> : <span class=\"keyword\">public</span> XThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_rtsp_url</span><span class=\"params\">(std::string url)</span> </span>&#123; rtsp_url_ = url; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_save_path</span><span class=\"params\">(std::string s)</span> </span>&#123; save_path_ = s; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_file_sec</span><span class=\"params\">(<span class=\"type\">int</span> s)</span> </span>&#123; file_sec_ = s; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\tstd::string rtsp_url_;</span><br><span class=\"line\">\tstd::string save_path_;  <span class=\"comment\">// 存储的根目录</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> file_sec_ = <span class=\"number\">5</span>;  <span class=\"comment\">// 多少秒创建一个新监控文件</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xcamera-record-cpp\">xcamera_record.cpp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcamera_record.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdemuxTask.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xmuxTask.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> chrono;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成存储的视频文件名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> std::string <span class=\"title\">GetFileName</span><span class=\"params\">(string path)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> t = system_clock::<span class=\"built_in\">to_time_t</span>(system_clock::<span class=\"built_in\">now</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> time_str = <span class=\"built_in\">put_time</span>(<span class=\"built_in\">localtime</span>(&amp;t), <span class=\"string\">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>);</span><br><span class=\"line\">\tss &lt;&lt; path &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; <span class=\"string\">&quot;cam_&quot;</span> &lt;&lt; time_str &lt;&lt; <span class=\"string\">&quot;.mp4&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ss.<span class=\"built_in\">str</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCameraRecord::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tXDemuxTask demux;</span><br><span class=\"line\">\tXMuxTask mux;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rtsp_url_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;open rtsp url failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 自动重连</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (demux.<span class=\"built_in\">Open</span>(rtsp_url_))  <span class=\"comment\">// 最坏情况：阻塞1秒</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 音视频参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> vpara = demux.<span class=\"built_in\">CopyVideoPara</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!vpara)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;demux.CopyVideoPara failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 需要考虑demux 资源释放的问题</span></span><br><span class=\"line\">\t\tdemux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 提前启动解封装线程，防止超时</span></span><br><span class=\"line\">\tdemux.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> apara = demux.<span class=\"built_in\">CopyAudioPara</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVCodecParameters *para = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 音频参数</span></span><br><span class=\"line\">\tAVRational *timebase = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 音频时间基数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (apara)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpara = apara-&gt;para;</span><br><span class=\"line\">\t\ttimebase = apara-&gt;time_base;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!mux.<span class=\"built_in\">Open</span>(<span class=\"built_in\">GetFileName</span>(save_path_).<span class=\"built_in\">c_str</span>(),</span><br><span class=\"line\">\t\tvpara-&gt;para,  <span class=\"comment\">// 视频参数</span></span><br><span class=\"line\">\t\tvpara-&gt;time_base,</span><br><span class=\"line\">\t\tpara,  <span class=\"comment\">// 音频参数</span></span><br><span class=\"line\">\t\ttimebase))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;mux.Open failed!&quot;</span>); </span><br><span class=\"line\">\t\tdemux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\tmux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置 demux 的下一个处理对象为 mux，并启动 mux。</span></span><br><span class=\"line\">\tdemux.<span class=\"built_in\">set_next</span>(&amp;mux);</span><br><span class=\"line\">\tmux.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当前时间</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> cur = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">NowMs</span>() - cur &gt; file_sec_ * <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcur = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\">\t\t\tmux.<span class=\"built_in\">Stop</span>();  <span class=\"comment\">// 停止存储，写入索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mux.<span class=\"built_in\">Open</span>(<span class=\"built_in\">GetFileName</span>(save_path_).<span class=\"built_in\">c_str</span>(),</span><br><span class=\"line\">\t\t\t\tvpara-&gt;para,  <span class=\"comment\">// 视频参数</span></span><br><span class=\"line\">\t\t\t\tvpara-&gt;time_base,</span><br><span class=\"line\">\t\t\t\tpara,  <span class=\"comment\">// 音频参数</span></span><br><span class=\"line\">\t\t\t\ttimebase))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;mux.Open failed!&quot;</span>);</span><br><span class=\"line\">\t\t\t\tdemux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t\t\tmux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tmux.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定时创建新的文件</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\tdemux.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在xviewer-cpp中的应用\">在xviewer.cpp中的应用</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开始全部摄像头录制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::StartRecord</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先停止之前的录制</span></span><br><span class=\"line\">\t<span class=\"built_in\">StopRecord</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;开始全部摄像头录制&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tui.status-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;录制中...&quot;</span>));</span><br><span class=\"line\">\t<span class=\"comment\">// 获取配置列表</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> conf = XCameraConfig::<span class=\"built_in\">Instance</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = conf-&gt;<span class=\"built_in\">GetCamCount</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> cam = conf-&gt;<span class=\"built_in\">GetCam</span>(i);</span><br><span class=\"line\">\t\tstringstream ss;</span><br><span class=\"line\">\t\tss &lt;&lt; cam.save_path &lt;&lt; <span class=\"string\">&quot;/&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// QDir 类用于处理文件和目录的操作</span></span><br><span class=\"line\">\t\tQDir dir;</span><br><span class=\"line\">        <span class=\"comment\">// dir.mkpath(ss.str().c_str()); 的作用是确保指定的目录路径存在，</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果路径中任何部分的目录不存在，则会创建它们。</span></span><br><span class=\"line\">\t\tdir.<span class=\"built_in\">mkpath</span>(ss.<span class=\"built_in\">str</span>().<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t\tXCameraRecord *rec = <span class=\"keyword\">new</span> <span class=\"built_in\">XCameraRecord</span>();</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">set_rtsp_url</span>(cam.url);</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">set_save_path</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">set_file_sec</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\t\trecords.<span class=\"built_in\">push_back</span>(rec);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建录制目录</span></span><br><span class=\"line\">\t<span class=\"comment\">// 分别开启录制线程</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 停止全部摄像头录制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::StopRecord</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.status-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">C</span>(<span class=\"string\">&quot;监控中...&quot;</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> rec : records)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trec-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> rec;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trecords.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义日历\">自定义日历</h2>\n<p>将cal提升为自定义日历类</p>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408011529518.png\" alt=\"image-20240801145843932\" style=\"zoom:67%;\" />\n<h3 id=\"xcalendar-h\">xcalendar.h</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCalendarWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XCalendar</span> : <span class=\"keyword\">public</span> QCalendarWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// XCalendar(QWidget *p)：构造函数，接受一个 QWidget 指针作为父窗口。</span></span><br><span class=\"line\">\t<span class=\"built_in\">XCalendar</span>(QWidget *p);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 重写 QCalendarWidget 的 paintCell 方法，以便自定义日期单元格的绘制。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">paintCell</span><span class=\"params\">(QPainter *painter, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">const</span> QRect &amp;rec, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">const</span> QDate &amp;data)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">AddDate</span><span class=\"params\">(QDate d)</span> </span>&#123; mdate_.<span class=\"built_in\">insert</span>(d); &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ClearDate</span><span class=\"params\">()</span> </span>&#123; mdate_.<span class=\"built_in\">clear</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// QDate 是 Qt 框架中的一个类，用于表示和处理日期。</span></span><br><span class=\"line\">\tstd::set&lt;QDate&gt; mdate_;  <span class=\"comment\">// 存放有视频的日期</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xcalendar-cpp\">xcalendar.cpp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcalendar.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPainter&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">XCalendar::<span class=\"built_in\">XCalendar</span>(QWidget *p):<span class=\"built_in\">QCalendarWidget</span>(p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCalendar::paintCell</span><span class=\"params\">(QPainter *painter,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> QRect &amp;rec,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> QDate &amp;date)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 有视频的日期特殊显示未红色</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mdate_.<span class=\"built_in\">find</span>(date) == mdate_.<span class=\"built_in\">end</span>())  <span class=\"comment\">// 没有视频的日期</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用QCalendarWidget</span></span><br><span class=\"line\">\t\tQCalendarWidget::<span class=\"built_in\">paintCell</span>(painter, rec, date);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> font = painter-&gt;<span class=\"built_in\">font</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置字体</span></span><br><span class=\"line\">\tfont.<span class=\"built_in\">setPixelSize</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 选中状态刷背景色</span></span><br><span class=\"line\">    <span class=\"comment\">// selectedDate() 是用于获取用户在日期选择器中选定日期的一个方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (date == <span class=\"built_in\">selectedDate</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpainter-&gt;<span class=\"built_in\">setBrush</span>(<span class=\"built_in\">QColor</span>(<span class=\"number\">118</span>, <span class=\"number\">178</span>, <span class=\"number\">224</span>));  <span class=\"comment\">// 刷子颜色</span></span><br><span class=\"line\">\t\tpainter-&gt;<span class=\"built_in\">drawRect</span>(rec);  <span class=\"comment\">// 绘制背景</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpainter-&gt;<span class=\"built_in\">setFont</span>(font);  <span class=\"comment\">// 设置字体和颜色</span></span><br><span class=\"line\">\tpainter-&gt;<span class=\"built_in\">setPen</span>(<span class=\"built_in\">QColor</span>(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));  <span class=\"comment\">// 字体颜色</span></span><br><span class=\"line\">\tpainter-&gt;<span class=\"built_in\">drawText</span>(rec, Qt::AlignCenter, QString::<span class=\"built_in\">number</span>(date.<span class=\"built_in\">day</span>()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"回放功能\">回放功能</h2>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202408011529068.png\" alt=\"image-20240801145254736\"></p>\n<h3 id=\"xplayvideo-h\">xplayvideo.h</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ui_xplayvideo.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdemuxTask.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdecodeTask.h&quot;</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XPlayVideo</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">XPlayVideo</span>(QWidget *parent = <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t~<span class=\"built_in\">XPlayVideo</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">closeEvent</span><span class=\"params\">(QCloseEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tUi::XPlayVideoClass ui;</span><br><span class=\"line\">\tXDemuxTask demux_;</span><br><span class=\"line\">\tXDecodeTask decode_;</span><br><span class=\"line\">\tXVideoView *view_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xplayvideo-cpp\">xplayvideo.cpp</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xplayvideo.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XPlayVideo::timerEvent</span><span class=\"params\">(QTimerEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!view_) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = decode_.<span class=\"built_in\">GetFrame</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!f) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tview_-&gt;<span class=\"built_in\">DrawFrame</span>(f);</span><br><span class=\"line\">\t<span class=\"built_in\">XFreeFrame</span>(&amp;f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XPlayVideo::Close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 关闭上一次数据</span></span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\tdecode_.<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (view_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tview_-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> view_;</span><br><span class=\"line\">\t\tview_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XPlayVideo::closeEvent</span><span class=\"params\">(QCloseEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XPlayVideo::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!demux_.<span class=\"built_in\">Open</span>(url))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> vp = demux_.<span class=\"built_in\">CopyVideoPara</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!vp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!decode_.<span class=\"built_in\">Open</span>(vp-&gt;para))  <span class=\"comment\">// 解码</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_next</span>(&amp;decode_);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!view_)</span><br><span class=\"line\">\t\tview_ = XVideoView::<span class=\"built_in\">Create</span>();</span><br><span class=\"line\">\tview_-&gt;<span class=\"built_in\">set_win_id</span>((<span class=\"type\">void</span>*)<span class=\"built_in\">winId</span>());  <span class=\"comment\">// SDL渲染</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!view_-&gt;<span class=\"built_in\">Init</span>(vp-&gt;para))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_syn_type</span>(XSYN_VIDEO);</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\tdecode_.<span class=\"built_in\">Start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XPlayVideo::<span class=\"built_in\">XPlayVideo</span>(QWidget *parent)</span><br><span class=\"line\">\t: <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XPlayVideo::~<span class=\"built_in\">XPlayVideo</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在xviewer-cpp中的应用-2\">在xviewer.cpp中的应用</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 选择时间进行播放视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XViewer::PlayVideo</span><span class=\"params\">(QModelIndex index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;PlayVideo&quot;</span> &lt;&lt; index.<span class=\"built_in\">row</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> item = ui.time_list-&gt;<span class=\"built_in\">currentItem</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!item) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\tQString path = item-&gt;<span class=\"built_in\">data</span>(Qt::UserRole).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">qDebug</span>() &lt;&lt; path;</span><br><span class=\"line\">\t<span class=\"type\">static</span> XPlayVideo play;</span><br><span class=\"line\">\tplay.<span class=\"built_in\">Open</span>(path.<span class=\"built_in\">toLocal8Bit</span>());</span><br><span class=\"line\">\tplay.<span class=\"built_in\">show</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XDemuxTask","url":"http://example.com/2024/07/24/XDemuxTask/","content":"<h2 id=\"XDemuxTask-h\">XDemuxTask.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdemux.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">XSYN_TYPE</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tXSYN_NONE = <span class=\"number\">0</span>,  <span class=\"comment\">// 不做同步</span></span><br><span class=\"line\">\tXSYN_VIDEO = <span class=\"number\">1</span>,  <span class=\"comment\">// 根据视频同步，不处理音频</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XDemuxTask</span> : <span class=\"keyword\">public</span> XThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 打开解封装</span></span><br><span class=\"line\">\t<span class=\"comment\">// url: rtsp地址</span></span><br><span class=\"line\">\t<span class=\"comment\">// timeout_ms：超时时间 单位毫秒</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">(std::string url, <span class=\"type\">int</span> timeout_ms = <span class=\"number\">1000</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 复制视频参数</span></span><br><span class=\"line\">\t<span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">CopyVideoPara</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> demux_.<span class=\"built_in\">CopyVideoPara</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">CopyAudioPara</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> demux_.<span class=\"built_in\">CopyAudioPara</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_syn_type</span><span class=\"params\">(XSYN_TYPE t)</span> </span>&#123; syn_type_ = t; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tXDemux demux_;</span><br><span class=\"line\">\tstd::string url_;  <span class=\"comment\">// rtsp地址</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> timeout_ms_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 超时时间</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    XSYN_TYPE syn_type_ = XSYN_NONE;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"XDemuxTask-cpp\">XDemuxTask.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdemuxTask.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDemuxTask::Open</span><span class=\"params\">(std::string url, <span class=\"type\">int</span> timeout_ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGDEBUG</span>(<span class=\"string\">&quot;XDemuxTask::Open!&quot;</span>);</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_c</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;url_ = url;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;timeout_ms_ = timeout_ms;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = demux_.<span class=\"built_in\">Open</span>(url.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_c</span>(c);</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_time_out_ms</span>(timeout_ms);</span><br><span class=\"line\">\t<span class=\"built_in\">LOGDEBUG</span>(<span class=\"string\">&quot;XDemuxTask::End!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XDemuxTask::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVPacket pkt;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!demux_.<span class=\"built_in\">Read</span>(&amp;pkt))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!demux_.<span class=\"built_in\">is_connected</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">Open</span>(url_, timeout_ms_);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;.&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (syn_type_ == XSYN_VIDEO &amp;&amp; </span><br><span class=\"line\">\t\t\tpkt.stream_index == demux_.<span class=\"built_in\">video_index</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">auto</span> dur = demux_.<span class=\"built_in\">RescaleToMs</span>(pkt.duration, pkt.stream_index);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dur &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tdur = <span class=\"number\">40</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"built_in\">Next</span>(&amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_unref</span>(&amp;pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Open-4\">Open()</h3>\n<p>作用：这个方法通常用于初始化和配置多路复用器，以便后续从指定的 URL 读取和解析多路复用的音视频流。在实际应用中，可以调用该方法打开文件或流媒体 URL，并设置操作的超时时间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDemuxTask::Open</span><span class=\"params\">(std::string url, <span class=\"type\">int</span> timeout_ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGDEBUG</span>(<span class=\"string\">&quot;XDemuxTask::Open!&quot;</span>);</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_c</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;url_ = url;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;timeout_ms_ = timeout_ms;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = demux_.<span class=\"built_in\">Open</span>(url.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_c</span>(c);</span><br><span class=\"line\">\tdemux_.<span class=\"built_in\">set_time_out_ms</span>(timeout_ms);</span><br><span class=\"line\">\t<span class=\"built_in\">LOGDEBUG</span>(<span class=\"string\">&quot;XDemuxTask::End!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-2\">Main()</h3>\n<p>作用：这个方法通常用于一个独立的线程中，持续读取和处理媒体数据包。在实际应用中，可以在一个循环中不断调用 <code>Read</code> 方法，读取和处理媒体流中的每一帧数据，并在读取失败时进行错误处理和重连。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XDemuxTask::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVPacket pkt;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!demux_.<span class=\"built_in\">Read</span>(&amp;pkt))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 读取失败</span></span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;-&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果连接已断开，调用 Open 方法重新打开多路复用器。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!demux_.<span class=\"built_in\">is_connected</span>())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">Open</span>(url_, timeout_ms_);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 控制播放时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (syn_type_ == XSYN_VIDEO &amp;&amp;  <span class=\"comment\">// 如果枚举类为XSYN_VIDEO，</span></span><br><span class=\"line\">\t\t\tpkt.stream_index == demux_.<span class=\"built_in\">video_index</span>())  <span class=\"comment\">// 且当前渲染的是video_index()</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">auto</span> dur = demux_.<span class=\"built_in\">RescaleToMs</span>(pkt.duration, pkt.stream_index);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (dur &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tdur = <span class=\"number\">40</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// pkt.duration</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;.&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">\t\t<span class=\"built_in\">Next</span>(&amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_unref</span>(&amp;pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XDemux","url":"http://example.com/2024/07/24/XDemux/","content":"<h2 id=\"XDemux-h\">XDemux.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xformat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XDemux</span> : <span class=\"keyword\">public</span> XFormat</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 打开解封装  解封装地址支持rtsp 失败返回nullptr</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> AVFormatContext *<span class=\"title\">Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取一帧数据  </span></span><br><span class=\"line\">\t<span class=\"comment\">// pkt: 输出数据</span></span><br><span class=\"line\">\t<span class=\"comment\">// return 是否成功</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Read</span><span class=\"params\">(AVPacket *pkt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Seek</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> pts, <span class=\"type\">int</span> stream_index)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"XDemux-cpp\">XDemux.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdemux.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat\\avformat.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">av_strerror</span>(err, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\tcerr &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BERR(err) <span class=\"keyword\">if</span>(err != 0) &#123;PrintErr(err); return 0;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVFormatContext *<span class=\"title\">XDemux::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVFormatContext *c = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tAVDictionary *opts = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">av_dict_set</span>(&amp;opts, <span class=\"string\">&quot;stimeout&quot;</span>, <span class=\"string\">&quot;1000000&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_open_input</span>(&amp;c, url, <span class=\"literal\">nullptr</span>, &amp;opts);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (opts)</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_dict_free</span>(&amp;opts);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\tre = <span class=\"built_in\">avformat_find_stream_info</span>(c, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(c, <span class=\"number\">0</span>, url, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDemux::Read</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_read_frame</span>(c_, pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlast_time_ = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDemux::Seek</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> pts, <span class=\"type\">int</span> stream_index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_seek_frame</span>(c_, stream_index, pts,</span><br><span class=\"line\">\t\tAVSEEK_FLAG_FRAME | AVSEEK_FLAG_BACKWARD);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Open-3\">Open()</h3>\n<p>作用：通过 <code>Open</code> 方法，<code>XDemux</code> 类能够打开指定 URL 的多路复用器上下文，设置连接选项，获取媒体信息，并打印封装信息。该方法封装了多路复用器上下文的打开、选项设置和错误处理步骤，确保操作的可靠性和可调试性。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVFormatContext *<span class=\"title\">XDemux::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打开封装上下文</span></span><br><span class=\"line\">\tAVFormatContext *c = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 用于存储多路复用器上下文。</span></span><br><span class=\"line\">\tAVDictionary *opts = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 用于存储打开输入时的选项字典。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//av_dict_set(&amp;opts, &quot;rtsp_transport&quot;, &quot;tcp&quot;, 0);  // 传输媒体流为tcp协议，默认udp</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_dict_set</span>(&amp;opts, <span class=\"string\">&quot;stimeout&quot;</span>, <span class=\"string\">&quot;1000000&quot;</span>, <span class=\"number\">0</span>);  <span class=\"comment\">// 给字典opts设置连接超时1秒</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 尝试打开指定 URL 的输入上下文，并将选项字典 opts 传递给它。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果成功，c 将指向打开的多路复用器上下文。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_open_input</span>(&amp;c, url, <span class=\"literal\">nullptr</span>, &amp;opts);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (opts)</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_dict_free</span>(&amp;opts);  <span class=\"comment\">// 调用 av_dict_free 函数释放选项字典。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取媒体信息</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">avformat_find_stream_info</span>(c, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 打印输入封装信息</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(c, <span class=\"number\">0</span>, url, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Read\">Read()</h3>\n<p>作用：通过 <code>Read</code> 方法，<code>XDemux</code> 类能够从多路复用器中读取<strong>一帧数据</strong>并存储在提供的 <code>AVPacket</code> 对象中。该方法通过线程安全的资源访问、错误处理和时间戳记录，确保读取操作的可靠性和可调试性。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDemux::Read</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    调用 av_read_frame 函数从多路复用器上下文 c_ 中读取一帧数据，</span></span><br><span class=\"line\"><span class=\"comment\">    并将其存储在 pkt 中。</span></span><br><span class=\"line\"><span class=\"comment\">\tav_read_frame 函数返回一个整数值 re，表示函数调用的结果。</span></span><br><span class=\"line\"><span class=\"comment\">\t使用宏 BERR(re) 检查返回值 re 是否为 0（成功）。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_read_frame</span>(c_, pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计时 用于超时判断</span></span><br><span class=\"line\">\tlast_time_ = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Seek\">Seek()</h3>\n<p>作用：这个方法通常用于在打开的多路复用器中进行时间跳转，例如在视频播放器中用户拖动进度条时调用。在实际应用中，可以在一个循环中调用 <code>Seek</code> 方法，定位到指定位置并读取相应的数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDemux::Seek</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> pts, <span class=\"type\">int</span> stream_index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t调用 av_seek_frame 函数，将多路复用器上下文 c_ 定位到指定的时间戳 pts 和流索引 stream_index。</span></span><br><span class=\"line\"><span class=\"comment\">        使用的标志：</span></span><br><span class=\"line\"><span class=\"comment\">        AVSEEK_FLAG_FRAME：表示按帧进行定位。</span></span><br><span class=\"line\"><span class=\"comment\">        AVSEEK_FLAG_BACKWARD：表示允许向后搜索关键帧。</span></span><br><span class=\"line\"><span class=\"comment\">        av_seek_frame 函数返回一个整数值 re，表示函数调用的结果。</span></span><br><span class=\"line\"><span class=\"comment\">        使用宏 BERR(re) 检查返回值 re 是否为 0（成功）。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_seek_frame</span>(c_, </span><br><span class=\"line\">                            stream_index, </span><br><span class=\"line\">                            pts,</span><br><span class=\"line\">\t\tAVSEEK_FLAG_FRAME | AVSEEK_FLAG_BACKWARD);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XDecodeTask","url":"http://example.com/2024/07/24/XDecodeTask/","content":"<h2 id=\"XDecodeTask-h\">XDecodeTask.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdecode.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcodec.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XDecodeTask</span> : <span class=\"keyword\">public</span> XThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 打开解码器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">(AVCodecParameters *para)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 责任链处理函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Do</span><span class=\"params\">(AVPacket *pkt)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 线程主函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 线程安全，返回当前需要渲染的AVFrame，如果没有返回nullptr</span></span><br><span class=\"line\">\t<span class=\"comment\">// need_view_控制渲染</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果需要用 XFreeFrame释放</span></span><br><span class=\"line\">\t<span class=\"function\">AVFrame *<span class=\"title\">GetFrame</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">\tXDecode decode_;</span><br><span class=\"line\">\tXAVPacketList pkt_list_;</span><br><span class=\"line\">\tAVFrame *frame_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 解码后存储</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> need_view_ = <span class=\"literal\">false</span>;  <span class=\"comment\">// 是否需要渲染，每帧只渲染一次，通过GetFrame获取</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">\tXDecode decode_;</span><br><span class=\"line\">\tXAVPacketList pkt_list_;</span><br><span class=\"line\">\tAVFrame *frame_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 解码后存储</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> need_view_ = <span class=\"literal\">false</span>;  <span class=\"comment\">// 是否需要渲染，每帧只渲染一次，通过GetFrame获取</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"XDecodeTask-cpp\">XDecodeTask.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdecodeTask.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecodeTask::Open</span><span class=\"params\">(AVCodecParameters *para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;para is null !!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = decode_.<span class=\"built_in\">Create</span>(para-&gt;codec_id, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;decode_.Create failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_to_context</span>(c, para);</span><br><span class=\"line\">\tdecode_.<span class=\"built_in\">set_c</span>(c);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!decode_.<span class=\"built_in\">Open</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;decode_.Open failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(<span class=\"string\">&quot;Open decode success!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XDecodeTask::Do</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;#&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt || pkt-&gt;stream_index != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpkt_list_.<span class=\"built_in\">Push</span>(pkt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVFrame *<span class=\"title\">XDecodeTask::GetFrame</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!need_view_ || !frame_ || !frame_-&gt;buf[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_ref</span>(f, frame_);  <span class=\"comment\">// 引用加 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;f);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tneed_view_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XDecodeTask::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!frame_)</span><br><span class=\"line\">\t\t\tframe_ = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = pkt_list_.<span class=\"built_in\">Pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pkt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> re = decode_.<span class=\"built_in\">Send</span>(pkt);</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!re)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (decode_.<span class=\"built_in\">Recv</span>(frame_))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;@&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">\t\t\t\tneed_view_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame_)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame_);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Open-2\">Open()</h3>\n<p>作用：初始化视频解码器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecodeTask::Open</span><span class=\"params\">(AVCodecParameters *para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;para is null !!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Create函数在父类XCodec中</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建解码器</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = decode_.<span class=\"built_in\">Create</span>(para-&gt;codec_id, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;decode_.Create failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 使用 avcodec_parameters_to_context 函数，将 para 中的视频参数复制到解码器上下文 c 中。</span></span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_to_context</span>(c, para);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置编码器上下文</span></span><br><span class=\"line\">\tdecode_.<span class=\"built_in\">set_c</span>(c);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Open函数在父类XCodec中</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!decode_.<span class=\"built_in\">Open</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">LOGERROR</span>(<span class=\"string\">&quot;decode_.Open failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(<span class=\"string\">&quot;Open decode success!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Do\">Do()</h3>\n<p><strong>责任链处理函数</strong></p>\n<p>作用：该方法用于接收音视频数据包，并将符合条件的数据包存入一个线程安全的列表中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XDecodeTask::Do</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;#&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt || pkt-&gt;stream_index != <span class=\"number\">0</span>)  <span class=\"comment\">// 判断是否是视频流</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpkt_list_.<span class=\"built_in\">Push</span>(pkt);  <span class=\"comment\">// 如果数据包有效且属于视频流</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GetFrame\">GetFrame()</h3>\n<p>作用：用于获取当前解码的帧（<code>AVFrame</code>）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVFrame *<span class=\"title\">XDecodeTask::GetFrame</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t!need_view_：检查是否需要获取视图帧。如果不需要，则返回 nullptr。</span></span><br><span class=\"line\"><span class=\"comment\">        !frame_：检查当前帧是否存在。如果不存在，则返回 nullptr。</span></span><br><span class=\"line\"><span class=\"comment\">        !frame_-&gt;buf[0]：检查当前帧的第一个缓冲区是否存在。如果不存在，则返回 nullptr。</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        这些检查确保只有在需要并且有有效帧的情况下才继续处理，否则直接返回 nullptr。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!need_view_ || !frame_ || !frame_-&gt;buf[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将当前帧 frame_ 的内容引用到新帧 f 中。这样可以避免数据复制，同时增加引用计数。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_ref</span>(f, frame_);  <span class=\"comment\">// 引用加 1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;f);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tneed_view_ = <span class=\"literal\">false</span>;  <span class=\"comment\">// 表示当前帧已经被获取，不再需要视图帧。</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main\">Main()</h3>\n<p>作用：用于在一个独立的线程中持续接收音视频数据包，将其解码为帧，并在需要时标记为需要渲染。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XDecodeTask::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!frame_)</span><br><span class=\"line\">\t\t\tframe_ = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = pkt_list_.<span class=\"built_in\">Pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pkt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 发送到解码线程</span></span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> re = decode_.<span class=\"built_in\">Send</span>(pkt);</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);  <span class=\"comment\">// 释放数据包的内存。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!re)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (decode_.<span class=\"built_in\">Recv</span>(frame_))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; <span class=\"string\">&quot;@&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\">\t\t\t\tneed_view_ = <span class=\"literal\">true</span>;  <span class=\"comment\">// 需要渲染，在当前类GetFrame中用于判断</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame_)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame_);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XMuxTask","url":"http://example.com/2024/07/24/XMuxTask/","content":"<h2 id=\"XMuxTask-h\">XMuxTask.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xmux.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XMuxTask</span> : <span class=\"keyword\">public</span> XThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tAVCodecParameters *video_para = <span class=\"literal\">nullptr</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tAVRational *video_time_base = <span class=\"literal\">nullptr</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tAVCodecParameters *audio_para = <span class=\"literal\">nullptr</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tAVRational *audio_time_base = <span class=\"literal\">nullptr</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Do</span><span class=\"params\">(AVPacket *pkt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tXMux xmux_;</span><br><span class=\"line\">\tXAVPacketList pkts_;  <span class=\"comment\">// 一个线程安全的 AVPacket 列表，用于存储接收到的数据包。</span></span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"XMuxTask-cpp\">XMuxTask.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xmuxTask.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMuxTask::Do</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tpkts_.<span class=\"built_in\">Push</span>(pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">Next</span>(pkt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMuxTask::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">WriteHead</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = pkts_.<span class=\"built_in\">Pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pkt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkt-&gt;stream_index == xmux_.<span class=\"built_in\">video_index</span>()</span><br><span class=\"line\">\t\t\t&amp;&amp; pkt-&gt;flags &amp; AV_PKT_FLAG_KEY)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\txmux_.<span class=\"built_in\">Write</span>(pkt);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = pkts_.<span class=\"built_in\">Pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pkt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\txmux_.<span class=\"built_in\">Write</span>(pkt);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;W&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">WriteEnd</span>();</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_c</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMuxTask::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *video_para,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVRational *video_time_base,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *audio_para,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVRational *audio_time_base</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = xmux_.<span class=\"built_in\">Open</span>(url, video_para, audio_para);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_c</span>(c);</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_src_video_time_base</span>(video_time_base);</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_src_audio_time_base</span>(audio_time_base);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Do-2\">Do()</h3>\n<p>作用：该方法用于接收音视频数据包，并将其推入一个线程安全的列表中，同时将数据包传递给责任链中的下一个处理节点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMuxTask::Do</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tpkts_.<span class=\"built_in\">Push</span>(pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">Next</span>(pkt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Main-3\">Main()</h3>\n<p>作用：负责在一个独立的线程中持续处理音视频数据包，将它们写入封装文件，并在退出时进行清理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMuxTask::Main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">WriteHead</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 找到关键帧，防止录制视频开头出现花屏</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = pkts_.<span class=\"built_in\">Pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pkt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 用于判断关键帧</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkt-&gt;stream_index == xmux_.<span class=\"built_in\">video_index</span>()</span><br><span class=\"line\">\t\t\t&amp;&amp; pkt-&gt;flags &amp; AV_PKT_FLAG_KEY)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\txmux_.<span class=\"built_in\">Write</span>(pkt);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 丢掉非视频关键帧</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Main 方法通过一个循环不断处理音视频数据包，直到 is_exit_ 标志变为 true。</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!is_exit_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = pkts_.<span class=\"built_in\">Pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pkt)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">MSleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\txmux_.<span class=\"built_in\">Write</span>(pkt);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;W&quot;</span> &lt;&lt; flush;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">WriteEnd</span>();</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_c</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Open-6\">Open()</h3>\n<p>作用：用于打开一个封装文件并初始化相关参数。</p>\n<ul>\n<li>url：输出地址</li>\n<li>video_para：视频参数</li>\n<li>video_time_base：视频时间基数</li>\n<li>audio_para：音频参数</li>\n<li>audio_time_base：音频的时间基数</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMuxTask::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *video_para,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVRational *video_time_base,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *audio_para,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVRational *audio_time_base</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = xmux_.<span class=\"built_in\">Open</span>(url, video_para, audio_para);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_c</span>(c);</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_src_video_time_base</span>(video_time_base);</span><br><span class=\"line\">\txmux_.<span class=\"built_in\">set_src_audio_time_base</span>(audio_time_base);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XTools","url":"http://example.com/2024/07/24/XTools/","content":"<h2 id=\"XTools-h\">XTools.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVPacket</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVCodecParameters</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVRational</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVFrame</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">XLogLevel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tXLOG_TYPE_DEBUG,</span><br><span class=\"line\">\tXLOG_TYPE_INFO,</span><br><span class=\"line\">\tXLOG_TYPE_ERROR,</span><br><span class=\"line\">\tXLOG_TYPE_FATAL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOG_MIN_LEVEL XLOG_TYPE_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> XLOG(s, level) \\</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"keyword\">if</span>(level &gt;= LOG_MIN_LEVEL) \\</span></span><br><span class=\"line\"><span class=\"meta\">\tstd::cout &lt;&lt; level &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGDEBUG(s) XLOG(s, XLOG_TYPE_DEBUG)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGINFO(s) XLOG(s, XLOG_TYPE_INFO)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGERROR(s) XLOG(s, XLOG_TYPE_ERROR)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGFATAL(s) XLOG(s, XLOG_TYPE_FATAL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MSleep</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> ms)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">NowMs</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFreeFrame</span><span class=\"params\">(AVFrame **frame)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XThread</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Do</span><span class=\"params\">(AVPacket *pkt)</span> </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Next</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next_)</span><br><span class=\"line\">\t\t\tnext_-&gt;<span class=\"built_in\">Do</span>(pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_next</span><span class=\"params\">(XThread *xt)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_)</span></span>;</span><br><span class=\"line\">\t\tnext_ = xt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> is_exit_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> index_ = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::thread th_;</span><br><span class=\"line\">\tstd::mutex m_;</span><br><span class=\"line\">\tXThread *next_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XTools</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XPara</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tAVCodecParameters *para = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tAVRational *time_base = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> XPara *<span class=\"title\">Create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t~<span class=\"built_in\">XPara</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">XPara</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XAVPacketList</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">AVPacket *<span class=\"title\">Pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Push</span><span class=\"params\">(AVPacket *pkt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::list&lt;AVPacket*&gt; pkts_;</span><br><span class=\"line\">\t<span class=\"type\">int</span> max_packets_ = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<h3 id=\"普通成员函数\">普通成员函数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 日志级别 DEBUG INFO ERROR FATAL</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">XLogLevel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tXLOG_TYPE_DEBUG,</span><br><span class=\"line\">\tXLOG_TYPE_INFO,</span><br><span class=\"line\">\tXLOG_TYPE_ERROR,</span><br><span class=\"line\">\tXLOG_TYPE_FATAL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOG_MIN_LEVEL XLOG_TYPE_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> XLOG(s, level) \\</span></span><br><span class=\"line\"><span class=\"meta\">\t<span class=\"keyword\">if</span>(level &gt;= LOG_MIN_LEVEL) \\</span></span><br><span class=\"line\"><span class=\"meta\">\tstd::cout &lt;&lt; level &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; __FILE__ &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&quot; : &quot;</span> &lt;&lt; s &lt;&lt; std::endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGDEBUG(s) XLOG(s, XLOG_TYPE_DEBUG)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGINFO(s) XLOG(s, XLOG_TYPE_INFO)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGERROR(s) XLOG(s, XLOG_TYPE_ERROR)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGFATAL(s) XLOG(s, XLOG_TYPE_FATAL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MSleep</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> ms)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取当前的时间戳 毫秒</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">NowMs</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFreeFrame</span><span class=\"params\">(AVFrame **frame)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XThread\">XThread</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XThread</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 停止线程（设置退出标志，等待线程退出）</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 执行责任链传递给的任务，需要重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Do</span><span class=\"params\">(AVPacket *pkt)</span> </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 传递到责任链下一个函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Next</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next_)</span><br><span class=\"line\">\t\t\tnext_-&gt;<span class=\"built_in\">Do</span>(pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置责任链下一个节点(线程安全)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_next</span><span class=\"params\">(XThread *xt)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_)</span></span>;</span><br><span class=\"line\">\t\tnext_ = xt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 线程入口函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 标志线程退出</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> is_exit_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 线程索引号</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> index_ = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::thread th_;</span><br><span class=\"line\">\tstd::mutex m_;</span><br><span class=\"line\">\tXThread *next_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 责任链的下一个节点</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XPara\">XPara</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 音视频参数，用于智能指针自动释放</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XPara</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tAVCodecParameters *para = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 音视频参数</span></span><br><span class=\"line\">\tAVRational *time_base = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 时间基数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建 XPara 对象的实例</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> XPara *<span class=\"title\">Create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t~<span class=\"built_in\">XPara</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"comment\">// 构造函数被声明为私有，以防止直接在栈上创建 XPara 对象。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这意味着用户无法通过 XPara xpara; 这样的方式创建对象，只能通过 Create 静态方法在堆上创建对象。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样做的目的：控制对象的生命周期、管理资源释放、防止栈溢出</span></span><br><span class=\"line\">\t<span class=\"built_in\">XPara</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XAVPacketList\">XAVPacketList</h3>\n<p>作用：由于std::list线程不是安全的。所以做了用于管理一个线程安全的 <code>AVPacket</code> 列表。这个类允许在多个线程之间安全地添加和移除 <code>AVPacket</code> 对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 线程安全AVPacket list</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XAVPacketList</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 从列表中弹出并返回一个 AVPacket 对象。</span></span><br><span class=\"line\">\t<span class=\"function\">AVPacket *<span class=\"title\">Pop</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将一个 AVPacket 对象推入列表。</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体实现应确保线程安全，并且在列表大小超过 max_packets_ 时进行清理。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Push</span><span class=\"params\">(AVPacket *pkt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::list&lt;AVPacket*&gt; pkts_;  <span class=\"comment\">// 内部定义AVPacket的List</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> max_packets_ = <span class=\"number\">100</span>;  <span class=\"comment\">// 最大列表数量，超出清理</span></span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"XTools-cpp\">XTools.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MSleep</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> beg = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ms; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"built_in\">clock</span>() - beg) / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>) &gt;= ms)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">NowMs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">clock</span>() / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFreeFrame</span><span class=\"params\">(AVFrame **frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame || !(*frame)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_free</span>(frame);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">av_strerror</span>(err, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\tcerr &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XThread::Start</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ti++;</span><br><span class=\"line\">\tindex_ = i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tis_exit_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tth_ = <span class=\"built_in\">thread</span>(&amp;XThread::Main, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;XThread::Start()  &quot;</span> &lt;&lt; index_;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XThread::Stop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;XThread::Stop() begin  &quot;</span> &lt;&lt; index_;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\tis_exit_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (th_.<span class=\"built_in\">joinable</span>())</span><br><span class=\"line\">\t\tth_.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tss.<span class=\"built_in\">str</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;XThread::Stop() end  &quot;</span> &lt;&lt; index_;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">XPara *<span class=\"title\">XPara::Create</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">XPara</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XPara::~<span class=\"built_in\">XPara</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_free</span>(&amp;para);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (time_base)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> time_base;</span><br><span class=\"line\">\t\ttime_base = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XPara::<span class=\"built_in\">XPara</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpara = <span class=\"built_in\">avcodec_parameters_alloc</span>();</span><br><span class=\"line\">\ttime_base = <span class=\"keyword\">new</span> <span class=\"built_in\">AVRational</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVPacket *<span class=\"title\">XAVPacketList::Pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pkt = pkts_.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\tpkts_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pkt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XAVPacketList::Push</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> p = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">av_packet_ref</span>(p, pkt);</span><br><span class=\"line\">\tpkts_.<span class=\"built_in\">push_back</span>(p);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">size</span>() &gt; max_packets_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">front</span>()-&gt;flags &amp; AV_PKT_FLAG_KEY)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkts_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">\t\t\tpkts_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pkts_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">front</span>()-&gt;flags &amp; AV_PKT_FLAG_KEY)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkts_.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">\t\t\tpkts_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"普通成员函数-2\">普通成员函数</h3>\n<h4 id=\"MSleep\">MSleep()</h4>\n<p>作用：使当前线程暂停执行一段时间（以毫秒为单位）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MSleep</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> beg = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; ms; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tthis_thread::<span class=\"built_in\">sleep_for</span>(<span class=\"number\">1</span>ms);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"built_in\">clock</span>() - beg) / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>) &gt;= ms)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NowMs\">NowMs()</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得当前时间的毫秒数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">NowMs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">clock</span>() / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"XFreeFrame\">XFreeFrame()</h4>\n<p>作用：释放AVFrame资源</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFreeFrame</span><span class=\"params\">(AVFrame **frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame || !(*frame)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">av_frame_free</span>(frame);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PrintErr\">PrintErr()</h4>\n<p>作用：打印错误信息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">av_strerror</span>(err, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\tcerr &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XThread-2\">XThread</h3>\n<h4 id=\"责任链模式\">责任链模式</h4>\n<p>类的成员和方法</p>\n<ol>\n<li><strong>公共成员函数</strong>：\n<ul>\n<li><code>Start()</code>：启动线程。</li>\n<li><code>Stop()</code>：停止线程，设置退出标志并等待线程退出。</li>\n<li><code>Do(AVPacket *pkt)</code>：执行责任链传递的任务，虚函数，需在派生类中重载。</li>\n<li><code>Next(AVPacket *pkt)</code>：传递任务到责任链的下一个节点。</li>\n<li><code>set_next(XThread *xt)</code>：设置责任链的下一个节点，线程安全。</li>\n</ul>\n</li>\n<li><strong>保护成员</strong>：\n<ul>\n<li><code>Main()</code>：线程入口函数，纯虚函数，需要在派生类中实现。</li>\n<li><code>is_exit_</code>：标志线程是否退出。</li>\n<li><code>index_</code>：线程索引号，用于标识不同的线程。</li>\n</ul>\n</li>\n<li><strong>私有成员</strong>：\n<ul>\n<li><code>th_</code>：<code>std::thread</code> 对象，用于实际的线程操作。</li>\n<li><code>m_</code>：<code>std::mutex</code> 对象，用于保护对 <code>next_</code> 成员的访问，确保线程安全。</li>\n<li><code>next_</code>：指向责任链中的下一个节点。</li>\n</ul>\n</li>\n</ol>\n<p>【<strong>应用场景</strong>】：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 播放视频</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCameraWidget::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (demux_)</span><br><span class=\"line\">\t\tdemux_-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (decode_)</span><br><span class=\"line\">\t\tdecode_-&gt;<span class=\"built_in\">Stop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建XDemux任务</span></span><br><span class=\"line\">\tdemux_ = <span class=\"keyword\">new</span> <span class=\"built_in\">XDemuxTask</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!demux_-&gt;<span class=\"built_in\">Open</span>(url))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 创建XDecode任务</span></span><br><span class=\"line\">\tdecode_ = <span class=\"keyword\">new</span> <span class=\"built_in\">XDecodeTask</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 【责任链】在demux_中设置下一个任务</span></span><br><span class=\"line\">\tdemux_-&gt;<span class=\"built_in\">set_next</span>(decode_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动解封装和解码线程</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t在demux_的Start()函数中会调用XDemuxTask中的Main()函数</span></span><br><span class=\"line\"><span class=\"comment\">    \t在Main()函数中会调用基类XThread中的Next(&amp;pkt)函数</span></span><br><span class=\"line\"><span class=\"comment\">    \t</span></span><br><span class=\"line\"><span class=\"comment\">    \t在基类XThread中定义的</span></span><br><span class=\"line\"><span class=\"comment\">    \tvirtual void Next(AVPacket *pkt)</span></span><br><span class=\"line\"><span class=\"comment\">        &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            std::unique_lock&lt;std::mutex&gt; lock(m_);</span></span><br><span class=\"line\"><span class=\"comment\">            if (next_)</span></span><br><span class=\"line\"><span class=\"comment\">                next_-&gt;Do(pkt);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        接着会调用next_的Do函数，也就是decode_中的Do函数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\tdemux_-&gt;<span class=\"built_in\">Start</span>();</span><br><span class=\"line\">\tdecode_-&gt;<span class=\"built_in\">Start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Start\">Start()</h4>\n<p>作用：启动线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XThread::Start</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// i 是一个静态局部变量，它的值在所有 XThread 实例中是共享的。</span></span><br><span class=\"line\">    <span class=\"comment\">// 每调用一次 Start 方法，i 的值就会增加 1，并将其赋值给当前线程的 index_ 成员变量。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这为每个 XThread 实例分配了一个唯一的索引。</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\ti++;</span><br><span class=\"line\">\tindex_ = i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// is_exit_为false表明线程不应该退出。这用于控制线程的运行状态。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这通常用于在 Main 方法中的循环中检查 is_exit_ 标志，以决定是否继续运行还是退出。</span></span><br><span class=\"line\">\tis_exit_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 开始启动！</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 std::thread 创建并启动一个新线程，执行 Main 方法。</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp;XThread::Main 是 Main 方法的指针，this 是当前对象的指针，确保 Main 方法在当前对象的上下文中运行。</span></span><br><span class=\"line\">\tth_ = <span class=\"built_in\">thread</span>(&amp;XThread::Main, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;XThread::Start()  &quot;</span> &lt;&lt; index_;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Stop\">Stop()</h4>\n<p>作用：停止线程（设置退出标志，等待线程退出）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XThread::Stop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstringstream ss;</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;XThread::Stop() begin  &quot;</span> &lt;&lt; index_;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 is_exit_ 标志设置为 true，通知线程应该退出。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这通常用于在 Main 方法中的循环中检查 is_exit_ 标志，以决定是否继续运行还是退出。</span></span><br><span class=\"line\">\tis_exit_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 检查 th_ 是否可等待，即线程是否正在运行。</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果线程正在运行，则调用 join 方法等待线程结束。</span></span><br><span class=\"line\">    <span class=\"comment\">// join 方法会阻塞当前线程，直到 th_ 代表的线程执行完成。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (th_.<span class=\"built_in\">joinable</span>())  <span class=\"comment\">// 判断线程是否可以等待</span></span><br><span class=\"line\">\t\tth_.<span class=\"built_in\">join</span>();  <span class=\"comment\">// 等待子线程退出</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tss.<span class=\"built_in\">str</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\tss &lt;&lt; <span class=\"string\">&quot;XThread::Stop() end  &quot;</span> &lt;&lt; index_;</span><br><span class=\"line\">\t<span class=\"built_in\">LOGINFO</span>(ss.<span class=\"built_in\">str</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XPara-2\">XPara</h3>\n<h4 id=\"Create-2\">Create()</h4>\n<p>作用：防止直接在栈上创建 XPara 对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">XPara *<span class=\"title\">XPara::Create</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">XPara</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XAVPacketList-2\">XAVPacketList</h3>\n<h4 id=\"Pop\">Pop()</h4>\n<p>作用：返回List栈中的AVPacket</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVPacket *<span class=\"title\">XAVPacketList::Pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pkt = pkts_.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\tpkts_.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pkt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Push\">Push()</h4>\n<p>作用：用于将 <code>AVPacket</code> 对象推入到一个线程安全的列表中，并在列表超出最大容量时进行清理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XAVPacketList::Push</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 生成新的AVPacket 对象 引用计数+1</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> p = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 增加 pkt 的引用计数并将其数据复制到新分配的 AVPacket 对象 p 中。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这可以减少数据复制，同时保证线程安全。</span></span><br><span class=\"line\">    <span class=\"built_in\">av_packet_ref</span>(p, pkt);  </span><br><span class=\"line\">    </span><br><span class=\"line\">\tpkts_.<span class=\"built_in\">push_back</span>(p);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t当列表大小超过最大容量 max_packets_ 时，自动清理最早的非关键帧包，直到遇到关键帧或列表为空。</span></span><br><span class=\"line\"><span class=\"comment\">    \t这确保了列表中保留关键帧以后的数据，从而在需要时可以快速恢复到关键帧后的状态。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">size</span>() &gt; max_packets_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理第一帧</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">front</span>()-&gt;flags &amp; AV_PKT_FLAG_KEY)  <span class=\"comment\">// 到了视频关键帧，就舍去这一段</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkts_.<span class=\"built_in\">front</span>());  <span class=\"comment\">// 清理</span></span><br><span class=\"line\">\t\t\tpkts_.<span class=\"built_in\">pop_front</span>();  <span class=\"comment\">// 出队</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        \t在视频编码中，关键帧（I-frame）是独立存在的帧，可以独立解码。</span></span><br><span class=\"line\"><span class=\"comment\">        \t非关键帧（P-frame 和 B-frame）则依赖于之前的帧进行解码。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   如果缺少了关键帧，那么后续的非关键帧将无法正确解码。</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        \t处理队列中的第一帧：</span></span><br><span class=\"line\"><span class=\"comment\">            如果队列中的第一帧是关键帧（I-frame），则直接清理这个关键帧并出队，然后返回。</span></span><br><span class=\"line\"><span class=\"comment\">            这样可以腾出空间但保留了后续帧的完整性。</span></span><br><span class=\"line\"><span class=\"comment\">            </span></span><br><span class=\"line\"><span class=\"comment\">            清理非关键帧之前的数据：</span></span><br><span class=\"line\"><span class=\"comment\">            如果第一帧不是关键帧，则进入 while 循环，逐个清理非关键帧，直到遇到一个关键帧或队列为空。</span></span><br><span class=\"line\"><span class=\"comment\">            清理操作包括释放 AVPacket 对象的内存，并将其从队列中移除。</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pkts_.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pkts_.<span class=\"built_in\">front</span>()-&gt;flags &amp; AV_PKT_FLAG_KEY)  <span class=\"comment\">// 到了视频关键帧，就舍去这一段</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkts_.<span class=\"built_in\">front</span>());  <span class=\"comment\">// 清理</span></span><br><span class=\"line\">\t\t\tpkts_.<span class=\"built_in\">pop_front</span>();  <span class=\"comment\">// 出队</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XMux","url":"http://example.com/2024/07/24/XMux/","content":"<h2 id=\"XMux-h\">XMux.h</h2>\n<p>继承于XFormat</p>\n<p>作用：处理多媒体文件的封装，提供了一系列函数用于打开封装上下文、写入数据包、写入头信息和结束信息，同时处理音视频的时间基准。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xformat.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XMux</span> : <span class=\"keyword\">public</span> XFormat</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> AVFormatContext *<span class=\"title\">Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tAVCodecParameters *video_para = <span class=\"literal\">nullptr</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tAVCodecParameters *audio_para = <span class=\"literal\">nullptr</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">WriteHead</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Write</span><span class=\"params\">(AVPacket *pkt)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">WriteEnd</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_src_video_time_base</span><span class=\"params\">(AVRational *tb)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_src_audio_time_base</span><span class=\"params\">(AVRational *tb)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">XMux</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVRational *src_video_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tAVRational *src_audio_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> begin_video_pts_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> begin_audio_pts_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数说明：\">参数说明：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVRational *src_video_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tAVRational *src_audio_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> begin_video_pts_ = <span class=\"number\">-1</span>;  <span class=\"comment\">// 原视频开始时间</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> begin_audio_pts_ = <span class=\"number\">-1</span>;  <span class=\"comment\">// 原音频开始时间</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"src-video-time-base\">src_video_time_base_</h4>\n<p>参数 <code>src_video_time_base_</code> 在 <code>XMux</code> 类中起到了关键作用，主要用于管理视频流的时间基准。时间基准（Time Base）是指视频或音频流中时间戳的单位和精度。以下是具体作用和使用场景的详细分析：</p>\n<p>作用</p>\n<ol>\n<li><strong>时间戳转换</strong>：\n<ul>\n<li>视频流中的每个数据包（frame）都有一个时间戳（timestamp），表示这个数据包在视频播放中的具体时间点。<code>src_video_time_base_</code> 用于定义这些时间戳的单位和精度，确保时间戳在封装和解封装过程中保持一致。</li>\n</ul>\n</li>\n<li><strong>时间基准设置</strong>：\n<ul>\n<li><code>set_src_video_time_base</code> 函数用于设置 <code>src_video_time_base_</code> 的值。如果传入的 <code>AVRational</code> 指针非空，则将其值赋给 <code>src_video_time_base_</code>。这通常在封装开始之前调用，以确保视频流的时间戳基准正确设置。</li>\n</ul>\n</li>\n<li><strong>时间戳调整</strong>：\n<ul>\n<li>在写入数据包时，需要根据 <code>src_video_time_base_</code> 进行时间戳的调整和转换，以确保写入的数据包时间戳与封装文件的时间基准一致。</li>\n</ul>\n</li>\n</ol>\n<p>使用场景</p>\n<ul>\n<li><strong>封装视频流</strong>：\n<ul>\n<li>在封装（muxing）过程中，视频流的数据包需要按照正确的时间戳顺序写入文件。<code>src_video_time_base_</code> 确保这些时间戳按照预期的时间基准进行转换和写入。</li>\n</ul>\n</li>\n<li><strong>多媒体处理</strong>：\n<ul>\n<li>在处理包含多个视频流或音频流的多媒体文件时，每个流可能有不同的时间基准。<code>src_video_time_base_</code> 用于统一和管理这些时间基准，以确保时间戳的一致性和准确性。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"AVFormatContext-2\">AVFormatContext</h4>\n<p><code>AVFormatContext</code> 是一个多媒体文件的容器，管理文件的整体格式信息，包括文件的输入输出、流信息等。</p>\n<p>主要作用</p>\n<ol>\n<li><strong>文件格式信息</strong>：\n<ul>\n<li>管理多媒体文件的格式信息（如文件类型、文件名等）。</li>\n</ul>\n</li>\n<li><strong>多媒体流管理</strong>：\n<ul>\n<li>包含了文件中所有音频、视频、字幕流的信息。</li>\n<li>通过 <code>streams</code> 数组存储每个流的 <code>AVStream</code> 信息。</li>\n</ul>\n</li>\n<li><strong>I/O 管理</strong>：\n<ul>\n<li>负责文件的输入输出操作，如读取或写入文件数据。</li>\n<li>包含 <code>AVIOContext</code> 指针，用于管理具体的 I/O 操作。</li>\n</ul>\n</li>\n</ol>\n<p>主要字段</p>\n<ul>\n<li><code>AVIOContext *pb</code>：指向 I/O 上下文，用于管理文件的读写。</li>\n<li><code>unsigned int nb_streams</code>：文件中包含的流的数量。</li>\n<li><code>AVStream **streams</code>：指向流数组，每个流由一个 <code>AVStream</code> 结构体表示。</li>\n</ul>\n<hr>\n<p><strong>与AVCodecContext的区别</strong>：</p>\n<p><code>AVFormatContext</code> 和 <code>AVCodecContext</code> 是 FFmpeg 库中的两个核心结构体，分别用于管理多媒体文件的格式和编解码过程。</p>\n<p><code>AVCodecContext</code> 是一个编解码器的上下文，用于管理音视频数据的编解码过程。</p>\n<p>主要作用</p>\n<ol>\n<li><strong>编解码参数管理</strong>：\n<ul>\n<li>包含了编解码器的相关参数（如比特率、采样率、帧率、分辨率等）。</li>\n</ul>\n</li>\n<li><strong>编解码操作</strong>：\n<ul>\n<li>负责具体的编解码操作，包括初始化、编码、解码、关闭等。</li>\n</ul>\n</li>\n<li><strong>编解码器配置</strong>：\n<ul>\n<li>需要与特定的 <code>AVCodec</code> 配合使用，<code>AVCodec</code> 描述了具体的编解码器（如 H.264、AAC 等）。</li>\n</ul>\n</li>\n</ol>\n<p>主要字段</p>\n<ul>\n<li><code>AVCodec *codec</code>：指向具体的编解码器。</li>\n<li><code>int bit_rate</code>：比特率。</li>\n<li><code>int width, height</code>：视频的宽度和高度。</li>\n<li><code>int sample_rate</code>：音频的采样率。</li>\n<li><code>AVRational time_base</code>：时间基准，用于时间戳的转换。</li>\n</ul>\n<p>关系与区别</p>\n<ul>\n<li><strong>管理层级</strong>：\n<ul>\n<li><code>AVFormatContext</code> 主要用于管理文件级别的格式信息和流信息。</li>\n<li><code>AVCodecContext</code> 主要用于管理单个流的编解码过程。</li>\n</ul>\n</li>\n<li><strong>职责范围</strong>：\n<ul>\n<li><code>AVFormatContext</code> 负责文件的整体操作，包括读取、写入、格式解析等。</li>\n<li><code>AVCodecContext</code> 负责具体的数据处理，包括编码、解码等。</li>\n</ul>\n</li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>在处理多媒体文件时，首先使用 <code>AVFormatContext</code> 打开文件并读取流信息，然后对每个流使用相应的 <code>AVCodecContext</code> 进行编解码操作。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"XMux-cpp\">XMux.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xmux.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat\\avformat.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">PrintErr</span><span class=\"params\">(<span class=\"type\">int</span> err)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">av_strerror</span>(err, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\tcerr &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BERR(err) <span class=\"keyword\">if</span>(err != 0) &#123;PrintErr(err); return 0;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMux::set_src_video_time_base</span><span class=\"params\">(AVRational *tb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!tb) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!src_video_time_base_)</span><br><span class=\"line\">\t\tsrc_video_time_base_ = <span class=\"keyword\">new</span> <span class=\"built_in\">AVRational</span>();</span><br><span class=\"line\">\t*src_video_time_base_ = *tb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMux::set_src_audio_time_base</span><span class=\"params\">(AVRational *tb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!tb) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!src_audio_time_base_)</span><br><span class=\"line\">\t\tsrc_audio_time_base_ = <span class=\"keyword\">new</span> <span class=\"built_in\">AVRational</span>();</span><br><span class=\"line\">\t*src_audio_time_base_ = *tb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">XMux::~<span class=\"built_in\">XMux</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (src_video_time_base_)</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> src_video_time_base_;</span><br><span class=\"line\">\tsrc_video_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (src_audio_time_base_)</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> src_audio_time_base_;</span><br><span class=\"line\">\tsrc_audio_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVFormatContext *<span class=\"title\">XMux::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *video_para,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *audio_para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVFormatContext *c = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_alloc_output_context2</span>(&amp;c, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, url);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (video_para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> vs = <span class=\"built_in\">avformat_new_stream</span>(c, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_copy</span>(vs-&gt;codecpar, video_para);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (audio_para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> as = <span class=\"built_in\">avformat_new_stream</span>(c, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_copy</span>(as-&gt;codecpar, audio_para);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre = <span class=\"built_in\">avio_open</span>(&amp;c-&gt;pb, url, AVIO_FLAG_WRITE);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(c, <span class=\"number\">0</span>, url, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMux::Write</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkt-&gt;pts == AV_NOPTS_VALUE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpkt-&gt;pts = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpkt-&gt;dts = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkt-&gt;stream_index == video_index_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (begin_video_pts_ &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tbegin_video_pts_ = pkt-&gt;pts;</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">RescaleTime</span>(pkt, begin_video_pts_, src_video_time_base_);</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pkt-&gt;stream_index == audio_index_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (begin_audio_pts_ &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tbegin_audio_pts_ = pkt-&gt;pts;</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">RescaleTime</span>(pkt, begin_audio_pts_, src_audio_time_base_);</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_interleaved_write_frame</span>(c_, pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMux::WriteEnd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">av_interleaved_write_frame</span>(c_, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_write_trailer</span>(c_);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMux::WriteHead</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;============================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_write_header</span>(c_, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;============================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(c_, <span class=\"number\">0</span>, c_-&gt;url, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;begin_audio_pts_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;begin_video_pts_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"set-src-video-audio-time-base\">set_src_video/audio_time_base()</h3>\n<p>作用：设置视频和音频的时间基准。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMux::set_src_video_time_base</span><span class=\"params\">(AVRational *tb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!tb) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!src_video_time_base_)</span><br><span class=\"line\">\t\tsrc_video_time_base_ = <span class=\"keyword\">new</span> <span class=\"built_in\">AVRational</span>();</span><br><span class=\"line\">\t*src_video_time_base_ = *tb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XMux::set_src_audio_time_base</span><span class=\"params\">(AVRational *tb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!tb) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!src_audio_time_base_)</span><br><span class=\"line\">\t\tsrc_audio_time_base_ = <span class=\"keyword\">new</span> <span class=\"built_in\">AVRational</span>();</span><br><span class=\"line\">\t*src_audio_time_base_ = *tb;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XMux\">~XMux()</h3>\n<p>作用：析构函数，用于清理时间基准，防止出现内存泄漏</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMux::~<span class=\"built_in\">XMux</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (src_video_time_base_)</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> src_video_time_base_;</span><br><span class=\"line\">\tsrc_video_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (src_audio_time_base_)</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> src_audio_time_base_;</span><br><span class=\"line\">\tsrc_audio_time_base_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Open-5\">Open()</h3>\n<p>用于创建和初始化一个 <code>AVFormatContext</code> 上下文，并为其添加视频和音频流。</p>\n<p><code>Open</code> 函数的主要作用是：</p>\n<ol>\n<li>创建一个新的 <code>AVFormatContext</code> 上下文，用于输出多媒体文件。</li>\n<li>根据传入的视频和音频参数添加视频和音频流。</li>\n<li>打开输入输出（I/O）上下文，准备写入操作。</li>\n<li>将输出文件 <code>url</code> 与 <code>AVFormatContext</code>相关联。</li>\n<li>返回初始化好的 <code>AVFormatContext</code> 上下文。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVFormatContext *<span class=\"title\">XMux::Open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *url, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *video_para,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tAVCodecParameters *audio_para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVFormatContext *c = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建上下文</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_alloc_output_context2</span>(&amp;c, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, url);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果提供了音视频参数，则添加视频音频流</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (video_para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> vs = <span class=\"built_in\">avformat_new_stream</span>(c, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 创建一个新的视频流，并将其添加到上下文 c 中。</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_copy</span>(vs-&gt;codecpar, video_para);  <span class=\"comment\">// 将传入的 video_para 参数复制到新创建的视频流的编解码器参数中。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (audio_para)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> as = <span class=\"built_in\">avformat_new_stream</span>(c, <span class=\"literal\">NULL</span>);  <span class=\"comment\">// 创建一个新的音频流，并将其添加到上下文 c 中。</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_parameters_copy</span>(as-&gt;codecpar, audio_para);  <span class=\"comment\">// 将传入的 audio_para 参数复制到新创建的音频流的编解码器参数中。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开指定的 URL 进行写操作，并将打开的 I/O 上下文指针赋值给 c-&gt;pb。</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">avio_open</span>(&amp;c-&gt;pb, url, AVIO_FLAG_WRITE);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(c, <span class=\"number\">0</span>, url, <span class=\"number\">1</span>);  <span class=\"comment\">// 打印格式信息，用于调试和验证。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Write\">Write()</h3>\n<p>作用：用于将<strong>外部编码后</strong>的数据包（<code>AVPacket</code>）写入多媒体文件中。</p>\n<p><code>Write</code> 函数的主要作用是：</p>\n<ol>\n<li>检查数据包的有效性。</li>\n<li>根据数据包的时间戳和流类型进行时间戳调整。</li>\n<li>将调整后的数据包写入多媒体文件。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMux::Write</span><span class=\"params\">(AVPacket *pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 检查数据包的显示时间戳（PTS）是否为无效值 AV_NOPTS_VALUE。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 重构考虑通过duration计算</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkt-&gt;pts == AV_NOPTS_VALUE)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpkt-&gt;pts = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpkt-&gt;dts = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pkt-&gt;stream_index == video_index_)  <span class=\"comment\">// 如果数据包属于视频流</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (begin_video_pts_ &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tbegin_video_pts_ = pkt-&gt;pts;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 这里解锁，是因为RescaleTime中也有锁，防止互斥</span></span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 对时间戳进行重新缩放</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">RescaleTime</span>(pkt, begin_video_pts_, src_video_time_base_);</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pkt-&gt;stream_index == audio_index_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (begin_audio_pts_ &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tbegin_audio_pts_ = pkt-&gt;pts;</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">RescaleTime</span>(pkt, begin_audio_pts_, src_audio_time_base_);</span><br><span class=\"line\">\t\tlock.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 写入一帧数据，内部缓冲排序dts，通过pkt=null可写入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_interleaved_write_frame</span>(c_, pkt);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WriteEnd\">WriteEnd()</h3>\n<p>作用：用于结束音视频数据的写入操作。该函数的主要目的是在所有数据包都写入后，写入文件尾部信息并清理资源。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMux::WriteEnd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// av_interleaved_write_frame表示将已经排序好的缓冲数据写入文件。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个操作会将内部缓存中的所有数据刷新到输出文件中。</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_interleaved_write_frame</span>(c_, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 调用 av_write_trailer 函数写入文件尾部信息。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这是文件写入的最后一步，通常包括写入文件结束标志、清理和关闭文件等操作。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_write_trailer</span>(c_);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WriteHead\">WriteHead()</h3>\n<p>作用：用于在音视频数据写入之前，初始化文件头并设置一些初始状态。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XMux::WriteHead</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;============================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avformat_write_header</span>(c_, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">BERR</span>(re);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;============================&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印输出上下文</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用 av_dump_format 函数打印输出上下文信息，便于调试和确认输出文件的格式。</span></span><br><span class=\"line\">    <span class=\"comment\">// c_ 是输出上下文指针，0 是索引，c_-&gt;url 是输出文件的URL或路径，1 表示输出是输出格式信息。</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_dump_format</span>(c_, <span class=\"number\">0</span>, c_-&gt;url, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化音频和视频的起始时间戳。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这些变量用于后续的时间戳处理，以确保音视频数据按正确的时间顺序封装。</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;begin_audio_pts_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;begin_video_pts_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XFormat","url":"http://example.com/2024/07/23/XFormat/","content":"<h2 id=\"XFormat-h\">XFormat.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVFormatContext</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVCodecParameters</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVPacket</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVCodecContext</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">XRational</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num;</span><br><span class=\"line\">\t<span class=\"type\">int</span> den;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XFormat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CopyPara</span><span class=\"params\">(<span class=\"type\">int</span> stream_index, AVCodecParameters *dst)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t重载！！</span></span><br><span class=\"line\"><span class=\"comment\">\t由于 AVCodecParameters* 和 AVCodecContext* 都是指针类型，</span></span><br><span class=\"line\"><span class=\"comment\">\t编译器无法区分它们，因此无法重载这两个函数。</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">CopyPara</span><span class=\"params\">(<span class=\"type\">int</span> stream_index, AVCodecContext *dts)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">CopyVideoPara</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">CopyAudioPara</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_c</span><span class=\"params\">(AVFormatContext *c)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">audio_index</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> audio_index_; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">video_index</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> video_index_; &#125;</span><br><span class=\"line\">\t<span class=\"function\">XRational <span class=\"title\">video_time_base</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> video_time_base_; &#125;</span><br><span class=\"line\">\t<span class=\"function\">XRational <span class=\"title\">audio_time_base</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> audio_time_base_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">RescaleTime</span><span class=\"params\">(AVPacket *pkt, <span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts, XRational time_base)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">RescaleTime</span><span class=\"params\">(AVPacket *pkt, <span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts, AVRational* time_base)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">RescaleToMs</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> pts, <span class=\"type\">int</span> index)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">video_codec_id</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> video_codec_id_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsTimeout</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">NowMs</span>() - last_time_ &gt; time_out_ms_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlast_time_ = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\">\t\t\tis_connected_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_time_out_ms</span><span class=\"params\">(<span class=\"type\">int</span> ms)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_connected</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> is_connected_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> time_out_ms_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> last_time_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> is_connected_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tAVFormatContext *c_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tstd::mutex mux_;</span><br><span class=\"line\">\t<span class=\"type\">int</span> video_index_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> audio_index_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tXRational video_time_base_ = &#123;<span class=\"number\">1</span>,<span class=\"number\">25</span>&#125;;</span><br><span class=\"line\">\tXRational audio_time_base_ = &#123;<span class=\"number\">1</span>, <span class=\"number\">9000</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> video_codec_id_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> time_out_ms_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 超时时间，毫秒</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> last_time_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 上次接收到数据的时间</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> is_connected_ = <span class=\"literal\">false</span>;  <span class=\"comment\">// 是否连接成功</span></span><br><span class=\"line\">\tAVFormatContext *c_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 解封装上下文</span></span><br><span class=\"line\">\tstd::mutex mux_;  <span class=\"comment\">// c_ 资源互斥</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> video_index_ = <span class=\"number\">0</span>;  <span class=\"comment\">// video和audio在stream中的索引</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> audio_index_ = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tXRational video_time_base_ = &#123;<span class=\"number\">1</span>,<span class=\"number\">25</span>&#125;;  <span class=\"comment\">// 音视频时间基准</span></span><br><span class=\"line\">\tXRational audio_time_base_ = &#123;<span class=\"number\">1</span>, <span class=\"number\">9000</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> video_codec_id_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 编码器ID</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IsTimeout\">IsTimeout()</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断是否超时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsTimeout</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">NowMs</span>() - last_time_ &gt; time_out_ms_)  <span class=\"comment\">// 超时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        last_time_ = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\">        is_connected_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"XFormat-cpp\">XFormat.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xformat.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavformat\\avformat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec\\avcodec.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avformat.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">TimeoutCallBack</span><span class=\"params\">(<span class=\"type\">void</span> *para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> xf = (XFormat*)para;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xf-&gt;<span class=\"built_in\">IsTimeout</span>()) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFormat::set_c</span><span class=\"params\">(AVFormatContext *c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c_-&gt;oformat)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c_-&gt;pb)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">avio_closep</span>(&amp;c_-&gt;pb);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_free_context</span>(c_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c_-&gt;iformat)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_close_input</span>(&amp;c_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_free_context</span>(c_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc_ = c;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tis_connected_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tis_connected_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlast_time_ = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (time_out_ms_ &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tAVIOInterruptCB cb = &#123; TimeoutCallBack , <span class=\"keyword\">this</span> &#125;;</span><br><span class=\"line\">\t\tc_-&gt;interrupt_callback = cb;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\taudio_index_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tvideo_index_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; c-&gt;nb_streams; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\taudio_index_ = i;</span><br><span class=\"line\">\t\t\taudio_time_base_.den = c-&gt;streams[i]-&gt;time_base.den;</span><br><span class=\"line\">\t\t\taudio_time_base_.num = c-&gt;streams[i]-&gt;time_base.num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tvideo_index_ = i;</span><br><span class=\"line\">\t\t\tvideo_time_base_.den = c-&gt;streams[i]-&gt;time_base.den;</span><br><span class=\"line\">\t\t\tvideo_time_base_.num = c-&gt;streams[i]-&gt;time_base.num;</span><br><span class=\"line\">\t\t\tvideo_codec_id_ = c-&gt;streams[i]-&gt;codecpar-&gt;codec_id;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">XFormat::CopyAudioPara</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"built_in\">audio_index</span>();</span><br><span class=\"line\">\tshared_ptr&lt;XPara&gt; re;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || !c_) <span class=\"keyword\">return</span> re;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre.<span class=\"built_in\">reset</span>(XPara::<span class=\"built_in\">Create</span>());</span><br><span class=\"line\">\t*re-&gt;time_base = c_-&gt;streams[index]-&gt;time_base;</span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_copy</span>(re-&gt;para, c_-&gt;streams[index]-&gt;codecpar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">XFormat::CopyVideoPara</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"built_in\">video_index</span>();</span><br><span class=\"line\">\tshared_ptr&lt;XPara&gt; re;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || !c_) <span class=\"keyword\">return</span> re;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre.<span class=\"built_in\">reset</span>(XPara::<span class=\"built_in\">Create</span>());</span><br><span class=\"line\">\t*re-&gt;time_base = c_-&gt;streams[index]-&gt;time_base;</span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_copy</span>(re-&gt;para, c_-&gt;streams[index]-&gt;codecpar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::CopyPara</span><span class=\"params\">(<span class=\"type\">int</span> stream_index, AVCodecParameters *dst)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stream_index &lt; <span class=\"number\">0</span> || stream_index &gt; c_-&gt;nb_streams)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_copy</span>(dst, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::CopyPara</span><span class=\"params\">(<span class=\"type\">int</span> stream_index, AVCodecContext *dts)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stream_index &lt; <span class=\"number\">0</span> || stream_index &gt; c_-&gt;nb_streams)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_to_context</span>(dts, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::RescaleTime</span><span class=\"params\">(AVPacket *pkt, <span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts, AVRational* time_base)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt || !time_base) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> out_stream = c_-&gt;streams[pkt-&gt;stream_index];</span><br><span class=\"line\"></span><br><span class=\"line\">\tpkt-&gt;pts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt-&gt;pts - offset_pts, *time_base,</span><br><span class=\"line\">\t\tout_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tpkt-&gt;dts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt-&gt;dts - offset_pts, *time_base,</span><br><span class=\"line\">\t\tout_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tpkt-&gt;duration = <span class=\"built_in\">av_rescale_q</span>(pkt-&gt;duration, *time_base,</span><br><span class=\"line\">\t\tout_stream-&gt;time_base</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpkt-&gt;pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::RescaleTime</span><span class=\"params\">(AVPacket *pkt, <span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts, XRational time_base)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVRational in_time_base;</span><br><span class=\"line\">\tin_time_base.num = time_base.num;</span><br><span class=\"line\">\tin_time_base.den = time_base.den;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">RescaleTime</span>(pkt, offset_pts, &amp;in_time_base);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">XFormat::RescaleToMs</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> pts, <span class=\"type\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_ || index &lt; <span class=\"number\">0</span> || index &gt; c_-&gt;nb_streams) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> in_timebase = c_-&gt;streams[index]-&gt;time_base;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVRational out_timebase = &#123; <span class=\"number\">1</span>, <span class=\"number\">1000</span> &#125;; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">av_rescale_q</span>(pts, in_timebase, out_timebase);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFormat::set_time_out_ms</span><span class=\"params\">(<span class=\"type\">int</span> ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;time_out_ms_ = ms;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tAVIOInterruptCB cb = &#123; TimeoutCallBack , <span class=\"keyword\">this</span> &#125;;</span><br><span class=\"line\">\t\tc_-&gt;interrupt_callback = cb;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TimeoutCallBack\">TimeoutCallBack()</h3>\n<p>作用：一个用于超时检测的回调函数，通过检查 <code>XFormat</code> 对象的 <code>IsTimeout</code> 方法来确定是否超时，并返回相应的结果，用于中断或继续执行阻塞操作。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">TimeoutCallBack</span><span class=\"params\">(<span class=\"type\">void</span> *para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> xf = (XFormat*)para;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xf-&gt;<span class=\"built_in\">IsTimeout</span>()) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">// 超时退出Read</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 正常阻塞</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"set-c-2\">set_c()</h3>\n<p>作用：函数的主要作用是设置 <code>AVFormatContext</code> 对象，并进行一系列的初始化和清理操作，以确保新的 <code>AVFormatContext</code> 对象能够正确使用。具体步骤包括清理旧的上下文、设置新的上下文、初始化音视频流索引、设定超时回调函数和更新连接状态等。这些操作确保了在多线程环境下安全且有效地管理音视频流的处理。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFormat::set_c</span><span class=\"params\">(AVFormatContext *c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_)  <span class=\"comment\">// 清理原值AVFormatContext</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c_-&gt;oformat)  <span class=\"comment\">// 输出上下文是否存在</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// pb 是一个指向 AVIOContext 的指针</span></span><br><span class=\"line\">            <span class=\"comment\">// 用于管理文件或流的 I/O 操作。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (c_-&gt;pb)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">avio_closep</span>(&amp;c_-&gt;pb);  <span class=\"comment\">// 关闭pb</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_free_context</span>(c_);  <span class=\"comment\">// 释放上下文</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c_-&gt;iformat)  <span class=\"comment\">// 输入上下文是否存在</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不需要avformat_free_context(c_);</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 其内部包含了关闭输入上下文和释放相关资源的逻辑</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_close_input</span>(&amp;c_);  </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>  <span class=\"comment\">// 既不是输出也不是输入上下文</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">avformat_free_context</span>(c_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc_ = c;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tis_connected_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tis_connected_ = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计时 用于超时判断</span></span><br><span class=\"line\">\tlast_time_ = <span class=\"built_in\">NowMs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t关于 if (time_out_ms_ &gt; 0) </span></span><br><span class=\"line\"><span class=\"comment\">    \t\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t\t...</span></span><br><span class=\"line\"><span class=\"comment\">    \t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    \tAVIOInterruptCB 结构体：</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        AVIOInterruptCB 是 FFmpeg 库中的一个结构体，用于定义 I/O 操作的中断回调。</span></span><br><span class=\"line\"><span class=\"comment\">        它的定义如下：</span></span><br><span class=\"line\"><span class=\"comment\">       </span></span><br><span class=\"line\"><span class=\"comment\">        typedef struct AVIOInterruptCB &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            int (*callback)(void*);</span></span><br><span class=\"line\"><span class=\"comment\">            void *opaque;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; AVIOInterruptCB;</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        callback：指向回调函数的指针。</span></span><br><span class=\"line\"><span class=\"comment\">        opaque：用户自定义的数据指针，会传递给回调函数。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 设定超时处理 回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (time_out_ms_ &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果超时时间 time_out_ms_ 大于 0，设置回调函数 TimeoutCallBack</span></span><br><span class=\"line\">        <span class=\"comment\">// 并将当前对象指针 this 传递给回调函数。</span></span><br><span class=\"line\">\t\tAVIOInterruptCB cb = &#123; TimeoutCallBack , <span class=\"keyword\">this</span> &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// ☆☆☆ 将cb传递给interrupt_callback </span></span><br><span class=\"line\">        <span class=\"comment\">// 这意味着在执行 I/O 操作时</span></span><br><span class=\"line\">        <span class=\"comment\">// FFmpeg 会调用 TimeoutCallBack 函数，并传递 this 指针作为参数。</span></span><br><span class=\"line\">\t\tc_-&gt;interrupt_callback = cb;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 用于区分是否有音频或者视频流</span></span><br><span class=\"line\">\taudio_index_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tvideo_index_ = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 区分音视频</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; c-&gt;nb_streams; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\taudio_index_ = i;</span><br><span class=\"line\">\t\t\taudio_time_base_.den = c-&gt;streams[i]-&gt;time_base.den;</span><br><span class=\"line\">\t\t\taudio_time_base_.num = c-&gt;streams[i]-&gt;time_base.num;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tvideo_index_ = i;</span><br><span class=\"line\">\t\t\tvideo_time_base_.den = c-&gt;streams[i]-&gt;time_base.den;</span><br><span class=\"line\">\t\t\tvideo_time_base_.num = c-&gt;streams[i]-&gt;time_base.num;</span><br><span class=\"line\">\t\t\tvideo_codec_id_ = c-&gt;streams[i]-&gt;codecpar-&gt;codec_id;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CopyAudioPara\">CopyAudioPara()</h3>\n<p>作用：复制音频参数并将其封装在一个智能指针 <code>std::shared_ptr&lt;XPara&gt;</code> 中返回</p>\n<p><a href=\"https://www.jasonqian.com/2024/07/24/XTools/\">XPara的介绍在XTool中</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">XFormat::CopyAudioPara</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到音频参数，传入智能指针中，返回出去</span></span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"built_in\">audio_index</span>();  <span class=\"comment\">// 获取音频流的索引</span></span><br><span class=\"line\">\tshared_ptr&lt;XPara&gt; re;  <span class=\"comment\">// 用于存储复制的音频参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || !c_) <span class=\"keyword\">return</span> re;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// reset将智能指针 re 重置为一个新的 Xpara 对象（XPara在XTool中定义）</span></span><br><span class=\"line\">\tre.<span class=\"built_in\">reset</span>(XPara::<span class=\"built_in\">Create</span>());</span><br><span class=\"line\">\t*re-&gt;time_base = c_-&gt;streams[index]-&gt;time_base;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将 c_ 中对应音频流的编解码参数 codecpar 复制到 re 的 para 成员。</span></span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_copy</span>(re-&gt;para, c_-&gt;streams[index]-&gt;codecpar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CopyVideoPara\">CopyVideoPara()</h3>\n<p>作用：复制视频参数并将其封装在一个智能指针 <code>std::shared_ptr&lt;XPara&gt;</code> 中返回</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::shared_ptr&lt;XPara&gt; <span class=\"title\">XFormat::CopyVideoPara</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 拿到视频参数，传入智能指针中，返回出去</span></span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index = <span class=\"built_in\">video_index</span>();</span><br><span class=\"line\">\tshared_ptr&lt;XPara&gt; re;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || !c_) <span class=\"keyword\">return</span> re;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre.<span class=\"built_in\">reset</span>(XPara::<span class=\"built_in\">Create</span>());</span><br><span class=\"line\">\t*re-&gt;time_base = c_-&gt;streams[index]-&gt;time_base;</span><br><span class=\"line\">\t<span class=\"built_in\">avcodec_parameters_copy</span>(re-&gt;para, c_-&gt;streams[index]-&gt;codecpar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CopyPara\">CopyPara()</h3>\n<p>作用：用于复制特定流的编解码参数到目标 <code>AVCodecParameters</code> 结构体中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 复制参数 线程安全</span></span><br><span class=\"line\"><span class=\"comment\">// stream_index：对于c_-&gt;streams 下标</span></span><br><span class=\"line\"><span class=\"comment\">// dst 输出参数</span></span><br><span class=\"line\"><span class=\"comment\">// return 是否成功</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::CopyPara</span><span class=\"params\">(<span class=\"type\">int</span> stream_index, AVCodecParameters *dst)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stream_index &lt; <span class=\"number\">0</span> || stream_index &gt; c_-&gt;nb_streams)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将codecpar复制给dst</span></span><br><span class=\"line\">    <span class=\"comment\">// 【注】c_-&gt;streams[stream_index]-&gt;codecpar 是指向 AVCodecParameters 结构体的指针，包含了与该流相关的编解码参数。</span></span><br><span class=\"line\">\t<span class=\"comment\">// AVCodecParameters 结构体包含了编解码器需要的参数，例如编解码器 ID、比特率、采样率、分辨率等。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_copy</span>(dst, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CopyPara-2\">CopyPara()</h3>\n<p>作用：当前代码的 <code>CopyPara</code> 函数将特定流的编解码参数从 <code>AVFormatContext</code> 中的 <code>AVCodecParameters</code> 复制到目标 <code>AVCodecContext</code> 结构体 <code>dts</code> 中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::CopyPara</span><span class=\"params\">(<span class=\"type\">int</span> stream_index, AVCodecContext *dts)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (stream_index &lt; <span class=\"number\">0</span> || stream_index &gt; c_-&gt;nb_streams)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_to_context</span>(dts, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"两个CopyPara-的区别\">两个CopyPara()的区别</h3>\n<ol>\n<li>\n<p><strong>目标对象不同</strong>：</p>\n<ul>\n<li>\n<p>第一段代码的目标对象是 <code>AVCodecParameters *dst</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_copy</span>(dst, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>第二段代码的目标对象是  <code>AVCodecContext *dts</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_to_context</span>(dts, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>使用的函数不同</strong>：</p>\n<ul>\n<li>\n<p>第一段代码使用了 <code>avcodec_parameters_copy</code>函数，将参数从 <code>AVCodecParameters</code>复制到另一个<code> AVCodecParameters</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_copy</span>(dst, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>第二段代码使用了<code> avcodec_parameters_to_context</code>函数，将参数从 <code>AVCodecParameters</code>复制到 <code>AVCodecContext</code>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_parameters_to_context</span>(dts, c_-&gt;streams[stream_index]-&gt;codecpar);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>总结</strong></p>\n<p>这两段代码的主要区别在于复制的目标对象和使用的函数不同。第一段代码将参数复制到 <code>AVCodecParameters</code> 结构体中，而第二段代码将参数复制到 <code>AVCodecContext</code> 结构体中。这种设计是为了满足不同的需求：当需要简单的参数复制时，使用 <code>AVCodecParameters</code>；当需要完整的编解码上下文时，使用 <code>AVCodecContext</code>。</p>\n<h3 id=\"RescaleTime\">RescaleTime()</h3>\n<p>作用：用于对给定的 <code>AVPacket</code> 进行时间基准的重新缩放。具体来说，它将 <code>AVPacket</code> 的时间戳（PTS 和 DTS）和持续时间根据新的时间基准进行重新计算，并应用一个偏移量。</p>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>在处理音视频数据时，可能需要对不同时间基准的时间戳进行转换，以便在不同的媒体流之间进行同步或处理。</li>\n<li>该函数确保 <code>AVPacket</code> 的时间戳和持续时间与目标流的时间基准一致，从而便于后续的处理或传输。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::RescaleTime</span><span class=\"params\">(AVPacket *pkt, <span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts, AVRational* time_base)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pkt || !time_base) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 AVPacket 所属流的 AVStream，通过 pkt-&gt;stream_index 进行索引。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> out_stream = c_-&gt;streams[pkt-&gt;stream_index];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t使用 av_rescale_q_rnd 函数重新缩放 PTS（展示时间戳）和 DTS（解码时间戳），并应用偏移量 offset_pts。</span></span><br><span class=\"line\"><span class=\"comment\">        av_rescale_q_rnd 函数的参数：</span></span><br><span class=\"line\"><span class=\"comment\">            第一个参数：需要重新缩放的值。</span></span><br><span class=\"line\"><span class=\"comment\">            第二个参数：当前时间基准。</span></span><br><span class=\"line\"><span class=\"comment\">            第三个参数：目标时间基准。</span></span><br><span class=\"line\"><span class=\"comment\">            第四个参数：舍入方法，这里使用 AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX，表示尽可能接近目标值，并在必要时通过最小值和最大值进行舍入。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\tpkt-&gt;pts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt-&gt;pts - offset_pts, *time_base,</span><br><span class=\"line\">\t\tout_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tpkt-&gt;dts = <span class=\"built_in\">av_rescale_q_rnd</span>(pkt-&gt;dts - offset_pts, *time_base,</span><br><span class=\"line\">\t\tout_stream-&gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tpkt-&gt;duration = <span class=\"built_in\">av_rescale_q</span>(pkt-&gt;duration, *time_base,</span><br><span class=\"line\">\t\tout_stream-&gt;time_base</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t在 RescaleTime 函数中，将 pkt-&gt;pos 赋值为 -1 的主要目的是为了将其标记为无效或未知。</span></span><br><span class=\"line\"><span class=\"comment\">    \t这种做法可以防止后续代码误用不准确的位置信息，并明确表明该数据包的文件位置信息不可用或不相关。</span></span><br><span class=\"line\"><span class=\"comment\">    \t这在处理经过时间基准变换的数据包时尤为重要，确保数据处理过程中的一致性和正确性。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\tpkt-&gt;pos = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RescaleTime-2\">RescaleTime()</h3>\n<p>作用：调用另一个 <code>RescaleTime</code> 函数，该函数接受一个 <code>AVRational</code> 类型的时间基准指针。传递参数 <code>pkt</code>、<code>offset_pts</code> 和转换后的 <code>in_time_base</code>，并返回调用结果。</p>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>当外部代码使用 <code>XRational</code> 类型的时间基准时，可以调用这个函数来简化类型转换的过程，并确保时间基准可以被正确处理。</li>\n<li>提供了对 <code>XRational</code> 类型的时间基准的支持，使得代码更加灵活，可以处理多种时间基准表示。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XFormat::RescaleTime</span><span class=\"params\">(AVPacket *pkt, <span class=\"type\">long</span> <span class=\"type\">long</span> offset_pts, XRational time_base)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tAVRational in_time_base;</span><br><span class=\"line\">\tin_time_base.num = time_base.num;</span><br><span class=\"line\">\tin_time_base.den = time_base.den;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">RescaleTime</span>(pkt, offset_pts, &amp;in_time_base);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RescaleToMs\">RescaleToMs()</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把pts dts duration值转为毫秒</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">XFormat::RescaleToMs</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> pts, <span class=\"type\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_ || index &lt; <span class=\"number\">0</span> || index &gt; c_-&gt;nb_streams) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> in_timebase = c_-&gt;streams[index]-&gt;time_base;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVRational out_timebase = &#123; <span class=\"number\">1</span>, <span class=\"number\">1000</span> &#125;;  <span class=\"comment\">// 输出timebase 毫秒</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">av_rescale_q</span>(pts, in_timebase, out_timebase);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"时间戳-PTS、DTS\">时间戳(PTS、DTS)</h3>\n<p><code>DTS</code>（解码时间戳）和 <code>PTS</code>（显示时间戳）是音视频处理中的两个重要概念。<code>DTS</code> 确保解码顺序正确，而 <code>PTS</code> 确保播放顺序正确。在实际应用中，这两个时间戳共同作用，确保音视频流的同步和正确播放。理解并正确处理 <code>DTS</code> 和 <code>PTS</code> 对于开发高效的音视频处理应用至关重要。</p>\n<p><code>av_rescale_q(pts, in_timebase, out_timebase);</code></p>\n<p>FFmpeg 库中的一个函数，用于在不同时间基准（timebase）之间转换时间戳，<strong>既可以计算PTS，也可以计算DTS</strong>。其原型定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int64_t</span> <span class=\"title function_\">av_rescale_q</span><span class=\"params\">(<span class=\"type\">int64_t</span> a, AVRational bq, AVRational cq)</span>;</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li><code>a</code> 是要转换的时间戳值。</li>\n<li><code>bq</code> 是输入时间基准（in_timebase），以 <code>AVRational</code> 类型表示。</li>\n<li><code>cq</code> 是输出时间基准（out_timebase），以 <code>AVRational</code> 类型表示。</li>\n</ul>\n<p><code>AVRational</code> 是一个表示有理数的结构，定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AVRational</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> num;  <span class=\"comment\">// numerator</span></span><br><span class=\"line\">    <span class=\"type\">int</span> den;  <span class=\"comment\">// denominator</span></span><br><span class=\"line\">&#125; AVRational;</span><br></pre></td></tr></table></figure>\n<p>该函数的作用是将时间戳从 <code>bq</code> 基准转换到 <code>cq</code> 基准，其计算公式为：</p>\n<p>$\\displaystyle result = a \\times \\frac{cq.num}{cq.den} ÷ \\frac{dq.num}{dq.den}$</p>\n<p>【<strong>例子</strong>】</p>\n<p>假设你有一个时间戳 <code>pts = 1000</code>，输入时间基准是 <code>1/1000</code>（每秒 1000 帧），输出时间基准是 <code>1/1000000</code>（每秒 1000000 微秒），你可以使用 <code>av_rescale_q</code> 函数进行转换。</p>\n<p>$\\displaystyle 1000\\times \\frac{1}{100000}÷\\frac{1}{1000}=1000000$</p>\n<p>转换结果为：<code>rescaled_pts</code> 将从 1000 转换为 1000000</p>\n<p><a href=\"https://www.jasonqian.com/2024/08/17/%E7%BC%96%E7%A0%81%E5%8E%8B%E7%BC%A9/\">I、P、B帧介绍</a></p>\n<h4 id=\"PTS\">PTS</h4>\n<p>转换 <code>PTS</code>（Presentation Timestamp，显示时间戳）在音视频处理中的作用非常重要，主要包括以下几个方面：</p>\n<ol>\n<li><strong>时间同步</strong></li>\n</ol>\n<p>不同的媒体流（例如视频流和音频流）可能有不同的时间基准（timebase）。为了确保不同媒体流在播放时能够同步，需要将这些流的时间戳转换到同一个时间基准。例如，在视频编辑或播放时，需要确保视频和音频在时间上准确对齐。</p>\n<ol start=\"2\">\n<li><strong>格式转换</strong></li>\n</ol>\n<p>在进行视频格式转换时，输入和输出格式可能有不同的时间基准。为了正确地转换和显示时间戳，必须将时间戳从输入格式的时间基准转换为输出格式的时间基准。</p>\n<ol start=\"3\">\n<li><strong>帧率变化</strong></li>\n</ol>\n<p>当视频的帧率发生变化时，例如从 30fps 转换到 60fps，需要重新计算每一帧的显示时间戳。这种情况下，转换 <code>PTS</code> 有助于确保视频在新的帧率下能够正确播放。</p>\n<ol start=\"4\">\n<li><strong>精确定位</strong></li>\n</ol>\n<p>在视频剪辑或处理过程中，精确定位某一帧或某一时刻需要准确的时间戳转换。例如，剪辑工具需要将用户指定的时间点转换为实际的视频帧时间戳，以便于精确地剪切视频。</p>\n<p><strong>示例场景</strong></p>\n<p>假设你有一个音视频播放器，需要处理不同来源的媒体文件，这些文件的时间基准可能不同。为了使播放器能够正确地解码和播放这些文件，你需要使用 <code>av_rescale_q</code> 将不同时间基准的时间戳统一转换到播放器使用的时间基准。</p>\n<h4 id=\"DTS\">DTS</h4>\n<p>在音视频处理领域，除了 <code>PTS</code>（显示时间戳，Presentation Timestamp），还有一个重要的概念是 <code>DTS</code>（解码时间戳，Decoding Timestamp）。理解 <code>DTS</code> 的作用有助于更好地处理和同步音视频数据。</p>\n<p><strong>什么是 DTS？</strong></p>\n<ul>\n<li><strong>DTS</strong>（Decoding Timestamp）是指解码时间戳，它标识了视频帧或音频样本在解码过程中的顺序。</li>\n<li>与 <code>PTS</code> 不同，<code>PTS</code> 决定了帧或样本的播放顺序，而 <code>DTS</code> 决定了解码顺序。</li>\n</ul>\n<p><strong>为什么需要 DTS？</strong></p>\n<ol>\n<li><strong>顺序解码</strong>：在一些视频编码格式中（例如H.264），帧的显示顺序和解码顺序可能不同。B帧（双向预测帧）需要参考前后的帧才能解码，因此需要 <code>DTS</code> 来确保解码器按照正确的顺序进行解码。</li>\n<li><strong>处理延迟</strong>：一些视频处理操作（例如去交错、降噪等）需要按照解码顺序来进行处理，然后按照 <code>PTS</code> 顺序来显示。如果没有 <code>DTS</code>，解码器无法正确处理这些操作。</li>\n<li><strong>同步播放</strong>：在多媒体播放中，需要同步解码和播放多个音视频流。<code>DTS</code> 确保解码顺序正确，而 <code>PTS</code> 确保播放顺序正确。</li>\n</ol>\n<p><strong>DTS 和 PTS 的关系</strong></p>\n<ul>\n<li><strong>顺序不同</strong>：在一些情况下，<code>PTS</code> 和 <code>DTS</code> 可能是相同的，但对于涉及B帧的视频，<code>PTS</code> 和 <code>DTS</code> 会不同。通常，<code>DTS</code> 先于 <code>PTS</code>。</li>\n<li><strong>计算顺序</strong>：解码器首先使用 <code>DTS</code> 进行解码，然后使用 <code>PTS</code> 进行播放。因此，音视频数据在解码和播放之间可能存在缓冲区。</li>\n</ul>\n<p><strong>示例场景</strong></p>\n<p>假设你有一个视频流，其中包含I帧（关键帧）、P帧（预测帧）和B帧（双向预测帧）。这些帧的解码顺序和显示顺序可能如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">帧顺序：         I1, B1, P1</span><br><span class=\"line\">解码顺序（DTS）：I1,     P1, B1</span><br><span class=\"line\">显示顺序（PTS）：I1, B1, P1</span><br></pre></td></tr></table></figure>\n<p>在这个示例中，DTS 确保帧按照正确的顺序解码，而 PTS 确保帧按照正确的顺序显示，DTS中的B帧需要I帧、P帧解码完毕后，才能进行解码</p>\n<p><strong>DTS 的计算与使用</strong></p>\n<p>在 FFmpeg 中，<code>DTS</code> 和 <code>PTS</code> 的计算和使用类似，通常通过解码器和复用器自动处理。然而，在一些高级应用中，开发者可能需要手动处理这些时间戳以确保正确的解码和同步。</p>\n<h4 id=\"I、P、B帧\">I、P、B帧</h4>\n<p>I帧（关键帧，Intra Frame）</p>\n<ol>\n<li>\n<p><strong>定义</strong>：I帧是独立编码的帧，它不依赖其他帧的信息进行解码。</p>\n</li>\n<li>\n<p>特点</p>\n<p>：</p>\n<ul>\n<li><strong>自包含</strong>：I帧包含完整的图像信息，可以独立解码。</li>\n<li><strong>高质量</strong>：由于包含完整的图像信息，I帧通常质量较高，但也因此占用较大的存储空间。</li>\n<li><strong>随机访问</strong>：由于不依赖其他帧，可以作为随机访问点，非常适合用于快进、快退等操作。</li>\n</ul>\n</li>\n<li>\n<p><strong>应用</strong>：I帧通常出现在视频序列的开头或者定期插入视频流中，以便于解码器重新同步和快速跳转。</p>\n</li>\n</ol>\n<hr>\n<p>P帧（预测帧，Predicted Frame）</p>\n<ol>\n<li>\n<p><strong>定义</strong>：P帧是基于前面的I帧或P帧进行预测编码的帧。</p>\n</li>\n<li>\n<p>特点</p>\n<p>：</p>\n<ul>\n<li><strong>差值编码</strong>：P帧只存储与前一帧（参考帧）的差异部分，节省存储空间。</li>\n<li><strong>依赖性</strong>：P帧的解码依赖于前面的I帧或P帧，需要解码器按顺序解码。</li>\n<li><strong>压缩效率</strong>：由于只存储变化部分，P帧压缩效率较高。</li>\n</ul>\n</li>\n<li>\n<p><strong>应用</strong>：P帧广泛用于视频流中，以降低数据量，提高压缩效率。</p>\n</li>\n</ol>\n<hr>\n<p>B帧（双向预测帧，Bi-directional Predicted Frame）</p>\n<ol>\n<li>\n<p><strong>定义</strong>：B帧是基于前面的I帧或P帧和后面的I帧或P帧进行双向预测编码的帧。</p>\n</li>\n<li>\n<p>特点</p>\n<p>：</p>\n<ul>\n<li><strong>双向预测</strong>：B帧可以利用前后两帧的信息进行差值编码，进一步提高压缩效率。</li>\n<li><strong>更高压缩率</strong>：由于利用了更多的预测信息，B帧通常能达到更高的压缩率。</li>\n<li><strong>解码顺序</strong>：B帧的解码依赖于前后的参考帧，需要解码器有足够的缓冲区来处理帧顺序。</li>\n</ul>\n</li>\n<li>\n<p><strong>应用</strong>：B帧用于进一步提高视频流的压缩效率，通常出现在P帧之间。</p>\n</li>\n</ol>\n<hr>\n<p>在视频编码中，帧的排列和依赖关系如下：</p>\n<ul>\n<li><strong>I帧</strong>：独立存在，不依赖其他帧。</li>\n<li><strong>P帧</strong>：依赖前面的I帧或P帧。</li>\n<li><strong>B帧</strong>：依赖前后的I帧或P帧。</li>\n</ul>\n<p>I帧、P帧和B帧在视频编码中各自有不同的作用和特点。I帧提供独立的解码点，P帧通过前向预测减少数据量，而B帧通过双向预测进一步提高压缩效率。理解这些帧的特点和作用，有助于更好地进行视频编码、解码和处理。</p>\n<h3 id=\"set-time-out-ms\">set_time_out_ms()</h3>\n<p>作用：<code>set_time_out_ms</code> 函数用于设置超时时间，并在 <code>AVFormatContext</code> 对象存在时，配置一个回调函数 <code>TimeoutCallBack</code> 来处理超时退出。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设定超时时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XFormat::set_time_out_ms</span><span class=\"params\">(<span class=\"type\">int</span> ms)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;time_out_ms_ = ms;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设置回调函数，处理超时退出</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tAVIOInterruptCB cb = &#123; TimeoutCallBack , <span class=\"keyword\">this</span> &#125;;</span><br><span class=\"line\">\t\tc_-&gt;interrupt_callback = cb;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XDecode","url":"http://example.com/2024/07/22/XDecode/","content":"<h2 id=\"XDecode-h\">XDecode.h</h2>\n<p><code>Send</code> 函数用于向解码器发送编码数据包。</p>\n<p><code>Recv</code> 函数用于从解码器接收解码后的帧数据。</p>\n<p><code>InitHW</code> 函数用于初始化硬件加速设备。</p>\n<p><code>End</code> 函数用于获取解码器中剩余的所有帧数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcodec.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVBufferRef</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XDecode</span> :<span class=\"keyword\">public</span> XCodec</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Send</span><span class=\"params\">(<span class=\"type\">const</span> AVPacket* pkt)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Recv</span><span class=\"params\">(AVFrame* frame)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">std::vector&lt;AVFrame*&gt; <span class=\"title\">End</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化硬件加速</span></span><br><span class=\"line\">\t<span class=\"comment\">// 默认AV_HWDEVICE_TYPE_DXVA2 值为4</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">InitHW</span><span class=\"params\">(<span class=\"type\">int</span> type = <span class=\"number\">4</span>)</span></span>; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>AVHWDeviceType</code>：int type = 4代表AV_HWDEVICE_TYPE_DXVA2</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">AVHWDeviceType</span> &#123;</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_NONE,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_VDPAU,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_CUDA,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_VAAPI,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_DXVA2,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_QSV,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_VIDEOTOOLBOX,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_D3D11VA,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_DRM,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_OPENCL,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_MEDIACODEC,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_VULKAN,</span><br><span class=\"line\">    AV_HWDEVICE_TYPE_D3D12VA,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"XDecode-cpp\">XDecode.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xdecode.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/opt.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecode::Send</span><span class=\"params\">(<span class=\"type\">const</span> AVPacket* pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_send_packet</span>(c_, pkt);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecode::Recv</span><span class=\"params\">(AVFrame* frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = frame;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_-&gt;hw_device_ctx)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tf = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_receive_frame</span>(c_, f);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c_-&gt;hw_device_ctx)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tre = <span class=\"built_in\">av_hwframe_transfer_data</span>(frame, f, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;f);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_-&gt;hw_device_ctx)</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;f);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecode::InitHW</span><span class=\"params\">(<span class=\"type\">int</span> type)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVBufferRef *ctx = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_hwdevice_ctx_create</span>(&amp;ctx, (AVHWDeviceType)type, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc_-&gt;hw_device_ctx = ctx;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;硬件加速： &quot;</span> &lt;&lt; type &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;AVFrame*&gt; <span class=\"title\">XDecode::End</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::vector&lt;AVFrame*&gt; res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"built_in\">avcodec_send_packet</span>(c_, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ret &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> frame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">avcodec_receive_frame</span>(c_, frame);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(frame);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Send\">Send()</h3>\n<p>作用：函数用于向解码器发送编码数据包。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecode::Send</span><span class=\"params\">(<span class=\"type\">const</span> AVPacket* pkt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将数据包pkt发送到解码器c_</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_send_packet</span>(c_, pkt);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Recv\">Recv()</h3>\n<p>作用：该函数的作用是从解码器中接收解码后的帧数据，并处理硬件加速解码的情况。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecode::Recv</span><span class=\"params\">(AVFrame* frame)</span>\t\t <span class=\"comment\">// 获取解码 </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = frame;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_-&gt;hw_device_ctx)  <span class=\"comment\">// 硬件加速</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果使用硬件加速，则分配一个新的 AVFrame 给局部变量 f。</span></span><br><span class=\"line\">\t\tf = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 从解码器接收解码后的帧</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_receive_frame</span>(c_, f);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re == <span class=\"number\">0</span>)  <span class=\"comment\">// 0表示成功</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c_-&gt;hw_device_ctx)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果使用硬件加速，需要将硬件帧数据从显存转换到内存。</span></span><br><span class=\"line\">             <span class=\"comment\">// av_hwframe_transfer_data 将硬件加速帧数据从显存传输到内存中的 frame。</span></span><br><span class=\"line\">\t\t\tre = <span class=\"built_in\">av_hwframe_transfer_data</span>(frame, f, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;f);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 作用：如果解码器使用硬件加速且接收解码帧失败，释放之前分配的 AVFrame。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 目的：避免内存泄漏。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_-&gt;hw_device_ctx)</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;f);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"InitHW\">InitHW()</h3>\n<p>作用：函数用于初始化硬件加速设备。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XDecode::InitHW</span><span class=\"params\">(<span class=\"type\">int</span> type)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAVBufferRef *ctx = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 存储硬件硬件加速上下文</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \t&amp;ctx：指向 AVBufferRef 指针的地址，用于存储创建的硬件加速上下文。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t(AVHWDeviceType)type：硬件设备类型，type 是输入参数。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNULL：设备创建时的选项，通常为 NULL。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNULL：设备创建时的选项，通常为 NULL。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0：设备创建时的标志，通常为 0。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_hwdevice_ctx_create</span>(&amp;ctx, (AVHWDeviceType)type, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc_-&gt;hw_device_ctx = ctx;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;硬件加速： &quot;</span> &lt;&lt; type &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"End\">End()</h3>\n<p>作用：函数用于获取解码器中剩余的所有帧数据。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;AVFrame*&gt; <span class=\"title\">XDecode::End</span><span class=\"params\">()</span>     <span class=\"comment\">// 获取缓存数据</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::vector&lt;AVFrame*&gt; res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 取出缓冲中的数据</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"built_in\">avcodec_send_packet</span>(c_, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ret &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> frame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t\tret = <span class=\"built_in\">avcodec_receive_frame</span>(c_, frame);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(frame);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XEncode","url":"http://example.com/2024/07/22/XEncode/","content":"<h2 id=\"XEncode-h\">XEncode.h</h2>\n<p>作用：继承于XCodec，用于编码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcodec.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XEncode</span>:<span class=\"keyword\">public</span> XCodec</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">AVPacket *<span class=\"title\">Encode</span><span class=\"params\">(<span class=\"type\">const</span> AVFrame* frame)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::vector&lt;AVPacket *&gt; <span class=\"title\">End</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>AVPacket</p>\n<ul>\n<li>\n<p>是 FFmpeg 库中的一个数据结构，主要用于存储编码后的音频或视频数据包。</p>\n</li>\n<li>\n<p>在多媒体处理中，数据包通常包含一个完整的编码帧或部分编码帧的比特流数据。</p>\n</li>\n<li>\n<p>这些数据包可以用于传输、存储或进一步处理，如解码。</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">AVPacket</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span> *data;  <span class=\"comment\">// 指向实际存储编码数据的缓冲区</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size;       <span class=\"comment\">// 缓冲区中数据的大小，以字节为单位</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int64_t</span> pts;    <span class=\"comment\">// 显示时间戳</span></span><br><span class=\"line\">\t<span class=\"type\">int64_t</span> dts;    <span class=\"comment\">// 解码时间戳</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> stream_index; <span class=\"comment\">// 数据包所属的流索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> flags;      <span class=\"comment\">// 数据包标志，用于标识关键帧等信息</span></span><br><span class=\"line\">\t<span class=\"type\">int64_t</span> duration; <span class=\"comment\">// 数据包的持续时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">void</span> *opaque;   <span class=\"comment\">// 私有数据指针，用于用户扩展</span></span><br><span class=\"line\">\tAVBufferRef *buf; <span class=\"comment\">// 引用计数的缓冲区</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; AVPacket;</span><br></pre></td></tr></table></figure>\n<h2 id=\"XEncode-cpp\">XEncode.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xencode.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/opt.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVPacket* <span class=\"title\">XEncode::Encode</span><span class=\"params\">(<span class=\"type\">const</span> AVFrame* frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_send_frame</span>(c_, frame);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pkt = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tre = <span class=\"built_in\">avcodec_receive_packet</span>(c_, pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> pkt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re == <span class=\"built_in\">AVERROR</span>(EAGAIN) || re == AVERROR_EOF)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pkt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;AVPacket *&gt; <span class=\"title\">XEncode::End</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::vector&lt;AVPacket*&gt; res;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_send_frame</span>(c_, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (re &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\">\t\tre = <span class=\"built_in\">avcodec_receive_packet</span>(c_, pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Encode\">Encode()</h3>\n<p>作用：</p>\n<ul>\n<li>将原始的音视频帧（<code>AVFrame</code>）编码成压缩的数据包（<code>AVPacket</code>）。这是编码过程的核心步骤。</li>\n<li>线程安全</li>\n<li>@para frame 空间由用户维护</li>\n<li>@return 失败范围nullptr 返回的AVPacket用户需要通过av_packet_free清理</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVPacket* <span class=\"title\">XEncode::Encode</span><span class=\"params\">(<span class=\"type\">const</span> AVFrame* frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 父类XCodec中的解码器上下文</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 发送到编码器线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_send_frame</span>(c_, frame);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> pkt = <span class=\"built_in\">av_packet_alloc</span>();  <span class=\"comment\">// 申请一个AVPacket用于存储编码后的数据</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 从编码器接收编码后的数据包。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 将编码后的数据写入 pkt。</span></span><br><span class=\"line\">\tre = <span class=\"built_in\">avcodec_receive_packet</span>(c_, pkt);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> pkt;  <span class=\"comment\">// ==0表示成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有成功则释放pkt</span></span><br><span class=\"line\">\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// AVERROR(EAGAIN)（表示当前数据不足以生成一个完整的数据包）</span></span><br><span class=\"line\">    <span class=\"comment\">// AVERROR_EOF（表示编码器已经结束）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re == <span class=\"built_in\">AVERROR</span>(EAGAIN) || re == AVERROR_EOF)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果返回值小于 0，表示发生了其他错误</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pkt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"End-2\">End()</h3>\n<p>作用：用于编码结束时处理剩余的编码数据并将其存储在 <code>std::vector&lt;AVPacket *&gt;</code>，在完成编码操作后获取所有剩余的编码数据包</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::vector&lt;AVPacket *&gt; <span class=\"title\">XEncode::End</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstd::vector&lt;AVPacket*&gt; res;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 送一个空的帧到编码器，表示编码结束。这是为了让编码器输出缓冲区中的剩余数据。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_send_frame</span>(c_, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (re &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分配一个新的数据包</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> pkt = <span class=\"built_in\">av_packet_alloc</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 从编码器接收一个数据包</span></span><br><span class=\"line\">\t\tre = <span class=\"built_in\">avcodec_receive_packet</span>(c_, pkt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 释放分配的数据包内存</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_packet_free</span>(&amp;pkt);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将接收到的数据包添加到结果向量中</span></span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(pkt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XCodec","url":"http://example.com/2024/07/22/XCodec/","content":"<h2 id=\"XCodec\">XCodec</h2>\n<p>作用：编码和解码的基类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/avutil.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVCodecContext</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVPacket</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVFrame</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XCodec</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> AVCodecContext* <span class=\"title\">Create</span><span class=\"params\">(<span class=\"type\">int</span> codec_id, <span class=\"type\">bool</span> is_encode)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_c</span><span class=\"params\">(AVCodecContext* c)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SetOpt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* key, <span class=\"type\">const</span> <span class=\"type\">char</span>* val)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">SetOpt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> val)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">AVFrame *<span class=\"title\">CreateFrame</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tAVCodecContext* c_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 编码器上下文</span></span><br><span class=\"line\">\tstd::mutex mux_;  <span class=\"comment\">// 编码器上下文锁</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数介绍\">参数介绍</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tAVCodecContext* c_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 编码器上下文</span></span><br><span class=\"line\">\tstd::mutex mux_;  <span class=\"comment\">// 编码器上下文锁</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"XCodec-cpp\">XCodec.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xcodec.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavutil/opt.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avcodec.lib&quot;</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVCodecContext* <span class=\"title\">XCodec::Create</span><span class=\"params\">(<span class=\"type\">int</span> codec_id, <span class=\"type\">bool</span> is_encode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> AVCodec *codec = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(is_encode)</span><br><span class=\"line\">\t\tcodec = <span class=\"built_in\">avcodec_find_encoder</span>((AVCodecID)codec_id);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcodec = <span class=\"built_in\">avcodec_find_decoder</span>((AVCodecID)codec_id);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!codec)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;avcodec_find_encoder failed!  &quot;</span> &lt;&lt; codec_id &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;avcodec_alloc_context3 failed!  &quot;</span> &lt;&lt; codec_id &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc-&gt;time_base = &#123; <span class=\"number\">1</span>, <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\">\tc-&gt;pix_fmt = AV_PIX_FMT_YUV420P;</span><br><span class=\"line\">\tc-&gt;thread_count = <span class=\"number\">16</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCodec::set_c</span><span class=\"params\">(AVCodecContext* c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_free_context</span>(&amp;c_);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;c_ = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCodec::SetOpt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* key, <span class=\"type\">const</span> <span class=\"type\">char</span>* val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_opt_set</span>(c_-&gt;priv_data, key, val, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;av_opt_set failed!&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCodec::SetOpt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_opt_set_int</span>(c_-&gt;priv_data, key, val, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;av_opt_set failed!&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCodec::Open</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_open2</span>(c_, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVFrame* <span class=\"title\">XCodec::CreateFrame</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> frame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\tframe-&gt;width = c_-&gt;width;</span><br><span class=\"line\">\tframe-&gt;height = c_-&gt;height;</span><br><span class=\"line\">\tframe-&gt;format = c_-&gt;pix_fmt;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame);</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> frame;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create\">Create()</h3>\n<p>作用：</p>\n<ul>\n<li>\n<p>创建编解码上下文</p>\n</li>\n<li>\n<p>@para codec_id 编码器Id号对于ffmpeg</p>\n</li>\n<li>\n<p>@return AVCodecContext 编码器上下文，失败返回nullptr</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVCodecContext* <span class=\"title\">XCodec::Create</span><span class=\"params\">(<span class=\"type\">int</span> codec_id, <span class=\"type\">bool</span> is_encode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 1. 找到编码器 or 解码器</span></span><br><span class=\"line\">    <span class=\"comment\">// 根据is_encode来判断，如果为true找编码器，false找解码器</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> AVCodec *codec = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(is_encode)</span><br><span class=\"line\">\t\tcodec = <span class=\"built_in\">avcodec_find_encoder</span>((AVCodecID)codec_id);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tcodec = <span class=\"built_in\">avcodec_find_decoder</span>((AVCodecID)codec_id);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!codec)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;avcodec_find_encoder failed!  &quot;</span> &lt;&lt; codec_id &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2. 为编码器\\解码器创建上下文</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> c = <span class=\"built_in\">avcodec_alloc_context3</span>(codec);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;avcodec_alloc_context3 failed!  &quot;</span> &lt;&lt; codec_id &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3. 设置参数默认值</span></span><br><span class=\"line\">\tc-&gt;time_base = &#123; <span class=\"number\">1</span>, <span class=\"number\">25</span> &#125;;  <span class=\"comment\">// 时间基准</span></span><br><span class=\"line\">\tc-&gt;pix_fmt = AV_PIX_FMT_YUV420P;</span><br><span class=\"line\">\tc-&gt;thread_count = <span class=\"number\">16</span>;  <span class=\"comment\">// 线程数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>编码器\\解码器上下文</strong>：</p>\n<p>在 FFmpeg 中，<code>AVCodecContext</code> 是一个非常重要的结构体，用于存储编解码器的上下文信息。这个上下文包含了大量关于编解码器的配置、状态和其他重要的信息，用于控制和管理音视频的编码和解码过程。</p>\n<p>作用和功能：</p>\n<ol>\n<li><strong>参数配置</strong>：\n<ul>\n<li><code>AVCodecContext</code> 包含了编码或解码过程中需要的大量参数，例如编码器的比特率、帧率、分辨率、采样率、像素格式等。这些参数可以通过 <code>AVCodecContext</code> 进行设置和调整，以控制编解码器的行为。</li>\n</ul>\n</li>\n<li><strong>状态管理</strong>：\n<ul>\n<li>编解码器的状态信息（如当前处理的帧、缓冲区状态等）都保存在 <code>AVCodecContext</code> 中。在编码或解码过程中，上下文会随着处理的进展而更新，确保每一步都能正确进行。</li>\n</ul>\n</li>\n<li><strong>资源管理</strong>：\n<ul>\n<li><code>AVCodecContext</code> 还负责管理编解码过程中使用的各种资源，包括内部的缓冲区、滤波器、线程等。这些资源在上下文被分配时初始化，并在上下文被释放时清理。</li>\n</ul>\n</li>\n<li><strong>接口与扩展</strong>：\n<ul>\n<li>通过 <code>AVCodecContext</code>，用户可以调用 FFmpeg 提供的各种接口函数，如 <code>avcodec_open2</code>、<code>avcodec_send_packet</code>、<code>avcodec_receive_frame</code> 等。这些函数以上下文为参数，执行具体的编解码操作。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"set-c\">set_c()</h3>\n<p>作用：用于将创建的上下文c赋值给类中的上下文c_，若传入的参数为nullptr，则相当于清理上下文资源。</p>\n<p>设置对象的编码器上下文 上下文传递到对象中，资源由XEncode维护<br>\n线程安全 需要+锁<br>\n@para c 编码器上下文 如果c_不为nullptr，则先清理资源，然后再赋值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XCodec::set_c</span><span class=\"params\">(AVCodecContext* c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">avcodec_free_context</span>(&amp;c_);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;c_ = c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SetOpt-——接受字符串参数\">SetOpt()——接受字符串参数</h3>\n<p>作用：用于设置编解码器上下文的选项</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCodec::SetOpt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* key, <span class=\"type\">const</span> <span class=\"type\">char</span>* val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \tauto re = av_opt_set(c_-&gt;priv_data, key, val, 0);：调用 av_opt_set 函数设置选项。</span></span><br><span class=\"line\"><span class=\"comment\">    \tav_opt_set 用于设置 AVClass 对象的选项。</span></span><br><span class=\"line\"><span class=\"comment\">    \t</span></span><br><span class=\"line\"><span class=\"comment\">\t\tc_-&gt;priv_data：指向编解码器私有数据的指针。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tkey：要设置的选项的名称。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tval：要设置的选项的值。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0：标志参数，通常为 0。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_opt_set</span>(c_-&gt;priv_data, key, val, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;av_opt_set failed!&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>av_opt_set(c_-&gt;priv_data, key, val, 0)</code>其中的<code>key</code>，<code>val</code>参数</p>\n<p>视频编码器常用选项</p>\n<ol>\n<li><strong><code>preset</code></strong>：\n<ul>\n<li><strong>描述</strong>：预设选项，用于快速配置编码器的参数，影响编码速度和质量。</li>\n<li><strong>可能值</strong>：<code>ultrafast</code>, <code>superfast</code>, <code>veryfast</code>, <code>faster</code>, <code>fast</code>, <code>medium</code>, <code>slow</code>, <code>slower</code>, <code>veryslow</code></li>\n<li><strong>示例</strong>：<code>key = &quot;preset&quot;</code>, <code>val = &quot;fast&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>crf</code></strong>（适用于如 <code>libx264</code> 编码器）：\n<ul>\n<li><strong>描述</strong>：恒定质量参数，控制视频的质量与文件大小之间的平衡。</li>\n<li><strong>可能值</strong>：范围从 0 到 51，值越小质量越高，文件越大。</li>\n<li><strong>示例</strong>：<code>key = &quot;crf&quot;</code>, <code>val = &quot;23&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>bitrate</code></strong>：\n<ul>\n<li><strong>描述</strong>：目标比特率，控制视频的编码比特率。</li>\n<li><strong>可能值</strong>：任何正整数，通常以 <code>k</code> 为单位表示。</li>\n<li><strong>示例</strong>：<code>key = &quot;bitrate&quot;</code>, <code>val = &quot;2000k&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>profile</code></strong>：\n<ul>\n<li><strong>描述</strong>：编码器的配置档案。</li>\n<li><strong>可能值</strong>：<code>baseline</code>, <code>main</code>, <code>high</code></li>\n<li><strong>示例</strong>：<code>key = &quot;profile&quot;</code>, <code>val = &quot;high&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>g</code></strong>（GOP 大小）：\n<ul>\n<li><strong>描述</strong>：关键帧间隔，控制两个关键帧之间的帧数。</li>\n<li><strong>可能值</strong>：任何正整数。</li>\n<li><strong>示例</strong>：<code>key = &quot;g&quot;</code>, <code>val = &quot;250&quot;</code></li>\n</ul>\n</li>\n</ol>\n<p>音频编码器常用选项</p>\n<ol>\n<li><strong><code>bit_rate</code></strong>：\n<ul>\n<li><strong>描述</strong>：目标音频比特率。</li>\n<li><strong>可能值</strong>：任何正整数，通常以 <code>k</code> 为单位表示。</li>\n<li><strong>示例</strong>：<code>key = &quot;bit_rate&quot;</code>, <code>val = &quot;128k&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>sample_rate</code></strong>：\n<ul>\n<li><strong>描述</strong>：音频采样率。</li>\n<li><strong>可能值</strong>：常见值有 <code>44100</code>, <code>48000</code>, <code>96000</code> 等。</li>\n<li><strong>示例</strong>：<code>key = &quot;sample_rate&quot;</code>, <code>val = &quot;44100&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>channels</code></strong>：\n<ul>\n<li><strong>描述</strong>：音频通道数。</li>\n<li><strong>可能值</strong>：<code>1</code>（单声道）, <code>2</code>（立体声）</li>\n<li><strong>示例</strong>：<code>key = &quot;channels&quot;</code>, <code>val = &quot;2&quot;</code></li>\n</ul>\n</li>\n</ol>\n<p>其他常用选项</p>\n<ol>\n<li><strong><code>threads</code></strong>：\n<ul>\n<li><strong>描述</strong>：线程数量，控制编码或解码时使用的线程数量。</li>\n<li><strong>可能值</strong>：任何正整数。</li>\n<li><strong>示例</strong>：<code>key = &quot;threads&quot;</code>, <code>val = &quot;4&quot;</code></li>\n</ul>\n</li>\n<li><strong><code>max_b_frames</code></strong>：\n<ul>\n<li><strong>描述</strong>：最大 B 帧数量。</li>\n<li><strong>可能值</strong>：任何正整数。</li>\n<li><strong>示例</strong>：<code>key = &quot;max_b_frames&quot;</code>, <code>val = &quot;2&quot;</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"SetOpt-——接收整数参数\">SetOpt()——接收整数参数</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCodec::SetOpt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* key, <span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_opt_set_int</span>(c_-&gt;priv_data, key, val, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;av_opt_set failed!&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"上述SetOpt-的区别\">上述SetOpt()的区别</h3>\n<ol>\n<li><strong>参数类型</strong>：\n<ul>\n<li>之前的 <code>SetOpt</code> 函数接受字符串类型的选项值，适用于设置那些需要字符串的选项（如编码器预设、编码配置档案等）。</li>\n<li>新的 <code>SetOpt</code> 函数接受整数类型的选项值，适用于设置那些需要整数的选项（如比特率、线程数量、GOP 大小等）。</li>\n</ul>\n</li>\n<li><strong>使用的 FFmpeg 函数</strong>：\n<ul>\n<li>之前的 <code>SetOpt</code> 函数使用 <code>av_opt_set</code> 来设置字符串类型的选项。</li>\n<li>新的 <code>SetOpt</code> 函数使用 <code>av_opt_set_int</code> 来设置整数类型的选项。</li>\n</ul>\n</li>\n</ol>\n<p>示例</p>\n<p>以下是使用两个 <code>SetOpt</code> 函数的示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XCodec codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置字符串类型的选项</span></span><br><span class=\"line\">codec.<span class=\"built_in\">SetOpt</span>(<span class=\"string\">&quot;preset&quot;</span>, <span class=\"string\">&quot;fast&quot;</span>);        <span class=\"comment\">// 设置编码预设</span></span><br><span class=\"line\">codec.<span class=\"built_in\">SetOpt</span>(<span class=\"string\">&quot;profile&quot;</span>, <span class=\"string\">&quot;high&quot;</span>);       <span class=\"comment\">// 设置编码档案</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置整数类型的选项</span></span><br><span class=\"line\">codec.<span class=\"built_in\">SetOpt</span>(<span class=\"string\">&quot;bitrate&quot;</span>, <span class=\"number\">2000000</span>);      <span class=\"comment\">// 设置目标比特率（单位：比特）</span></span><br><span class=\"line\">codec.<span class=\"built_in\">SetOpt</span>(<span class=\"string\">&quot;threads&quot;</span>, <span class=\"number\">4</span>);            <span class=\"comment\">// 设置线程数量</span></span><br><span class=\"line\">codec.<span class=\"built_in\">SetOpt</span>(<span class=\"string\">&quot;g&quot;</span>, <span class=\"number\">250</span>);                <span class=\"comment\">// 设置关键帧间隔</span></span><br></pre></td></tr></table></figure>\n<p>在这些示例中，<code>SetOpt</code> 函数被用来设置各种编解码器选项，以配置编码和解码行为。通过这些选项，可以灵活地控制编码和解码的参数，满足具体的音视频处理需求。</p>\n<h3 id=\"Open\">Open()</h3>\n<p>作用：打开编解码器，线程安全</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XCodec::Open</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t用于打开指定的编解码器，以便进行视频或音频的编码或解码。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t它的作用是将编解码器上下文与实际的编解码器关联起来，从而使得该上下文可以用于编码或解码操作。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">avcodec_open2</span>(c_, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>avcodec_open2</code> 是 FFmpeg 库中的一个函数，用于初始化一个编解码器上下文，以便进行编码或解码操作。该函数会根据指定的编解码器打开 <code>AVCodecContext</code>，并分配必要的资源。</p>\n<p>函数原型</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">avcodec_open2</span><span class=\"params\">(AVCodecContext *avctx, <span class=\"type\">const</span> AVCodec *codec, AVDictionary **options)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释</p>\n<ol>\n<li><strong><code>AVCodecContext *avctx</code></strong>：\n<ul>\n<li>指向要初始化的编解码器上下文的指针。这个上下文必须已经通过 <code>avcodec_alloc_context3</code> 分配，并设置了基本参数。</li>\n</ul>\n</li>\n<li><strong><code>const AVCodec *codec</code></strong>：\n<ul>\n<li>指向要使用的编解码器的指针。如果传递 <code>NULL</code>，则使用上下文中已经设置的编解码器。</li>\n</ul>\n</li>\n<li><code>AVDictionary **options</code>：\n<ul>\n<li>一个指向字典的指针，用于传递额外的选项和参数。如果不需要传递额外的选项，可以传递 <code>NULL</code>。</li>\n</ul>\n</li>\n</ol>\n<p>示例解释</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> result = <span class=\"built_in\">avcodec_open2</span>(c_, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br></pre></td></tr></table></figure>\n<p>在这个示例中：</p>\n<ul>\n<li><code>c_</code>：指向要初始化的 <code>AVCodecContext</code> 的指针。</li>\n<li><code>NULL</code>（第一个）：表示使用上下文中已经设置的编解码器。</li>\n<li><code>NULL</code>（第二个）：表示没有额外的选项需要传递。</li>\n</ul>\n<h3 id=\"CreateFrame\">CreateFrame()</h3>\n<p>作用：根据AVcodecContext 创建一个AVFrame 需要调用者释放av_frame_free</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVFrame* <span class=\"title\">XCodec::CreateFrame</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">unique_lock&lt;mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(mux_)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!c_) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> frame = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\tframe-&gt;width = c_-&gt;width;</span><br><span class=\"line\">\tframe-&gt;height = c_-&gt;height;</span><br><span class=\"line\">\tframe-&gt;format = c_-&gt;pix_fmt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// auto re = av_frame_get_buffer(frame, 0);</span></span><br><span class=\"line\">    <span class=\"comment\">// 调用 av_frame_get_buffer 为帧分配缓冲区，以存储帧的数据。</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个参数 0 表示使用默认对齐方式。</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame);</span><br><span class=\"line\">\t\t<span class=\"built_in\">PrintErr</span>(re);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> frame;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 <code>AVCodecContext</code> 创建 <code>AVFrame</code> 可以确保帧的参数与编解码器的参数一致，简化编码和解码流程，保证资源分配正确，并提高数据处理效率。这样可以有效减少编码和解码过程中可能出现的错误，提高程序的稳定性和性能。</p>\n","categories":[],"tags":[]},{"title":"XSDL","url":"http://example.com/2024/07/22/XSDL/","content":"<h2 id=\"SDL介绍\">SDL介绍</h2>\n<p>SDL（Simple DirectMedia Layer）是一个跨平台的多媒体开发库，广泛用于游戏开发和多媒体应用的创建。它提供了对音频、键盘、鼠标、游戏控制器、图形和窗口的底层访问，从而使开发者能够编写高性能的多媒体应用程序。SDL被许多流行的游戏和软件项目所使用。</p>\n<h3 id=\"SDL的主要特点\">SDL的主要特点</h3>\n<ol>\n<li><strong>跨平台支持：</strong> SDL支持多个操作系统，包括Windows、Mac OS、Linux、iOS和Android等，使得开发者能够编写一次代码，运行在多个平台上。</li>\n<li><strong>简化多媒体处理：</strong> SDL提供了对音频、视频、输入设备、计时器等多媒体功能的简化接口，使开发者不需要处理底层系统的细节。</li>\n<li><strong>硬件加速：</strong> SDL支持使用OpenGL、Direct3D等图形库进行硬件加速，从而提高图形渲染的性能。</li>\n<li><strong>模块化设计：</strong> SDL的功能被划分为多个模块，如视频、音频、事件处理、线程、文件I/O等，开发者可以按需使用。</li>\n</ol>\n<h2 id=\"XSDL-h\">XSDL.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SDL_Window</span>;  <span class=\"comment\">// 能够使用SDL_WINDOW指针</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SDL_Renderer</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SDL_Texture</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XSDL</span> :<span class=\"keyword\">public</span> XVideoView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tFormat fmt = RGBA)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">int</span> linesize = <span class=\"number\">0</span>)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* y, <span class=\"type\">int</span> y_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* u, <span class=\"type\">int</span> u_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* v, <span class=\"type\">int</span> v_pitch</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsExit</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tSDL_Window *win_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tSDL_Renderer *render_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tSDL_Texture *texture_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数介绍-2\">参数介绍</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tSDL_Window *win_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 表示一个窗口</span></span><br><span class=\"line\">\tSDL_Renderer *render_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 渲染器</span></span><br><span class=\"line\">\tSDL_Texture *texture_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 材质</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"XSDL-cpp\">XSDL.cpp</h2>\n<p>是XVideoView的派生类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xsdl.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">bool</span> <span class=\"title\">InitVideo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">bool</span> is_first = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> std::mutex mux;</span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mux)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!is_first) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tis_first = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_SetHint</span>(SDL_HINT_RENDER_SCALE_QUALITY, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::IsExit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSDL_Event ev;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">SDL_WaitEventTimeout</span>(&amp;ev, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ev.type == SDL_QUIT)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XSDL::Close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture_);</span><br><span class=\"line\">\t\ttexture_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (render_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(render_);</span><br><span class=\"line\">\t\trender_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyWindow</span>(win_);</span><br><span class=\"line\">\t\twin_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_renderer_index</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"built_in\">SDL_GetNumRenderDrivers</span>();</span><br><span class=\"line\">\tSDL_RendererInfo info;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_GetRenderDriverInfo</span>(i, &amp;info) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(info.name, name) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h, Format fmt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (w &lt;= <span class=\"number\">0</span> || h &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">InitVideo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twidth_ = w;</span><br><span class=\"line\">\theight_ = h;</span><br><span class=\"line\">\tfmt_ = fmt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture_)</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (render_)</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (win_id_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\twin_ = <span class=\"built_in\">SDL_CreateWindowFrom</span>(win_id_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\twin_ = <span class=\"built_in\">SDL_CreateWindow</span>(<span class=\"string\">&quot;Video&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\t\t\tw, h, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// int renderer_index = find_renderer_index(&quot;opengl&quot;);</span></span><br><span class=\"line\">\t<span class=\"comment\">// render_ = SDL_CreateRenderer(win_, renderer_index, SDL_RENDERER_ACCELERATED);</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    render_ = <span class=\"built_in\">SDL_CreateRenderer</span>(win_, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!render_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> sdl_fmt = SDL_PIXELFORMAT_RGBA8888;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (fmt_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_RGBA32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::BGRA:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_BGRA32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_IYUV;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_ARGB32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::NV12:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_NV12;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttexture_ = <span class=\"built_in\">SDL_CreateTexture</span>(render_,</span><br><span class=\"line\">\t\tsdl_fmt,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">\t\tw, h</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* y, <span class=\"type\">int</span> y_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* u, <span class=\"type\">int</span> u_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* v, <span class=\"type\">int</span> v_pitch</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!y || !u || !v) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_ || !render_ || !win_ || width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">SDL_UpdateYUVTexture</span>(texture_, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\ty, y_pitch,</span><br><span class=\"line\">\t\tu, u_pitch,</span><br><span class=\"line\">\t\tv, v_pitch</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &lt;= <span class=\"number\">0</span>) scale_w_ = width_;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_h_ &lt;= <span class=\"number\">0</span>) scale_h_ = height_;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\tSDL_Rect *prect = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.h = scale_h_;</span><br><span class=\"line\">\t\trect.w = scale_w_;</span><br><span class=\"line\">\t\tprect = &amp;rect;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre = <span class=\"built_in\">SDL_RenderCopy</span>(render_, texture_, <span class=\"literal\">NULL</span>, prect);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(render_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">int</span> linesize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_ || !render_ || !win_ || width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (linesize &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (fmt_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">\t\t\tlinesize = width_;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">\t\t\tlinesize = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (linesize &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">SDL_UpdateTexture</span>(texture_, <span class=\"literal\">NULL</span>, data, linesize);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &lt;= <span class=\"number\">0</span>) scale_w_ = width_;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_h_ &lt;= <span class=\"number\">0</span>) scale_h_ = height_;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\tSDL_Rect *prect = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.h = scale_h_;</span><br><span class=\"line\">\t\trect.w = scale_w_;</span><br><span class=\"line\">\t\tprect = &amp;rect;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tre = <span class=\"built_in\">SDL_RenderCopy</span>(render_, texture_, <span class=\"literal\">NULL</span>, prect);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(render_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"InitVideo\">InitVideo()</h3>\n<p>作用：用于第一次初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// static 作用的函数只在此cpp下存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">bool</span> <span class=\"title\">InitVideo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">bool</span> is_first = <span class=\"literal\">true</span>;  <span class=\"comment\">// 用于判断是否是第一次初始化</span></span><br><span class=\"line\">\t<span class=\"type\">static</span> std::mutex mux;</span><br><span class=\"line\">    <span class=\"comment\">// 确保在多线程环境中对标准输出的访问是线程安全的。std::unique_lock 会在作用域结束时自动解锁互斥锁。</span></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mux)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!is_first) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tis_first = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 初始化SDL的视频子系统</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设定缩放算法解决锯齿问题，线性差值算法</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_SetHint</span>(SDL_HINT_RENDER_SCALE_QUALITY, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IsExit\">IsExit()</h3>\n<p>作用：处理检测用户关闭程序，并返回是否关闭的信号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::IsExit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// SDL_Event 是一个联合类型，包含了各种 SDL 事件的类型和数据。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 变量 ev 用于存储从事件队列中获取的事件。</span></span><br><span class=\"line\">\tSDL_Event ev;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// SDL_WaitEventTimeout 是 SDL 库中的一个函数，用于等待事件，并将事件存储在 ev 变量中。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 第二个参数 1 表示等待的超时时间为 1 毫秒。如果在 1 毫秒内没有事件发生，该函数会返回 0（失败），如果有事件发生，则返回 1（成功）。</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_WaitEventTimeout</span>(&amp;ev, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查 ev 中的事件类型是否为 SDL_QUIT。</span></span><br><span class=\"line\">\t<span class=\"comment\">// SDL_QUIT 事件通常在用户请求关闭窗口或结束程序时触发。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ev.type == SDL_QUIT)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Close\">Close()</h3>\n<p>作用：关闭程序后，需要清理指针，防止内存泄漏。</p>\n<p>先清理材质、再清理渲染器、最后清理窗口句柄</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XSDL::Close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture_);</span><br><span class=\"line\">\t\ttexture_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (render_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(render_);</span><br><span class=\"line\">\t\trender_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyWindow</span>(win_);</span><br><span class=\"line\">\t\twin_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"find-renderer-index\">find_renderer_index()</h3>\n<p>作用：用于在 SDL 中查找具有指定名称的渲染驱动程序的索引。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_renderer_index</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回可用的渲染驱动程序的数量，将结果存储在 count 变量中。</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count = <span class=\"built_in\">SDL_GetNumRenderDrivers</span>();</span><br><span class=\"line\">\tSDL_RendererInfo info;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// SDL_GetRenderDriverInfo(i, &amp;info)用于获取索引为 i 的渲染驱动程序的信息，并将其存储在 info 变量中。</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回值为 0，表示没有错误。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_GetRenderDriverInfo</span>(i, &amp;info) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(info.name, name) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Init\">Init()</h3>\n<p>作用：初始化</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h, Format fmt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (w &lt;= <span class=\"number\">0</span> || h &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化SDL 视频库</span></span><br><span class=\"line\">\t<span class=\"built_in\">InitVideo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 锁，确保线程安全</span></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twidth_ = w;</span><br><span class=\"line\">\theight_ = h;</span><br><span class=\"line\">\tfmt_ = fmt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture_)  <span class=\"comment\">// 由于渲染包含材质，所以要先检查</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (render_)</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//////// 1. 创建窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (win_id_)  <span class=\"comment\">// 如果存在窗口句柄</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 渲染到现有窗口，需要传入窗口句柄的指针</span></span><br><span class=\"line\">\t\t\twin_ = <span class=\"built_in\">SDL_CreateWindowFrom</span>(win_id_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 新建窗口</span></span><br><span class=\"line\">\t\t\twin_ = <span class=\"built_in\">SDL_CreateWindow</span>(<span class=\"string\">&quot;Video&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\t\t\tw, h, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// &quot;Video&quot; 窗口标题</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED  表示由系统决定</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE  窗口支持OpenGL渲染和用户可以拖动窗口边框来改变尺寸</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//////// 2. 创建渲染器</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t【7.28】情况有变，再使用监控相机的时候，这个可以正常显示画面</span></span><br><span class=\"line\"><span class=\"comment\">\t\tint renderer_index = find_renderer_index(&quot;opengl&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t√</span></span><br><span class=\"line\"><span class=\"comment\">\t\trender_ = SDL_CreateRenderer(win_, -1, SDL_RENDERER_ACCELERATED);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t×</span></span><br><span class=\"line\"><span class=\"comment\">\t\trender_ = SDL_CreateRenderer(win_, renderer_index, SDL_RENDERER_ACCELERATED);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t【注！！】</span></span><br><span class=\"line\"><span class=\"comment\">\t\t此处：SDL_Renderer * SDLCALL SDL_CreateRenderer(SDL_Window * window,</span></span><br><span class=\"line\"><span class=\"comment\">                                               int index, Uint32 flags);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tindex需要设置为opengl，才能支持SDL_PIXELFORMAT_NV12</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tNV12是一种 YUV 颜色空间格式，具体是 YUV 4:2:0 子采样格式之一</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t查看支持的格式代码</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tsdl_window *win = sdl_createwindow(&quot;hello sdl&quot;, 100, 100, 640, 480, sdl_window_shown);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tint renderer_index = find_renderer_index(&quot;opengl&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tsdl_renderer *renderer = sdl_createrenderer(win, renderer_index, sdl_renderer_accelerated | sdl_renderer_presentvsync);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tsdl_rendererinfo info;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tsdl_getrendererinfo(renderer, &amp;info);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tprintf(&quot;renderer name: %s\\n&quot;, info.name);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tprintf(&quot;supported texture formats:\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tfor (uint32 i = 0; i &lt; info.num_texture_formats; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tprintf(&quot;    %s\\n&quot;, sdl_getpixelformatname(info.texture_formats[i]));</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\treturn false;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// win_  关联的窗口</span></span><br><span class=\"line\">\t<span class=\"comment\">// renderer_index  指定的渲染驱动程序</span></span><br><span class=\"line\">\t<span class=\"comment\">// SDL_RENDERER_ACCELERATED  使用硬件加速</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trender_ = <span class=\"built_in\">SDL_CreateRenderer</span>(win_, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!render_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//////// 3. 创建材质</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> sdl_fmt = SDL_PIXELFORMAT_RGBA8888;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (fmt_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_RGBA32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::BGRA:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_BGRA32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_IYUV;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_ARGB32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::NV12:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_NV12;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttexture_ = <span class=\"built_in\">SDL_CreateTexture</span>(render_,</span><br><span class=\"line\">\t\tsdl_fmt,\t\t\t\t\t\t<span class=\"comment\">// 像素格式</span></span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,\t<span class=\"comment\">// 频繁修改的渲染（带锁，但是用不到，内部以及有锁了）</span></span><br><span class=\"line\">\t\tw, h\t\t\t\t\t\t\t<span class=\"comment\">// 材质大小</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Draw-，专门处理YUV格式\">Draw()，专门处理YUV格式</h3>\n<p>由<code>XVideoView::DrawFrame</code>进行数据转发</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::DrawFrame</span><span class=\"params\">(AVFrame* frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (frame-&gt;format)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUV420P:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>],   <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>],\t\t\t <span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">2</span>], frame-&gt;linesize[<span class=\"number\">2</span>]\t\t\t <span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_BGRA:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用：接收 YUV 格式的图像数据，将其更新到纹理，并通过 SDL 渲染到窗口上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理YUV格式</span></span><br><span class=\"line\"><span class=\"comment\">// 其中y_pitch表示 Y 平面的步幅，即每行 Y 分量数据的字节数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* y, <span class=\"type\">int</span> y_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* u, <span class=\"type\">int</span> u_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* v, <span class=\"type\">int</span> v_pitch</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!y || !u || !v) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 参数检查</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_ || !render_ || !win_ || width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 复制到显存，更新 YUV 纹理的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">SDL_UpdateYUVTexture</span>(texture_, </span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span>, </span><br><span class=\"line\">\t\ty, y_pitch,</span><br><span class=\"line\">\t\tu, u_pitch,</span><br><span class=\"line\">\t\tv, v_pitch</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清空屏幕</span></span><br><span class=\"line\">\t<span class=\"comment\">// 清空渲染目标是为了确保在开始新的绘制操作之前，渲染目标处于一个干净的状态。</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 材质复制到渲染器</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &lt;= <span class=\"number\">0</span>) scale_w_ = width_;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_h_ &lt;= <span class=\"number\">0</span>) scale_h_ = height_;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\tSDL_Rect *prect = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 用户手动设置缩放</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.h = scale_h_;  <span class=\"comment\">// 渲染的宽高，可缩放</span></span><br><span class=\"line\">\t\trect.w = scale_w_;</span><br><span class=\"line\">\t\tprect = &amp;rect;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    re = <span class=\"built_in\">SDL_RenderCopy</span>(render_, texture_, <span class=\"literal\">NULL</span>, prect);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 SDL_RenderCopy 函数将纹理 texture_ 复制到渲染器 render_。</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    \trender_：指向用于渲染的渲染器。</span></span><br><span class=\"line\"><span class=\"comment\">\t\ttexture_：指向要渲染的纹理。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tNULL：表示从纹理中复制整个图像，不限定源矩形区域。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tprect：指向 SDL_Rect 结构体的指针，表示目标矩形区域，即将纹理复制到渲染目标的哪一部分。如果 prect 指向一个有效的 SDL_Rect 结构体，则纹理会被拉伸或缩小以适应该矩形。如果 prect 为 NULL，则纹理会被拉伸到整个渲染目标。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用于更新窗口的显示内容，即将之前使用渲染器绘制的所有内容呈现到屏幕上</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(render_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用到了<code>SDL_UpdateYUVTexture</code>，而下面的Draw函数则是使用<code>SDL_UpdateTexture</code></p>\n<h3 id=\"Draw-，处理YUV、RGB格式\">Draw()，处理YUV、RGB格式</h3>\n<p>由<code>XVideoView::DrawFrame</code>进行数据转发</p>\n<p>作用：接收 RGB 格式的图像数据，将其更新到纹理，并通过 SDL 渲染到窗口上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理RGBA RGB格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">int</span> linesize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果任何一个资源未初始化或者宽度和高度小于等于0，则返回false。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_ || !render_ || !win_ || width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (linesize &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (fmt_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">             linesize = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每个像素占用的内存布局较为复杂，通常宽度直接决定了linesize。</span></span><br><span class=\"line\">\t\t\tlinesize = width_;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每个像素由4个字节组成，分别对应A、R、G和B四个通道。</span></span><br><span class=\"line\">\t\t\tlinesize = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (linesize &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> re = <span class=\"built_in\">SDL_UpdateTexture</span>(texture_, <span class=\"literal\">NULL</span>, data, linesize);</span><br><span class=\"line\">\t<span class=\"comment\">/* 复制内存到显存</span></span><br><span class=\"line\"><span class=\"comment\">\t源码：</span></span><br><span class=\"line\"><span class=\"comment\">               SDL_UpdateTexture(SDL_Texture * texture,</span></span><br><span class=\"line\"><span class=\"comment\">                                 const SDL_Rect * rect,</span></span><br><span class=\"line\"><span class=\"comment\">                                 const void *pixels, </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t           int pitch);</span></span><br><span class=\"line\"><span class=\"comment\">\t*SDL_Texture texture:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t指向要更新的纹理对象的指针。</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\t*const SDL_Rect rect:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t指向 SDL_Rect 结构体的指针，定义了要更新的纹理区域。如果传入 NULL，则更新整个纹理。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*const void pixels:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t指向包含新像素数据的内存区域的指针。数据格式必须与创建纹理时指定的格式相匹配。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tint pitch:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t每一行像素数据的字节数。这通常是图像宽度乘以每个像素的字节数。例如，对于 ARGB 格式的图像，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t如果宽度是 width_，那么 pitch 就是 width_ * 4。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清空屏幕</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 材质复制到渲染器</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &lt;= <span class=\"number\">0</span>) scale_w_ = width_;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_h_ &lt;= <span class=\"number\">0</span>) scale_h_ = height_;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\tSDL_Rect *prect = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 用户手动设置缩放</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.h = scale_h_;  <span class=\"comment\">// 渲染的宽高，可缩放</span></span><br><span class=\"line\">\t\trect.w = scale_w_;</span><br><span class=\"line\">\t\tprect = &amp;rect;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tre = <span class=\"built_in\">SDL_RenderCopy</span>(render_, texture_, <span class=\"literal\">NULL</span>, prect);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(render_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>【<strong>为什么YUV420P不需要×4？</strong>】</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">    linesize = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">    linesize = width_;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">    linesize = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>在 RGBA 格式中，每个像素由 4 个字节表示（R、G、B 和 A 各占 1 个字节），因此 <code>linesize</code> 是 <code>width_ × 4</code>。</p>\n<p>但是在 YUV420P 格式中：</p>\n<p>YUV420P 是一种色度子采样格式，意味着 YUV 数据被分为三个独立的平面</p>\n<ul>\n<li><strong>Y 平面</strong>：每个像素只占用 1 个字节（即 Y 分量），因此 <code>linesize</code> 为 <code>width_</code>。</li>\n<li><strong>U 和 V 平面</strong>：由于色度分量的分辨率被降低到四分之一（色度采样为 4:2:0），每个平面的 <code>linesize</code> 是 <code>width_ / 2</code>。</li>\n</ul>\n<p>因此，对于 YUV420P 格式，<code>linesize</code> 直接等于图像的宽度 <code>width_</code> 而无需乘以 4。这样可以确保你只处理每个像素的亮度（Y 分量），而不是每个像素的所有颜色信息（RGBA）。</p>\n<p><strong>总结一下</strong>：YUV420P（<a href=\"https://www.jasonqian.com/2024/08/11/%E8%A7%86%E9%A2%91%E3%80%81%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F/\">YUV420P介绍</a>）一个像素共用Y、U或V，而RGBA每个像素的颜色信息是<strong>独立</strong>的，四个通道（R、G、B、A）一起定义了像素的颜色和透明度。</p>\n<h2 id=\"使用场景\">使用场景</h2>\n<h3 id=\"直接传入YUV数据\">直接传入YUV数据</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMessageBox&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* yuv = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> std::ifstream yuv_file;</span><br><span class=\"line\"><span class=\"type\">static</span> XVideoView *view = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::timerEvent</span><span class=\"params\">(QTimerEvent* ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Y占用一个像素，U占用1/4个像素，V占用1/4个像素</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv, sdl_width * sdl_height * <span class=\"number\">1.5</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (view-&gt;<span class=\"built_in\">IsExit</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tview-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Draw</span>(yuv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::<span class=\"built_in\">SDLQtRGB</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打开yuv文件</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">    ui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_width = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tsdl_height = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);  <span class=\"comment\">// 调整主窗口的尺寸</span></span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// 创建XSDL</span></span><br><span class=\"line\">\tview = XVideoView::<span class=\"built_in\">Create</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置窗口句柄</span></span><br><span class=\"line\">    <span class=\"built_in\">set_win_id</span>((<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 初始化Init</span></span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Init</span>(sdl_width, sdl_height,</span><br><span class=\"line\">\t\tXVideoView::YUV420P);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tyuv = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重载resizeEvent函数，使得放大、缩小屏幕，视频跟着放大、缩小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Scale</span>(<span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::~<span class=\"built_in\">SDLQtRGB</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清理和释放SDL所使用的资源</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Quit</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用AVFrame传入YUV数据\">使用AVFrame传入YUV数据</h3>\n<p><a href=\"https://www.jasonqian.com/2024/08/11/AVFrame%E4%BB%8B%E7%BB%8D/\">AVFrame 介绍</a></p>\n<p>（<strong>不单单可以传入YUV数据，也可以传入RGBA等数据</strong>）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMessageBox&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> std::ifstream yuv_file;</span><br><span class=\"line\"><span class=\"type\">static</span> XVideoView *view = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> AVFrame* frame = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::timerEvent</span><span class=\"params\">(QTimerEvent* ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// YUV分开读取</span></span><br><span class=\"line\">\t<span class=\"comment\">// yuv420p存储方式</span></span><br><span class=\"line\">\t<span class=\"comment\">// 4 * 2</span></span><br><span class=\"line\">\t<span class=\"comment\">// yyyy yyyy</span></span><br><span class=\"line\">\t<span class=\"comment\">// u    u</span></span><br><span class=\"line\">\t<span class=\"comment\">// v    v</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame-&gt;data[<span class=\"number\">0</span>], sdl_width * sdl_height);\t    <span class=\"comment\">// Y</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame-&gt;data[<span class=\"number\">1</span>], sdl_width * sdl_height / <span class=\"number\">4</span>);   <span class=\"comment\">// U</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame-&gt;data[<span class=\"number\">2</span>], sdl_width * sdl_height / <span class=\"number\">4</span>);\t<span class=\"comment\">// V</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (view-&gt;<span class=\"built_in\">IsExit</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tview-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">DrawFrame</span>(frame);</span><br><span class=\"line\">\t<span class=\"comment\">// view-&gt;Draw(yuv);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::<span class=\"built_in\">SDLQtRGB</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打开yuv文件</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!yuv_file)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;open yuv failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_width = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tsdl_height = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);  <span class=\"comment\">// 调整主窗口的尺寸</span></span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">\tview = XVideoView::<span class=\"built_in\">Create</span>();</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Init</span>(sdl_width, sdl_height,</span><br><span class=\"line\">\t\tXVideoView::YUV420P);</span><br><span class=\"line\"></span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Init</span>(sdl_width, sdl_height,</span><br><span class=\"line\">\t\tXVideoView::YUV420P, (<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 生成frame对象空间</span></span><br><span class=\"line\">\tframe = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\tframe-&gt;width = sdl_width;</span><br><span class=\"line\">\tframe-&gt;height = sdl_height;</span><br><span class=\"line\">\tframe-&gt;format = AV_PIX_FMT_YUV420P;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 【注意此处】：理解linesize的作用，不加就会出现花屏</span></span><br><span class=\"line\">\tframe-&gt;linesize[<span class=\"number\">0</span>] = sdl_width;\t\t\t<span class=\"comment\">// Y</span></span><br><span class=\"line\">\tframe-&gt;linesize[<span class=\"number\">1</span>] = sdl_width / <span class=\"number\">2</span>;\t\t<span class=\"comment\">// U</span></span><br><span class=\"line\">\tframe-&gt;linesize[<span class=\"number\">2</span>] = sdl_width / <span class=\"number\">2</span>;\t\t<span class=\"comment\">// V</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 生成存储图像空间 默认32字节对齐</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">av_strerror</span>(re, buf, <span class=\"built_in\">sizeof</span>(buf));</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; buf &lt;&lt; std::endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Scale</span>(<span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::~<span class=\"built_in\">SDLQtRGB</span>()</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"XVideoView","url":"http://example.com/2024/07/22/XVideoView/","content":"<h2 id=\"XVideoView-h\">XVideoView.h</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> XVIDEO_VIEW_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> XVIDEO_VIEW_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xtools.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AVFrame</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XVideoView</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> <span class=\"title class_\">Format</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tYUV420P = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tNV12 = <span class=\"number\">23</span>,</span><br><span class=\"line\">\t\tARGB = <span class=\"number\">25</span>,</span><br><span class=\"line\">\t\tRGBA = <span class=\"number\">26</span>,</span><br><span class=\"line\">\t\tBGRA = <span class=\"number\">28</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> <span class=\"title class_\">RenderType</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSDL = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> XVideoView* <span class=\"title\">Create</span><span class=\"params\">(RenderType type=SDL)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tFormat fmt = RGBA)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(AVCodecParameters *para)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, <span class=\"type\">int</span> linesize = <span class=\"number\">0</span>)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* y, <span class=\"type\">int</span> y_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* u, <span class=\"type\">int</span> u_pitch,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* v, <span class=\"type\">int</span> v_pitch</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Close</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">IsExit</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Scale</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tscale_w_ = w;</span><br><span class=\"line\">\t\tscale_h_ = h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">DrawFrame</span><span class=\"params\">(AVFrame* frame)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">render_fps</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> render_fps_; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Open</span><span class=\"params\">(std::string filepath)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">AVFrame *<span class=\"title\">Read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_win_id</span><span class=\"params\">(<span class=\"type\">void</span>*win)</span> </span>&#123; win_id_ = win; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">virtual</span> ~<span class=\"built_in\">XVideoView</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">void</span> *win_id_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 窗口句柄</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> render_fps_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 显示帧率</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> width_ = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// 材质宽度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> height_ = <span class=\"number\">0</span>;\t<span class=\"comment\">// 材质高度</span></span><br><span class=\"line\">\tFormat fmt_ = RGBA;  <span class=\"comment\">// 像素格式</span></span><br><span class=\"line\">\tstd::mutex mtx_;\t<span class=\"comment\">// 确保线程安全</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> scale_w_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 显示大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> scale_h_ = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> beg_ms_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 计时开始时间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 统计显示次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::ifstream ifs_;</span><br><span class=\"line\">\tAVFrame *frame_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 视频帧</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* cache_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 用于复制nv12缓冲</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数介绍-3\">参数介绍</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">void</span> *win_id_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 窗口句柄</span></span><br><span class=\"line\">\t<span class=\"comment\">// 窗口句柄是一个指向SDL窗口对象的指针，用于标识和操作该窗口。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 窗口句柄在创建窗口时生成，并在需要对窗口进行操作时使用，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如设置窗口标题、调整窗口大小、获取窗口的表面等。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> render_fps_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 显示帧率</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> width_ = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// 材质宽度（文件原本的宽高）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> height_ = <span class=\"number\">0</span>;\t<span class=\"comment\">// 材质高度</span></span><br><span class=\"line\">\tFormat fmt_ = RGBA;  <span class=\"comment\">// 像素格式</span></span><br><span class=\"line\">\tstd::mutex mtx_;\t<span class=\"comment\">// 确保线程安全</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> scale_w_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 显示大小（显示在屏幕面前的宽高）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> scale_h_ = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">long</span> beg_ms_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 计时开始时间</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 统计显示次数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::ifstream ifs_;  <span class=\"comment\">// 用于从文件中读取数据。</span></span><br><span class=\"line\">\tAVFrame *frame_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 视频帧</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\tAVFrame包含：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t* uint8_t = *data：保存图像的实际像素数据</span></span><br><span class=\"line\"><span class=\"comment\">\t\tint linesize：每个图像的行宽，单位字节</span></span><br><span class=\"line\"><span class=\"comment\">\t\tint width、int height：图像宽高，单位像素</span></span><br><span class=\"line\"><span class=\"comment\">\t\tenum AVPixelFormat format：像素格式，例如 YUV420P，RGB24 等。</span></span><br><span class=\"line\"><span class=\"comment\">\t\tint64_t pts：解码时间戳（Presentation Timestamp），用于同步音视频。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span>* cache_ = <span class=\"literal\">nullptr</span>;  <span class=\"comment\">// 用于复制nv12缓冲</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"XVideoView-cpp\">XVideoView.cpp</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xsdl.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;avutil.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::Init</span><span class=\"params\">(AVCodecParameters *para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!para) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> fmt = (Format)para-&gt;format;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (para-&gt;format)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUV420P:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUVJ420P:</span><br><span class=\"line\">\t\tfmt = YUV420P;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Init</span>(para-&gt;width, para-&gt;height, fmt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">AVFrame* <span class=\"title\">XVideoView::Read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span> || !ifs_) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (frame_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame_-&gt;width != width_ ||</span><br><span class=\"line\">\t\t\tframe_-&gt;height != height_ ||</span><br><span class=\"line\">\t\t\tframe_-&gt;format != fmt_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tframe_ = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t\tframe_-&gt;width = width_;</span><br><span class=\"line\">\t\tframe_-&gt;height = height_;</span><br><span class=\"line\">\t\tframe_-&gt;format = fmt_;</span><br><span class=\"line\">\t\tframe_-&gt;linesize[<span class=\"number\">0</span>] = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame_-&gt;format == AV_PIX_FMT_YUV420P)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tframe_-&gt;linesize[<span class=\"number\">0</span>] = width_;\t\t<span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe_-&gt;linesize[<span class=\"number\">1</span>] = width_ / <span class=\"number\">2</span>;\t<span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe_-&gt;linesize[<span class=\"number\">2</span>] = width_ / <span class=\"number\">2</span>;\t<span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame_, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_strerror</span>(re, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tcout &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame_);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame_) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (frame_-&gt;format == AV_PIX_FMT_YUV420P)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">0</span>], frame_-&gt;linesize[<span class=\"number\">0</span>] * height_);</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">1</span>], frame_-&gt;linesize[<span class=\"number\">1</span>] * height_ / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">2</span>], frame_-&gt;linesize[<span class=\"number\">2</span>] * height_ / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">0</span>], frame_-&gt;linesize[<span class=\"number\">0</span>] * height_);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ifs_.<span class=\"built_in\">gcount</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> frame_;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::Open</span><span class=\"params\">(std::string filepath)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ifs_.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tifs_.<span class=\"built_in\">open</span>(filepath, ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ifs_.<span class=\"built_in\">is_open</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">XVideoView* <span class=\"title\">XVideoView::Create</span><span class=\"params\">(RenderType type)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::SDL:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">XSDL</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">XVideoView::~<span class=\"built_in\">XVideoView</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cache_)</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> cache_;</span><br><span class=\"line\">\tcache_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::DrawFrame</span><span class=\"params\">(AVFrame* frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame || !frame-&gt;data[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tcount_++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beg_ms_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbeg_ms_ = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"built_in\">clock</span>() - beg_ms_) / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>) &gt;= <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trender_fps_ = count_;</span><br><span class=\"line\">\t\tcount_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tbeg_ms_ = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> linesize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (frame-&gt;format)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUV420P:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>],   <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>],\t\t\t <span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">2</span>], frame-&gt;linesize[<span class=\"number\">2</span>]\t\t\t <span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUVJ420P:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>],   <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>],\t\t\t <span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">2</span>], frame-&gt;linesize[<span class=\"number\">2</span>]\t\t\t <span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_NV12:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cache_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcache_ = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[<span class=\"number\">4092</span> * <span class=\"number\">2160</span> * <span class=\"number\">1.5</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlinesize = frame-&gt;width;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame-&gt;linesize[<span class=\"number\">0</span>] == frame-&gt;width)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(cache_, frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>] * frame-&gt;height);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(cache_ + frame-&gt;linesize[<span class=\"number\">0</span>] * frame-&gt;height, frame-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>] * frame-&gt;height / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; frame-&gt;height; i++)  <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memcpy</span>(cache_ + i * frame-&gt;width,</span><br><span class=\"line\">\t\t\t\t\tframe-&gt;data[<span class=\"number\">0</span>] + i * frame-&gt;linesize[<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t\t\tframe-&gt;width</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; frame-&gt;height; i++)  <span class=\"comment\">// UV</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">auto</span> p = cache_ + frame-&gt;height * frame-&gt;width;  <span class=\"comment\">// 移位Y</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memcpy</span>(p + i * frame-&gt;width,</span><br><span class=\"line\">\t\t\t\t\tframe-&gt;data[<span class=\"number\">1</span>] + i * frame-&gt;linesize[<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\tframe-&gt;width</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(cache_, linesize);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_BGRA:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_ARGB:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_RGBA:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Init-2\">Init()</h3>\n<p>作用：用于给AVCodecParameters传入的参数做转换，并传递给SDL能够处理的Init()函数，此函数在XVideoView基类XSDL中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AVCodecParameters：这是 FFmpeg 中的一个结构体</span></span><br><span class=\"line\"><span class=\"comment\">// 包含了编解码器相关的参数，例如视频的宽度、高度、像素格式等。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::Init</span><span class=\"params\">(AVCodecParameters *para)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!para) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> fmt = (Format)para-&gt;format;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (para-&gt;format)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUV420P:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUVJ420P:</span><br><span class=\"line\">\t\tfmt = YUV420P;  <span class=\"comment\">// 有些录像机的format为YUVJ420P</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Init</span>(para-&gt;width, para-&gt;height, fmt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>YUVJ420P与YUV420P的区别</strong>：</p>\n<ul>\n<li>YUV420P：Y分量的值范围是16到235，U和V分量的值范围是16到240。这是为了兼容标准的广播电视信号。</li>\n<li>YUVJ420P：Y、U、V分量的值范围都是0到255，这意味着它没有剪裁值，可以表示更宽的颜色范围。这通常用于JPEG图像编码和一些视频处理应用中，以提高图像质量。</li>\n</ul>\n<h3 id=\"Read-2\">Read()</h3>\n<p>作用：读取一帧的数据，返回为AVFrame</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AVFrame* <span class=\"title\">XVideoView::Read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在读取之前，需要设置材质宽高与读取文件的参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span> || !ifs_) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// AVFrame空间已经申请，如果参数发生变化，需要释放空间</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (frame_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame_-&gt;width != width_ ||</span><br><span class=\"line\">\t\t\tframe_-&gt;height != height_ ||</span><br><span class=\"line\">\t\t\tframe_-&gt;format != fmt_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 释放AVFrame对象空间，和buf引用计数减一</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame_);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 分配对象空间和像素空间</span></span><br><span class=\"line\">\t\tframe_ = <span class=\"built_in\">av_frame_alloc</span>();</span><br><span class=\"line\">\t\tframe_-&gt;width = width_;</span><br><span class=\"line\">\t\tframe_-&gt;height = height_;</span><br><span class=\"line\">\t\tframe_-&gt;format = fmt_;</span><br><span class=\"line\">\t\tframe_-&gt;linesize[<span class=\"number\">0</span>] = width_ * <span class=\"number\">4</span>;  <span class=\"comment\">// 处理RGB与RGBA格式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame_-&gt;format == AV_PIX_FMT_YUV420P || frame_-&gt;format == AV_PIX_FMT_YUVJ420P)  <span class=\"comment\">// 处理YUV格式</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tframe_-&gt;linesize[<span class=\"number\">0</span>] = width_;\t\t<span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe_-&gt;linesize[<span class=\"number\">1</span>] = width_ / <span class=\"number\">2</span>;\t<span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe_-&gt;linesize[<span class=\"number\">2</span>] = width_ / <span class=\"number\">2</span>;\t<span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成AVFrame空间，使用默认对齐</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">av_frame_get_buffer</span>(frame_, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span> buf[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_strerror</span>(re, buf, <span class=\"built_in\">sizeof</span>(buf) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tcout &lt;&lt; buf &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">av_frame_free</span>(&amp;frame_);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame_) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取一帧数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (frame_-&gt;format == AV_PIX_FMT_YUV420P || frame_-&gt;format == AV_PIX_FMT_YUVJ420P)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">0</span>], frame_-&gt;linesize[<span class=\"number\">0</span>] * height_);  <span class=\"comment\">// 读取Y</span></span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">1</span>], frame_-&gt;linesize[<span class=\"number\">1</span>] * height_ / <span class=\"number\">2</span>);  <span class=\"comment\">// 读取U</span></span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">2</span>], frame_-&gt;linesize[<span class=\"number\">2</span>] * height_ / <span class=\"number\">2</span>);  <span class=\"comment\">// 读取V</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>  <span class=\"comment\">// RGBA ARGB BGRA 32</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)frame_-&gt;data[<span class=\"number\">0</span>], frame_-&gt;linesize[<span class=\"number\">0</span>] * height_);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t检查文件读取的字节数，如果读取字节数为 0，说明读取失败，返回 nullptr。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t否则返回读取的 AVFrame 对象。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ifs_.<span class=\"built_in\">gcount</span>() == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> frame_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>读取YUV420P数据</strong>：</p>\n<ul>\n<li>\n<p><code>frame_-&gt;data[0]</code>：指向Y平面的数据。<code>linesize[0]</code>是每行Y数据的字节数，总共读取<code>linesize[0] * height_</code>字节。</p>\n</li>\n<li>\n<p><code>frame_-&gt;data[1]</code>：指向U平面的数据。U平面高度是原图像高度的一半，所以读取的字节数是<code>linesize[1] * height_ / 2</code>。</p>\n</li>\n<li>\n<p><code>frame_-&gt;data[2]</code>：指向V平面的数据。V平面高度也是原图像高度的一半，所以读取的字节数是<code>linesize[2] * height_ / 2</code>。</p>\n</li>\n</ul>\n<p><strong>读取RGBA、RGB数据</strong>：</p>\n<ul>\n<li>\n<p>对于这些格式，整个图像的数据在一个平面上，即<code>frame_-&gt;data[0]</code>。</p>\n</li>\n<li>\n<p><code>linesize[0]</code>是每行数据的字节数（通常是宽度的4倍，如果每个像素是4字节）。</p>\n</li>\n<li>\n<p>总共读取<code>linesize[0] * height_</code>字节来获取整幅图像的数据。</p>\n</li>\n</ul>\n<h3 id=\"Open-7\">Open()</h3>\n<p>作用：将传入的文件打开，并返回是否成功</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::Open</span><span class=\"params\">(std::string filepath)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ifs_.<span class=\"built_in\">is_open</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tifs_.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tifs_.<span class=\"built_in\">open</span>(filepath, ios::binary);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ifs_.<span class=\"built_in\">is_open</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-3\">Create()</h3>\n<p>作用：根据传入的参数，返回XVideoView类，默认为XSDL</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">XVideoView* <span class=\"title\">XVideoView::Create</span><span class=\"params\">(RenderType type)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::SDL:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">XSDL</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"XVideoView\">~XVideoView()</h3>\n<p>作用：析构函数，将nv12缓冲清空，防止内存泄漏</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XVideoView::~<span class=\"built_in\">XVideoView</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cache_)</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> cache_;</span><br><span class=\"line\">\tcache_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DrawFrame\">DrawFrame()</h3>\n<p>作用：计算fps，根据format进行绘制，Draw()函数在基类XSDL中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XVideoView::DrawFrame</span><span class=\"params\">(AVFrame* frame)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// !frame-&gt;data[0]代表传入的参数中没有数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!frame || !frame-&gt;data[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tcount_++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beg_ms_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tbeg_ms_ = <span class=\"built_in\">clock</span>();  <span class=\"comment\">// 获取开始时间</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算显示帧率</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"built_in\">clock</span>() - beg_ms_) / (CLOCKS_PER_SEC / <span class=\"number\">1000</span>) &gt;= <span class=\"number\">1000</span>)  <span class=\"comment\">// 一秒计算一次fps</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trender_fps_ = count_;</span><br><span class=\"line\">\t\tcount_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tbeg_ms_ = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> linesize = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (frame-&gt;format)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUV420P:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>],  <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>],\t\t\t <span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">2</span>], frame-&gt;linesize[<span class=\"number\">2</span>]\t\t\t <span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_YUVJ420P:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>],  <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>],\t\t\t <span class=\"comment\">// U</span></span><br><span class=\"line\">\t\t\tframe-&gt;data[<span class=\"number\">2</span>], frame-&gt;linesize[<span class=\"number\">2</span>]\t\t\t <span class=\"comment\">// V</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_NV12:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cache_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcache_ = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[<span class=\"number\">4092</span> * <span class=\"number\">2160</span> * <span class=\"number\">1.5</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlinesize = frame-&gt;width;  <span class=\"comment\">// 获取视频的宽度，用于处理RGBA RGB格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t当 frame-&gt;linesize[0] 等于 frame-&gt;width 时，表示每行的数据是紧密排列的，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t没有额外的填充字节，这样可以直接进行内存复制操作。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t否则，需要逐行处理每行数据，跳过那些可能存在的填充字节。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (frame-&gt;linesize[<span class=\"number\">0</span>] == frame-&gt;width)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(cache_, frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>] * frame-&gt;height);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(cache_ + frame-&gt;linesize[<span class=\"number\">0</span>] * frame-&gt;height, frame-&gt;data[<span class=\"number\">1</span>], frame-&gt;linesize[<span class=\"number\">1</span>] * frame-&gt;height / <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">           \t\t \tmemcpy(void *dest, const void *src, size_t n);</span></span><br><span class=\"line\"><span class=\"comment\">           \t\t \tdest：目标地址的指针，即将数据复制到这个地址。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t   src：源地址的指针，即从这个地址读取数据。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t   n：要复制的字节数。</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 需要逐行处理每行数据，跳过那些可能存在的填充字节。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; frame-&gt;height; i++)  <span class=\"comment\">// Y</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memcpy</span>(cache_ + i * frame-&gt;width,  <span class=\"comment\">// 目标地址</span></span><br><span class=\"line\">\t\t\t\t\tframe-&gt;data[<span class=\"number\">0</span>] + i * frame-&gt;linesize[<span class=\"number\">0</span>],  <span class=\"comment\">// 源地址</span></span><br><span class=\"line\">\t\t\t\t\tframe-&gt;width  <span class=\"comment\">// 复制字节数</span></span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">                <span class=\"comment\">// 复制了 frame-&gt;height * frame-&gt;width的 Y数据 字节</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; frame-&gt;height; i++)  <span class=\"comment\">// UV</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">auto</span> p = cache_ + frame-&gt;height * frame-&gt;width;  <span class=\"comment\">// 移位Y</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">memcpy</span>(p + i * frame-&gt;width,</span><br><span class=\"line\">\t\t\t\t\tframe-&gt;data[<span class=\"number\">1</span>] + i * frame-&gt;linesize[<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\tframe-&gt;width</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">               <span class=\"comment\">// 复制了 frame-&gt;height * frame-&gt;width的 UV数据 字节</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(cache_, linesize);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_BGRA:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_ARGB:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AV_PIX_FMT_RGBA:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Draw</span>(frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"ffmpeg","url":"http://example.com/2024/06/19/ffmpeg/","content":"<h2 id=\"基础配置\">基础配置</h2>\n<ul>\n<li><code>头文件</code> include</li>\n<li><code>库文件</code> lib lib/x86 x64</li>\n<li><code>动态库文件</code> dll bin/x86 x64</li>\n<li><code>调式执行和pdb路径</code> bin/x86 x64</li>\n<li><code>源码项目路径</code> src/first_ffmpeg</li>\n<li><code>ffmpeg源码</code> tools</li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202406190941334.png\" alt=\"image-20240619094132150\"></p>\n<h3 id=\"将文件配置进入项目中\">将文件配置进入项目中</h3>\n<p><strong>（以Visual Studio 2017为例）</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202406190940415.png\" alt=\"image-20240619093913928\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202406190940581.png\" alt=\"image-20240619093954002\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202406190940850.png\" alt=\"image-20240619093958478\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202406190940044.png\" alt=\"image-20240619094003237\"></p>\n<h3 id=\"YUV格式\">YUV格式</h3>\n<h4 id=\"YUV444\">YUV444</h4>\n<p>表示$4:4:4$的YUV取样。</p>\n<p>每个像素都有独立的Y、U、V分量。</p>\n<p><strong>每一个像素</strong>Y占一个字节，U占一个字节，V占一个字节，因此每个像素占：</p>\n<p>$$1 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=24 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$的图像为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U2, V2</span><br><span class=\"line\">像素3：Y3, U3, V3</span><br><span class=\"line\">像素4：Y4, U4, V4</span><br></pre></td></tr></table></figure>\n<h4 id=\"YUV422\">YUV422</h4>\n<p>表示$4:2:2$的YUV取样。</p>\n<p><strong>每相邻两个像素</strong>每个像素占一个Y，共享一个U和一个V，因此两个像素占：</p>\n<p>$$2 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=32 bits$$</p>\n<p>每个像素占：</p>\n<p>$$\\displaystyle\\frac{32bits}{2 pixels}=16 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$的图像为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U1, V1</span><br><span class=\"line\">像素3：Y3, U2, V2</span><br><span class=\"line\">像素4：Y4, U2, V2</span><br></pre></td></tr></table></figure>\n<p>YUV422 格式比 YUV444 格式节省了数据量，同时仍然保持较高的图像质量。这就是为什么 YUV422 格式广泛用于视频压缩和传输的原因。</p>\n<h4 id=\"YUV411\">YUV411</h4>\n<p>表示$4:1:1$的YUV取样。</p>\n<p><strong>每相邻四个像素</strong>每个像素占一个Y，共享一个U和一个V，因此四个像素占：</p>\n<p>$$4 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=48 bits$$</p>\n<p>每个像素占：</p>\n<p>$$\\displaystyle\\frac{48bits}{4 pixels}=12 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$的图像为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U1, V1</span><br><span class=\"line\">像素3：Y3, U1, V1</span><br><span class=\"line\">像素4：Y4, U1, V1</span><br></pre></td></tr></table></figure>\n<h4 id=\"YUV420\">YUV420</h4>\n<p>表示$4:2:0$的YUV取样。</p>\n<p><strong>水平每两个像素与垂直每两个像素</strong>中Y取4个，U取1个，V取1个，因此两个像素占：</p>\n<p>$$4 (Y)×8 bits+1 (U)×8 bits+1 (V)×8 bits=48 bits$$</p>\n<p>每个像素占：</p>\n<p>$$\\displaystyle\\frac{48bits}{4 pixels}=12 bits/pixel (bpp)$$</p>\n<p>以$2\\times 2$的图像为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">像素1：Y1, U1, V1</span><br><span class=\"line\">像素2：Y2, U1, V1</span><br><span class=\"line\">像素3：Y3, U1, V1</span><br><span class=\"line\">像素4：Y4, U1, V1</span><br></pre></td></tr></table></figure>\n<p>这里的$4:2:0$代表了$4:2:0$和$4:0:2$两种情况，它们在奇偶行交错出现。</p>\n<p>常见的H.264、H.265、VP8、AV1等都是以它为基础进行编解码的。</p>\n<h2 id=\"SDL-QT渲染\">SDL_QT渲染</h2>\n<p>SDL（Simple DirectMedia Layer）在 FFmpeg 中的作用主要集中在视频和音频的实时播放方面。SDL 是一个跨平台的多媒体库，用于访问底层的硬件（如音频、视频、输入设备）并提供图形用户界面功能。</p>\n<h3 id=\"代码展示\">代码展示</h3>\n<h4 id=\"sdlqtrgb-cpp\">sdlqtrgb.cpp</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链接 SDL2 的库文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Window* sdl_win = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Renderer* sdl_render = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> SDL_Texture* sdl_texture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* rgb = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::timerEvent</span><span class=\"params\">(QTimerEvent* ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> tmp = <span class=\"number\">255</span>;</span><br><span class=\"line\">\ttmp--;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sdl_height; j++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> b = j * sdl_width * pix_size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sdl_width * pix_size; i += pix_size)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\trgb[b + i] = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// B</span></span><br><span class=\"line\">\t\t\trgb[b + i + <span class=\"number\">1</span>] = tmp;\t<span class=\"comment\">// G</span></span><br><span class=\"line\">\t\t\trgb[b + i + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// G</span></span><br><span class=\"line\">\t\t\trgb[b + i + <span class=\"number\">3</span>] = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// A</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, rgb, sdl_width * pix_size);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(sdl_render);</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\trect.w = sdl_width;</span><br><span class=\"line\">\trect.h = sdl_height;</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderCopy</span>(sdl_render, sdl_texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(sdl_render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::<span class=\"built_in\">SDLQtRGB</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取label的宽高</span></span><br><span class=\"line\">\tsdl_width = ui.label-&gt;<span class=\"built_in\">width</span>();</span><br><span class=\"line\">\tsdl_height = ui.label-&gt;<span class=\"built_in\">height</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化SDL</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 创建窗口</span></span><br><span class=\"line\">\tsdl_win = <span class=\"built_in\">SDL_CreateWindowFrom</span>((<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 创建渲染器</span></span><br><span class=\"line\">\tsdl_render = <span class=\"built_in\">SDL_CreateRenderer</span>(sdl_win, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建材质</span></span><br><span class=\"line\">\tsdl_texture = <span class=\"built_in\">SDL_CreateTexture</span>(sdl_render,</span><br><span class=\"line\">\t\tSDL_PIXELFORMAT_ARGB8888,</span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">\t\tsdl_width,</span><br><span class=\"line\">\t\tsdl_height</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\trgb = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::~<span class=\"built_in\">SDLQtRGB</span>()</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>获取label的宽高</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdl_width = ui.label-&gt;<span class=\"built_in\">width</span>();</span><br><span class=\"line\">sdl_height = ui.label-&gt;<span class=\"built_in\">height</span>();</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>初始化SDL</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SDL_Init源码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> DECLSPEC <span class=\"type\">int</span> SDLCALL <span class=\"title\">SDL_Init</span><span class=\"params\">(Uint32 flags)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回是一个int型变量，如果&lt;0，表示初始化失败</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SDL_INIT_VIDEO</span><br><span class=\"line\"><span class=\"comment\">// 为宏命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全部命令如下</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_TIMER          0x00000001u</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_AUDIO          0x00000010u</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_VIDEO          0x00000020u  <span class=\"comment\">/**&lt; SDL_INIT_VIDEO implies SDL_INIT_EVENTS */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_JOYSTICK       0x00000200u  <span class=\"comment\">/**&lt; SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_HAPTIC         0x00001000u</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_GAMECONTROLLER 0x00002000u  <span class=\"comment\">/**&lt; SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_EVENTS         0x00004000u</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_SENSOR         0x00008000u</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_NOPARACHUTE    0x00100000u  <span class=\"comment\">/**&lt; compatibility; this flag is ignored. */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SDL_INIT_EVERYTHING ( \\</span></span><br><span class=\"line\"><span class=\"meta\">                SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | \\</span></span><br><span class=\"line\"><span class=\"meta\">                SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER | SDL_INIT_SENSOR \\</span></span><br><span class=\"line\"><span class=\"meta\">            )</span></span><br></pre></td></tr></table></figure>\n<p><code>SDL_Init(SDL_INIT_VIDEO);</code> 是用于初始化 SDL 的视频子系统的函数调用。通过这个调用，SDL 会设置视频驱动、显示模式等，使得后续的图形绘制操作可以顺利进行。在开发基于 SDL 的多媒体应用时，这通常是必不可少的初始化步骤。</p>\n<hr>\n<p><strong>创建窗口</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> SDL_Window* sdl_win = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">sdl_win = <span class=\"built_in\">SDL_CreateWindowFrom</span>((<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br></pre></td></tr></table></figure>\n<p><code>SDL_Window</code>用于窗口的结构体，通常包含了有关窗口的各个消息，通常只为指针使用。</p>\n<p><code>SDL_CreateWindowFrom</code> 函数是 SDL 库中的一个函数，它允许 SDL 使用现有的窗口句柄创建一个 SDL 窗口。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> DECLSPEC SDL_Window * SDLCALL <span class=\"title\">SDL_CreateWindowFrom</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> *data)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// data：一个指向现有窗口句柄的指针。这个指针通常是从其他 GUI 库或框架中获取的窗口句柄。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值</span></span><br><span class=\"line\"><span class=\"comment\">// 一个指向 SDL_Window 结构体的指针，如果创建失败，返回 NULL。</span></span><br></pre></td></tr></table></figure>\n<p><code>ui.label-&gt;winId()</code> 是 Qt 提供的一个函数，返回一个表示窗口句柄的 <code>WId</code> 类型（通常是一个平台相关的窗口句柄，比如 HWND 在 Windows 上）。这里我们将其强制转换为 <code>void*</code> 以便 SDL 可以使用。</p>\n<p>【<strong>总结</strong>】：使用Qt的label窗口句柄，创建SDL_Window。</p>\n<hr>\n<p><strong>创建渲染器</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> SDL_Renderer* sdl_render = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">sdl_render = <span class=\"built_in\">SDL_CreateRenderer</span>(sdl_win, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br></pre></td></tr></table></figure>\n<p><code>SDL_Renderer</code> 是一个不透明的数据类型，通常只作为指针使用。它表示用于渲染的上下文，可以在其中绘制点、线、矩形、纹理等图形元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> DECLSPEC SDL_Renderer * SDLCALL <span class=\"title\">SDL_CreateRenderer</span><span class=\"params\">(SDL_Window * window,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                               <span class=\"type\">int</span> index, Uint32 flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<ul>\n<li>\n<p><strong>window</strong>：指向用于渲染的窗口 (<code>SDL_Window*</code>)。</p>\n</li>\n<li>\n<p><strong>index</strong>：指定渲染器的索引。通常设置为 <code>-1</code>，表示让 SDL 选择第一个可用的渲染器。</p>\n</li>\n<li>\n<p>flags</p>\n<p>：指定渲染器的行为，可以是以下值的组合：</p>\n<ul>\n<li><code>SDL_RENDERER_SOFTWARE</code>：使用软件渲染。</li>\n<li><code>SDL_RENDERER_ACCELERATED</code>：使用硬件加速渲染。</li>\n<li><code>SDL_RENDERER_PRESENTVSYNC</code>：与显示器的垂直刷新同步。</li>\n<li><code>SDL_RENDERER_TARGETTEXTURE</code>：支持渲染目标纹理。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>创建材质</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> SDL_Texture* sdl_texture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">sdl_texture = <span class=\"built_in\">SDL_CreateTexture</span>(sdl_render,</span><br><span class=\"line\">                                SDL_PIXELFORMAT_ARGB8888,</span><br><span class=\"line\">                                SDL_TEXTUREACCESS_STREAMING,</span><br><span class=\"line\">                                sdl_width,</span><br><span class=\"line\">                                sdl_height</span><br><span class=\"line\">                               );</span><br></pre></td></tr></table></figure>\n<p><code>SDL_Texture</code> 是 SDL 库中的一个结构体类型，用于表示纹理。纹理是指可以被渲染器处理和显示的图像数据。</p>\n<p><code>SDL_CreateTexture</code>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> DECLSPEC SDL_Renderer * SDLCALL <span class=\"title\">SDL_CreateRenderer</span><span class=\"params\">(SDL_Window * window,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                               <span class=\"type\">int</span> index, Uint32 flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<p><strong>renderer</strong>：<code>SDL_Renderer*</code> 类型，指向要在其上创建纹理的渲染器。</p>\n<p><strong>format</strong>：<code>Uint32</code> 类型，纹理的像素格式。常用的像素格式包括 <code>SDL_PIXELFORMAT_ARGB8888</code>、<code>SDL_PIXELFORMAT_RGBA8888</code> 等。</p>\n<p><strong>access</strong>：<code>int</code> 类型，纹理的访问模式。可以是以下值之一：</p>\n<ul>\n<li><code>SDL_TEXTUREACCESS_STATIC</code>：纹理的内容不会改变。</li>\n<li><code>SDL_TEXTUREACCESS_STREAMING</code>：纹理的内容会经常改变，可以通过锁定纹理来访问像素数据。</li>\n<li><code>SDL_TEXTUREACCESS_TARGET</code>：纹理可以作为渲染目标。</li>\n</ul>\n<p><strong>w</strong>：<code>int</code> 类型，纹理的宽度（以像素为单位）。</p>\n<p><strong>h</strong>：<code>int</code> 类型，纹理的高度（以像素为单位）。</p>\n<hr>\n<p><strong>表示RGB颜色</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* rgb = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">4</span>;  <span class=\"comment\">// 像素值大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">rgb = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br></pre></td></tr></table></figure>\n<p><code>unsigned char*</code> 是一个指向 <code>unsigned char</code> 类型的指针。<code>unsigned char</code> 是一种基本数据类型，表示一个无符号的 8 位整数（通常用于表示字节数据）。</p>\n<p>在图像处理和低级别数据操作中，<code>unsigned char</code> 类型经常用于表示原始字节数据，比如 RGB 颜色值。</p>\n<hr>\n<p><strong>调用QT的timerEvent槽函数（重载了的）</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">startTimer</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">startTimer</span><span class=\"params\">(<span class=\"type\">int</span> interval, Qt::TimerType timerType = Qt::CoarseTimer)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<p><strong>interval (int)</strong>：</p>\n<ul>\n<li>表示计时器的时间间隔，单位为毫秒。计时器每经过这个时间间隔就会触发一次定时器事件。</li>\n<li>例如，如果 <code>interval</code> 设置为 1000，那么计时器每隔 1 秒触发一次定时器事件。</li>\n</ul>\n<p><strong>timerType (Qt::TimerType)</strong>：</p>\n<ul>\n<li>\n<p>指定计时器的类型。这个参数是可选的，默认值为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Qt::CoarseTimer</span><br></pre></td></tr></table></figure>\n<p>。Qt 提供了几种不同的计时器类型：</p>\n<ul>\n<li><code>Qt::PreciseTimer</code>：精确的定时器，尽量确保定时器精确地按照指定的间隔时间触发。</li>\n<li><code>Qt::CoarseTimer</code>：粗略的定时器，可能会稍微不精确，但消耗的资源较少，适合大多数普通应用。</li>\n<li><code>Qt::VeryCoarseTimer</code>：非常粗略的定时器，间隔时间可能会有较大误差，消耗的资源最少，适用于对精度要求很低的场景。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>填充RGBA的值</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是将二位数组展开为一位数组进行填充</span></span><br><span class=\"line\"><span class=\"comment\">// 以下介绍按照二位数组进行介绍</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> tmp = <span class=\"number\">255</span>;</span><br><span class=\"line\">tmp--;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; sdl_height; j++)  <span class=\"comment\">// 遍历每一行</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = j * sdl_width * pix_size;  <span class=\"comment\">// 找到当前行的起始位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sdl_width * pix_size; i += pix_size)  <span class=\"comment\">// 填充这一行的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rgb[b + i] = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// B</span></span><br><span class=\"line\">        rgb[b + i + <span class=\"number\">1</span>] = tmp;\t<span class=\"comment\">// G</span></span><br><span class=\"line\">        rgb[b + i + <span class=\"number\">2</span>] = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// R</span></span><br><span class=\"line\">        rgb[b + i + <span class=\"number\">3</span>] = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// A</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">3*3的像素</span></span><br><span class=\"line\"><span class=\"comment\">BGRA BGRA BGRA</span></span><br><span class=\"line\"><span class=\"comment\">BGRA BGRA BGRA</span></span><br><span class=\"line\"><span class=\"comment\">BGRA BGRA BGRA</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>更新纹理内容</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SDL_UpdateTexture</span>(sdl_texture, <span class=\"literal\">NULL</span>, rgb, sdl_width * pix_size);</span><br></pre></td></tr></table></figure>\n<p><code>SDL_UpdateTexture</code>函数用于更新纹理的内容，即将新的像素数据上传到指定的纹理中。</p>\n<p>源码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> DECLSPEC <span class=\"type\">int</span> SDLCALL <span class=\"title\">SDL_UpdateTexture</span><span class=\"params\">(SDL_Texture * texture,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                              <span class=\"type\">const</span> SDL_Rect * rect,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                              <span class=\"type\">const</span> <span class=\"type\">void</span> *pixels, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                              <span class=\"type\">int</span> pitch)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<p><em><em>texture (SDL_Texture</em>)</em>*</p>\n<ul>\n<li>指向要更新的纹理对象。在你的代码中，这个纹理对象是 <code>sdl_texture</code>。</li>\n</ul>\n<p><em><em>rect (const SDL_Rect</em>)</em>*</p>\n<ul>\n<li>指定要更新的纹理区域。传递 <code>NULL</code> 表示更新整个纹理。</li>\n<li>在你的代码中，传递的是 <code>NULL</code>，因此整个纹理将被更新。</li>\n</ul>\n<p><em><em>pixels (const void</em>)</em>*</p>\n<ul>\n<li>指向新像素数据的指针。在你的代码中，这个指针是 <code>rgb</code>，指向包含新像素数据的内存。</li>\n</ul>\n<p><strong>pitch (int)</strong></p>\n<ul>\n<li>每行像素数据的字节数，通常是纹理的宽度乘以每像素的字节数（即像素格式的字节数）。</li>\n<li>在你的代码中，这是 <code>sdl_width * pix_size</code>，表示每行像素数据的字节数。</li>\n<li><strong>从上到下，从左到右进行纹理更新</strong></li>\n</ul>\n<hr>\n<p><strong>进行渲染</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SDL_RenderClear</span>(sdl_render);</span><br><span class=\"line\">SDL_Rect rect;</span><br><span class=\"line\">rect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">rect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">rect.w = sdl_width;</span><br><span class=\"line\">rect.h = sdl_height;</span><br><span class=\"line\"><span class=\"built_in\">SDL_RenderCopy</span>(sdl_render, sdl_texture, <span class=\"literal\">NULL</span>, &amp;rect);</span><br><span class=\"line\"><span class=\"built_in\">SDL_RenderPresent</span>(sdl_render);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>SDL_RenderClear(sdl_render)</code>：清除当前渲染目标。</p>\n</li>\n<li>\n<p><code>SDL_Rect rect</code>：定义一个矩形区域，用于指定纹理在窗口中的位置和大小。</p>\n</li>\n<li>\n<p><code>rect.x</code> 和 <code>rect.y</code>：设置矩形的左上角位置为 (0, 0)。</p>\n</li>\n<li>\n<p><code>rect.w</code> 和 <code>rect.h</code>：设置矩形的宽度和高度为纹理的宽度和高度。</p>\n</li>\n<li>\n<p><code>SDL_RenderCopy(sdl_render, sdl_texture, NULL, &amp;rect)</code>：将纹理复制到渲染目标（窗口）。</p>\n</li>\n<li>\n<p><code>SDL_RenderPresent(sdl_render)</code>：更新屏幕，显示当前渲染的内容。</p>\n</li>\n</ul>\n<p><code>SDL_RenderCopy</code>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> DECLSPEC <span class=\"type\">int</span> SDLCALL <span class=\"title\">SDL_RenderCopy</span><span class=\"params\">(SDL_Renderer * renderer,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                           SDL_Texture * texture,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                           <span class=\"type\">const</span> SDL_Rect * srcrect,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                           <span class=\"type\">const</span> SDL_Rect * dstrect)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<ol>\n<li><em><em>renderer (SDL_Renderer</em>)</em>*\n<ul>\n<li>指向渲染器的指针，用于绘制操作。在你的代码中，这是 <code>sdl_render</code>。</li>\n<li>渲染器是一个用于管理所有的绘制操作的对象，它与特定的窗口相关联。</li>\n</ul>\n</li>\n<li><em><em>texture (SDL_Texture</em>)</em>*\n<ul>\n<li>指向纹理的指针，这是要复制的图像数据。在你的代码中，这是 <code>sdl_texture</code>。</li>\n<li>纹理包含了要绘制的像素数据。</li>\n</ul>\n</li>\n<li><em><em>srcrect const SDL_Rect</em>)(源矩阵)</em>*\n<ul>\n<li>指向 <code>SDL_Rect</code> 结构的指针，用于指定从纹理的哪一部分复制。如果为 <code>NULL</code>，则表示从整个纹理复制。</li>\n<li>在你的代码中，这个参数是 <code>NULL</code>，因此整个纹理都会被复制。</li>\n</ul>\n</li>\n<li><em><em>dstrect (const SDL_Rect</em>)(目标矩阵)</em>*\n<ul>\n<li>指向 <code>SDL_Rect</code> 结构的指针，用于指定纹理复制到渲染目标的哪一部分。如果为 <code>NULL</code>，则表示纹理将被复制到整个渲染目标。</li>\n<li>在你的代码中，这是 <code>&amp;rect</code>，表示纹理将被复制到渲染目标中由 <code>rect</code> 指定的区域。</li>\n</ul>\n</li>\n</ol>\n<p><code>SDL_Rect</code> 结构体：</p>\n<p><code>SDL_Rect</code> 结构体用于定义一个矩形区域，包含以下成员：</p>\n<ul>\n<li><code>int x</code>：矩形左上角的 x 坐标。</li>\n<li><code>int y</code>：矩形左上角的 y 坐标。</li>\n<li><code>int w</code>：矩形的宽度。</li>\n<li><code>int h</code>：矩形的高度。</li>\n</ul>\n<hr>\n<h4 id=\"main-cpp-2\">main.cpp</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">    SDLQtRGB w;</span><br><span class=\"line\">    w.<span class=\"built_in\">show</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"sdlqtrgb-h\">sdlqtrgb.h</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ui_sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SDLQtRGB</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SDLQtRGB</span>(QWidget *parent = <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    ~<span class=\"built_in\">SDLQtRGB</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">timerEvent</span><span class=\"params\">(QTimerEvent* ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Ui::SDLQtRGBClass ui;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>override</code> 关键字的主要目的包括：</p>\n<ol>\n<li><strong>编译时检查</strong>：确保函数签名与基类中的虚函数匹配，防止由于拼写错误或参数类型错误导致的意外行为。</li>\n<li><strong>提高可读性</strong>：明确表明哪些函数是重写基类中的虚函数，便于代码维护和理解。</li>\n</ol>\n<h2 id=\"xvideo-view\">xvideo_view</h2>\n<h3 id=\"代码展示-2\">代码展示</h3>\n<h4 id=\"xsdl-cpp\">xsdl.cpp</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xsdl.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sdl/SDL.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib, <span class=\"string\">&quot;SDL2.lib&quot;</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">bool</span> <span class=\"title\">InitVideo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">bool</span> is_first = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> std::mutex mux;</span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mux)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!is_first) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tis_first = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设定缩放算法解决锯齿问题，线性差值算法</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_SetHint</span>(SDL_HINT_RENDER_SCALE_QUALITY, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::IsExit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSDL_Event ev;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// SDL_WaitEventTimeout函数的作用是等待事件发生，直到超时为止</span></span><br><span class=\"line\">\t<span class=\"comment\">// (接收事件, 这里表示最多等待1毫秒)</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_WaitEventTimeout</span>(&amp;ev, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// SDL_QUIT事件通常在用户请求关闭应用程序窗口时触发，例如点击窗口的关闭按钮。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ev.type == SDL_QUIT)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">XSDL::Close</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 防止内存泄漏</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture_);</span><br><span class=\"line\">\t\ttexture_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (render_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(render_);</span><br><span class=\"line\">\t\trender_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyWindow</span>(win_);</span><br><span class=\"line\">\t\twin_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tFormat fmt,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">void</span> *win_id)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (w &lt;= <span class=\"number\">0</span> || h &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化SDL 视频库</span></span><br><span class=\"line\">\t<span class=\"built_in\">InitVideo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 锁，确保线程安全</span></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twidth_ = w;</span><br><span class=\"line\">\theight_ = h;</span><br><span class=\"line\">\tfmt_ = fmt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (texture_)  <span class=\"comment\">// 由于渲染包含材质，所以要先检查</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyTexture</span>(texture_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (render_)</span><br><span class=\"line\">\t\t<span class=\"built_in\">SDL_DestroyRenderer</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//////// 1. 创建窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (win_id)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 渲染到现有窗口</span></span><br><span class=\"line\">\t\t\twin_ = <span class=\"built_in\">SDL_CreateWindowFrom</span>(win_id);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 新建窗口</span></span><br><span class=\"line\">\t\t\twin_ = <span class=\"built_in\">SDL_CreateWindow</span>(<span class=\"string\">&quot;Video&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">\t\t\t\tw, h, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED  表示由系统决定</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE  窗口支持OpenGL渲染和用户可以拖动窗口边框来改变尺寸</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!win_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//////// 2. 创建渲染器</span></span><br><span class=\"line\">\trender_ = <span class=\"built_in\">SDL_CreateRenderer</span>(win_, <span class=\"number\">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!render_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//////// 3. 创建材质</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> sdl_fmt = SDL_PIXELFORMAT_RGBA8888;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (fmt_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_IYUV;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">\t\tsdl_fmt = SDL_PIXELFORMAT_ARGB32;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\ttexture_ = <span class=\"built_in\">SDL_CreateTexture</span>(render_,</span><br><span class=\"line\">\t\tsdl_fmt,\t\t\t\t\t\t<span class=\"comment\">// 像素格式</span></span><br><span class=\"line\">\t\tSDL_TEXTUREACCESS_STREAMING,\t<span class=\"comment\">// 频繁修改的渲染（带锁，但是用不到，内部以及有锁了）</span></span><br><span class=\"line\">\t\tw, h\t\t\t\t\t\t\t<span class=\"comment\">// 材质大小</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cerr &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">XSDL::Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">int</span> linesize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mtx_)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果任何一个资源未初始化或者宽度和高度小于等于0，则返回false。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!texture_ || !render_ || !win_ || width_ &lt;= <span class=\"number\">0</span> || height_ &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (linesize &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (fmt_)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::RGBA:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::YUV420P:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每个像素占用的内存布局较为复杂，通常宽度直接决定了linesize。</span></span><br><span class=\"line\">\t\t\tlinesize = width_;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> XVideoView::ARGB:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每个像素由4个字节组成，分别对应A、R、G和B四个通道。</span></span><br><span class=\"line\">\t\t\tlinesize = width_ * <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (linesize &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 复制内存到显存</span></span><br><span class=\"line\"><span class=\"comment\">\t源码：</span></span><br><span class=\"line\"><span class=\"comment\">\textern DECLSPEC int SDLCALL SDL_UpdateTexture(SDL_Texture * texture,</span></span><br><span class=\"line\"><span class=\"comment\">                                              const SDL_Rect * rect,</span></span><br><span class=\"line\"><span class=\"comment\">                                              const void *pixels, </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\t\t  int pitch);</span></span><br><span class=\"line\"><span class=\"comment\">\t*SDL_Texture texture:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t指向要更新的纹理对象的指针。</span></span><br><span class=\"line\"><span class=\"comment\">\t</span></span><br><span class=\"line\"><span class=\"comment\">\t*const SDL_Rect rect:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t指向 SDL_Rect 结构体的指针，定义了要更新的纹理区域。如果传入 NULL，则更新整个纹理。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*const void pixels:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t指向包含新像素数据的内存区域的指针。数据格式必须与创建纹理时指定的格式相匹配。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\tint pitch:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t每一行像素数据的字节数。这通常是图像宽度乘以每个像素的字节数。例如，对于 ARGB 格式的图像，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t如果宽度是 width_，那么 pitch 就是 width_ * 4。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> re = <span class=\"built_in\">SDL_UpdateTexture</span>(texture_, <span class=\"literal\">NULL</span>, data, linesize);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清空屏幕</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderClear</span>(render_);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 材质复制到渲染器</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &lt;= <span class=\"number\">0</span>) scale_w_ = width_;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_h_ &lt;= <span class=\"number\">0</span>) scale_h_ = height_;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSDL_Rect rect;</span><br><span class=\"line\">\tSDL_Rect *prect = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (scale_w_ &gt; <span class=\"number\">0</span>)  <span class=\"comment\">// 用户手动设置缩放</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\trect.x = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.y = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\trect.h = scale_h_;  <span class=\"comment\">// 渲染的宽高，可缩放</span></span><br><span class=\"line\">\t\trect.w = scale_w_;</span><br><span class=\"line\">\t\tprect = &amp;rect;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tre = <span class=\"built_in\">SDL_RenderCopy</span>(render_, texture_, <span class=\"literal\">NULL</span>, prect);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (re != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_RenderPresent</span>(render_);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">bool</span> <span class=\"title\">InitVideo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">bool</span> is_first = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"type\">static</span> std::mutex mux;</span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">sdl_lock</span><span class=\"params\">(mux)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!is_first) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tis_first = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">SDL_Init</span>(SDL_INIT_VIDEO))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"built_in\">SDL_GetError</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 设定缩放算法解决锯齿问题，线性差值算法</span></span><br><span class=\"line\">\t<span class=\"built_in\">SDL_SetHint</span>(SDL_HINT_RENDER_SCALE_QUALITY, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"xsdl-h\">xsdl.h</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SDL_Window</span>;  <span class=\"comment\">// 能够使用SDL_WINDOW指针</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SDL_Renderer</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SDL_Texture</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XSDL</span> :<span class=\"keyword\">public</span> XVideoView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Close</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化渲染窗口 《线程安全》</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para w 窗口宽度</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para h 窗口高度</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para fmt 绘制的像素格式</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para win_id 窗口距离，如果为空，就创建新窗口</span></span><br><span class=\"line\">\t<span class=\"comment\">// @return 是否创建成功</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tFormat fmt = RGBA,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">void</span> *win_id = <span class=\"literal\">nullptr</span>)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 渲染图像 《线程安全》</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para data  渲染的二进制数据</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para linesize 一行数据的字节数，对于YUV420P就是Y一行字节数</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果linesize &lt;= 0 就根据宽度和像素格式自动算出大小</span></span><br><span class=\"line\">\t<span class=\"comment\">// @return 渲染是否成功</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">int</span> linesize = <span class=\"number\">0</span>)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsExit</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tSDL_Window *win_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tSDL_Renderer *render_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tSDL_Texture *texture_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"xvideo-view-cpp\">xvideo_view.cpp</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xsdl.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">XVideoView* <span class=\"title\">XVideoView::Create</span><span class=\"params\">(RenderType type)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> XVideoView::SDL:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">XSDL</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"xvideo-view-h\">xvideo_view.h</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> XVIDEO_VIEW_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> XVIDEO_VIEW_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t视频渲染接口类</span></span><br><span class=\"line\"><span class=\"comment\">\t隐藏SDL实现</span></span><br><span class=\"line\"><span class=\"comment\">\t渲染方案可替代</span></span><br><span class=\"line\"><span class=\"comment\">\t线程安全</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XVideoView</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> <span class=\"title class_\">Format</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tRGBA = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\tYUV420P,</span><br><span class=\"line\">\t\tARGB</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">enum</span> <span class=\"title class_\">RenderType</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tSDL = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> XVideoView* <span class=\"title\">Create</span><span class=\"params\">(RenderType type=SDL)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化渲染窗口 《线程安全，可多次调用》</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para w 窗口宽度</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para h 窗口高度</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para fmt 绘制的像素格式</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para win_id 窗口距离，如果为空，就创建新窗口</span></span><br><span class=\"line\">\t<span class=\"comment\">// @return 是否创建成功</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\tFormat fmt = RGBA,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t<span class=\"type\">void</span> *win_id = <span class=\"literal\">nullptr</span>)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 渲染图像 《线程安全》</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para data  渲染的二进制数据</span></span><br><span class=\"line\">\t<span class=\"comment\">// @para linesize 一行数据的字节数，对于YUV420P就是Y一行字节数</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果linesize &lt;= 0 就根据宽度和像素格式自动算出大小</span></span><br><span class=\"line\">\t<span class=\"comment\">// @return 渲染是否成功</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">Draw</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* data, <span class=\"type\">int</span> linesize = <span class=\"number\">0</span>)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 清理所有申请的资源，包括关闭窗口</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Close</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理窗口退出事件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">bool</span> <span class=\"title\">IsExit</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示缩放</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Scale</span><span class=\"params\">(<span class=\"type\">int</span> w, <span class=\"type\">int</span> h)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tscale_w_ = w;</span><br><span class=\"line\">\t\tscale_h_ = h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> width_ = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// 材质宽度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> height_ = <span class=\"number\">0</span>;\t<span class=\"comment\">// 材质高度</span></span><br><span class=\"line\">\tFormat fmt_ = RGBA;  <span class=\"comment\">// 像素格式</span></span><br><span class=\"line\">\tstd::mutex mtx_;\t<span class=\"comment\">// 确保线程安全</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> scale_w_ = <span class=\"number\">0</span>;  <span class=\"comment\">// 显示大小</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> scale_h_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"sdlqtvideo-cpp\">sdlqtvideo.cpp</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMessageBox&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;xvideo_view.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_width = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> sdl_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>* yuv = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> pix_size = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> std::ifstream yuv_file;</span><br><span class=\"line\"><span class=\"type\">static</span> XVideoView *view = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::timerEvent</span><span class=\"params\">(QTimerEvent* ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">read</span>((<span class=\"type\">char</span>*)yuv, sdl_width * sdl_height * <span class=\"number\">1.5</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (view-&gt;<span class=\"built_in\">IsExit</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tview-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Draw</span>(yuv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::<span class=\"built_in\">SDLQtRGB</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 打开yuv文件</span></span><br><span class=\"line\">\tyuv_file.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;400_300_25.yuv&quot;</span>, std::ios::binary);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!yuv_file)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tQMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;open yuv failed!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ui.<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsdl_width = <span class=\"number\">400</span>;</span><br><span class=\"line\">\tsdl_height = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height); <span class=\"comment\">// 调整主窗口的尺寸</span></span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(sdl_width, sdl_height);</span><br><span class=\"line\">\tview = XVideoView::<span class=\"built_in\">Create</span>();</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Init</span>(sdl_width, sdl_height,</span><br><span class=\"line\">\t\tXVideoView::YUV420P);</span><br><span class=\"line\"></span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Close</span>();</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Init</span>(sdl_width, sdl_height,</span><br><span class=\"line\">\t\tXVideoView::YUV420P, (<span class=\"type\">void</span>*)ui.label-&gt;<span class=\"built_in\">winId</span>());</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tyuv = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[sdl_width * sdl_height * pix_size];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">startTimer</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SDLQtRGB::resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">resize</span>(<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\tui.label-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tview-&gt;<span class=\"built_in\">Scale</span>(<span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SDLQtRGB::~<span class=\"built_in\">SDLQtRGB</span>()</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"sdlqtvideo-h\">sdlqtvideo.h</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ui_sdlqtrgb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SDLQtRGB</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SDLQtRGB</span>(QWidget *parent = <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    ~<span class=\"built_in\">SDLQtRGB</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">timerEvent</span><span class=\"params\">(QTimerEvent* ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resizeEvent</span><span class=\"params\">(QResizeEvent *ev)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Ui::SDLQtRGBClass ui;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"Qt","url":"http://example.com/2024/04/08/Qt/","content":"<h2 id=\"第一章：认识Qt\">第一章：认识Qt</h2>\n<h3 id=\"如何添加第三方库\">如何添加第三方库</h3>\n<ol>\n<li>Qt Creater在pro文件下进行添加</li>\n<li>Vs2019在右键属性Qt设置里添加</li>\n</ol>\n<h3 id=\"QMake与CMake\">QMake与CMake</h3>\n<p><strong>qmake</strong>：<strong>qt独有的代码</strong>构建工具</p>\n<p><strong>cmake</strong>：<strong>C++通用</strong>的代码构建工具，绝大部分C++开源项目都是使用cmake管理代码，如<code>obs</code>，<code>jsoncpp</code></p>\n<p><strong>总结：</strong></p>\n<ol>\n<li>如果你主要在开发Qt应用程序，尤其是当你<strong>不需要复杂</strong>的自定义构建逻辑时，QMake可能是更简单直接的选择。</li>\n<li>如果你的项目<strong>需要跨平台支持</strong>，或者你需要一种更灵活、功能更强大的构建系统，CMake可能是更好的选择。</li>\n</ol>\n<h3 id=\"Qt的三个窗口\">Qt的三个窗口</h3>\n<ol>\n<li><strong>QMainWindow</strong>：是Qt提供的一个<strong>主窗口类</strong>，它为应用程序提供了一个带有菜单栏、工具栏、状态栏、和可选的停靠窗口（dock widgets）和中心窗口的主窗口。适合做<strong>应用程序的主界面</strong>。</li>\n<li><strong>QWidget</strong>：是所有<strong>用户界面对象的基类</strong>。它可以作为一个独立的窗口或者是其他窗口（如<code>QMainWindow</code>、<code>QDialog</code>）中的一个组件使用。它通常被用来创建应用程序中的<strong>简单窗口</strong>或作为<strong>组合较复杂控件</strong>的基础。</li>\n<li><strong>QDialog</strong>：是用于<strong>创建对话框的基类</strong>。通常用于<strong>短暂的交互</strong>，如收集用户输入、显示信息、询问用户决策等。</li>\n</ol>\n<h3 id=\"一些控件的介绍\">一些控件的介绍</h3>\n<h4 id=\"QLabel\">QLabel</h4>\n<ul>\n<li><strong>设置文本</strong>：<code>void setText(const QString &amp;);</code></li>\n<li><strong>获取文本</strong>：<code>QString text() const;</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个不需要UI的Widget</span></span><br><span class=\"line\"><span class=\"comment\">// 在widget.cpp中进行代码编写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;widget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QLabel&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QVBoxLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Widget::<span class=\"built_in\">Widget</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建布局</span></span><br><span class=\"line\">    QVBoxLayout *layout = <span class=\"keyword\">new</span> <span class=\"built_in\">QVBoxLayout</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QLabel *label = <span class=\"keyword\">new</span> <span class=\"built_in\">QLabel</span>();</span><br><span class=\"line\">    label-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;this is jasonqian&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// void addWidget(QWidget *, int stretch = 0, Qt::Alignment alignment = Qt::Alignment());</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要传入QWidget，由于QLabel继承于QFrame，而QFrame继承于QWidget因此可以加入布局中</span></span><br><span class=\"line\">    layout-&gt;<span class=\"built_in\">addWidget</span>(label);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取文本</span></span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; label-&gt;<span class=\"built_in\">text</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget::~<span class=\"built_in\">Widget</span>() &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>设置图片：</strong><code>void setPixmap(const Pixmap &amp;);</code></li>\n</ul>\n<p>如何传入<code>Pixmap</code>的参数？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> QString <span class=\"title\">getOpenFileName</span><span class=\"params\">(QWidget *parent = <span class=\"literal\">nullptr</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">const</span> QString &amp;caption = QString(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">const</span> QString &amp;dir = QString(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   <span class=\"type\">const</span> QString &amp;filter = QString(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   QString *selectedFilter = <span class=\"literal\">nullptr</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                   Options options = Options())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">参数说明：</span><br><span class=\"line\">    parent: 父窗口，一般填写<span class=\"keyword\">this</span></span><br><span class=\"line\">    caption: 打开窗口的标题</span><br><span class=\"line\">    dir: 打开的目录</span><br><span class=\"line\">    filter: 文件类型过滤器，例如*.txt, *.mp4, *.json</span><br><span class=\"line\"></span><br><span class=\"line\">样例展示：</span><br><span class=\"line\">    QString fileName = QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;请选择图片&quot;</span>, <span class=\"string\">&quot;C:/&quot;</span>, <span class=\"string\">&quot;图片(*.png *.jpg);;&quot;</span>);</span><br><span class=\"line\">\t注意：</span><br><span class=\"line\">        <span class=\"string\">&quot;;;&quot;</span>：这部分是两个分号，用于指示过滤器字符串的结束。即使在这个例子中，它是多余的，因为只有一个过滤器，但它是必需的，以便告诉<span class=\"built_in\">getOpenFileName</span>()函数没有更多的过滤器了。</span><br></pre></td></tr></table></figure>\n<p><strong>代码展示</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QVBoxLayout *layout = <span class=\"keyword\">new</span> <span class=\"built_in\">QVBoxLayout</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">QString fileName = QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;请选择图片&quot;</span>, <span class=\"string\">&quot;C:/&quot;</span>, <span class=\"string\">&quot;图片(*.png *.jpg);;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">QLabel *label = <span class=\"keyword\">new</span> <span class=\"built_in\">QLabel</span>();</span><br><span class=\"line\">label-&gt;<span class=\"built_in\">setPixmap</span>(fileName);</span><br><span class=\"line\"></span><br><span class=\"line\">layout-&gt;<span class=\"built_in\">addWidget</span>(label);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取文本</span></span><br><span class=\"line\"><span class=\"built_in\">qDebug</span>() &lt;&lt; label-&gt;<span class=\"built_in\">text</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"QLineEdit\">QLineEdit</h4>\n<ul>\n<li><strong>设置文本</strong>：<code>void setText(const QString &amp;);</code></li>\n<li><strong>获取文本</strong>：<code>QString text() const;</code></li>\n</ul>\n<h4 id=\"QPushButton\">QPushButton</h4>\n<ul>\n<li><strong>设置文本</strong>：<code>void setText(const QString &amp;);</code></li>\n<li><strong>获取文本</strong>：<code>QString text() const;</code></li>\n</ul>\n<h3 id=\"按钮点击QPushButton信号槽\">按钮点击QPushButton信号槽</h3>\n<ul>\n<li><strong>主要信号</strong>：<code>void clicked(bool checked = false);</code></li>\n<li><strong>使用方法</strong>：<code>connect(按钮对象指针, &amp;QPushButton::clicked, this, &amp;界面类::槽函数)</code></li>\n<li><strong>槽函数常用写法</strong>：<code>void on_空间名字_clicked();</code></li>\n</ul>\n<p>槽函数需要在头文件<code>.h</code>中写</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> WIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIDGET_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Widget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span> slots:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">on_btn_clicked</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure>\n<p><code>widget.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;widget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QVBoxLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Widget::<span class=\"built_in\">Widget</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建布局</span></span><br><span class=\"line\">    QVBoxLayout *layout = <span class=\"keyword\">new</span> <span class=\"built_in\">QVBoxLayout</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QPushButton *btn = <span class=\"keyword\">new</span> <span class=\"built_in\">QPushButton</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    btn-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;jasonqian&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    layout-&gt;<span class=\"built_in\">addWidget</span>(btn);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 进行连接</span></span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(btn, &amp;QPushButton::clicked, <span class=\"keyword\">this</span>, &amp;Widget::on_btn_clicked);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget::~<span class=\"built_in\">Widget</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现槽函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Widget::on_btn_clicked</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;jasonqian&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"AcWing Web课","url":"http://example.com/2023/01/14/AcWing-Web课/","content":"<h1>html基础标签</h1>\n<p>有疑问查询MDN：<a href=\"https://developer.mozilla.org/zh-CN/\">https://developer.mozilla.org/zh-CN/</a></p>\n<h2 id=\"html文件结构\">html文件结构</h2>\n<p><strong>文档结构</strong></p>\n<p>html的所有标签为<strong>树形</strong>结构，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web应用课<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>第一讲<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;html&gt;&lt;/html&gt;</code>：类似于根节点。</p>\n<p><code>&lt;body&gt;&lt;/body&gt;、&lt;title&gt;&lt;/title&gt;</code>：类似于叶节点，而它们都是兄弟节点。</p>\n<hr>\n<p><code>&lt;html&gt;</code>标签<br>\nHTML <code>&lt;html&gt;</code> 元素 表示一个 HTML 文档的根（顶级元素），所以它也被称为根元素。所有其他元素必须是此元素的后代。</p>\n<hr>\n<p><code>&lt;head&gt;</code>标签<br>\nHTML head 元素 规定文档相关的配置信息（元数据），包括文档的标题，引用的文档样式和脚本等。</p>\n<hr>\n<p><code>&lt;body&gt;</code>标签<br>\nHTML body 元素表示文档的内容。document.body 属性提供了可以轻松访问文档的 body 元素的脚本。</p>\n<hr>\n<p><code>&lt;meta&gt;</code><br>\nHTML <code>&lt;meta&gt; </code>元素表示那些不能由其它 HTML 元相关（meta-related）元素（(<code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>、<code>&lt;style&gt;</code> 或 <code>&lt;title&gt;</code>）之一表示的任何元数据信息。</p>\n<p>常见属性：</p>\n<ul>\n<li><code>charset</code>：这个属性声明了文档的字符编码。如果使用了这个属性，其值必须是与 ASCII 大小写无关（ASCII case-insensitive）的”utf-8”。</li>\n<li><code>name</code>：name 和 content 属性可以一起使用，以名 - 值对的方式给文档提供元数据，其中 name 作为元数据的名称，content 作为元数据的值。</li>\n</ul>\n<hr>\n<p><code>icon</code></p>\n<p>网站图标。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;images/icon.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>&lt;!-- 多行注释 --&gt;</code><br>\n示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--   </span></span><br><span class=\"line\"><span class=\"comment\">        这里的内容均为注释</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;h1&gt;第一讲&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            段落。</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文本标签\">文本标签</h2>\n<p>文本标签虽然很多，但大部分可看成是预定好样式的<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>。</p>\n<p><code>&lt;div&gt;</code>标签<br>\n<code>&lt;div&gt;</code>元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，在不使用CSS的情况下，其对内容或布局没有任何影响。<br>\n其他块级标签例如：<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;table&gt;</code>。</p>\n<hr>\n<p><code>&lt;span&gt;</code>标签<br>\n<code>&lt;span&gt;</code> 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者 Id 属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。<code>&lt;span&gt;</code> 与 <code>&lt;div&gt;</code> 元素很相似，但 <code>&lt;div&gt;</code> 是一个 块元素 而 <code>&lt;span&gt;</code> 则是 行内元素<br>\n其他内联标签例如：<code>&lt;i&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;del&gt;</code>, <code>&lt;ins&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>。</p>\n<hr>\n<p><code>&lt;h1&gt; - &lt;h6&gt;</code>标签<br>\nHTML<code> &lt;h1&gt;–&lt;h6&gt;</code> 标题 (Heading) 元素呈现了六个不同的级别的标题，<code>&lt;h1&gt;</code> 级别最高，而 <code>&lt;h6&gt;</code> 级别最低。</p>\n<hr>\n<p><code>&lt;p&gt;</code>标签<br>\nHTML <code>&lt;p&gt;</code>元素（或者说 HTML 段落元素）表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，<code>&lt;p&gt;</code> 是块级元素。</p>\n<hr>\n<p><code>&lt;pre&gt;</code>标签<br>\nHTML <code>&lt;pre&gt;</code> 元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在 <code>&lt;pre&gt;</code> 开始标签后的换行符也会被省略)</p>\n<hr>\n<p><code>&lt;br&gt;</code>标签<br>\nHTML <code>&lt;br&gt;</code> 元素在文本中生成一个换行（回车）符号。此元素在写诗和地址时很有用，这些地方的换行都非常重要。</p>\n<hr>\n<p><code>&lt;hr&gt;</code>标签<br>\nHTML <code>&lt;hr&gt;</code> 元素表示段落级元素之间的主题转换（例如，一个故事中的场景的改变，或一个章节的主题的改变），类似于MarkDown中的<code>---</code></p>\n<p>在 HTML 的早期版本中，它是一个水平线。现在它仍能在可视化浏览器中表现为水平线，但目前被定义为语义上的，而不是表现层面上。所以如果想画一条横线，请使用适当的 css 样式来修饰。</p>\n<hr>\n<p><code>&lt;i&gt;</code>标签<br>\nHTML 元素 <code>&lt;i&gt;</code> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。</p>\n<hr>\n<p><code>&lt;b&gt;</code>标签<br>\nHTML 提醒注意（Bring Attention To）元素（<code>&lt;b&gt;</code>）加粗。但是最好还是应将 <code>&lt;b&gt;</code> 元素用于显示粗体文字；<strong>替代方案</strong>是使用 CSS font-weight 属性来创建粗体文字。</p>\n<hr>\n<p><code>&lt;del&gt;</code>标签<br>\nHTML 的<code>&lt;del&gt;</code>标签表示一些被从文档中删除的文字内容。<strong>删除线标签</strong>。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。<code>&lt;ins&gt;</code>标签的作用恰恰于此相反：表示文档中添加的内容。</p>\n<hr>\n<p><code>&lt;ins&gt;</code>标签<br>\nHTML <code>&lt;ins&gt;</code> 元素定义已经被插入文档中的文本，类似于下划线标签。</p>\n<h2 id=\"图片\">图片</h2>\n<p>HTML <code>&lt;img&gt;</code> 元素将一份图像嵌入文档。<br>\n默认为行内元素，即<code>display: inline</code>。</p>\n<p><code>src</code><strong>属性</strong><br>\n该属性是<strong>必须的</strong>，它包含了你想嵌入的图片的文件路径。</p>\n<p><code>alt</code><strong>属性</strong><br>\n该属性包含一条对图像的文本描述，这不是强制性的，但对可访问性而言，它难以置信地有用——屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义。如果由于某种原因无法加载图像，普通浏览器也会在页面上显示alt 属性中的备用文本：例如，网络错误、内容被屏蔽或链接过期时。</p>\n<p><code>height</code><strong>属性</strong><br>\n图像的高度，在 HTML5 中的单位是 CSS 像素，在 HTML 4 中既可以是像素，也可以是百分比。<strong>可以只指定 width 和 height 中的一个值，浏览器会根据原始图像进行缩放</strong>。</p>\n<p><code>width</code><strong>属性</strong><br>\n图像的宽度，在 HTML5 中单位是 CSS 像素， 在 HTML 4 中可以是像素也可以是百分比。</p>\n<h2 id=\"音频与视频\">音频与视频</h2>\n<p><code>&lt;audio&gt;</code>标签<br>\nHTML <code>&lt;audio&gt;</code> 元素用于在文档中嵌入音频内容。 <code>&lt;audio&gt;</code> 元素可以包含一个或多个音频资源， 这些音频资源可以使用 src 属性或者<code>&lt;source&gt;</code> 元素来进行描述：浏览器将会选择最合适的一个来使用。也可以使用 MediaStream 将这个元素用于流式媒体。</p>\n<ul>\n<li>使用src属性播放<br>\n示例：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">controls</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">&quot;/audios/bgm.mp3&quot;</span>&gt;</span></span><br><span class=\"line\">        Your browser does not support the</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>audio<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span> element.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;audio&gt;</code> 与多个 <code>&lt;source&gt;</code> 元素</li>\n</ul>\n<p>这个例子包含了多个 <code>&lt;source&gt;</code> 元素。如果能够播放的话，浏览器就会试图去<strong>加载第一个</strong> source 元素；如果不行，那就退而求其次去加载第二个。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">controls</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/audios/sound1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/audios/sound2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;video&gt;</code>标签<br>\nHTML <code>&lt;video&gt;</code> 元素 用于在 HTML 或者 XHTML 文档中嵌入媒体播放器，用于支持文档内的视频播放。你也可以将 <code>&lt;video&gt;</code> 标签用于音频内容，但是 <code>&lt;audio&gt;</code> 元素可能在用户体验上更合适。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;800&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/videos/video1.mp4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/videos/video2.mp4&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Sorry, your browser doesn&#x27;t support embedded videos.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"超链接\">超链接</h2>\n<p>HTML <code>&lt;a&gt;</code> 元素（或称锚元素）可以通过它的 href 属性创建通向其他网页、文件、同一页面内的位置、电子邮件地址或任何其他 URL 的超链接。<code>&lt;a&gt;</code> 中的内容应该指明链接的意图。如果存在 href 属性，当 <code>&lt;a&gt;</code> 元素聚焦时按下回车键就会激活它。</p>\n<p><strong>常用选项</strong></p>\n<ul>\n<li>点击链接打开<strong>新标签页面</strong>时加入属性：<code>target=&quot;_blank&quot;</code></li>\n</ul>\n<h2 id=\"表单\">表单</h2>\n<p><code>&lt;form&gt;</code>标签<br>\nHTML <code>&lt;form&gt;</code> 元素表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。</p>\n<hr>\n<p><code>&lt;input&gt;</code>标签<br>\nHTML <input>用来填写内容，常见类型有：</p>\n<ul>\n<li><code>&lt;input type=&quot;text&quot;&gt;</code>：创建基础的单行文本框。<br>\n<code>&lt;input type=&quot;number&quot;&gt;</code>：用于让用户输入一个数字。其包括内置验证以拒绝非数字输入。浏览器可能会选择提供步进箭头，让用户可以使用鼠标增加和减少输入的值，或者只需用指尖敲击即可。</li>\n<li><code>&lt;input type=&quot;email&quot;&gt;</code>：带有 “email” (电子邮箱) 类型标记的输入框元素 (<input>) 能够让用户输入或编辑一个电子邮箱地址，此外，如果指定了multiple属性，用户还可以输入多个电子邮箱地址。在表单提交前，输入框会自动验证输入值是否是一个或多个合法的电子邮箱地址 (非空值且符合电子邮箱地址格式). CSS 伪标签 :valid 和 :invalid 能够在校验后自动应用。</li>\n<li><code>&lt;input type=&quot;password&quot;&gt;</code>：<code>&lt;input&gt;</code> 元素 里有一种叫做 “password” 的值，给我们一个方法让用户更加安全的输入密码。这个元素是作为一行纯文本编辑器控件呈现的，其中文本被遮蔽以致于无法读取，通常通过用诸如星号（“*”）或点（“•”）等符号替换每个字符来实现。这个符号会根据用户的浏览器和操作系统来具体显示哪个。</li>\n<li><code>&lt;input type=&quot;radio&quot;&gt;</code>：<code>&lt;input&gt;</code> 的 radio 类型元素默认渲染为小型圆圈图表，填充即为激活，类似于之前描述额复选框（checkbox）类型。单选按钮允许你选择单一的值来提交表单。</li>\n</ul>\n<p>常用属性有：</p>\n<ul>\n<li><code>name</code>: 名称</li>\n<li><code>id</code>: 唯一ID</li>\n<li><code>maxlength</code>：最大长度</li>\n<li><code>minlength</code>：最小长度</li>\n<li><code>required</code>：是否必填</li>\n<li><code>placeholder</code>：当表单控件为空时，控件中显示的内容</li>\n</ul>\n<hr>\n<p><code>&lt;textarea&gt;</code>标签<br>\nHTML <code>&lt;textarea&gt;</code> 元素表示一个多行纯文本编辑控件，当你希望用户输入一段相当长的、不限格式的文本，例如评论或反馈表单中的一段意见时，这很有用。</p>\n<hr>\n<p><code>&lt;select&gt;</code>与<code>&lt;option&gt;</code>标签<br>\nHTML <code>&lt;select&gt;</code> 元素表示一个提供选项菜单的控件。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;pet-select&quot;</span>&gt;</span>Choose a pet:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pets&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pet-select&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>--Please choose an option--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;dog&quot;</span>&gt;</span>Dog<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;cat&quot;</span>&gt;</span>Cat<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hamster&quot;</span>&gt;</span>Hamster<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;parrot&quot;</span>&gt;</span>Parrot<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spider&quot;</span>&gt;</span>Spider<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;goldfish&quot;</span>&gt;</span>Goldfish<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>&lt;button&gt;</code>标签<br>\nHTML <code>&lt;button&gt;</code> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。 默认情况下，HTML 按钮的显示样式接近于 user agent 所在的宿主系统平台（用户操作系统）的按钮， 但你可以使用 CSS 来改变按钮的样貌。</p>\n<h2 id=\"列表\">列表</h2>\n<p><code>&lt;ul&gt;</code>与<code>&lt;li&gt;</code>标签<br>\nHTML <code>&lt;ul&gt;</code> 元素（或称 HTML 无序列表元素）表示一个内可含多个元素的无序列表或项目符号列表。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>first item<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>second item<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>third item<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301111606527.png\" alt=\"image-20230111160617454\"></p>\n<hr>\n<p><code>&lt;ol&gt;</code>与<code>&lt;li&gt;</code>标签<br>\nHTML <code>&lt;ol&gt;</code> 元素表示有序列表，通常渲染为一个带编号的列表。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fee<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fi<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fo<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Fum<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301111606251.png\" alt=\"image-20230111160647859\"></p>\n<hr>\n<p><code>&lt;dl&gt;</code>、<code>&lt;dt&gt;</code>与<code>&lt;dd&gt;</code>标签<br>\nHTML <code>&lt;dl&gt;</code> 元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键 - 值对列表)。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Godzilla<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Born<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>1952<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Birthplace<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Japan<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>Color<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Green<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>Orange<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301111607458.png\" alt=\"image-20230111160730769\"></p>\n<h2 id=\"表格\">表格</h2>\n<p><code>&lt;table&gt;</code>标签<br>\nHTML的 table 元素表示表格数据 — 即通过二维数据表表示的信息。</p>\n<hr>\n<p><code>&lt;thead&gt;</code>标签<br>\nHTML的<code>&lt;thead&gt;</code>元素定义了一组定义表格的列头的行。</p>\n<hr>\n<p><code>&lt;tbody&gt;</code>标签<br>\nHTML的<code>&lt;tbody&gt;</code>元素定义一组数据行。</p>\n<hr>\n<p><code>&lt;tr&gt;</code>标签<br>\nHTML<code>&lt;tr&gt;</code> 元素定义表格中的行。 同一行可同时出现<code>&lt;td&gt;</code> 和<code>&lt;th&gt;</code> 元素。</p>\n<hr>\n<p><code>&lt;th&gt;</code>标签<br>\nHTML <code>&lt;th&gt;</code>元素定义表格内的表头单元格。</p>\n<hr>\n<p><code>&lt;td&gt;</code>标签<br>\nHTML <code>&lt;td&gt;</code> 元素 定义了一个包含数据的表格单元格。</p>\n<hr>\n<p><code>&lt;caption&gt;</code>标签<br>\nHTML <code>&lt;caption&gt;</code> 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 <code>&lt;table&gt;</code> 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被 CSS 样式化，所以，它同样可以出现在相对于表格的任意位置。</p>\n<p>示例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>My Table<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>The table header<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>The table body<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>with two columns<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301111610043.png\" alt=\"image-20230111161006861\"></p>\n<h2 id=\"语义标签\">语义标签</h2>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301111611977.gif\" alt=\"1_ecfee0ac9a-img_sem_elements\"></p>\n<p><code>&lt;header&gt;</code><br>\nHTML <header> 元素用于展示介绍性内容，通常包含一组介绍性的或是辅助导航的实用元素。它可能包含一些标题元素，但也可能包含其他元素，比如 Logo、搜索框、作者名称，等等。</p>\n<hr>\n<p><code>&lt;nav&gt;</code><br>\nHTML <nav>元素表示页面的一部分，其目的是在当前文档或其他文档中提供导航链接。导航部分的常见示例是菜单，目录和索引。</p>\n<hr>\n<p><code>&lt;section&gt;</code><br>\nHTML <section>元素表示一个包含在 HTML 文档中的独立部分，它没有更具体的语义元素来表示，一般来说会有包含一个标题。</p>\n<hr>\n<p><code>&lt;figure&gt;</code><br>\nHTML <code>&lt;figure&gt;</code> 元素代表一段独立的内容，经常与说明（caption）<code>&lt;figcaption&gt;</code> 配合使用，并且作为一个独立的引用单元。当它属于主内容流（main flow）时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。</p>\n<hr>\n<p><code>&lt;figcaption&gt;</code><br>\nHTML <code>&lt;figcaption&gt;</code> 元素 是与其相关联的图片的说明/标题，用于描述其父节点<code>&lt;figure&gt;</code> 元素里的其他数据。这意味着 <code>&lt;figcaption&gt;</code> 在<code>&lt;figure&gt;</code> 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。</p>\n<hr>\n<p><code>&lt;article&gt;</code><br>\nHTML <code>&lt;article&gt;</code>元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</p>\n<hr>\n<p><code>&lt;aside&gt;</code><br>\nHTML <code>&lt;aside&gt;</code> 元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者标注框（call-out boxes）。</p>\n<hr>\n<p><code>&lt;footer&gt;</code><br>\nHTML <code>&lt;footer&gt;</code> 元素表示最近一个章节内容或者根节点（sectioning root ）元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。</p>\n<h2 id=\"特殊符号\">特殊符号</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">HTML源代码</th>\n<th style=\"text-align:center\">显示结果</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&amp;lt;</code></td>\n<td style=\"text-align:center\">&lt;</td>\n<td>小于号或显示标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;gt;</code></td>\n<td style=\"text-align:center\">&gt;</td>\n<td>大于号或显示标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;amp;</code></td>\n<td style=\"text-align:center\">&amp;</td>\n<td>可用于显示其它特殊字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;quot;</code></td>\n<td style=\"text-align:center\">&quot;</td>\n<td>引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;reg;</code></td>\n<td style=\"text-align:center\">®</td>\n<td>已注册</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;copy;</code></td>\n<td style=\"text-align:center\">©</td>\n<td>版权</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;trade;</code></td>\n<td style=\"text-align:center\">™</td>\n<td>商标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;nbsp;</code></td>\n<td style=\"text-align:center\"> </td>\n<td>不断行的空白</td>\n</tr>\n</tbody>\n</table>\n<h1>CSS</h1>\n<h2 id=\"样式定义方式\">样式定义方式</h2>\n<p><strong>行内样式表（inline style sheet）</strong><br>\n直接定义在标签的<code>style</code>属性中。</p>\n<ul>\n<li>作用范围：仅对当前标签产生影响。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/images/mountain.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 300px; height: 200px;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>内部样式表（internal style sheet）</strong><br>\n定义在<code>style</code>标签中，通过选择器影响对应的标签。</p>\n<ul>\n<li>作用范围：可以对同一个页面中的多个元素产生影响。</li>\n</ul>\n<p><strong>外部样式表（external style sheet）</strong><br>\n定义在css样式文件中，通过选择器影响对应的标签。可以用link标签引入某些页面。</p>\n<ul>\n<li>作用范围：可以对多个页面产生影响。</li>\n</ul>\n<p><strong>注释</strong><br>\n注意不能使用<code>//</code>。<br>\n只有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 注释 */ </span><br></pre></td></tr></table></figure>\n<h2 id=\"选择器\">选择器</h2>\n<p><strong>标签选择器</strong><br>\n选择所有<code>div</code>标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ID</span><br></pre></td></tr></table></figure>\n<p><strong>选择器</strong><br>\n选择ID为<code>rect-1</code>的标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#rect-1 &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>类选择器</strong><br>\n选择所有<code>rectangle</code>类的标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.rectangle &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    height: 200px;</span><br><span class=\"line\">    background-color: gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>伪类选择器</strong><br>\n伪类用于定义元素的特殊状态。</p>\n<p>链接伪类选择器：</p>\n<ul>\n<li><code>:link</code>：链接访问前的样式</li>\n<li><code>:visited</code>：链接访问后的样式</li>\n<li><code>:hover</code>：鼠标悬停时的样式</li>\n<li><code>:active</code>：鼠标点击后长按时的样式</li>\n<li><code>:focus</code>：聚焦后的样式</li>\n</ul>\n<p>位置伪类选择器：</p>\n<p><code>:nth-child(n)</code>：选择是其父标签第n个子元素的所有元素。<br>\n目标伪类选择器：</p>\n<p><code>:target</code>：当url指向该元素时生效。</p>\n<p><strong>复合选择器</strong><br>\n由两个及以上基础选择器组合而成的选择器。</p>\n<ul>\n<li><code>element1</code>, <code>element2</code>：同时选择元素<code>element1</code>和元素<code>element2</code>。</li>\n<li><code>element.class</code>：选则包含某类的<code>element</code>元素。</li>\n<li><code>element1 + element2</code>：选择紧跟<code>element1</code>的<code>element2</code>元素。</li>\n<li><code>element1 element2</code>：选择<code>element1</code>内的所有<code>element2</code>元素。</li>\n<li><code>element1 &gt; element2</code>：选择父标签是<code>element1</code>的所有<code>element2</code>元素。</li>\n</ul>\n<p><strong>通配符选择器</strong></p>\n<ul>\n<li><code>*</code>：选择所有标签</li>\n<li><code>[attribute]</code>：选择具有某个属性的所有标签</li>\n<li><code>[attribute=value]</code>：选择<code>attribute</code>值为<code>value</code>的所有标签</li>\n</ul>\n<p><strong>伪元素选择器</strong><br>\n将特定内容当做一个元素，选择这些元素的选择器被称为伪元素选择器。</p>\n<ul>\n<li><code>::first-letter</code>：选择第一个字母</li>\n<li><code>::first-line</code>：选择第一行</li>\n<li><code>::selection</code>：选择已被选中的内容</li>\n<li><code>::after</code>：可以在元素后插入内容</li>\n<li><code>::before</code>：可以在元素前插入内容</li>\n</ul>\n<p><strong>样式渲染优先级</strong></p>\n<ul>\n<li>权重大小，越具体的选择器权重越大：<code>!important</code> &gt; 行内样式 &gt; ID选择器 &gt; 类与伪类选择器 &gt; 标签选择器 &gt; 通用选择器</li>\n<li>权重相同时，后面的样式会覆盖前面的样式</li>\n<li>继承自父元素的权重最低</li>\n</ul>\n<h2 id=\"颜色\">颜色</h2>\n<p><strong>预定义的颜色值</strong><br>\nblack、white、red、green、blue、lightblue等。</p>\n<p><strong>16进制表示法</strong><br>\n使用6位16进制数表示颜色，例如：<code>#ADD8E6</code>。<br>\n其中第1-2位表示红色，第3-4位表示绿色，第5-6位表示蓝色。</p>\n<p>简写方式：<code>#ABC</code>，等价于<code>#AABBCC</code>。</p>\n<p><strong>RGB表示法</strong><br>\n<code>rgb(173, 216, 230)</code>。</p>\n<p>其中第一个数表示红色，第二个数表示绿色，第三个数表示蓝色。</p>\n<p><strong>RGBA表示法</strong><br>\n<code>rgba(173, 216, 230, 0.5)</code>。</p>\n<p>前三个数同上，第四个数表示透明度。</p>\n<p><strong>取色方式</strong></p>\n<ul>\n<li>网页里的颜色，可以在chrome的调试模式下获取</li>\n<li>其他颜色可以使用QQ的截图软件：\n<ul>\n<li>直接按<code>c</code>键，可以复制rgb颜色值</li>\n<li>按住<code>shift</code>再按<code>c</code>键，可以复制16进制颜色值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文本\">文本</h2>\n<p><code>text-align</code><br>\n<code>text-align</code> CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align 并不控制块元素自己的对齐，只控制它的行内内容的对齐。<strong>选项：center(居中), left, right, justify(左右对齐)</strong></p>\n<p><code>line-height</code><br>\n<code>line-height</code> CSS 属性用于设置多行元素的空间量，如多行文本的间距。对于块级元素，它指定元素行盒（line boxes）的最小高度。对于非替代的 inline 元素，它用于计算行盒（line box）的高度。<strong>可以用来竖直居中</strong>。</p>\n<ul>\n<li>补充知识点：长度单位</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>px</td>\n<td>设备上的像素点</td>\n</tr>\n<tr>\n<td>%</td>\n<td>相对于父元素的百分比</td>\n</tr>\n<tr>\n<td>em</td>\n<td>相对于当前元素的字体大小</td>\n</tr>\n<tr>\n<td>rem</td>\n<td>相对于根元素的字体大小</td>\n</tr>\n<tr>\n<td>vw</td>\n<td>相对于视窗宽度的百分比</td>\n</tr>\n<tr>\n<td>vh</td>\n<td>相对于视窗高度的百分比</td>\n</tr>\n</tbody>\n</table>\n<p>​\t<br>\n<code>letter-spacing</code><br>\nCSS 的 <code>letter-spacing</code> 属性用于设置文本字符的间距,<strong>字间距 单位同行高</strong>。</p>\n<p><code>text-indent</code><br>\n<code>text-indent</code>属性能定义一个块元素首行文本内容之前的缩进量，(缩进） <strong>单位</strong><code>em</code>。</p>\n<p><code>text-decoration</code><br>\n<code>text-decoration</code> 这个 CSS 属性是用于设置文本的修饰线外观的（下划线、上划线、贯穿线/删除线 或 闪烁）它是 <code>text-decoration-line</code>, <code>text-decoration-color</code>, <code>text-decoration-style</code>, 和新出现的 <code>text-decoration-thickness</code> 属性的缩写。</p>\n<p><code>text-shadow</code><br>\n<code>text-shadow</code>为文字添加阴影。可以为文字与<code> text-decorations</code> 添加多个阴影，阴影值之间用逗号隔开。每个阴影值由元素在X和Y方向的偏移量、模糊半径和颜色值组成，<code>text-shadow: 5px -5px 2px color</code>。</p>\n<h2 id=\"字体\">字体</h2>\n<p><code>font-size</code><br>\n<code>font-size</code> CSS 属性指定字体的大小。因为该属性的值会被用于计算em和ex长度单位，定义该值可能改变其他元素的大小。</p>\n<p><code>font-style</code><br>\n<code>font-style</code> CSS 属性允许你选择 <code>font-family</code> 字体下的 italic（斜体） 或 oblique 样式。</p>\n<p><code>font-weight</code><br>\n<code>font-weight</code> CSS 属性指定了字体的<strong>粗细程度</strong>。 一些字体只提供 normal 和 bold 两种值。</p>\n<p><code>font-family</code><br>\nCSS 属性 <code>font-family</code> 允许您通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素<strong>设置字体</strong>。<br>\n属性值用逗号隔开。浏览器会选择列表中第一个该计算机上有安装的字体，或者是通过 @font-face 指定的可以直接下载的字体。</p>\n<h2 id=\"背景\">背景</h2>\n<p><code>background-color</code><br>\nCSS属性中的<code>background-color</code>会设置元素的背景色, 属性的值为颜色值或关键字”transparent”二者选其一。</p>\n<p>`</p>\n<p><code>background-image</code><br>\nCSS <code>background-image</code> 属性用于为一个元素设置一个或者多个背景图像。</p>\n<ul>\n<li>渐变色：<code>linear-gradient(rgba(0, 0, 255, 0.5), rgba(255, 255, 0, 0.5))</code></li>\n</ul>\n<p>`</p>\n<p><code>background-size</code><br>\n<code>background-size</code> 设置背景图片大小。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。</p>\n<p>注：<code>background-size cover/contain</code></p>\n<p><code>cover</code>是一定用图片覆盖div<br>\n<code>contain</code> 是图片不能超div</p>\n<p><code>background-repeat</code><br>\n<code>background-repeat</code> CSS 属性定义背景图像的重复方式。背景图像可以沿着水平轴，垂直轴，两个轴重复，或者根本不重复。</p>\n<p><code>background-position</code><br>\n<code>background-position</code> 为背景图片设置初始位置。</p>\n<p><code>background-attachment</code><br>\n<code>background-attachment</code> CSS 属性决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。</p>\n<p><code>background-opacity</code><br>\n<code>background-opacity</code>为图片透明度。</p>\n<h2 id=\"边框\">边框</h2>\n<p><code>border-style</code><br>\n<code>border-style</code> 是一个 CSS 简写属性，用来设定元素所有边框的样式。</p>\n<p><code>border-width</code><br>\n<code>border-width</code>属性可以设置盒子模型的边框宽度。</p>\n<p><code>border-color</code><br>\nCSS属性<code>border-color</code> 是一个用于设置元素四个边框颜色的快捷属性： <code>border-top-color</code>, <code>border-right-color</code>, <code>border-bottom-color</code>, <code>border-left-color</code></p>\n<p><code>border-radius</code><br>\nCSS 属性 <code>border-radius</code>允许你设置元素的外边框圆角。当使用一个半径时确定一个圆形，当使用两个半径时确定一个椭圆。这个(椭)圆与边框的交集形成圆角效果。</p>\n<p><code>border-collapse</code><br>\n<code>border-collapse</code> CSS 属性是用来决定表格的边框是分开的还是合并的。在分隔模式下，相邻的单元格都拥有独立的边框。在合并模式下，相邻单元格共享边框。</p>\n<h2 id=\"元素展示格式\">元素展示格式</h2>\n<p><code>display</code></p>\n<ul>\n<li><code>block</code>：\n<ul>\n<li>独占一行</li>\n<li>width、height、margin、padding均可控制</li>\n<li>width默认100%。</li>\n</ul>\n</li>\n<li><code>inline</code>：\n<ul>\n<li>可以共占一行</li>\n<li>width与height无效，水平方向的margin与padding有效，竖直方向的margin与padding无效</li>\n<li>width默认为本身内容宽度</li>\n</ul>\n</li>\n<li><code>inline-block</code>\n<ul>\n<li>可以共占一行</li>\n<li>width、height、margin、padding均可控制</li>\n<li>width默认为本身内容宽度</li>\n<li><strong>常用</strong>，将块内元素水平摆放，如果放不下的话，就放在下一行</li>\n<li><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141624321.png\" alt=\"image-20230114162136607\"></li>\n<li><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141624786.png\" alt=\"image-20230114162432111\"></li>\n</ul>\n</li>\n</ul>\n<p><code>white-space</code><br>\n<code>white-space</code> CSS 属性是用来设置如何处理元素中的 空白 (en-US)。</p>\n<p><code>text-overflow</code><br>\n<code>text-overflow</code> CSS 属性确定如何向用户发出未显示的溢出内容信号。它可以被剪切，显示一个省略号或显示一个自定义字符串。</p>\n<p><code>overflow</code><br>\nCSS属性 <code>overflow</code> 定义当一个元素的内容太大而无法适应 块级格式化上下文 时候该做什么。它是 <code>overflow-x</code> 和<code>overflow-y</code>的 简写属性 。</p>\n<h2 id=\"内边距与外边距\">内边距与外边距</h2>\n<p><strong>width = content + padding + border</strong></p>\n<p><code>margin</code><br>\n<code>margin</code>属性为给定元素设置所有四个（上下左右）方向的<strong>外边距</strong>属性。</p>\n<ul>\n<li>\n<p>可以接受1~4个值（上、右、下、左的顺序），例<code>margin: 10px 20px 30px 40px</code>，就表示上、右、下、左的外边距。</p>\n</li>\n<li>\n<p>可以分别指明四个方向：<code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code></p>\n</li>\n<li>\n<p>可取值</p>\n<ul>\n<li><code>length</code>：固定值</li>\n<li><code>percentage</code>：相对于包含块（父元素）的<strong>宽度</strong>，以百分比值为外边距。</li>\n<li><code>auto</code>：让浏览器自己选择一个合适的外边距。有时，在一些特殊情况下，该值可以<strong>使元素居中</strong>。</li>\n</ul>\n</li>\n<li>\n<p>外边距重叠</p>\n<ul>\n<li>块的<strong>上外边距</strong>(margin-top)和<strong>下外边距</strong>(margin-bottom)有时合并(折叠)为单个边距，其大小为单个边距的最大值(或如果它们相等，则仅为其中一个)，这种行为称为边距折叠。</li>\n<li>父元素与后代元素：父元素没有上边框和padding时，后代元素的<code>margin-top</code>会溢出，溢出后父元素的<code>margin-top</code>会与后代元素取最大值。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><code>padding</code></p>\n<p><code>padding</code> CSS 简写属性控制元素所有四条边的<strong>内边距</strong>区域。</p>\n<ul>\n<li>可以接受1~4个值（上、右、下、左的顺序）</li>\n<li>可以分别指明四个方向：<code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code></li>\n<li>可取值\n<ul>\n<li><code>length</code>：固定值</li>\n<li><code>percentage</code>：相对于包含块（父元素）的<strong>宽度</strong>，以百分比值为内边距。</li>\n</ul>\n</li>\n</ul>\n<p><strong>注</strong>：<strong>子元素的margin-top连带影响父元素的上外边距 解决方法</strong></p>\n<blockquote>\n<p>① 父元素加一个边框：<code>border: 1px solid;</code><br>\n② 父元素加内边距：<code>padding-top: 1px;</code><br>\n③ 父元素加上overflow属性： <code>overflow: hidden;</code><br>\n④ 在父元素前面加一个空内容：<code>.div-outer::before &#123;content: &quot;&quot;;display: table;&#125;</code></p>\n</blockquote>\n<h2 id=\"盒子模型\">盒子模型</h2>\n<p><strong>box-sizing</strong><br>\nCSS 中的 <code>box-sizing</code> 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。</p>\n<ul>\n<li><code>content-box</code>：是默认值，设置<code>border</code>和<code>padding</code>均会增加元素的宽高。</li>\n<li><code>border-box</code>：设置<code>border</code>和<code>padding</code>不会改变元素的宽高，<strong>盒子大小固定住了</strong>，<strong>挤占内容区域</strong>，<strong>常用</strong>。</li>\n</ul>\n<h2 id=\"位置\">位置</h2>\n<p><code>position</code><br>\n<code>CSS position</code>属性用于指定一个元素在文档中的定位方式。</p>\n<p><strong>定位类型</strong>：</p>\n<ul>\n<li>定位元素（positioned element）是其计算后位置属性为 relative, absolute, fixed 或 sticky 的一个元素（换句话说，除static以外的任何东西）。</li>\n<li>相对定位元素（relatively positioned element）是计算后位置属性为 relative 的元素。</li>\n<li>绝对定位元素（absolutely positioned element）是计算后位置属性为 absolute 或 fixed 的元素。</li>\n<li>粘性定位元素（stickily positioned element）是计算后位置属性为 sticky 的元素。</li>\n</ul>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>static</code>：该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 top, right, bottom, left 和 z-index 属性无效。</li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141624786.png\" alt=\"image-20230114162432111\"></p>\n<p><strong>注：</strong><code>z-index</code>：表示当前元素的层次等级，如果越大，较大的元素会覆盖较小的元素在上层进行显示。（只对<code>position: </code>取非<code>static</code>的属性有效果）</p>\n<ul>\n<li><code>relative</code>：该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（<strong>因此会在此元素未添加定位时所在位置留下空白</strong>）。top, right, bottom, left等调整元素相对于初始位置的偏移量。<strong>修改定位后，原位置区域会保留</strong></li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141627654.png\" alt=\"image-20230114162746291\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div-inner-2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>absolute</code>：元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于<strong>最近的非 static 定位</strong>祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。<strong>修改定位后，原位置区域不会保留</strong></li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141635133.png\" alt=\"image-20230114163522801\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div-inner-2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：这里是因为<code>inner-2</code>的父节点的定位默认为<code>static</code>，而<code>absolute</code>是<strong>按照最近的非 static 定位</strong>祖先元素的偏移，因此按照元素为<code>body</code>块进行偏移。</p>\n<ul>\n<li><code>fixed</code>：元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于<strong>屏幕视口</strong>（viewport）的<strong>位置</strong>来指定元素位置，来确定元素位置。元素的位置在屏幕滚动时不会改变</li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141643709.png\" alt=\"image-20230114164351906\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div-inner-2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">right</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>sticky</code>：元素根据正常文档流进行定位，然后相对它的最近滚动祖先（nearest scrolling ancestor）和 containing block (最近块级祖先 nearest block-level ancestor)，包括table-related元素，基于top, right, bottom, 和 left的值进行偏移。<strong>偏移值不会影响任何其他元素的位置</strong>。</li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141703125.gif\" alt=\"QQ录屏20230114164918 00_00_00-00_00_30\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div-inner-2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮动\">浮动</h2>\n<p><code>float</code><br>\n<code>float</code> CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动(文档流)中移除，尽管仍然保持部分的流动性（与绝对定位相反）。</p>\n<p><strong>最常用的就是</strong>：需要将不同的<code>div</code>搞到一行，并且不想有间距。</p>\n<p>由于float意味着使用块布局，它在某些情况下修改display 值的计算值：</p>\n<ul>\n<li><code>display</code>为<code>inline</code>或<code>inline-block</code>时，使用<code>float</code>后会统一变成<code>block</code>。</li>\n</ul>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141703075.gif\" alt=\"QQ录屏20230114165844 00_00_00-00_00_30\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inner</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>left</code>：表明元素必须浮动在其所在的块容器左侧的关键字。</li>\n<li><code>right</code>：表明元素必须浮动在其所在的块容器右侧的关键字。</li>\n</ul>\n<p><code>clear</code><br>\n有时，你可能想要<strong>强制元素移至任何浮动元素下方</strong>。比如说，你可能希望某个段落与浮动元素保持相邻的位置，但又希望这个段落从头开始强制独占一行。此时可以使用<code>clear</code>。</p>\n<p><strong>例如</strong>：希望将黄色元素块移动到浮动元素下方。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141703465.png\" alt=\"image-20230114170343277\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202301141705113.png\" alt=\"image-20230114170536170\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.inner-4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: left;  <span class=\"comment\">/*因为前面的块状元素都是向左浮动的*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>left</code>：清除左侧浮动。</li>\n<li><code>right</code>：清除右侧浮动。</li>\n<li><code>both</code>：清除左右两侧浮动</li>\n</ul>\n<h2 id=\"flex布局\">flex布局</h2>\n<p><code>flex</code> CSS简写属性设置了弹性项目如何增大或缩小以适应其弹性容器中可用的空间。</p>\n<p><code>flex-direction</code><br>\nCSS <code>flex-direction</code> 属性指定了内部元素是如何在 flex 容器中布局的，定义了主轴的方向(正方向或反方向)。</p>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>row</code>：flex容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。</li>\n<li><code>row-reverse</code>：表现和row相同，但是置换了主轴起点和主轴终点。</li>\n<li><code>column</code>：flex容器的主轴和块轴相同。主轴起点与主轴终点和书写模式的前后点相同</li>\n<li><code>column-reverse</code>：表现和column相同，但是置换了主轴起点和主轴终点</li>\n</ul>\n<hr>\n<p><code>flex-wrap</code><br>\nCSS 的 <code>flex-wrap</code> 属性指定 flex 元素单行显示还是多行显示。如果允许换行，这个属性允许你控制行的堆叠方向。</p>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>nowrap</code>：默认值。不换行。</li>\n<li><code>wrap</code>：换行，第一行在上方。</li>\n<li><code>wrap-reverse</code>：换行，第一行在下方。</li>\n</ul>\n<hr>\n<p><code>flex-flow</code><br>\nCSS <code>flex-flow</code> 属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写。默认值为：<code>row nowrap</code>。</p>\n<hr>\n<p><code>justify-content</code><br>\nCSS <code>justify-content</code> 属性定义了浏览器之间，如何分配顺着弹性容器主轴(或者网格行轴) 的元素之间及其周围的空间。</p>\n<p>取值：</p>\n<ul>\n<li><code>flex-start</code>：默认值。左对齐。</li>\n<li><code>flex-end</code>：右对齐。</li>\n<li><code>space-between</code>：左右两段对齐。</li>\n<li><code>space-around</code>：在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</li>\n<li><code>space-evenly：flex</code>项都沿着主轴均匀分布在指定的对齐容器中。相邻flex项之间的间距，主轴起始位置到第一个flex项的间距，主轴结束位置到最后一个flex项的间距，都完全一样。</li>\n</ul>\n<hr>\n<p><code>align-items</code><br>\nCSS <code>align-items</code>属性将所有直接子节点上的align-self值设置为一个组。 align-self属性设置项目在其包含块中在交叉轴方向上的对齐方式。</p>\n<p>取值：</p>\n<ul>\n<li><code>flex-start</code>：元素向主轴起点对齐。</li>\n<li><code>flex-end</code>：元素向主轴终点对齐。</li>\n<li><code>center</code>：元素在侧轴居中。</li>\n<li><code>stretch</code>：弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</li>\n</ul>\n<hr>\n<p><code>align-content</code><br>\nCSS 的 <code>align-content</code> 属性设置了浏览器如何沿着弹性盒子布局的纵轴和网格布局的主轴在内容项之间和周围分配空间。</p>\n<p><strong>取值</strong>：</p>\n<ul>\n<li><code>flex-start</code>：所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。</li>\n<li><code>flex-end</code>：所有行从垂直轴末尾开始填充。最后一行的垂直轴终点和容器的垂直轴终点对齐。同时所有后续行与前一个对齐。</li>\n<li><code>center</code>：所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。</li>\n<li><code>stretch</code>：拉伸所有行来填满剩余空间。剩余空间平均地分配给每一行。</li>\n</ul>\n<hr>\n<p><code>order</code><br>\n定义<code>flex</code>项目的顺序，值越小越靠前。</p>\n<hr>\n<p><code>flex-grow</code><br>\nCSS 属性 <code>flex-grow</code> CSS 设置 flex 项主尺寸 的 flex 增长系数。</p>\n<p>负值无效，默认为 0。</p>\n<hr>\n<p><code>flex-shrink</code><br>\nCSS <code>flex-shrink</code> 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</p>\n<p>负值无效，默认为1。</p>\n<hr>\n<p><code>flex-basis</code><br>\nCSS 属性 flex-basis 指定了 flex 元素在主轴方向上的初始大小。</p>\n<p><strong>取值</strong>：<br>\nwidth 值可以是 <code>&lt;length&gt;</code>; 该值也可以是一个相对于其父弹性盒容器主轴尺寸的百分数 。负值是不被允许的。默认为 auto。</p>\n<hr>\n<p><code>flex</code><br>\n<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的缩写。</p>\n<p><strong>常用取值</strong>：<br>\n<code>auto：flex: 1 1 auto</code><br>\n<code>none：flex: 0 0 auto</code></p>\n<h2 id=\"响应式布局\">响应式布局</h2>\n<p><strong>media查询</strong><br>\n当屏幕宽度满足特定条件时应用css。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media(min-width: 768px) &#123;</span><br><span class=\"line\">    .container &#123;</span><br><span class=\"line\">        width: 960px;</span><br><span class=\"line\">        background-color: lightblue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Bootstrap</strong></p>\n<ul>\n<li>bootstrap地址：<a href=\"https://v5.bootcss.com/\">https://v5.bootcss.com/</a></li>\n</ul>\n","categories":[],"tags":["工程课"]},{"title":"AcWing.3765 表达式树","url":"http://example.com/2022/12/20/AcWing-3765-表达式树/","content":"<p>请设计一个算法，将给定的表达式树(二叉树)转换为等价的中缀表达式(通过括号反映操作符的计算次序)并输出。</p>\n<p>例如，当下列两棵表达式树作为算法的输入时：</p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2021/07/08/19_236bcb51df-QQ%E6%88%AA%E5%9B%BE20210708095213.png\" alt=\"QQ截图20210708095213.png\"></p>\n<p>输出的等价中缀表达式分别为 <code>(a+b)*(c*(-d))</code> 和 <code>(a*b)+(-(c-d))</code>。</p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>树中至少包含一个运算符。</li>\n<li>当运算符是负号时，左儿子为空，右儿子为需要取反的表达式。</li>\n<li>树中所有叶节点的值均为非负整数。</li>\n</ul>\n<h4 id=\"样例：\">样例：</h4>\n<pre><code>输入：二叉树[+, 12, *, null, null, 6, 4, null, null, null, null]如下图所示：\n    +\n   / \\\n  12  *\n     / \\\n    6   4\n\n输出：12+(6*4)\n</code></pre>\n<h4 id=\"数据范围-4\">数据范围</h4>\n<p>给定二叉树的非空结点数量保证不超过 $1000$。</p>\n<p>给定二叉树保证能够转化为合法的中缀表达式。</p>\n<h4 id=\"时间复杂度\">时间复杂度</h4>\n<p>为$O(n^2)$<br>\n因为<code>C++</code>中字符串<code>return</code>并不是直接返回，而是先复制一遍再返回。<br>\n为了优化，可以不适用<code>return</code>进行返回，而是定义一个全局变量<code>ans</code>来记录最终的答案。</p>\n<h4 id=\"Code-5\">Code</h4>\n<p>未优化的，时间复杂度：$O(n^2)$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     string val；</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">dfs</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;  <span class=\"comment\">// 如果结点为空返回空</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果是叶节点，就返回当前的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> root-&gt;val;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果不是叶节点，就递归处理，记得加上()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"built_in\">dfs</span>(root-&gt;left) + root-&gt;val + <span class=\"built_in\">dfs</span>(root-&gt;right) + <span class=\"string\">&#x27;)&#x27;</span>;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">expressionTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">dfs</span>(root-&gt;left) + root-&gt;val + <span class=\"built_in\">dfs</span>(root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>优化的，时间复杂度：$O(n)$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     string val；</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    string ans;  <span class=\"comment\">// 定义全局变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果是叶节点，就让ans加上当前的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += root-&gt;val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果不是叶节点，就让ans递归加上，记得加上()</span></span><br><span class=\"line\">        ans += <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root-&gt;left);</span><br><span class=\"line\">        ans += root-&gt;val;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root-&gt;right);</span><br><span class=\"line\">        ans += <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">expressionTree</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root-&gt;left);</span><br><span class=\"line\">        ans += root-&gt;val;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root-&gt;right);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["DS"]},{"title":"AcWing.18 重建二叉树","url":"http://example.com/2022/11/17/AcWing-18-重建二叉树/","content":"<p>输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。</p>\n<p><strong>注意</strong>:</p>\n<ul>\n<li>二叉树中每个节点的值都互不相同；</li>\n<li>输入的前序遍历和中序遍历一定合法；</li>\n</ul>\n<h4 id=\"数据范围\">数据范围</h4>\n<p>树中节点数量范围 $[0,100]$。</p>\n<h4 id=\"样例\">样例</h4>\n<pre><code>给定：\n前序遍历是：[3, 9, 20, 15, 7]\n中序遍历是：[9, 3, 15, 20, 7]\n\n返回：[3, 9, 20, null, null, 15, 7, null, null, null, null]\n返回的二叉树如下所示：\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</code></pre>\n<h4 id=\"Code\">Code</h4>\n<pre><code>   <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\">* struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*     int val;</span></span><br><span class=\"line\"><span class=\"comment\">*     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\">*     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\">*     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t   unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; pos;  <span class=\"comment\">// 定义一个哈希数组，用于快速查找前序遍历第一个节点在中序遍历中的位置。</span></span><br><span class=\"line\">\t   <span class=\"comment\">// 目的：使得运行效率更快，因为此操作是O(1)的复杂度</span></span><br><span class=\"line\">\t   vector&lt;<span class=\"type\">int</span>&gt; preorder, inorder;  <span class=\"comment\">// 将前序遍历，中序遍历数组定义为全局变量，方便写代码。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t   <span class=\"comment\">//pl: preorder_left, pr:preorder_right, il: inorder_left, ir: inoder_right</span></span><br><span class=\"line\">\t   <span class=\"function\">TreeNode* <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pl, <span class=\"type\">int</span> pr, <span class=\"type\">int</span> il, <span class=\"type\">int</span> ir)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 如果前序遍历的区间小于1就退出</span></span><br><span class=\"line\">\t\t   <span class=\"keyword\">if</span>(pl &gt; pr) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 递归结束的条件。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   TreeNode* root = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(preorder[pl]);  <span class=\"comment\">// 创建一个节点，前序遍历的第一个节点也就是当前的根节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"type\">int</span> k = pos[preorder[pl]];  <span class=\"comment\">// 用哈希查找该点在中序遍历中的位置</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// k就是根节点在中序遍历中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 创建子树时候，build函数递归时，边界情况</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 模拟一下知道前序、中序遍历的树，求二叉树</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 当找到根节点的时候，也就是前序遍历的第一个数，</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 此时需要查找它在中序遍历中的位置k，</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 在k的左边的数都是它的左子树，在k的右边的数都是它的右子树</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 递归处理左右两边</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// build(int pl, int pr, int il, int ir)里面的参数要符合一下情况</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 处理左子树</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 1. 由于前序遍历第一个节点已经用过，故起点为pl + 1</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 2. 而在左子树中前序遍历的长度，取决于中序遍历中k的左右有多少个数</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 3. 一共有k - il - 1个数，不算上k本身，终点为pl + 1 + k - il - 1</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 4. 中序遍历起点为il</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 5. 中序遍历的终点为k - 1，不算k本身</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 处理右子树</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 1. 右子树前序遍历的起点应该是左子树前序遍历的终点加1</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">//     pl + 1 + k - il - 1 + 1</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 2. 而在右子树中前序遍历的终点当然为pr</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 3. 中序遍历起点为k + 1，不算k本身</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 4. 中序遍历的终点为ir</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 递归创建左子树</span></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 记住不要算k这个节点，因为已经作为了根节点</span></span><br><span class=\"line\">\t\t   root-&gt;left = <span class=\"built_in\">build</span>(pl + <span class=\"number\">1</span>, pl + <span class=\"number\">1</span> + k - il - <span class=\"number\">1</span>, il, k - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 递归创建右子树</span></span><br><span class=\"line\">\t\t   root-&gt;right = <span class=\"built_in\">build</span>(pl + <span class=\"number\">1</span> + k - il - <span class=\"number\">1</span> + <span class=\"number\">1</span>, pr, k + <span class=\"number\">1</span>, ir);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 返回创建的树</span></span><br><span class=\"line\">\t\t   <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t   <span class=\"function\">TreeNode* <span class=\"title\">buildTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; _preorder, vector&lt;<span class=\"type\">int</span>&gt;&amp; _inorder)</span> </span>&#123;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 赋值</span></span><br><span class=\"line\">\t\t   preorder = _preorder, inorder = _inorder;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 预处理哈希</span></span><br><span class=\"line\">\t\t   <span class=\"type\">int</span> n = inorder.<span class=\"built_in\">size</span>();  <span class=\"comment\">// 计算中序遍历长度。</span></span><br><span class=\"line\">\t\t   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ ) pos[inorder[i]] = i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   <span class=\"comment\">// 返回递归函数。</span></span><br><span class=\"line\">\t\t   <span class=\"keyword\">return</span> <span class=\"built_in\">build</span>(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);  <span class=\"comment\">// 前序遍历起点，终点；中序遍历起点，终点。</span></span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n</code></pre>\n","categories":[],"tags":["DS"]},{"title":"AcWing.3786 二叉排序树","url":"http://example.com/2022/11/08/AcWing-3786-二叉排序树/","content":"<p>你需要写一种数据结构，来维护一些数，其中需要提供以下操作：</p>\n<ol>\n<li>插入数值 $x$。</li>\n<li>删除数值 $x$。</li>\n</ol>\n<p>题目保证：</p>\n<ul>\n<li>操作 $1$ 插入的数值各不相同。</li>\n<li>操作 $2$ 删除的数值一定存在。</li>\n</ul>\n<p>输出树的前序遍历</p>\n<h4 id=\"输入格式-3\">输入格式</h4>\n<p>第一行包含整数 $n$，表示共有 $n$ 个操作命令。</p>\n<p>接下来 $n$ 行，每行包含两个整数 $opt$ 和 $x$，表示操作序号和操作数值。</p>\n<h4 id=\"数据范围-5\">数据范围</h4>\n<p>$1 \\le n \\le 2000$，<br>\n$-10000 \\le x \\le 10000$</p>\n<h4 id=\"输入样例：-3\">输入样例：</h4>\n<pre><code>4\n1 1\n1 3\n1 5\n2 3\n</code></pre>\n<h4 id=\"输出样例：-3\">输出样例：</h4>\n<pre><code>1 5\n</code></pre>\n<h4 id=\"思路\">思路</h4>\n<p><strong>插入操作</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211081706435.png\" alt=\"image-20221108170605414\"></p>\n<p><strong>删除操作</strong>：</p>\n<p>对于一个二叉排序树来说，<strong>中序遍历</strong>（<strong>左中右</strong>）是有序的。</p>\n<p>有三种情况</p>\n<ol>\n<li>该节点为叶节点</li>\n<li>该节点存在一个左节点，或者一个右节点</li>\n<li>该节点存在左节点、右节点</li>\n</ol>\n<p>重点说明一下<strong>第三种情况</strong>：由于是一颗二叉排序树，故节点$X$的左子树中最右的根节点$A$一定是左子树中最大的值，故将节点$A$的值赋值给节点$X$，再递归遍历左子树，删除节点$A$。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211081706505.png\" alt=\"image-20221108170636844\"></p>\n<h4 id=\"Code-6\">Code</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    TreeNode *left, *right;</span><br><span class=\"line\">    <span class=\"built_in\">TreeNode</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">val</span>(_val), <span class=\"built_in\">left</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">right</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果不用引用传入，那么root 就是一个形参，此函数由于要修改root，故传入引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(TreeNode* &amp;root, <span class=\"type\">int</span> x)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) root = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(x);  <span class=\"comment\">// 如果为空，则插入该节点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root-&gt;val &gt; x) <span class=\"built_in\">insert</span>(root-&gt;left, x);  <span class=\"comment\">// 如果该节点的值大于x，则递归插入左边</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">insert</span>(root-&gt;right, x);  <span class=\"comment\">// 如果该节点的值小于x，则递归插入右边</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(TreeNode* &amp;root, <span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;  <span class=\"comment\">// 表示没有x这个元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;val &gt; x) <span class=\"built_in\">remove</span>(root-&gt;left, x);  <span class=\"comment\">// 如果该节点的值大于x，则递归查找左边</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root-&gt;val &lt; x) <span class=\"built_in\">remove</span>(root-&gt;right, x);  <span class=\"comment\">// 如果该节点的值小于x，则递归查找右边</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>  <span class=\"comment\">// 就是该点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>) root = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 该点为叶节点，直接删</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span>) root = root-&gt;right;  <span class=\"comment\">// 如果左边为空，则将右节点提上来</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(root-&gt;right == <span class=\"literal\">NULL</span>) root = root-&gt;left;  <span class=\"comment\">// 如果右边为空，则将左节点提上来</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// 左右节点都不为空</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> p = root-&gt;left;  <span class=\"comment\">// 定义一个探寻左子树中最大值的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p-&gt;right != <span class=\"literal\">NULL</span>) p = p-&gt;right;  <span class=\"comment\">// 由于二叉排序树的定义，左子树的右儿子一定是最大值</span></span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(root-&gt;val, p-&gt;val);  <span class=\"comment\">// 交换两个的值</span></span><br><span class=\"line\">            <span class=\"built_in\">remove</span>(root-&gt;left, p-&gt;val);  <span class=\"comment\">// 递归处理左子树，删除节点p这个节点</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于打印树二叉排序树的前序遍历（用队列思想）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(TreeNode *root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;TreeNode*&gt; q;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"literal\">NULL</span>) q.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> t = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        cout &lt;&lt; t-&gt;val &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t-&gt;left != <span class=\"literal\">NULL</span> || t-&gt;right != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t-&gt;left) q.<span class=\"built_in\">push</span>(t-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t-&gt;right) q.<span class=\"built_in\">push</span>(t-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TreeNode* root;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> opt, x;</span><br><span class=\"line\">        cin &gt;&gt; opt &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(opt == <span class=\"number\">1</span>) <span class=\"built_in\">insert</span>(root, x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(opt == <span class=\"number\">2</span>) <span class=\"built_in\">remove</span>(root, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(root);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["DS"]},{"title":"AcWing.840 模拟散列表","url":"http://example.com/2022/11/05/AcWing-840-模拟散列表/","content":"<h3 id=\"840-模拟散列表\">840.模拟散列表</h3>\n<p>维护一个集合，支持如下几种操作：</p>\n<ol>\n<li><code>I x</code>，插入一个数 $x$；</li>\n<li><code>Q x</code>，询问数 $x$ 是否在集合中出现过；</li>\n</ol>\n<p>现在要进行 $N$ 次操作，对于每个询问操作输出对应的结果。</p>\n<h4 id=\"输入格式-4\">输入格式</h4>\n<p>第一行包含整数 $N$，表示操作数量。</p>\n<p>接下来 $N$ 行，每行包含一个操作指令，操作指令为 <code>I x</code>，<code>Q x</code> 中的一种。</p>\n<h4 id=\"输出格式-3\">输出格式</h4>\n<p>对于每个询问指令 <code>Q x</code>，输出一个询问结果，如果 $x$ 在集合中出现过，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p>\n<p>每个结果占一行。</p>\n<h4 id=\"数据范围-6\">数据范围</h4>\n<p>$1 \\le N \\le 10^5$<br>\n$-10^9 \\le x \\le 10^9$</p>\n<h4 id=\"输入样例：-4\">输入样例：</h4>\n<p>5<br>\nI 1<br>\nI 2<br>\nI 3<br>\nQ 2<br>\nQ 5</p>\n<h4 id=\"输出样例：-4\">输出样例：</h4>\n<p>Yes<br>\nNo</p>\n<h3 id=\"开散列方法（拉链法）\">开散列方法（拉链法）</h3>\n<p><strong>核心</strong>：如果一个位置有多个重复映射到此处的元素，就开一个链表，将所有元素都存储下来。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211051004994.jpg\" alt=\"\"></p>\n<p>$Code$：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200003</span>;  <span class=\"comment\">// ①空间大小为质数，②空间开数据的两倍，使得负载因子为1/2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> h[N], e[N], ne[N], idx;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>  <span class=\"comment\">// 查询x是否在哈希表中</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = (x % N + N) % N;  <span class=\"comment\">// 此处通过除余法计算哈希函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 加N再模N是为了避免在c++中模运算为负的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[t]; i != <span class=\"number\">-1</span>; i = ne[i])</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i] == x) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>  <span class=\"comment\">// 在链表a中插入b这个元素（注意区别于a-&gt;b连接一条边，代码相同，含义不同）</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在哈希计算后，判断是否存在当前元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(x)) <span class=\"keyword\">return</span>;  <span class=\"comment\">// 如果找到了就不进行插入操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 没有找到，进行插入操作，在位置为t的链表中插入x这个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t = (x % N + N) % N;  <span class=\"comment\">// 此处通过除余法计算哈希函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 加N再模N是为了避免在c++中模运算为负的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">add</span>(t, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> h);  <span class=\"comment\">// 初始化邻接表的表头</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];  <span class=\"comment\">// 使用字符串来读取字符可以有效地避免空格造成的输入影响</span></span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;I&#x27;</span>) <span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(x)) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"闭散列方法（开放寻址法）\">闭散列方法（开放寻址法）</h3>\n<p><strong>核心</strong>：如果映射到某个位置$A$的时候，此位置$A$已经存在元素，则映射到它下一个位置$B$，如果下一个位置$B$还是存在元素，则映射到$B$的下一个的位置。（<strong>ps</strong>：如果映射到最后一个位置$N-1$，并且该位置已经存在元素，则映射到开头的位置$0$）</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211051004505.jpg\" alt=\"\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200003</span>, null = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"comment\">// ①空间大小为质数，②空间开数据的两倍，使得负载因子为1/2</span></span><br><span class=\"line\"><span class=\"comment\">// null: 当前位置是否存在元素，作为判断依据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> h[N];  <span class=\"comment\">// 定义哈希表的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>  <span class=\"comment\">// 查询哈希函数后的位置</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = (x % N + N) % N;  <span class=\"comment\">// 此处通过除余法计算哈希函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 加N再模N是为了避免在c++中模运算为负的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h[t] != null &amp;&amp; h[t] != x)  <span class=\"comment\">// 如果当前位置不为空 并且 当前位置上元素与查询的元素不相同</span></span><br><span class=\"line\">        t = (t + <span class=\"number\">1</span>) % N;  <span class=\"comment\">// 往后移动一位，当移动到最后一个元素，则从开头移动</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;  <span class=\"comment\">// 返回哈希处理后的位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(h, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> h);  <span class=\"comment\">// 将哈希表所有位置定义为不存在元素的状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;I&#x27;</span>) h[<span class=\"built_in\">find</span>(x)] = x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(h[<span class=\"built_in\">find</span>(x)] != x) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["DS"]},{"title":"AcWing.3302 表达式求值","url":"http://example.com/2022/10/26/AcWing-3302-表达式求值/","content":"<h3 id=\"题意\">题意</h3>\n<p>给定一个表达式，其中运算符仅包含 <code>+,-,*,/</code>（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>数据保证给定的表达式合法。</li>\n<li>题目保证符号 <code>-</code> 只作为减号出现，不会作为负号出现，例如，<code>-1+2</code>,<code>(2+2)*(-(1+1)+2)</code> 之类表达式均不会出现。</li>\n<li>题目保证表达式中所有数字均为正整数。</li>\n<li>题目保证表达式在中间计算过程以及结果中，均不超过 $2^{31}-1$。</li>\n<li>题目中的整除是指向 $0$ 取整，也就是说对于大于 $0$ 的结果向下取整，例如 $5/3=1$，对于小于 $0$ 的结果向上取整，例如 $5/(1-4) = -1$。</li>\n<li>C++和Java中的整除默认是向零取整；Python中的整除<code>//</code>默认向下取整，因此Python的<code>eval()</code>函数中的整除也是向下取整，在本题中不能直接使用。</li>\n</ul>\n<h4 id=\"输入格式\">输入格式</h4>\n<p>共一行，为给定表达式。</p>\n<h4 id=\"输出格式\">输出格式</h4>\n<p>共一行，为表达式的结果。</p>\n<h4 id=\"数据范围-2\">数据范围</h4>\n<p>表达式的长度不超过 $10^5$。</p>\n<h4 id=\"输入样例：\">输入样例：</h4>\n<p>(2+2)*(1+1)</p>\n<h4 id=\"输出样例：\">输出样例：</h4>\n<pre><code>8\n</code></pre>\n<h4 id=\"思想\">思想</h4>\n<p>表达式求值：</p>\n<ol>\n<li>如果当前元素是数字：压入</li>\n<li>如果当前元素是<code>(</code>：压入</li>\n<li>如果当前元素是<code>)</code>：操作到<code>(</code></li>\n<li>如果当前元素是<code>+-*/</code>：从右往左操作到<code>(</code>或者 栈顶优先级$&lt;$当前元素的优先级</li>\n</ol>\n<p>操作完运算符栈后，数栈栈顶为答案。</p>\n<h4 id=\"Code-2\">Code</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; h&#123;&#123;<span class=\"string\">&#x27;+&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;-&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;*&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>&#125;&#125;;  <span class=\"comment\">// 定义操作符的优先级。</span></span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;<span class=\"type\">char</span>&gt; op;  <span class=\"comment\">// 定义运算符栈</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; nums; <span class=\"comment\">// 定义数栈</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">eval</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里要注意栈存储是先进先出，</span></span><br><span class=\"line\">    <span class=\"comment\">// 因此运算时要用第二个数栈的值处理第一个数栈的值（主要体现在除法的差异）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b = nums.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    nums.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a = nums.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    nums.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> c = op.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">    op.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;+&#x27;</span>) x = a + b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>) x = a - b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;*&#x27;</span>) x = a * b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;/&#x27;</span>) x = a / b;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 操作完毕后</span></span><br><span class=\"line\">    nums.<span class=\"built_in\">push</span>(x);  <span class=\"comment\">// 数入栈</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一种情况</span></span><br><span class=\"line\">        <span class=\"comment\">// isdigit() 函数用来判断一个字符是否是数字，也即 0~9, 头文件为&lt;iostream&gt;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isdigit</span>(str[i]))  </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将数字抠出来</span></span><br><span class=\"line\">            <span class=\"type\">int</span> j = i, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &lt; str.<span class=\"built_in\">size</span>() &amp;&amp; <span class=\"built_in\">isdigit</span>(str[j]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum = sum * <span class=\"number\">10</span> + str[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                j ++ ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将数字加入数栈</span></span><br><span class=\"line\">            nums.<span class=\"built_in\">push</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">            i = j - <span class=\"number\">1</span>;  <span class=\"comment\">// 因为for循环结束后，i ++ </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;(&#x27;</span>) op.<span class=\"built_in\">push</span>(str[i]);  <span class=\"comment\">// 第二种情况</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;)&#x27;</span>)  <span class=\"comment\">// 第三种情况</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(op.<span class=\"built_in\">top</span>() != <span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            op.<span class=\"built_in\">pop</span>();  <span class=\"comment\">// 此处弹出的就是&#x27;(&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// 第四种情况 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果栈顶优先级大于当前优先级</span></span><br><span class=\"line\">            <span class=\"comment\">// 也就是说栈顶为 * / 当前为 + -</span></span><br><span class=\"line\">            <span class=\"comment\">// 就需要进行处理</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(op.<span class=\"built_in\">size</span>() &amp;&amp; h[op.<span class=\"built_in\">top</span>()] &gt;= h[str[i]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            op.<span class=\"built_in\">push</span>(str[i]);  <span class=\"comment\">// 将当前操作符入栈</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(op.<span class=\"built_in\">size</span>()) <span class=\"built_in\">eval</span>();  <span class=\"comment\">// 如果所有括号都处理完毕，从右往左处理剩下的运算符</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; nums.<span class=\"built_in\">top</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中缀表达式转后缀表达式\">中缀表达式转后缀表达式</h3>\n<p>中缀表达式：<code>(2+2)x(1+1)+3</code></p>\n<p>后缀表达式（无需括号）：<code>22+11+x3+</code></p>\n<p><strong>代码转换方式</strong>：将中缀表达式中的数栈直接删除，遇见数字直接输出即可。</p>\n<p><strong>思想转化方法</strong>：将中缀表达式树画出来，如图。<br>\n.<br>\n$A-(B+C/D)*E+F$<br>\n.<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212201954931.jpg\" alt=\"\"><br>\n.<br>\n最后得到的表达式树<br>\n前序遍历就是前缀表达式<br>\n中序遍历就是中缀表达式<br>\n后序遍历就是后缀表达式</p>\n<h4 id=\"Code-3\">Code</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; h&#123;&#123;<span class=\"string\">&#x27;+&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;-&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;*&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>&#125;&#125;;  <span class=\"comment\">// 定义操作符的优先级。</span></span><br><span class=\"line\"></span><br><span class=\"line\">stack&lt;<span class=\"type\">char</span>&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">eval</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; op.<span class=\"built_in\">top</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    op.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">isdigit</span>(str[i]))  </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将数字抠出来</span></span><br><span class=\"line\">            <span class=\"type\">int</span> j = i, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &lt; str.<span class=\"built_in\">size</span>() &amp;&amp; <span class=\"built_in\">isdigit</span>(str[j]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum = sum * <span class=\"number\">10</span> + str[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                j ++ ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; sum &lt;&lt; <span class=\"string\">&quot; &quot;</span>;  <span class=\"comment\">// 直接输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">            i = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;(&#x27;</span>) op.<span class=\"built_in\">push</span>(str[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(op.<span class=\"built_in\">top</span>() != <span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            op.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(op.<span class=\"built_in\">size</span>() &amp;&amp; h[op.<span class=\"built_in\">top</span>()] &gt;= h[str[i]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">eval</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            op.<span class=\"built_in\">push</span>(str[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(op.<span class=\"built_in\">size</span>()) <span class=\"built_in\">eval</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"括号匹配\">括号匹配</h3>\n<p>苗苗今天刚刚学会使用括号，不过他分不清小括号，中括号，大括号和尖括号，不知道怎么使用这些括号，请帮助他判断括号使用是否正确。</p>\n<h4 id=\"输入格式-2\">输入格式</h4>\n<p>共一行，包含一个由 <code>&lt;</code>,<code>(</code>,<code>&#123;</code>,<code>[</code>,<code>&gt;</code>,<code>)</code>,<code>&#125;</code>,<code>]</code> 构成的字符串。</p>\n<h4 id=\"输出格式-2\">输出格式</h4>\n<p>如果输入的字符串中的括号正确匹配则输出 <code>yes</code>，否则输出 <code>no</code>。</p>\n<h4 id=\"数据范围-3\">数据范围</h4>\n<p>输入字符串长度不超过 $10000$。</p>\n<h4 id=\"输入样例：-2\">输入样例：</h4>\n<p>(){}</p>\n<h4 id=\"输出样例：-2\">输出样例：</h4>\n<p>yes</p>\n<h4 id=\"Code-4\">Code</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string str;</span><br><span class=\"line\">stack&lt;<span class=\"type\">char</span>&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp&#123;&#123;<span class=\"string\">&#x27;(&#x27;</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&#x27;)&#x27;</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">&#x27;[&#x27;</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"string\">&#x27;]&#x27;</span>, <span class=\"number\">2</span>&#125;, &#123;<span class=\"string\">&#x27;&#123;&#x27;</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"string\">&#x27;&#125;&#x27;</span>, <span class=\"number\">3</span>&#125;, &#123;<span class=\"string\">&#x27;&lt;&#x27;</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"string\">&#x27;&gt;&#x27;</span>, <span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; str;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i] == <span class=\"string\">&#x27;&lt;&#x27;</span> || str[i] == <span class=\"string\">&#x27;[&#x27;</span> || str[i] == <span class=\"string\">&#x27;&#123;&#x27;</span> || str[i] == <span class=\"string\">&#x27;(&#x27;</span>) op.<span class=\"built_in\">push</span>(str[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;  <span class=\"comment\">// 需要判断栈是否为空，否则会出现RE</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[op.<span class=\"built_in\">top</span>()] != mp[str[i]]) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;no&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                op.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(op.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;no&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["DS"]},{"title":"好技巧","url":"http://example.com/2022/09/25/数学总结/","content":"<h2 id=\"高数\">高数</h2>\n<p>【来自AC群的包包】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309112130805.jpg\" alt=\"\"><br>\n【来自AC群的a宝】<br>\n多元微分学中<strong>偏导连续</strong>推所有，<strong>可微</strong>推其他，剩下的条件啥也推不出。</p>\n<blockquote>\n<p><strong>充分必要性</strong>：<br>\n如果【A可以推出B】，则【A是B的充分条件，B是A的必要条件】<br>\n<strong>理解</strong>：A能够充分的推出B，而推出B的必须要的条件是A(A是条件，B是结果)<br>\n如果【A可以推出B，B推不出A】，则【A是B的充分不必要条件，B是A的必要不充分条件】<br>\n<strong>例子</strong><br>\n下列条件中，3阶矩阵$A$可以相似对角化的<strong>充分不必要</strong>条件为：（）<br>\nA.$A$有3个不相等的特征值。<br>\nB.<br>\nC.<br>\nD.<br>\n也就是选项能$\\longrightarrow$条件，条件$\\not\\longrightarrow$选项。</p>\n</blockquote>\n<p><strong>反三角函数问题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212142147870.jpg\" alt=\"\"></p>\n<blockquote>\n<ul>\n<li></li>\n</ul>\n<p>分清下面两个式子：<br>\n（1）$\\sin{(\\arcsin{x})}=x$<br>\n（2）$\\arcsin{(\\sin{x})}=x$<br>\n对于（1）$\\sin{(\\arcsin{x})}=x$来说，由于$\\arcsin{x}$的定义域为$[-1,1]$，$\\sin{(\\arcsin{x})}$的主值区域也就是$\\sin{x}$的定义域为$[-\\infty,+\\infty]$，$\\sin{(\\arcsin{x})}$的主值区域(主值定义域)是包括了$\\arcsin{x}$的的定义域<br>\n但是对于（2）$\\arcsin{(\\sin{x})}=x$来说，由于$\\sin{x}$的定义域为$[-\\infty,+\\infty]$，$\\arcsin{(\\sin{x})}$的主值区域也就是$\\arcsin{x}$的定义域为$[-1,1]$，它的主值区域不能包括内部的$\\sin{x}$，因此$\\arcsin{(\\sin{x})}=x$是错误的。</p>\n</blockquote>\n<blockquote>\n<p><strong>不等式</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212211708264.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212211708298.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>涉及到反函数平移的问题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211172157771.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211172157109.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211172157124.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"函数、极限、连续\">函数、极限、连续</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251103811.png\" alt=\"\"></p>\n<blockquote>\n<p>遇见三角数列极限时候，比如$\\sin{x}，\\cos{x}$，常取$a_n=n\\pi，a_n=2n\\pi$</p>\n</blockquote>\n<blockquote>\n<p>遇见$\\sin{f(x)}$，$\\sin$里面很复杂的，可以尝试在内部加一个周期$n\\pi$，再减一个周期$n\\pi$</p>\n</blockquote>\n<blockquote>\n<p><strong>间断点</strong><br>\n$f(x)$具有以下之一的情况时<br>\n（1）$f(x)$在点$x_0$处没有定义<br>\n（2）$\\displaystyle\\lim_{x\\to x_0}f(x)$不存在<br>\n（3）$\\displaystyle\\lim_{x\\to x_0}\\not=f(x_0)$<br>\n<strong>第一类</strong>间断点判别<br>\n$\\displaystyle\\lim_{x\\to x_{0}^{-}}f(x)=\\lim_{x\\to x_{0}^{+}}f(x)$可去间断点。<br>\n$\\displaystyle\\lim_{x\\to x_{0}^{-}}f(x)\\not=\\lim_{x\\to x_{0}^{+}}f(x)$跳跃间断点<br>\n<strong>第二类</strong>间断点判别<br>\n$\\displaystyle\\lim_{x\\to x_{0}^{-}}\\frac{1}{x}=-\\infty$，称$x=0$是$\\frac{1}{x}$的无穷间断点；<br>\n$\\displaystyle\\lim_{x\\to x}\\sin{\\frac{1}{x}}$不存在，称$x=0$为$\\sin{\\frac{1}{x}}$的震荡间断点。</p>\n</blockquote>\n<blockquote>\n<p>遇见分段函数，最好将分段函数具体式子写出来</p>\n</blockquote>\n<blockquote>\n<p>$\\displaystyle F(x)=\\int_{-1}^{x}f(t)dt$<br>\n若$f(x)$可积，则$F(x)$连续<br>\n若$f(x)$连续，则$F(x)$可导</p>\n</blockquote>\n<blockquote>\n<p><strong>n项和式数列极限</strong><br>\n方法一：<strong>定积分定义</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310090743074.jpg\" alt=\"\"><br>\n方法二：夹逼</p>\n<p>【<strong>注</strong>】<br>\n计算和式极限时，看通项中的“<strong>次要矛盾</strong>”能否影响“<strong>主要矛盾</strong>”<br>\n若不影响$\\Longrightarrow$夹逼<br>\n若影响$\\Longrightarrow$定积分定义<br>\n如：$\\displaystyle\\lim_{n\\to \\infty}\\frac{n}{n^2+1^2}+\\frac{n}{n^2+2^2}+…+\\frac{n}{n^2+n^2}$<br>\n<strong>主要矛盾</strong>为$n^2$，<strong>次要矛盾</strong>为$i^2$<br>\n次要矛盾可以影响主要矛盾$\\Longrightarrow$定义<br>\n如：$\\displaystyle\\lim_{n\\to \\infty}\\frac{1}{n^2+n+1}+\\frac{2}{n^2+n+2}+…+\\frac{n}{n^2+n+n}$<br>\n<strong>主要矛盾</strong>为$n^2$，<strong>次要矛盾</strong>为$n+i$<br>\n次要矛盾不影响主要矛盾$\\Longrightarrow$夹逼</p>\n</blockquote>\n<h3 id=\"导数与微分\">导数与微分</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251104934.png\" alt=\"\"></p>\n<blockquote>\n<p>反函数的二阶导数<br>\n设$y=f(x)$有反函数$x=g(y)$<br>\n$\\displaystyle g^{\\prime}(y)=\\frac{dx}{dy}=\\frac{1}{\\frac{dy}{dx}}=\\frac{1}{f^{\\prime}(x)}$<br>\n$\\displaystyle g^{\\prime\\prime}(y)=\\frac{d^{2}x}{dy^{2}}=\\frac{d(\\frac{dx}{dy})}{dy}=\\frac{d\\frac{1}{f^{\\prime}(x)}}{dy}=\\frac{d\\frac{1}{f^{\\prime}(x)}}{dx}\\frac{dx}{dy}=\\frac{d(\\frac{1}{f^{\\prime}(x)})}{dx}\\frac{1}{f^{\\prime}(x)}=-\\frac{f^{\\prime\\prime}(x)}{[f^{\\prime}(x)]^{2}}\\frac{1}{f^{\\prime}(x)}$<br>\n其中$y_{x}^{\\prime}$表示对$x$求导，$x_{y}^{\\prime}$表示$x$对$y$求导</p>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310090757897.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310090818366.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在高阶导数中<br>\n利用$a^{n}-b^{n}=(a-b)(a^{n-1}+a^{n-2}b+…+b^{n-1})$可以化简。</p>\n</blockquote>\n<blockquote>\n<p>遇见绝对值，平方开根号</p>\n</blockquote>\n<blockquote>\n<p>对于心形线$r=1-\\cos{\\theta}$<br>\n可令$\\begin{cases}x=r(\\theta)\\cos{\\theta}=(1-\\cos{\\theta})\\cos{\\theta} \\\\ y=r(\\theta)\\sin{\\theta}=(1-\\cos{\\theta})\\sin{\\theta} \\end{cases}$进行求在某点处的切线。</p>\n</blockquote>\n<blockquote>\n<p>罗尔定理的推论：<br>\n若在区间$I$上$f^{(n)}(x)\\not=0$，则方程$f(x)=0$在$I$上，最多有$n$个不同实根。</p>\n</blockquote>\n<blockquote>\n<p>二阶导数$&gt;0$：凹<br>\n二阶导数$&lt;0$：凸</p>\n</blockquote>\n<blockquote>\n<p><strong>极值点</strong>是一阶导数正负号发生变化的地方。<br>\n<strong>拐点</strong>是二阶导数正负发生变化的地方，也是一阶导数单调性发生变化的地方。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312062159160.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"微分中值定理与泰勒公式\">微分中值定理与泰勒公式</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311170856422.png\" alt=\"\"></p>\n<p><strong>构造函数方法</strong></p>\n<blockquote>\n<p>例：$f^{\\prime}(x)+3f(x)$<br>\n令$f^{\\prime}(x)+3f(x)$，解微分方程。<br>\n得$f(x)=Ce^{-3x}\\Longrightarrow C=e^{3x}f(x)$<br>\n就可以设$F(x)=C=e^{3x}f(x)$<br>\n.<br>\n此方法可以解决2020的20题，通过构造函数，使用罗尔定理。</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310310940388.jpg\" alt=\"\"></p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311170858323.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"导数的应用\">导数的应用</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251104601.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>曲率公式</strong></p>\n<p>曲率：$k=\\displaystyle\\frac{\\lvert y^{\\prime\\prime} \\rvert}{(1+y^{\\prime})^{\\frac{3}{2}}}$</p>\n<p>曲率半径：$R=\\frac{1}{k}$</p>\n</blockquote>\n<h3 id=\"不定积分-2\">不定积分</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251105732.png\" alt=\"\"></p>\n<blockquote>\n<p>方法导论<br>\n有理函数的积分：<a href=\"https://www.jasonqian.com/2022/03/29/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86-%E6%9C%89%E7%90%86%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%AF%E5%88%86/\">https://www.jasonqian.com/2022/03/29/不定积分-有理函数的积分/</a><br>\n三角函数的积分：<a href=\"https://www.jasonqian.com/2022/04/01/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86-%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E7%A7%AF%E5%88%86/\">https://www.jasonqian.com/2022/04/01/不定积分-三角函数的积分/</a><br>\n换元法-分部积分：<a href=\"https://www.jasonqian.com/2022/04/10/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86-%E6%8D%A2%E5%85%83%E6%B3%95-%E5%88%86%E9%83%A8%E7%A7%AF%E5%88%86/\">https://www.jasonqian.com/2022/04/10/不定积分-换元法-分部积分/</a></p>\n</blockquote>\n<blockquote>\n<p><strong>不定积分的方法总结</strong></p>\n<ol>\n<li>\n<p>被积函数较为复杂可用换元法化简式子，再积分。如$\\displaystyle\\int \\ln{(1+\\sqrt{\\frac{1+x}{x}})}dx$，可用令$t=\\sqrt{\\frac{1+x}{x}}$，再进行积分。</p>\n</li>\n<li>\n<p>掌握<strong>拆分</strong>的方法<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311202114513.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p>遇见$\\sqrt{1-e^{2x}}、\\sqrt{1-x^2}$可考虑三角代换，令$e^x/x=\\cos{t}$。</p>\n</li>\n<li>\n<p>遇见$\\sqrt{f(x)}$，可以令$t=\\sqrt{f(x)}$</p>\n</li>\n<li>\n<p>遇见复合函数中含有$e^x$要想到分部积分</p>\n</li>\n<li>\n<p>$\\int\\sec^3{x}dx(☆☆☆)$<br>\n<strong>注</strong>：$\\displaystyle\\int\\sec{x}dx = \\ln|\\tan{x} + \\sec{x}| + C$和$\\displaystyle\\int\\sec^2{x}dx = \\tan{x} + C$是最基本积分公式。<br>\n<strong>方法一</strong>：<br>\n$$\\begin{aligned} I &amp; = \\int\\frac{1}{\\cos^3{x}}dx \\\\ &amp;=\\int\\frac{\\cos{x}}{\\cos^4{x}}dx \\\\ &amp; =\\int\\frac{1}{\\cos^4{x}}d\\sin{x} \\\\ &amp;=\\int\\frac{1}{(1 - \\sin^2{x})^2}dx \\\\ &amp;令t = \\sin{x} \\Rightarrow \\ \\int[\\frac{1}{(1 - t)(1 + t)}]^2dt \\\\ &amp;=\\int[\\frac{1}{(t - 1)(t + 1)}]^2dt \\\\ &amp;=\\int[\\frac{1}{2}(\\frac{1}{t - 1} - \\frac{1}{t + 1})]^2dt \\\\ &amp;=\\frac{1}{4}\\int[\\frac{1}{(t - 1)^2} - \\frac{2}{t^2 - 1} + \\frac{1}{(t + 1)^2}]dt \\end{aligned}$$<br>\n<strong>方法二</strong>：“分部积分 + 积分重现”<br>\n$$\\begin{aligned} I &amp;= \\int\\sec{x}d\\tan{x} \\\\ &amp;=\\sec{x}\\tan{x} - \\int\\tan{x}d\\sec{x} \\\\ &amp;=\\sec{x}\\tan{x} - \\int\\tan^2{x}\\sec{x}dx \\\\ &amp;=\\sec{x}\\tan{x} - \\int(\\sec^2{x} - 1)\\sec{x}dx \\\\ &amp;=\\sec{x}\\tan{x} - \\int\\sec^3{x}dx + \\int\\sec{x}dx \\\\ &amp;=\\sec{x}\\tan{x} - I + \\ln|\\sec{x} + \\tan{x}| + C \\\\ 解得 \\Rightarrow I &amp;= \\frac{\\sec{x}\\tan{x} + \\ln|\\sec{x} + \\tan{x}|}{2} + C \\end{aligned}$$<br>\n<strong>注</strong>：求类似$\\displaystyle\\int\\sec^n{x}dx$，可以采用<strong>分部积分</strong>法。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211272145105.png\" alt=\"\"></p>\n</li>\n<li>\n<p>$\\displaystyle \\int_{0}^{\\pi}xf(\\sin{x})dx=\\frac{\\pi}{2}\\int_{0}^{\\pi}f(\\sin{x})dx=\\pi\\int_{0}^{\\frac{\\pi}{2}}f(\\sin{x})dx$</p>\n</li>\n<li>\n<p>能换元就尽早换元</p>\n</li>\n</ol>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310090946400.jpg\" alt=\"\"></p>\n<h3 id=\"定积分\">定积分</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251105489.png\" alt=\"\"></p>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309010913300.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312142213610.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>定积分存在定性</strong><br>\n（1）若$f(x)$在$[a,b]$上连续，则$\\displaystyle\\int_{a}^{b}f(x)dx$一定存在<br>\n（2）若$f(x)$在$[a,b]$上有界，存在有限个间断点，则$\\displaystyle\\int_{a}^{b}f(x)dx$也存在</p>\n<p><strong>不定积分存在性</strong><br>\n（1）设$f(x)$在区间$I$上连续，则$f(x)$在区间$I$上原函数一定存在<br>\n（2）若$f(x)$在$[a,b]$上有定义，且存在第一类间断点或无穷间断点，则在$[a,b]$上原函数一定不存在<br>\n（3）若$f(x)$在$[a,b]$上存在震荡间断点，此时原函数有可能存在。</p>\n</blockquote>\n<blockquote>\n<p><strong>无界函数反常积分定理</strong></p>\n<ol>\n<li>$\\displaystyle\\int_{-\\infty}^{\\infty}f(x)dx$收敛$\\Longrightarrow \\displaystyle\\int_{-\\infty}^{a}f(x)dx,\\int_{a}^{\\infty}f(x)dx$均收敛</li>\n<li>$\\displaystyle\\int_{a}^{b}f(x)dx$收敛$\\Longrightarrow \\displaystyle\\int_{a}^{c}f(x)dx,\\int_{c}^{b}f(x)dx$均收敛</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>区间再现公式</strong><br>\n$\\displaystyle \\int_{a}^{b}f(x)dx\\stackrel{x=a+b-t}{=}\\displaystyle\\int_{a}^{b}f(a+b-t)dt$</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312102223419.jpg\" alt=\"\"></p>\n</blockquote>\n<p>$\\equalscolon$</p>\n<blockquote>\n<p><strong>参数方程求面积</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310221014157.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>反常积分计算</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312102223947.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>反常积分(土豆)</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312012105662.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190918657.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190918145.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190918599.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190918299.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190918746.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190919157.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310190919341.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>伽马函数（概统中常用）</strong><br>\n$\\Gamma(\\alpha)=\\displaystyle\\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx(\\alpha&gt;0)$</p>\n<p>被积函数是$x$的几次方，积分就是$\\Gamma(几+1)$。</p>\n<p>性质：</p>\n<ol>\n<li>$\\Gamma(1)=1，\\Gamma(\\frac{1}{2})=\\sqrt{\\pi}$</li>\n<li>$\\Gamma(\\alpha+1)=\\alpha\\Gamma(\\alpha)$</li>\n<li>由于1.2.，对自然数$n$，有$\\Gamma(n+1)=n!$</li>\n</ol>\n<p><strong>区分</strong></p>\n<ol>\n<li>$\\Gamma(\\frac{1}{2})=\\displaystyle \\int_{0}^{+\\infty}x^{-\\frac{1}{2}}e^{-x}dx=\\sqrt{\\pi}$</li>\n<li>$\\displaystyle \\int_{-\\infty}^{+\\infty}e^{-t^{2}}dt=\\sqrt{\\pi}$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042205029.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042206455.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"多元函数微分学\">多元函数微分学</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251105870.png\" alt=\"\"></p>\n<blockquote>\n<p>$f(x,y)$在点$(x_0,y_0)$处可微<br>\n必要条件</p>\n<ol>\n<li>若函数在某点可微，则函数在该点必连续</li>\n<li>若$f(x,y)$在某点可微分，在该点的$x,y$偏导数必存在</li>\n</ol>\n<p>充分条件</p>\n<ol>\n<li>若函数对$x,y$的偏导数在这点的某一领域内都存在，且均在这一点连续，则该函数在这点可微</li>\n</ol>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310110838812.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>多元微分可微</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311062105586.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312142212343.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312192118514.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>涉及求抽象函数$\\frac{dy}{dx}$时，根据题目求导，分离求得。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310111051865.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>$\\displaystyle\\frac{\\partial ^{2}f}{\\partial x\\partial y}=\\frac{\\partial ^{2}f}{\\partial y\\partial x}$问题<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311031401757.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>有条件极值，无条件极值综合</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311222145890.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>场论初步</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310110943620.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310110944582.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>例题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310111039646.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310111039400.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"微分方程-2\">微分方程</h3>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310081047547.jpg\" alt=\"\"><br>\n【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312012106888.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308171144269.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312112204914.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>【注】考研应该不会出这种有奇异的<br>\n$x^2f^{\\prime\\prime}(x)-2xf^{\\prime}(x)+2f(x)=0$<br>\n令$x=e^{t}$<br>\n$\\Longrightarrow f^{\\prime\\prime}(t)-3f^{\\prime}(t)+2f(t)=0$<br>\n这里的$f(t)$为什么不是$f(x)$?<br>\n因为，令$x$等于$e^{t}$后，将$x$的函数$f(x)$变为了$t$的函数$f(t)$，这里写成$f(t)$是为了统一，方便计算。</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】</p>\n<p><strong>欧拉方程</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311171012784.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>若$y_1,y_2$是非齐次线性微分方程$y^{\\prime}+p(x)y=Q(x)$的两个解<br>\n则</p>\n<ol>\n<li>$k_1y_1+k_2y_2$是方程$y^{\\prime}+p(x)y=Q(x)$的解得充要条件为$k_1+k_2=1$</li>\n<li>$k_1y_1+k_2y_2$是方程$y^{\\prime}+p(x)y=0$的解得充要条件为$k_1+k_2=0$</li>\n<li>高阶也有类似的结论</li>\n</ol>\n</blockquote>\n<h3 id=\"二重积分\">二重积分</h3>\n<blockquote>\n<p><strong>二重积分与三重积分关于被积函数为1的情况</strong></p>\n<p><strong>二重积分</strong>被积函数为1的情况，求的是<strong>面积</strong><br>\n<strong>三重积分</strong>被积函数为1的情况，求的是<strong>体积</strong></p>\n<p>【<strong>理解</strong>】<br>\n体积=底面积×高</p>\n<p>高=1时，数值上体积=底面积</p>\n<p>同理</p>\n<p>质量=体积×密度</p>\n<p>密度=1时，数值上质量=体积</p>\n</blockquote>\n<blockquote>\n<p><strong>二重积分求旋转体体积</strong><br>\n$\\displaystyle V =2\\pi\\iint r(x,y)d\\sigma$，其中$r(x,y)$就是区域到旋转轴的距离。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212162037935.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>计算二重积分时候，<strong>区域内为正，区域外为负</strong>。</p>\n</blockquote>\n<blockquote>\n<p><strong>二重积分极坐标系确立</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311130900248.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>二重积分极坐标系</strong><br>\n$\\displaystyle \\iint\\limits_{D}f(x,y)d\\delta=\\displaystyle\\int_{\\alpha}^{\\beta}d\\theta\\int_{r_1(\\theta)}^{r_2(\\theta)}f(r\\cos{\\theta},r\\sin{\\theta})\\begin{vmatrix}\\frac{\\partial x}{\\partial r} &amp; \\frac{\\partial x}{\\partial \\theta} \\\\ \\frac{\\partial y}{\\partial r} &amp; \\frac{\\partial y}{\\partial \\theta} \\end{vmatrix}dr=\\displaystyle\\int_{\\alpha}^{\\beta}d\\theta\\int_{r_1(\\theta)}^{r_2(\\theta)}f(r\\cos{\\theta},r\\sin{\\theta})\\begin{vmatrix}\\cos{\\theta} &amp; -r\\sin{\\theta} \\\\ \\sin{\\theta} &amp; r\\cos{\\theta} \\end{vmatrix}dr=\\displaystyle\\int_{\\alpha}^{\\beta}d\\theta\\int_{r_1(\\theta)}^{r_2(\\theta)}f(r\\cos{\\theta},r\\sin{\\theta})rdr$</p>\n</blockquote>\n<blockquote>\n<p><strong>极坐标下的积分调换次序问题</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212041733064.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"三重积分\">三重积分</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310112100347.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310112100221.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>柱面坐标例题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311261004029.jpg\" alt=\"\"></p>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310112100106.jpg\" alt=\"\"></p>\n<blockquote>\n<p>【<strong>注</strong>】</p>\n<ol>\n<li>关于$\\varphi$的取值问题<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310181238685.jpg\" alt=\"\"></li>\n<li>使用球面坐标系的时候，<strong>球心必须在原点处</strong>，若不在球心则需要变换，如下例子<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310181539536.jpg\" alt=\"\"></li>\n</ol>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310112132024.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310252001208.jpg\" alt=\"\"><br>\n例题①是转化为<strong>球面坐标系</strong>，例题②是<strong>先一后二法</strong>，例题③是<strong>先二后一法、先一后二法</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311091124522.jpg\" alt=\"\"></p>\n<p>【<strong>形心</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311142133018.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"空间解析几何\">空间解析几何</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191443405.png\" alt=\"\"></p>\n<blockquote>\n<p>向量的表达形式</p>\n<ol>\n<li>$\\vec{a}=(a_1,a_2,a_3)=a_1\\vec{i}+a_2\\vec{j}+a_3\\vec{k}$</li>\n<li>$\\lvert \\vec{a} \\rvert=\\sqrt{a_1^2+a_2^2+a_3^2}$</li>\n<li>$(\\vec{a})^{0}=\\frac{\\vec{a}}{\\lvert \\vec{a} \\rvert}=(\\frac{a_1}{\\sqrt{a_1^2+a_2^2+a_3^2}})+(\\frac{a_2}{\\sqrt{a_1^2+a_2^2+a_3^2}})+(\\frac{a_3}{\\sqrt{a_1^2+a_2^2+a_3^2}})$</li>\n<li>以$P_1(a_1,b_1,c_1)$为起点、$P_2(a_2,b_2,c_2)$为终点的向量为$\\vec{P_1P_2}=(a_2-a_2,b_2-b_1,c_2-c_1)$</li>\n<li>方向余弦：设非零向量$\\vec{a}=(a,b,c)$，则$\\vec{a}$的方向余弦为$$\\cos{\\alpha}=\\frac{a}{\\sqrt{a^2+b^2+c^2}},\\cos{\\beta}=\\frac{b}{\\sqrt{a^2+b^2+c^2}},\\cos{\\gamma}=\\frac{c}{\\sqrt{a^2+b^2+c^2}}$$<br>\n【<strong>注</strong>】：<br>\n①$\\cos^{2}{\\alpha}+\\cos^{2}{\\beta}+\\cos^{2}{\\gamma}=1$<br>\n②$(\\cos{\\alpha},\\cos{\\beta},\\cos{\\gamma})$为单位向量</li>\n</ol>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191540559.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191540953.jpg\" alt=\"\"></p>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311202113907.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191540709.jpg\" alt=\"\"></p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312192117086.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>空间曲线方程方向向量与法向量</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310192112686.jpg\" alt=\"\"></p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310230931352.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311261112337.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311031114471.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>曲面方程</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191539588.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191557833.jpg\" alt=\"\"><br>\n【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191557030.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310231938826.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191557453.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"无穷级数-2\">无穷级数</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251106365.png\" alt=\"\"></p>\n<blockquote>\n<p>【<strong>综合例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311141108354.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311202114886.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312192118716.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>级数的<strong>收敛与发散的判定</strong></p>\n<p>设级数$\\displaystyle\\sum_{n=1}^{\\infty}u_n$的部分和为$S_n=u_1+u_2+…+u_n$，当$\\displaystyle\\lim_{n\\to \\infty}S_n=S$时，称$\\displaystyle\\sum_{n=1}^{\\infty}u_n$收敛于$S$；当$\\displaystyle\\lim_{n\\to\\infty}S_n$不存在时，称$\\displaystyle\\sum_{n=1}^{\\infty}u_n$发散</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311031047163.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>常数项级数性质</p>\n<ol>\n<li>若通项$a_n$不趋向$0$，则级数发散</li>\n<li>若$\\displaystyle\\sum_{n=1}^{\\infty}u_n$收敛，则$\\displaystyle\\lim_{n\\to\\infty}u_n=0$</li>\n<li>若级数收敛$\\longrightarrow$加括号收敛</li>\n<li>若级数发散$\\longleftarrow$加括号发散</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>p级数<br>\n$\\displaystyle\\sum_{n=1}^{\\infty}\\frac{1}{n^{p}}\\begin{cases}收敛，p&gt;1 \\\\ 发散，0&lt;p\\le 1 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p><strong>比较法的极限形式</strong><br>\n$\\displaystyle\\lim_{n\\to \\infty}\\frac{u_n}{v_n}=l，\\begin{cases}0&lt;l&lt;+\\infty，则\\displaystyle\\sum_{n=1}^{\\infty}u_n与\\sum_{n=1}^{\\infty}v_n同敛散性 \\\\ l=0，若\\displaystyle\\sum_{n=1}^{\\infty}v_n收敛\\sum_{n=1}^{\\infty}u_n收敛 \\\\ l=+\\infty，\\displaystyle\\sum_{n=1}^{\\infty}v_n发散\\sum_{n=1}^{\\infty}u_n发散 \\end{cases}$<br>\n【<strong>关键</strong>】</p>\n<ol>\n<li>找一个<strong>好的比较对象</strong></li>\n<li>找<strong>等价无穷小</strong>或<strong>同阶无穷小</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130951126.jpg\" alt=\"\"></li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>比值法</strong><br>\n$\\displaystyle\\lim_{n\\to\\infty} \\frac{u_{n+1}}{u_n}=l， \\begin{cases}l&lt;1，&amp;收敛 \\\\ l&gt;1(+\\infty)，&amp;发散 \\\\ l=0，&amp;不确定，此时用比较法或者定义判断 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p><strong>根植法</strong><br>\n适用于幂级数<br>\n$\\displaystyle\\lim_{n\\to\\infty}\\sqrt[n]{u_n}=l，\\begin{cases}l&lt;1，&amp;收敛 \\\\ l&gt;1(\\infty)，&amp;发散 \\\\ l=1，&amp;不确定 \\end{cases}$<br>\n适用性更广</p>\n</blockquote>\n<blockquote>\n<p><strong>积分判别法</strong><br>\n设<strong>非负</strong>函数$f(x)$在$[1,+\\infty)$上<strong>单调减少</strong>，则正项级数$\\displaystyle\\sum_{n=1}^{\\infty}f(n)$与反常积分$\\displaystyle\\int_{1}^{+\\infty}f(x)dx$的敛散性相同。</p>\n</blockquote>\n<blockquote>\n<p>正项级数的比较法、比值法、根植法定理$\\Longrightarrow$敛散性<br>\n敛散性$\\not\\Longrightarrow$正项级数的比较法、比值法、根植法定理</p>\n</blockquote>\n<blockquote>\n<p><strong>莱布尼兹定理</strong><br>\n$\\begin{cases}{u_n}单调减少 \\\\ \\displaystyle\\lim_{n\\to\\infty}u_n=0 \\end{cases}\\Longrightarrow \\displaystyle\\sum_{n=1}^{\\infty}(-1)^{n-1}u_n$收敛。</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>绝对收敛：若$\\displaystyle\\sum_{n=1}^{\\infty}|u_n|$收敛，则称$\\displaystyle\\sum_{n=1}^{\\infty}u_n$绝对收敛</li>\n<li>条件收敛：若$\\displaystyle\\sum_{n=1}^{\\infty}|u_n|$发散，但$\\displaystyle\\sum_{n=1}^{\\infty}u_n$收敛，则称$\\displaystyle\\sum_{n=1}^{\\infty}u_n$条件收敛</li>\n<li>若$\\displaystyle\\sum_{n=1}^{\\infty}u_n$绝对收敛，则$\\displaystyle\\sum_{n=1}^{\\infty}u_n$收敛</li>\n</ol>\n<p>判断交错级数敛散性：</p>\n<ol>\n<li>判断加绝对值的交错级数是否收敛，收敛$\\Longrightarrow$绝对收敛</li>\n<li>若不收敛，利用莱布尼兹定理判断是否为条件收敛</li>\n<li>都不行就发散</li>\n</ol>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312062159800.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>举特例判断敛散性</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011117518.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>幂级数</strong><br>\n<strong>阿贝尔定理</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130750168.jpg\" alt=\"\"></p>\n<p><strong>收敛半径计算公式</strong><br>\n设幂级数$\\displaystyle\\sum_{n=0}^{\\infty}a_n x^{n},\\displaystyle \\lim_{n\\to\\infty} \\lvert\\frac{a_{n+1}}{a_{n}}\\rvert=\\rho(或\\lim_{n\\to\\infty}\\sqrt[n]{|a_n|}=\\rho)$，则<br>\n$$R=\\begin{cases}\\frac{1}{\\rho},\\rho\\not=0 \\\\ \\pm \\infty,\\rho=0 \\\\ 0,\\rho=+\\infty \\end{cases}$$<br>\n得到收敛域为$(-R,R)$，还需要判断端点处，也就是当$x=\\pm R$时候的敛散性，收敛取$[$，发散取$($</p>\n<p>逐项积分或求导不改变收敛半径</p>\n<p>【<strong>证明</strong>】<br>\n$\\displaystyle \\lim_{n\\to\\infty} \\lvert\\frac{a_{n+1}x^{n+1}}{a_{n}x}\\rvert = \\lim_{n\\to\\infty} \\lvert\\frac{a_{n+1}}{a_{n}} \\rvert \\lvert x\\rvert=\\rho \\lvert x \\rvert$</p>\n<ol>\n<li>当$\\rho \\not=0$时，若$\\rho \\lvert x \\rvert&lt;1\\Longrightarrow \\lvert x \\rvert&lt;\\frac{1}{\\rho}$，级数收敛；若$\\rho \\lvert x \\rvert&gt;1\\Longrightarrow \\lvert x \\rvert&gt;\\frac{1}{\\rho}$，级数发散。此时$\\lvert x\\rvert=\\frac{1}{\\rho}$为收敛半径。</li>\n<li>当$\\rho =0$时，$\\rho \\lvert x\\rvert &lt;1$对任意$x$都成立，则半径$R=+\\infty$</li>\n<li>当$\\rho =+\\infty$时，$\\displaystyle\\sum_{n=0}^{\\infty}a_nx^n$只在$x=0$处收敛，故$R=0$</li>\n</ol>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311201001375.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011116346.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011117931.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011117848.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312112204600.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>绝对收敛$\\pm$绝对收敛$=$绝对收敛</li>\n<li>绝对收敛$\\pm$条件收敛$=$条件收敛</li>\n<li>条件收敛$\\pm$条件收敛$=$不确定</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>幂级数求导、积分</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310231937891.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310231937600.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311031516512.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>小猪佩奇</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308220900087.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310131105185.jpg\" alt=\"\"><br>\n【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130821436.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310131454284.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310131456689.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310220947299.jpg\" alt=\"\"><br>\n<strong>注意lnx的x范围</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312112205342.jpg\" alt=\"\"></p>\n<p><strong>收敛区间取交集</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311171125501.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>傅里叶级数</strong></p>\n<ol>\n<li>周期为$2\\pi$的函数$f(x)$的傅里叶级数<br>\n设$f(x)$是以$2\\pi$为周期的函数，则$f(x)$的傅里叶级数为$$f(x)\\sim \\frac{a_0}{2}+\\displaystyle\\sum_{n=1}^{\\infty}(a_n\\cos{nx}+b_n\\sin{nx})$$<br>\n其中<br>\n$$\\begin{aligned}a_n=\\frac{1}{\\pi}\\displaystyle\\int_{-\\pi}^{\\pi}f(x)\\cos{nx}dx(n=1,2,…) \\\\ b_n=\\frac{1}{\\pi}\\displaystyle\\int_{-\\pi}^{\\pi}f(x)\\sin{nx}dx(n=1,2,…) \\end{aligned}$$</li>\n<li>收敛定理<br>\n若$f(x)$在一个周期$[-\\pi,\\pi]$上满足：<br>\n（1）$f(x)$连续或只有有限个第一类间断点<br>\n（2）$f(x)$只有有限个极值点<br>\n则$f(x)$的傅里叶级数$\\frac{a_0}{2}+\\displaystyle\\sum_{n=1}^{\\infty}(a_n\\cos{nx}+b_n\\sin{nx})$的和函数为<br>\n$$S(x)=\\begin{cases}f(x)，&amp;x为连续点 \\\\ \\frac{f(x+0)+f(x-0)}{2}，&amp;x为间断点 \\\\ \\frac{f(-\\pi+0)+f(\\pi+0)}{2}，&amp;x=\\pm x \\end{cases}$$</li>\n<li><strong>正弦级数和余弦级数</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130840464.jpg\" alt=\"\"><br>\n$$f(x)=\\displaystyle\\frac{a_0}{2}+\\sum_{n=1}^{\\infty}a_n\\cos{nx}$$</li>\n<li></li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130848531.jpg\" alt=\"\"></p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130849171.jpg\" alt=\"\"><br>\n因为$f(x)$是展开周期为$2$的正弦级数<br>\n故$\\displaystyle S(-\\frac{5}{2})\\stackrel{奇偶性}{\\Longrightarrow}-S(\\frac{5}{2})\\stackrel{周期性}{\\Longrightarrow}-S(\\frac{1}{2})\\stackrel{收敛}{\\Longrightarrow}-\\frac{f(\\frac{1}{2}-0)+f(\\frac{1}{2}+0)}{2}=-\\frac{-\\frac{1}{2}+1}{2}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130857333.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130914269.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130907341.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310130914960.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310231936151.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"数一专项\">数一专项</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251106000.png\" alt=\"\"></p>\n<blockquote>\n<p>$\\oint$表示封闭曲线，$\\oiint$表示封闭曲面</p>\n</blockquote>\n<blockquote>\n<p><strong>空间投影曲线</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311009043.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"第一类曲线积分\">第一类曲线积分</h4>\n<p>第一类曲线积分就是在线上进行积分，用于<strong>求质量</strong>，因此<strong>与方向无关</strong>，可以用<strong>奇偶性</strong>。</p>\n<h5 id=\"物理含义\">物理含义</h5>\n<p>若$\\rho(x,y,z)$表示$L$的密度，则$L$的质量为<br>\n$$m=\\displaystyle\\int_{L}\\rho(x,y,z)ds$$</p>\n<h5 id=\"性质\">性质</h5>\n<p>（1）$\\displaystyle\\int_{L}ds=s$（$s$表示曲线的长度）<br>\n（2）$\\displaystyle\\int_{L}[k_{1}f(x,y)+k_{2}g(x,y)]ds=k_{1}\\displaystyle\\int_{L}f(x,y)ds+k_{2}\\int_{L}g(x,y)ds$<br>\n（3）$\\displaystyle\\int_{L}f(x,y)ds=\\int_{L_1}f(x,y)ds+\\int_{L_{2}}f(x,y)ds$，其中$L=L_{1}+L_{2}$</p>\n<h5 id=\"对称性\">对称性</h5>\n<blockquote>\n<p>（1）<strong>奇偶性</strong><br>\n①若曲线$L$关于$y$轴对称，$L_1$为$L$位于$y$轴<strong>右侧</strong>部分，则$$\\displaystyle\\int_{L}f(x,y)ds=\\begin{cases}2\\int_{L_{1}}f(x,y)ds，&amp;f(x,y)关于x是偶函数 \\\\ 0，&amp;f(x,y)关于x是奇函数 \\end{cases}$$<br>\n②若曲线$L$关于$x$轴对称，$L_1$为$L$位于$y$轴<strong>上侧</strong>部分，则$$\\displaystyle\\int_{L}f(x,y)ds=\\begin{cases}2\\int_{L_{1}}f(x,y)ds，&amp;f(x,y)关于y是偶函数 \\\\ 0，&amp;f(x,y)关于y是奇函数 \\end{cases}$$<br>\n<strong>也就是说如果曲线关于哪个轴对称，看另一个轴的奇偶性，如果是</strong>偶函数$\\times 2$，奇函数就为$0$。</p>\n</blockquote>\n<blockquote>\n<p>（2）<strong>轮换对称性</strong><br>\n若曲线$L$关于直线$y=x$对称，则$\\displaystyle\\int_{L}f(x,y)ds=\\int_{L}f(y,x)ds$，即$$\\int_{L}f(x,y)ds=\\frac{1}{2}\\int_{L}[f(x,y)+f(y,x)]ds$$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311010935095.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310260856073.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310150848011.jpg\" alt=\"\"></p>\n<p>【<strong>注</strong>】<br>\n曲线L为$x^2+y^2+z^2=\\frac{9}{2}$与$x+z=1$的交线，则$I=\\displaystyle\\oint_{L}(x^2+y^2+z^2)ds$为？<br>\n此时$I=\\displaystyle\\oint_{L}(x^2+y^2+z^2)dx=\\frac{9}{2}\\oint_{L}1 ds$中的$\\displaystyle\\oint_{L}1 ds$不代表上面一题的半径为$R$的这个圆，而是需要将$z=1-x$代入求得。图像如下<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310150855221.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310260857352.jpg\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"计算\">计算</h5>\n<p><strong>参数方程</strong> 设曲线$L$的参数方程为$\\begin{cases} x=x(t) \\\\ y=y(t) \\end{cases}$，（$\\alpha \\le t \\le \\beta$），则$$\\displaystyle\\int_{L}f(x,y)ds=\\int_{\\alpha}^{\\beta}f[x(t), y(t)]\\sqrt{[x^{\\prime}(t)]^{2}+[y^{\\prime}(t)]^2}dt$$</p>\n<p><strong>直角坐标</strong> 设曲线$L$的直角坐标为$y=y(x)$，（$a \\le x \\le b$），则$$\\displaystyle\\int_{L}f(x,y)ds=\\int_{a}^{b}f[x, y(x)]\\sqrt{1+[y^{'}(x)]^2}dx$$</p>\n<p><strong>极坐标</strong> 设曲线$L$的极坐标为$r=r(\\theta)$，（$\\alpha \\le \\theta \\le \\beta$），则$$\\displaystyle\\int_{L}f(x,y)ds=\\int_{\\alpha}^{\\beta}f(r\\cos{\\theta}, r\\sin{\\theta})\\sqrt{[r(\\theta)]^2+[r^{'}(\\theta)]^2}d\\theta$$</p>\n<p>【<strong>说明</strong>】<br>\n①对于空间曲线$L:\\begin{cases}x=x(t)\\\\y=y(t)\\\\z=z(t) \\end{cases}$，($\\alpha \\le t \\le \\beta$)，则$$\\displaystyle\\int_{L}f(x,y,z)ds=\\int_{\\alpha}^{\\beta}f[x(t),y(t),z(t)]\\sqrt{[x^{‘}(t)]^2+[y^{’}(t)]^2+[z^{'}(t)]^2}dt$$<br>\n②由于被积函数$f(x,y,z)$定义在曲线$L$上，故计算时，可以代入$L$的方程。<br>\n【例】求$I=\\displaystyle\\int_{L}(x^2+y^2)ds$，其中$L:x^2+y^2=1$<br>\n<strong>解</strong>：$$I=\\displaystyle\\int_{L}(x^2+y^2)ds=\\int_{L}1ds=2\\pi$$</p>\n<blockquote>\n<p>参数方程确定$t$的取值范围，一般根据题目条件进行判断。<br>\n直角坐标确定$x$的取值范围，一般通过投影到$x$轴进行判断。<br>\n极坐标确定$\\theta$的取值范围，一般通过画图观察$\\theta$的取值范围。</p>\n</blockquote>\n<h5 id=\"物理应用\">物理应用</h5>\n<blockquote>\n<p>（1）求<strong>弧长</strong><br>\n$s=\\displaystyle\\int_{L}1ds$</p>\n</blockquote>\n<blockquote>\n<p>（2）求曲线$L$的<strong>质心坐标</strong><br>\n$\\bar{x}=\\displaystyle\\frac{\\int_{L}x\\rho(x,y,z)ds}{\\int_{L}\\rho(x,y,z)ds}$，$\\bar{y}=\\displaystyle\\frac{\\int_{L}y\\rho(x,y,z)ds}{\\int_{L}\\rho(x,y,z)ds}$，$\\bar{z}=\\displaystyle\\frac{\\int_{L}z\\rho(x,y,z)ds}{\\int_{L}\\rho(x,y,z)ds}$</p>\n</blockquote>\n<blockquote>\n<p>（3）求<strong>转动惯量</strong><br>\n设曲线$L$的线密度为$\\rho(x,y,z)$，则<br>\n$$\\begin{aligned}关于x轴转动I_{x}=\\displaystyle\\int_{L}(y^2+z^2)\\rho(x,y,z)ds\\\\ 关于y轴转动I_{y}=\\displaystyle\\int_{L}(x^2+z^2)\\rho(x,y,z)ds\\\\ 关于z轴转动I_{z}=\\displaystyle\\int_{L}(x^2+y^2)\\rho(x,y,z)ds\\\\ 关于原点转动I_{o}=\\displaystyle\\int_{L}(x^2+y^2+z^2)\\rho(x,y,z)ds\\end{aligned}$$</p>\n<p>【<strong>记忆</strong>】被积函数：距离的平方$\\times$ 密度</p>\n</blockquote>\n<h5 id=\"例题\">例题</h5>\n<blockquote>\n<p>【<strong>例一</strong>】<br>\n设$L$为圆周$x^2+y^2=2x$，则$I=\\displaystyle\\int_{L}xds=$</p>\n<p><strong>方法一</strong>：利用对称性<br>\n$\\displaystyle\\int_{L}xds=\\displaystyle\\int_{L}(x-1)+1ds=\\displaystyle\\int_{L}(x-1)ds+\\displaystyle\\int_{L}1ds$<br>\n由于$x^2+y^2=2x\\Longrightarrow (x-1)^{2}+y^{2}=1$关于$y=0$对称<br>\n$(x-1)$是关于$x=1$的奇函数<br>\n因此<br>\n$\\displaystyle\\int_{L}(x-1)ds=0$<br>\n$\\displaystyle\\int_{L}1ds=2\\pi$<br>\n故$I=2\\pi$</p>\n<p><strong>方法二</strong>：参数方程<br>\n$x^2+y^2=2x\\Longrightarrow (x-1)^{2}+y^{2}=1$<br>\n令$\\begin{cases}x=\\cos{t}+1 \\\\ y=\\sin{t} \\end{cases}，t\\in(0,2\\pi)$<br>\n$I=\\displaystyle\\int_{0}^{2\\pi}(\\cos{t}+1)\\sqrt{\\cos^{2}{t}+\\sin^{2}{t}}dt =\\int_{0}^{2\\pi}(\\cos{t}+1)dt=2\\pi$</p>\n<p><strong>方法三</strong>：极坐标方程<br>\n$x^2+y^2=2x\\Longrightarrow r=2\\cos{\\theta}$<br>\n$x=r\\cos{\\theta},y=r\\sin{\\theta},ds=\\sqrt{4\\sin^{2}{\\theta}+4\\cos^{2}{\\theta}}d\\theta=2d\\theta$<br>\n$I=\\displaystyle\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}}r\\cos{\\theta}2d{\\theta}=\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}}2\\cos{\\theta}\\cos{\\theta}2d{\\theta}=\\int_{-\\frac{\\pi}{2}}^{\\frac{\\pi}{2}}4\\cos^{2}{\\theta}d\\theta=2\\pi$</p>\n<p>【<strong>例二</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310150920489.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"第一类曲面积分\">第一类曲面积分</h4>\n<blockquote>\n<p>第一类曲面积分用于<strong>求质量</strong>，因此<strong>没有方向</strong>，可以使用<strong>奇偶性质</strong>。</p>\n</blockquote>\n<h5 id=\"物理意义\">物理意义</h5>\n<blockquote>\n<p>若$\\rho(x,y,z)$表示曲面$S$的密度，则曲面$S$的质量为$$m=\\displaystyle\\iint\\limits_S \\rho(x,y,z)dS$$<br>\n$\\rho(x,y,z)$为面密度，$dS$为面微分</p>\n</blockquote>\n<h5 id=\"性质-2\">性质</h5>\n<blockquote>\n<p>基本性质与转换对称性与第一类曲线积分类似。</p>\n<p>关于<strong>奇偶对称性</strong><br>\n说一个<br>\n设$S$关于$xOy$面对称，$S_1$为$S$位于$xOy$面上侧的部分，则<br>\n$$\\displaystyle\\iint\\limits_{S}f(x,y,z)dS=\\begin{cases}2\\iint\\limits_{S_1}f(x,y,z)dS&amp;，f(x,y,z)关于z是偶函数 \\\\ 0&amp;，f(x,y,z)关于z是奇函数 \\end{cases}$$<br>\n<strong>也就是说如果曲线关于哪个面对称，看另一个参数的奇偶性，如果是</strong>偶函数$\\times 2$，奇函数就为$0$。</p>\n</blockquote>\n<h5 id=\"计算-2\">计算</h5>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291642442.jpg\" alt=\"\"></p>\n<p>几个特殊的$dS$</p>\n<ol>\n<li>柱面：$x^2+y^2=a^2$的$dS=\\displaystyle\\frac{a}{\\sqrt{a^2-x^2}}dxdz$</li>\n<li>球面：$x^2+y^2+z^2=a^2$的$dS=\\displaystyle\\frac{a}{\\sqrt{a^2-x^2-y^2}}dxdy$</li>\n<li>锥面：$z=\\sqrt{x^2+y^2}$的$dS=\\displaystyle\\sqrt{2}dxdy$</li>\n</ol>\n</blockquote>\n<h5 id=\"物理应用-2\">物理应用</h5>\n<blockquote>\n<p>（1）<strong>曲面面积</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291643001.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011158958.jpg\" alt=\"\"></p>\n<p>（2）<strong>曲面的质心坐标</strong><br>\n$\\bar{x}=\\displaystyle\\frac{\\iint\\limits_{S}x\\rho(x,y,z)dS}{\\iint\\limits_{S}\\rho(x,y,z)dS}$，$\\bar{y}=\\displaystyle\\frac{\\iint\\limits_{S}y\\rho(x,y,z)dS}{\\iint\\limits_{S}\\rho(x,y,z)dS}$，$\\bar{z}=\\displaystyle\\frac{\\iint\\limits_{S}z\\rho(x,y,z)dS}{\\iint\\limits_{S}\\rho(x,y,z)dS}$</p>\n<p>（3）<strong>转动惯量</strong><br>\n设曲面$S$的面密度为$\\rho(x,y,z)$，则<br>\n$$\\begin{aligned}关于x轴转动I_{x}=\\displaystyle\\iint\\limits_{S}(y^2+z^2)\\rho(x,y,z)dS\\\\ 关于y轴转动I_{y}=\\displaystyle\\iint\\limits_{S}(x^2+z^2)\\rho(x,y,z)dS\\\\ 关于z轴转动I_{z}=\\displaystyle\\iint\\limits_{S}(x^2+y^2)\\rho(x,y,z)dS\\\\ 关于原点转动I_{o}=\\displaystyle\\iint\\limits_{S}(x^2+y^2+z^2)\\rho(x,y,z)dS\\end{aligned}$$<br>\n【<strong>记忆</strong>】被积函数：距离的平方$\\times$ 密度</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310131552808.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311028830.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"第二类曲线积分\">第二类曲线积分</h4>\n<p>第二类曲线积分用于在曲线上<strong>求做功</strong>，因此<strong>有方向</strong>，不能使用<strong>奇偶性质</strong>。</p>\n<h5 id=\"性质-3\">性质</h5>\n<p>设$L$为平面光滑有向曲线，$L^{-}$与$L$方向相反，则$$\\displaystyle\\int_{L}P(x,y)dx+Q(x,y)dy=-\\int_{L^{-}}P(x,y)dx+Q(x,y)dy$$</p>\n<p>关于简单封闭曲线$L$正向规定：<strong>左手在内</strong>。</p>\n<p><strong>第一类曲线积分与第二类曲线积分的关系</strong><br>\n$$\\displaystyle\\int_{L}P(x,y)dx+Q(x,y)dy=\\int_{L}[P(x,y)\\cos\\alpha+Q(x,y)\\sin\\beta]ds$$</p>\n<h5 id=\"计算-3\">计算</h5>\n<blockquote>\n<p>（1）设积分曲线$L:\\begin{cases}x=x(t) \\\\ y=y(t) \\end{cases}$，则$$\\displaystyle\\int_{L}P(x,y)dx+Q(x,y)dy=\\int_{\\alpha}^{\\beta}[P(x(t),y(t))x^{‘}(t)+Q(x(t),y(t))y^{’}(t)]dt$$<br>\n【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191025246.jpg\" alt=\"\"><br>\n（2）设$L:y=y(x),x=x$（视$x$为参数），投影到$x$轴，$x\\in [a,b]$，则$$\\begin{aligned}\\displaystyle\\int_{L}P(x,y)dx+Q(x,y)dy=&amp;\\int_{a}^{b}[P(x,y(x))x^{\\prime}+Q(x,y(x))y^{\\prime}(x)]dx \\\\ =&amp;\\int_{a}^{b}[P(x,y(x))+Q(x,y(x))y^{\\prime}(x)]dx \\end{aligned}$$<br>\n（3）设$L:x=x(y),y=y$（视$y$为参数），投影到$y$轴，$y\\in [c,d]$，则$$\\begin{aligned}\\displaystyle\\int_{L}P(x,y)dx+Q(x,y)dy=&amp;\\int_{c}^{d}[P(x(y),y)x^{\\prime}(y)+Q(x(y),y)y^{\\prime}]dy \\\\ =&amp;\\int_{c}^{d}[P(x(y),y)x^{\\prime}(y)+Q(x(y),y)]dy \\end{aligned}$$<br>\n（4）设空间曲线$L:x=x(t),y=y(t),z=z(t)$，则$$\\begin{aligned}&amp;\\displaystyle\\int_{L}P(x,y,z)dx+Q(x,y,z)dy+R(x,y,z)dz\\\\=&amp;\\int_{\\alpha}^{\\beta}[P(x(t),y(t),z(t))x^{‘}(t)+P(x(t),y(t),z(t))y^{’}(t)+P(x(t),y(t),z(t))z^{'}(t)]dt\\end{aligned}$$其中$\\alpha$对应曲线$L$的起点，$\\beta$对应曲线$L$的终点。<br>\n（5）特殊情况</p>\n</blockquote>\n<ol>\n<li>若在$xOy$面上计算从$(0,1)$到$(\\frac{1}{2},0)$的第二类曲线积分(<strong>使用凑微分法</strong>)$$\\begin{aligned}\\displaystyle&amp;\\int_{L} (-\\cos{y}dx+x\\sin{y}dy) \\\\ &amp;=\\int_{L}d(-x\\cos{y}) \\\\ &amp;=-x\\cos{y}|_{(0,1)}^{(\\frac{1}{2},0)} \\end{aligned}$$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309010900853.jpg\" alt=\"\"></li>\n</ol>\n<h5 id=\"格林公式\">格林公式</h5>\n<blockquote>\n<p>设平面<strong>闭区域</strong>$D$由分段光滑曲线$L$围成，若$P(x,y)，Q(x,y)$在$D$上<strong>有一阶连续偏导</strong>，则$$\\oint_{L^{+}}Pdx+Qdy=\\iint\\limits_{D}(\\frac{\\partial Q}{\\partial x}-\\frac{\\partial P}{\\partial y})dxdy$$其中$L^{+}$是$D$的正向边界函数。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308290852790.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308290852509.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308290852270.jpg\" alt=\"\"></p>\n<p>$\\displaystyle\\oint_{L+L_{1}}$表示<strong>闭环</strong>， $\\displaystyle\\int_{L_1}$表示在$L_1$<strong>上的第二类曲线积分</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310131936231.jpg\" alt=\"\"></p>\n<p>计算二重积分时候，<strong>区域内为正，区域外为负</strong>。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310230930886.jpg\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"积分与路径无关问题\">积分与路径无关问题</h5>\n<blockquote>\n<p>设在单连通区域$D$内$P,Q$具有<strong>一阶连续偏导数</strong>，则下述6个命题等价</p>\n<ol>\n<li>$\\displaystyle\\int_{L_{AB}}P(x,y)dx+Q(x,y)dy$与路径无关。</li>\n<li>沿$D$内任意分段光滑闭曲线$L$都有$\\displaystyle\\oint_{L}Pdx+Qdy=0$。</li>\n<li>$Pdx+Qdy$为某二元函数$u(x,y)$的全微分。</li>\n<li>$Pdx+Qdy=0$为全微分方程。</li>\n<li>$Pi+Qj$为二元函数$u(x,y)$的梯度。</li>\n<li>$\\displaystyle\\frac{\\partial P}{\\partial y}\\equiv \\frac{\\partial Q}{\\partial x}$在$D$内处处成立。</li>\n</ol>\n<p>【<strong>注</strong>】&quot;3,4,5&quot;中所涉及的$u(x,y)$称为$Pdx+Qdy$的原函数，若存在一个原函数$u(x,y)$，则$u(x,y)+C$也是原函数。</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311021059997.jpg\" alt=\"\"></p>\n<p>求$u(x,y)$，<br>\n<strong>注意</strong>：<br>\n如果$\\displaystyle\\int_{(x_0,y_0)}^{(x,y)}$中的$x_0,y_0,x,y$已知，就可以求从$(x_0,y_0)$到$x,y$的第二型曲线积分。比如$\\displaystyle\\int_{(1,0)}^{(2,2)}$就可以通过此方法求出从$(1,0)$到$(2,2)$的第二型曲线积分。<br>\n如果未知，就是求从$(x_0,y_0)$出发到$(x,y)$的第二型曲线积分。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291025214.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310260857485.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>积分与路径无关问题-空间问题</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312122148463.jpg\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"空间问题\">空间问题</h5>\n<blockquote>\n<p>①<strong>直接计算</strong>$\\begin{cases}一投二代三计算 \\\\ 用斯托克斯(Stokes)公式 \\end{cases}$；斯托克斯公式将<strong>第一类</strong>曲线积分<strong>转换</strong>为<strong>第二类</strong>曲面积分进行计算</p>\n<ol>\n<li><strong>方法一</strong>：<strong>一投二代三计算</strong></li>\n</ol>\n<p>设$\\Gamma:\\begin{cases}x=x(t) \\\\ y=y(t) \\\\ z=z(t) \\end{cases},t:\\alpha\\rightarrow \\beta$，则有：$$\\begin{aligned}&amp;\\displaystyle\\int_{\\Gamma}Pdx+Qdy+Rdz \\\\ =&amp; \\int_{\\alpha}^{\\beta}{P[x(t),y(t),z(t)]x^{\\prime}(t)+Q[x(t),y(t),z(t)]y^{\\prime}(t)+R[(x(t),y(t),z(t))]z^{\\prime}(t) }dt \\end{aligned}$$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312220734669.jpg\" alt=\"\"></p>\n<ol start=\"2\">\n<li><strong>方法二</strong>：使用斯托克斯公式</li>\n</ol>\n<p><strong>条件</strong>：<strong>封闭，有向，右手法则</strong>，$P,Q,R$具有<strong>一阶连续偏导</strong>。<br>\n<strong>右手法则</strong>：右手围绕曲线，大拇指向上<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309011124048.jpg\" alt=\"\"><br>\n设$\\Omega$为某空间区域，$\\Sigma$为$\\Omega$内的分片光滑有向曲面片，$\\Gamma$为逐段光滑的$\\Sigma$的边界，它的方向与$\\Sigma$的法向量成右手系，函数$P(x,y,z),Q(x,y,z),R(x,y,z)$在$\\Omega$内具有连续的一阶偏导数，则有斯托克斯公式：$$\\begin{aligned}\\oint\\limits_{\\Gamma}Pdx+Qdy+Rdz=&amp;\\iint\\limits_{\\Sigma}\\begin{vmatrix}dydz &amp; dzdx &amp; dxdy \\\\ \\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\ P &amp; Q &amp; R \\end{vmatrix}（此为第二型曲面积分形式） \\\\ =&amp;\\iint\\limits_{\\Sigma}\\begin{vmatrix}\\cos{\\alpha} &amp; \\cos{\\beta} &amp; \\cos{\\gamma} \\\\ \\frac{\\partial}{\\partial x} &amp; \\frac{\\partial}{\\partial y} &amp; \\frac{\\partial}{\\partial z} \\\\ P &amp; Q &amp; R \\end{vmatrix}dS（此为第一型曲面积分形式） \\end{aligned}$$</p>\n<p>其中$n^{。}=(\\cos{\\alpha},\\cos{\\beta},\\cos{\\gamma})$为$\\Sigma$的单位外法线向量。<br>\n如此图，法向量为$\\vec{n}=(0,0,1)也可以是(0,0,k)$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309011131306.jpg\" alt=\"\"></p>\n<p>【<strong>注</strong>】<strong>法向量</strong>能求出来就用<strong>第一型曲面积分</strong>，如果<strong>求不出来</strong>就转<strong>第二型曲面积分</strong>。</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311222146219.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310260856921.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"第二类曲面积分\">第二类曲面积分</h4>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291100315.jpg\" alt=\"\"></p>\n<p>在光滑的空间有向曲面$\\Sigma$上，其物理背景是向量函数$F(x,y,z)$通过曲面$\\Sigma$的<strong>通量</strong>：$$\\displaystyle\\iint\\limits_{\\Sigma}P(x,y,z)dydz+Q(x,y,z)dzdx+R(x,y,z)dxdy$$</p>\n</blockquote>\n<h5 id=\"计算-4\">计算</h5>\n<blockquote>\n<p><strong>求空间通量</strong><br>\n（1）<strong>基本方法——一投二代三计算（化为二重积分）</strong></p>\n<ol>\n<li>拆成三个积分（如果有的话），一个一个做，将它们拆成三个不同方向的通量：<br>\n$$\\begin{aligned}&amp;\\displaystyle\\iint\\limits_{\\Sigma}P(x,y,z)dydz+Q(x,y,z)dzdx+R(x,y,z)dxdy \\\\ =&amp;\\displaystyle\\iint\\limits_{\\Sigma}P(x,y,z)dydz+\\displaystyle\\iint\\limits_{\\Sigma}Q(x,y,z)dzdx+\\displaystyle\\iint\\limits_{\\Sigma}R(x,y,z)dxdy \\end{aligned}$$</li>\n<li>分别投影到相对应的坐标面上。<br>\n例如对于$\\displaystyle\\iint\\limits_{\\Sigma}R(x,y,z)dxdy$，将曲面$\\Sigma$投影到$xOy$平面上去。</li>\n<li>一投二代三计算<br>\na. 一投：确定出$\\Sigma$在$xOy$平面上的投影域$D_{xy}$<br>\nb. 二代：将$z=z(x,y)$代入$R(x,y,z)=R(x,y,z(x,y))$<br>\nc. 三计算： 将$dxdy$写成$\\pm dxdy$，其中$\\pm$的取值由下图可知。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291157813.jpg\" alt=\"\"></li>\n<li>计算已转化成的二重积分</li>\n</ol>\n<p><strong>例题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310140700593.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>（2）<strong>转换投影法</strong><br>\n若$\\Sigma$投影到$xOy$平面上<strong>不是一条线</strong>，并且$\\Sigma$上任意两点到$xOy$平面上的<strong>投影点不重合</strong>，则可将$\\Sigma$投影到$xOy$平面，设投影域为$D_{xy}$，曲面方程写成$z=z(x,y)$的形式，则有：$$\\begin{aligned} &amp;\\displaystyle\\iint\\limits_{\\Sigma}P(x,y,z)dydz+Q(x,y,z)dzdx+R(x,y,z)dxdy \\\\ =&amp;\\pm \\iint\\limits_{D_{xy}}{P[x,y,z(x,y)](-\\frac{\\partial z}{\\partial x})+Q[x,y,z(x,y)](-\\frac{\\partial z}{\\partial y})+R[x,y,z(x,y)]}dxdy \\end{aligned}$$<br>\n其中$\\pm$的取值与（1）相同，看$\\Sigma$的法向量与$z$轴是什么夹角。</p>\n<p><strong>例题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310140712112.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311221136533.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>（3）<strong>高斯公式</strong><br>\n设空间有界闭区域$\\Omega$由有向分片<strong>光滑闭曲面</strong>$\\Sigma$围成，$P(x,y,z),Q(x,y,z),R(x,y,z)$在$\\Omega$上具有<strong>一阶连续偏导数</strong>，其中$\\Sigma$取<strong>外侧</strong>（内侧加负号即可），则有公式：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291645340.jpg\" alt=\"\"></p>\n<p><strong>关于一阶偏导数连续</strong>：就是看$P$能不能对$x$求偏导，$Q$能不能对$y$求偏导，$R$能不能对$z$求偏导</p>\n<p><strong>关于</strong>$\\displaystyle divF=0\\Longleftrightarrow \\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\equiv 0$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291508089.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308291557184.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270742823.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311011059613.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312062200781.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"重积分、曲线、曲面比较\">重积分、曲线、曲面比较</h4>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310221022031.jpg\" alt=\"\"></p>\n<h4 id=\"散度、旋度、梯度、方向导数\">散度、旋度、梯度、方向导数</h4>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310150958495.jpg\" alt=\"\"><br>\n<strong>散度就是三个偏导数之和</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310150959308.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310151000139.jpg\" alt=\"\"></p>\n<blockquote>\n<p>方向导数：沿特定方向的导数：$\\displaystyle\\lim_{t\\to 0}\\frac{f(x_0+t\\cos{\\alpha},y_0+t\\sin{\\beta})-f(x_0,y_0)}{t}$，如下图<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310151003641.jpg\" alt=\"\"></p>\n<p><strong>若可微</strong>：<br>\n$\\begin{aligned}&amp;\\displaystyle\\lim_{t\\to 0}\\frac{f_x(x_0,y_0)t\\cos{\\alpha}+f_y(x_0,y_0)t\\sin{\\beta}+O(t)}{t} \\\\ &amp;=f_x(x_0,y_0)\\cos{\\alpha}+f_y(x_0,y_0)\\sin{\\beta} \\\\ &amp;=gradf * \\vec{n}（梯度与方向导数的数量积） \\end{aligned}$</p>\n<p>方向导数：$gradf * \\vec{n}，\\vec{n}$是单位向量</p>\n<ol>\n<li>最大值：$|gradf| * |\\vec{n}| * \\cos{\\theta}=|gradf| * \\cos{\\theta} \\le |gradf|$</li>\n<li>沿着夹角为零时，梯度$gradf$与$n$平行的时候，方向导数最大。沿梯度的方向最大，最大值为梯度的模值<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310151020611.jpg\" alt=\"\"></li>\n</ol>\n<p><strong>求方向导数最大值相关问题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311141020751.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310220817316.jpg\" alt=\"\"></p>\n<p>【<strong>题3</strong>】：考察了求函数$f$在点$P_0$处的方向导数，一般做法为：先求出函数$f$在点$P_0$处的梯度$grad$，然后求出$\\bar{n}$的同方向的单位向量，二者的点积就是待求的方向导数<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310310847625.jpg\" alt=\"\"></p>\n<p>如果没有单位向量，就直接是模长的值<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312102224124.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311010930917.jpg\" alt=\"\"></p>\n</blockquote>\n<hr>\n<h2 id=\"线代\">线代</h2>\n<h3 id=\"行列式\">行列式</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251111834.png\" alt=\"\"></p>\n<blockquote>\n<p>$|(\\beta_1+\\beta_2,2\\alpha_1,3\\alpha_2)|\\Longleftrightarrow 6|(\\beta_1+\\beta_2,\\alpha_1,\\alpha_2)|$</p>\n</blockquote>\n<p><strong>例题</strong></p>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310151531883.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>范德蒙行列式</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312132127624.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"矩阵\">矩阵</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251111097.png\" alt=\"\"></p>\n<blockquote>\n<p>若$AB=0$</p>\n<ol>\n<li>则$\\Longleftrightarrow r(A)+r(B)\\le n$,（$n$为$A$的列，$B$的行）。</li>\n<li>若$A$为非零矩阵$\\Longrightarrow A\\not= 0\\Longrightarrow r(A)\\ge 1\\Longrightarrow r(B)\\le n-1 &lt;n$（行数）$\\Longrightarrow B$<strong>行</strong>相关。</li>\n<li>若$B$为非零矩阵$\\Longrightarrow B\\not= 0\\Longrightarrow r(B)\\ge 1\\Longrightarrow r(A)\\le n-1 &lt;n$（行数）$\\Longrightarrow A$<strong>列</strong>相关。</li>\n</ol>\n<p>证明：<br>\n$$\\begin{aligned}&amp;AB=0 \\\\ &amp;\\Longrightarrow A(\\beta_1,\\beta_2,…,\\beta_s)=(0,0,…,0)，利用分块矩阵乘法牵线 \\\\ &amp;\\Longrightarrow Ax=0 \\\\ &amp;\\Longrightarrow Ax=0中线性无关的解向量个数为n-r(A) \\\\ &amp;(\\beta_1,\\beta_2,…,\\beta_s)为Ax=0的一部分解 \\\\ &amp;\\Longrightarrow r(\\beta_1,\\beta_2,…,\\beta_s)\\le n-r(A) \\\\ &amp;r(B)=r(\\beta_1,\\beta_2,…,\\beta_s) \\\\ &amp;\\Longrightarrow r(B)\\le n-r(A) \\end{aligned}$$</p>\n</blockquote>\n<blockquote>\n<p>若$AB=C$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310102005012.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>矩阵打洞</strong></p>\n<p><strong>广义矩阵变换不改变矩阵的秩</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311170913266.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311170903792.jpg\" alt=\"\"></p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312132128725.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310272152040.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>矩阵秩常用结论</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311010924636.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>秩1矩阵</strong></p>\n<p>设$A$的秩为$1$，$A$是$n$阶矩阵</p>\n<ol>\n<li>$r(A)=1\\Longleftrightarrow A$可表示为$\\alpha\\beta^{\\top}$，（其中$\\alpha,\\beta$是$n$维非零列向量，此时$tr(A)=(\\alpha,\\beta)$）</li>\n<li>$r(A)=1\\Longrightarrow A^{n}=[tr(A)]^{n-1}A$，其中$tr(A)=\\beta^{\\top}\\alpha$</li>\n<li>$r(A)=1\\Longrightarrow A$的所有特征值是$tr(A),0,…,0(n-1个零)$</li>\n<li>当$tr(A)=0，A$不可对角化，当$tr(A)\\not= 0，A$可对角化</li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312162048675.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>平面相交与秩的关系</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311021125800.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>实矩阵，指的是矩阵中所有的数都是实数的矩阵。</p>\n</blockquote>\n<blockquote>\n<p>求$A^{\\ast}$，就要往$AA^{\\ast}=|A|E$上面去靠。</p>\n</blockquote>\n<blockquote>\n<p>部分与整体的关系：$\\begin{aligned}整体无关 \\Longrightarrow 部分无关 \\\\ 部分相关\\Longrightarrow 整体相关 \\end{aligned}$</p>\n</blockquote>\n<blockquote>\n<p>若$A$为正交矩阵，则$$\\begin{aligned}A^{T}A=E \\Longleftrightarrow&amp; A^{-1}=A^{T} \\\\ \\Longleftrightarrow&amp; |A|=\\pm 1 \\\\ \\Longleftrightarrow&amp; A^{-1},A^{T},A^{*},-A都是正交矩阵 \\end{aligned}$$</p>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309221622622.jpg\" alt=\"\"></p>\n<blockquote>\n<p>①<br>\n$\\displaystyle r\\begin{bmatrix} A &amp; 0 \\\\ 0 &amp; B \\end{bmatrix}=r(A)+r(B),r\\begin{bmatrix} 0 &amp; A \\\\ B &amp; 0 \\end{bmatrix}=r(A)+r(B)$</p>\n<p>②<br>\n$r\\begin{bmatrix} A &amp; 0 \\\\ C &amp; B \\end{bmatrix}\\ge r(A)+r(B),r\\begin{bmatrix} A &amp; C \\\\ 0 &amp; B \\end{bmatrix}\\ge r(A)+r(B)$</p>\n<p>③<br>\n若$C$可逆，$r\\begin{bmatrix} A &amp; 0 \\\\ C &amp; B \\end{bmatrix}= r(A)+r(B),r\\begin{bmatrix} A &amp; C \\\\ 0 &amp; B \\end{bmatrix}= r(A)+r(B)$</p>\n</blockquote>\n<blockquote>\n<p>$P=\\begin{bmatrix}A &amp; C \\\\ 0 &amp; B \\end{bmatrix}$，则$\\lvert P \\rvert =\\begin{vmatrix} A &amp; C \\\\ 0 &amp; B \\end{vmatrix}=\\lvert A \\rvert \\times \\lvert B \\vert$</p>\n</blockquote>\n<blockquote>\n<p>$A^{\\ast}=\\lvert A \\rvert^{n-1} A$<br>\n$(A^{\\ast})^{\\ast}=\\lvert A \\rvert^{n-2}A$</p>\n</blockquote>\n<blockquote>\n<p>若$\\lvert A \\rvert=2$，交换第$i,j$行，变为$B$，则$\\lvert B\\rvert=-2$</p>\n</blockquote>\n<blockquote>\n<p>若$A^{n}=0$那么<br>\n$\\Longrightarrow E-A^{n}=E$<br>\n$\\Longrightarrow E^{n}-A^{n}=E$<br>\n$\\Longrightarrow (E-A)(E+A+A^{2}+…+A^{n-1})=E$</p>\n</blockquote>\n<blockquote>\n<p>$(A^{2})^{-1}=(A^{-1})^{2}$</p>\n</blockquote>\n<blockquote>\n<p>解题技巧</p>\n<ol>\n<li>求什么往什么去靠，如求$(A-2E)^{-1}$，可以通过题目给的条件，得出关于$(A-2E)$的二次函数，如$(A-2E)^{2}-3(A-2E)+2=0$</li>\n<li>$E$是一个变色龙，$E=A^{-1}A=A^{T}A$，在成立的条件下</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n设$A_{m\\times n}$矩阵，$B_{n\\times m}$矩阵，$E$为$m$阶单位矩阵，若$AB=E$，则$r(A),r(B)=?$</p>\n<ol>\n<li>若存在$A_{m\\times n},B_{n\\times m}$，则$r(AB)\\le min[r(A),r(B)]$</li>\n<li>$r(A)\\le min[m,n]$</li>\n<li>$r(B)\\le min[m,n]$</li>\n<li><strong>&quot;胖矩阵&quot;一定是降秩阵</strong>。$A_{4\\times 3}B_{3\\times 4}=C_{4\\times 4}，C$一定是降秩阵。</li>\n<li>但&quot;瘦&quot;方阵不一定是 满秩矩阵。</li>\n</ol>\n<p><strong>解</strong><br>\n由于$AB=E，E$为$m$阶单位矩阵$\\Longrightarrow E$为满秩矩阵，因此不是胖矩阵，故$m&lt;n$<br>\n因此可得<br>\n$m=r(E)=r(AB)\\le r(A)\\le min[m,n]\\le m$<br>\n$m=r(E)=r(AB)\\le r(B)\\le min[m,n]\\le m$<br>\n故$r(A),r(B)=m$</p>\n</blockquote>\n<blockquote>\n<p><strong>求</strong>$A^{n}$<strong>问题</strong></p>\n<p>方法：</p>\n<ol>\n<li><strong>相似对角化</strong>，若$A$可相似对角化，将$A$相似对角化处理，$P^{-1}AP=\\wedge$，$A^{n}=P\\wedge P^{-1}P\\wedge P^{-1}…P\\wedge P^{-1}=P\\wedge^{n}P^{-1}$</li>\n<li><strong>秩1矩阵</strong>，若$r(A)=1\\Longleftrightarrow$存在列向量$\\alpha,\\beta$，使得$A=\\alpha\\beta^{\\top}$，则$A^{n}=(\\alpha\\beta^{\\top})(\\alpha\\beta^{\\top})…(\\alpha\\beta^{\\top})=\\alpha(\\beta^{\\top}\\alpha)(\\beta^{\\top}\\alpha)…(\\beta^{\\top}\\alpha)\\beta^{\\top}$<br>\n【<strong>注</strong>】$\\beta^{\\top}\\alpha=1$</li>\n<li><strong>归纳法</strong>，写几项找规律</li>\n</ol>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311101117319.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"方程组与向量\">方程组与向量</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251111507.png\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251112878.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>综合题</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312102225354.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>$A=BP$，求$P$<strong>问题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311142134919.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>矩阵$A$通过<strong>初等列变换</strong>化为矩阵$B$<br>\n$\\Longrightarrow $方程$AX=B$有解<br>\n$\\Longrightarrow r(A)=r(A,B)$</p>\n</blockquote>\n<blockquote>\n<p>$Ax=0$与$Bx=0$<strong>同解</strong>$\\Longleftrightarrow$解集完全相同$\\Longleftrightarrow$基础解系相同<br>\n$\\Longleftarrow n-r(A)=n-r(B)\\Longleftrightarrow r(A)=r(B)$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042141231.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>$r(\\alpha_1,…,\\alpha_t | \\beta_1,…,\\beta_s)\\ge max{r(\\alpha_1,…,\\alpha_t),r(\\beta_1,…,\\beta_s)}$</p>\n</blockquote>\n<blockquote>\n<p>多的可由少的线性表示，则多的比相关。</p>\n</blockquote>\n<blockquote>\n<p>$\\alpha$不能由$\\alpha_1,\\alpha_2,\\alpha_3,\\alpha_4$线性表示知方程组$x_1\\alpha_1+x_2\\alpha_2+x_3\\alpha_3+x_4\\alpha_4=\\alpha$无解<br>\n$\\Longrightarrow \\begin{bmatrix} \\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 &amp; \\alpha_4 &amp; | &amp; \\alpha  \\end{bmatrix}$做初等行变换来求解。</p>\n</blockquote>\n<blockquote>\n<p>两个向量组等价问题可以转化为两个向量组的极大无关组等价。</p>\n</blockquote>\n<blockquote>\n<p><strong>判别向量组线性相关的常用步骤</strong><br>\n设$\\alpha_1,\\alpha_2,…,\\alpha_s$是$n$维向量</p>\n<ol>\n<li>当$s&gt;n$时，向量组必线性相关</li>\n<li>当$s=n$时，若行列式$|(\\alpha_1,\\alpha_2,…,\\alpha_s)|=0$，则向量组必线性相关</li>\n<li>当$s&lt;n$时，若秩$r(\\alpha_1,\\alpha_2,…,\\alpha_s)&lt;s$，则向量组必线性相关</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>要证明$\\alpha_1,\\alpha_2,\\alpha_3,\\alpha_4-\\alpha_5$秩为$4$。<br>\n$\\Longrightarrow \\alpha_1,\\alpha_2,\\alpha_3,\\alpha_4-\\alpha_5$线性无关。<br>\n$\\Longrightarrow k_1\\alpha_1+k_2\\alpha_2+k_3\\alpha_3+k_4(\\alpha_5-\\alpha_4)$只有零解。</p>\n</blockquote>\n<blockquote>\n<p>若$\\alpha_1,\\alpha_2,\\alpha_3$线性相关，则$\\begin{vmatrix}\\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 \\end{vmatrix}=0$</p>\n</blockquote>\n<blockquote>\n<p>若$\\beta_1=\\alpha_1+\\alpha_2$，$\\beta_2=\\alpha_2-\\alpha_3$，$\\beta_3=2\\alpha_1+\\alpha_3$<br>\n则$\\begin{bmatrix}\\beta_1 &amp; \\beta_2 &amp; \\beta_3 \\end{bmatrix}=\\begin{bmatrix}\\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 \\end{bmatrix}\\begin{bmatrix} 1 &amp; 0 &amp; 2 \\\\ 1 &amp; 1 &amp; 0 \\\\ 0 &amp; -1 &amp; 1 \\end{bmatrix}$<br>\n令$A=\\begin{bmatrix}\\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 \\end{bmatrix}，B=\\begin{bmatrix}\\beta_1 &amp; \\beta_2 &amp; \\beta_3 \\end{bmatrix}，C=\\begin{bmatrix} 1 &amp; 0 &amp; 2 \\\\ 1 &amp; 1 &amp; 0 \\\\ 0 &amp; -1 &amp; 1 \\end{bmatrix}$<br>\n$A=BC\\Longrightarrow A$的列可由$B$的列表示。</p>\n</blockquote>\n<blockquote>\n<p>方程解的个数。$Ax=b$，$A$为$m \\times n$阶矩阵。</p>\n<ol>\n<li>$r(A)=n$，方程有唯一解。</li>\n<li>$r(A)\\not=r(A,b)$，方程无解。</li>\n<li>$r(A)=r(A,b)&lt;n$，方程有无穷多解。</li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312162047194.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>$Ax=0$，$A$为$m\\times n$</p>\n<ol>\n<li>$r(A)=n$，只有零解</li>\n<li>$r(A)&lt;n$，有非零解</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>$Ax=0$的自由变量个数为$n-r(A)$个。</p>\n</blockquote>\n<blockquote>\n<p>$AB=0$可知</p>\n<ol>\n<li>$r(A)+r(B)\\le n$，$n$为$A$的列数</li>\n<li>$B$的列向量是$Ax=0$的解</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>矩阵越乘，秩越小，$A_{m\\times n}，B_{n\\times m}，m&gt;n$<br>\n则$r(AB)\\le \\min{r(A),r(B)}\\le n&lt;m$</p>\n</blockquote>\n<blockquote>\n<p>基本<strong>单位向量组</strong>：<br>\n$\\alpha_1=\\begin{bmatrix}1 \\\\ 0 \\\\ \\vdots \\\\ 0 \\end{bmatrix}，\\alpha_2=\\begin{bmatrix}0 \\\\ 1 \\\\ \\vdots \\\\ 0 \\end{bmatrix}，…，\\alpha_n=\\begin{bmatrix}0 \\\\ 0 \\\\ \\vdots \\\\ 1 \\end{bmatrix}$称为$n$维基本单位向量组。</p>\n</blockquote>\n<blockquote>\n<p>求两个方程组非零公共解</p>\n<ol>\n<li>若方程组给出了<br>\n联立两个方程组$\\begin{bmatrix} A \\\\ B \\end{bmatrix}$求解即可。</li>\n<li>若方程组没有给出<br>\n求出两个方程组的基础解系$\\alpha_1,\\alpha_2,…\\alpha_s$，$\\beta_1,\\beta_2,…,\\beta_t$，令非零公共阶为：$\\gamma=k_1\\alpha_1,k_2\\alpha_2,…k_s\\alpha_s=l_1\\beta_1,l_2\\beta_2,…,l_t\\beta_t\\Longrightarrow k_1\\alpha_1,k_2\\alpha_2,…k_s\\alpha_s-l_1\\beta_1,l_2\\beta_2,…,l_t\\beta_t=0$解出$k_1,…,k_s,l_1,…,l_t$。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>方程组有多个未知列向量</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311101048095.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>只有当$A$可以相似对角化时，非零特征值个数才等于矩阵的秩。</p>\n</blockquote>\n<blockquote>\n<p><strong>向量组等价</strong>与<strong>矩阵等价</strong><br>\n<strong>向量组等价</strong>：</p>\n<ol>\n<li>定义：两个向量组可以相互表示</li>\n<li>不需要向量组内向量个数相同</li>\n<li><strong>判定方法</strong>：<br>\n$r(A)=r(B)=r(A,B)\\Longleftrightarrow A$与$B$<strong>列</strong>向量组等价<br>\n$r(A)=r(B)=r\\left(\\begin{aligned} A \\\\ B \\end{aligned}\\right)\\Longleftrightarrow A$与$B$<strong>行</strong>向量组等价</li>\n</ol>\n<p>设：<br>\n$I:\\alpha_1,\\alpha_2,\\alpha_3，A=[\\alpha_1,\\alpha_2,\\alpha_3]$.<br>\n$II:\\beta_1,\\beta_2,\\beta_3，B=[\\beta_1,\\beta_2,\\beta_3]$.<br>\n则：<br>\n$\\begin{cases} I由II表出 \\\\ II由I表出 \\end{cases}\\Longleftrightarrow \\begin{cases} Bx=A有解 \\\\ Ax=B有解 \\end{cases}$<br>\n$\\Longleftrightarrow \\begin{cases} r(B)=r(B,A) \\\\ r(A)=r(A,B) \\end{cases}\\Longleftrightarrow r(A)=r(B)=r(A,B)$<br>\n<strong>注</strong>：$r(A,B)=r(B,A)$</p>\n<p><strong>矩阵等价</strong>：</p>\n<ol>\n<li>定义：$A$经过初等变换（行、列）变成$B$</li>\n<li>必须要求$A$与$B$同型</li>\n<li>判定方法：$A\\sim B\\Longleftrightarrow$同型且$r(A)=r(B)$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>方程组同解问题</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211252142638.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211252143405.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>假设$A_{m\\times n}$<br>\n则齐次线性方程组最多有$s=n-r(A)$个线性无关的解向量。（<strong>注</strong>：$n$是指列数，也就是未知数个数）。<br>\n则非齐次线性方程组最多有$s+1=n-r(A)+1$个线性无关的解向量。</p>\n</blockquote>\n<blockquote>\n<p><strong>向量组之间的相互表示</strong><br>\n$I：\\alpha_1,\\alpha_2,…\\alpha_m\\Longrightarrow A$<br>\n$II：\\beta_1,\\beta_2,…\\beta_m \\Longrightarrow B$<br>\n若$I$由$II$表示$\\Longleftrightarrow Bx=A$有解$\\Longleftrightarrow r(B)=r(B,A)\\ge r(A)$<br>\n.<br>\n$\\beta$可由$\\alpha_1,\\alpha_2,\\alpha_3$表出$\\Longrightarrow Ax=\\beta$有解<br>\n$\\beta_1,\\beta_2,\\beta_3$可由$\\alpha_1,\\alpha_2,\\alpha_3$表出$\\Longrightarrow Ax=B$有解<br>\n.<br>\n$Bx=A$有解$\\Longrightarrow r(B)=r(B,A)$<br>\n$Bx=A$无解$\\Longrightarrow r(A)\\not=r(A,B)$<br>\n.<br>\n$AB$列可以由$A$列表出<br>\n$AB$行可以由$B$行表出</p>\n</blockquote>\n<blockquote>\n<p>$A$的行向量可以由$B$的行向量线性表示。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212132334143.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<ol>\n<li>$线性相关性\\begin{cases}&amp;定义， \\\\ &amp;齐次线性方程组(\\alpha_1,\\alpha_2,…,\\alpha_s)\\begin{bmatrix}k_1\\\\k_2\\\\ \\vdots \\\\ k_s \\end{bmatrix}=0有非零解(无关：只有零解) \\\\&amp; r(\\alpha_1,\\alpha_2,…,\\alpha_s)&lt;s(无关=s) \\end{cases}$</li>\n<li>$线性表示\\begin{cases}&amp;定义(\\beta=k_1\\alpha_1+k_2\\alpha_2+…+k_s\\alpha_s)， \\\\ &amp;非齐次线性方程组(\\alpha_1,\\alpha_2,…,\\alpha_s)\\begin{bmatrix}k_1\\\\k_2\\\\ \\vdots \\\\ k_s \\end{bmatrix}=\\beta有解 \\\\&amp; r(\\alpha_1,\\alpha_2,…,\\alpha_s)=r(\\alpha_1,\\alpha_2,…,\\alpha_s,\\beta) \\end{cases}$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310202139141.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>（1）部分与整体定理：$\\begin{aligned} 整体无关 \\Longrightarrow 部分无关 \\\\ 部分相关 \\Longrightarrow 整体相关 \\end{aligned}$<br>\n（2）一个向量与一个向量组定理：$\\begin{cases} \\alpha_1\\alpha_2\\alpha_3 无关 \\\\ \\alpha_1\\alpha_2\\alpha_3\\alpha_4相关 \\end{cases} \\Longrightarrow \\alpha_4可由\\alpha_1\\alpha_2\\alpha_3唯一线性表示$。</p>\n</blockquote>\n<blockquote>\n<p><strong>向量空间</strong></p>\n<p><strong>基、解空间</strong>：就类似于极大线性无关组</p>\n<p><strong>向量空间的维数</strong>：向量组的秩</p>\n<p><strong>过度矩阵</strong>：<br>\n<strong>旧基</strong>$(\\alpha_1,\\alpha_2,\\alpha_3)$，<strong>新基</strong>$(\\beta_1,\\beta_2,\\beta_3)$<br>\n$(\\alpha_1,\\alpha_2,\\alpha_3)C=(\\beta_1,\\beta_2,\\beta_3)$，其中的$C$就是旧基到新基的过度矩阵。<br>\n若$A$可逆，则$C=A^{-1}B$</p>\n<p>解空间的维数$=$基础解系所含向量个数$= n-r(A)$</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312142214917.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311142045292.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191049084.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311221105661.jpg\" alt=\"\"></p>\n<p><strong>向量的坐标表示</strong>：若$\\alpha$为线性空间$V$中的一个向量，则有且仅有一组有序数$x_1,x_2,…,x_n$使得$$\\alpha=x_1\\alpha_1+x_2\\alpha_2+…+x_n\\alpha_n$$<br>\n$x_1,x_2,…,x_n$这组有序数就称为向量$\\alpha$在$\\alpha_1,\\alpha_2,…,\\alpha_n$这个基下的坐标</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312132128792.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312122148356.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"特征值和特征向量\">特征值和特征向量</h3>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209252320444.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>设$A$可逆，若$\\lambda$为$A$的特征值（必然非零），$x$为其对应的特征向量，则有：</p>\n<ol>\n<li>$\\frac{1}{\\lambda}$为$A^{-1}$的特征值，特征向量为$x$。</li>\n<li>$\\frac{|A|}{\\lambda}$为$A^{*}$的特征值，特征向量为$x$。</li>\n<li>$\\lambda$任为$A^{T}$的特征值，特征向量<strong>不一定</strong>为$x$。</li>\n<li>$\\lambda+k$为$A+kE$的特征值，特征向量为$x$。</li>\n<li>$\\lambda^{k}$为$A^{k}$的特征值，特征向量为$x$。</li>\n</ol>\n<p>证明：前提$Ax=\\lambda x、(A-\\lambda)x=0$。<br>\n（1）<br>\n$$\\begin{aligned}A^{-1}Ax&amp;=\\lambda A^{-1}x \\\\ \\frac{1}{\\lambda}x&amp;=A^{-1}x \\\\ A^{-1}x&amp;=\\frac{1}{\\lambda}x \\end{aligned}$$<br>\n（2）<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211011646607.png\" alt=\"\"><br>\n（3）<br>\n$$\\begin{aligned}|A-\\lambda E|&amp;=0 \\\\ |A^{T}-(\\lambda E)^{T}|&amp;=0 \\\\ |(A-\\lambda E)^{T}|&amp;=0 \\\\ |A-\\lambda E|&amp;=0 \\end{aligned}$$</p>\n<p><strong>注</strong>：特征值相同，但特征向量不一定相同$\\Longrightarrow$两个矩阵行列式相同，但是矩阵几乎不一样，会导致特征向量不一样。<br>\n（4）<br>\n$$\\begin{aligned} (A+kE)x&amp;=Ax+kx \\\\ &amp;=\\lambda x+kx \\\\ &amp;=(\\lambda + k)x \\end{aligned}$$<br>\n（5）<br>\n$$\\begin{aligned} A^kx&amp;=A^{k-1}Ax \\\\ &amp;=A^{k-1}\\lambda x(Ax=\\lambda x) \\\\ &amp;=\\lambda A^{k-2}Ax \\\\ &amp;=\\lambda^2 A^{k-2}x \\\\ &amp; … \\\\ &amp; =\\lambda^kx \\end{aligned}$$</p>\n</blockquote>\n<blockquote>\n<p>假设$\\lambda$是$A$的一个特征值，那么属于$\\lambda$的特征向量有$n-R(A)$个线性无关的解向量（特征向量）<br>\n假设$\\lambda$是$A$的一个$m$重特征值，那么属于$\\lambda$的特征向量就有$m$个</p>\n</blockquote>\n<blockquote>\n<p><strong>与相似相关的问题</strong><br>\n若$A$与$B$相似，存在可逆矩阵$P$，使得$P^{-1}AP=B$，则：</p>\n<ol>\n<li>$A^T$与$B^T$相似。</li>\n<li>$A^{-1}$与$B^{-1}$相似。</li>\n<li>$A+A^{-1}$与$B+B^{-1}$相似。</li>\n<li>若$A$的特征值为$\\lambda$，则$B$的特征值也为$\\lambda$。</li>\n<li>若$A$的特征向量为$\\alpha$，则$B$的特征向量为$P^{-1}\\alpha$。</li>\n<li>若$B$的特征向量为$\\beta$，则$A$的特征向量为$P\\beta$。</li>\n</ol>\n<p><strong>关于5.6点证明</strong>：<br>\n$P^{-1}AP=B$，若$A\\alpha=\\lambda\\alpha$，则：<br>\n$B=P^{-1}AP\\Longrightarrow B(P^{-1}\\alpha)=P^{-1}AP(P^{-1}\\alpha)=P^{-1}A\\alpha=P^{-1}\\lambda\\alpha=\\lambda(P^{-1}\\alpha)$<br>\n$\\Longrightarrow B(P^{-1}\\alpha)=\\lambda(P^{-1}\\alpha)$，$P^{-1}\\alpha$是$B$的特征向量。<br>\n.<br>\n$A=PBP^{-1}$，若$B\\beta=\\lambda\\beta$，则：<br>\n$A=PBP^{-1}\\Longrightarrow A(P\\beta)=PBP^{-1}(P\\beta)=PB\\beta=P\\lambda\\beta=\\lambda(P\\beta)$<br>\n$\\Longrightarrow A(P\\beta)=\\lambda(P\\beta)$，$P\\beta$是$A$的特征向量。</p>\n</blockquote>\n<blockquote>\n<p><strong>相似对角化</strong>可以处理<strong>高次幂</strong>问题：<br>\n若$A$相似与对角矩阵$\\wedge$，即存在可逆矩阵$P$，使得$P^{-1}AP=\\wedge$<br>\n则$A=P\\wedge P^{-1}，A^{n}=P\\wedge^{n}P^{-1}$。</p>\n</blockquote>\n<blockquote>\n<p>两个$n$维列向量乘法构成的矩阵，其特征值一定为$\\displaystyle \\sum_{i=1}^{n}a_ib_i$和$0$。</p>\n</blockquote>\n<blockquote>\n<p>若矩阵$A_{n\\times n}$满足$r(A)=1$，则$A$的特征值为$\\lambda_1=tr(A)，\\lambda_2=…=\\lambda_n=0$</p>\n</blockquote>\n<blockquote>\n<p><strong>迹tr</strong><br>\n$tr$等于主对角线元素之和<br>\n$tr$等于特征值之和</p>\n</blockquote>\n<blockquote></blockquote>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">矩阵</th>\n<th style=\"text-align:center\">$A$</th>\n<th style=\"text-align:center\">$A^n$</th>\n<th style=\"text-align:center\">$A+kE$</th>\n<th style=\"text-align:center\">$f(A)$</th>\n<th style=\"text-align:center\">$A^{-1}$</th>\n<th style=\"text-align:center\">$A^{\\ast}$</th>\n<th style=\"text-align:center\">$P^{-1}AP$</th>\n<th style=\"text-align:center\">$A^{\\top}$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>特征值</strong></td>\n<td style=\"text-align:center\">$\\lambda$</td>\n<td style=\"text-align:center\">$\\lambda^{n}$</td>\n<td style=\"text-align:center\">$\\lambda+k$</td>\n<td style=\"text-align:center\">$f(\\lambda)$</td>\n<td style=\"text-align:center\">$\\frac{1}{\\lambda}$</td>\n<td style=\"text-align:center\">$\\frac{\\lvert A \\rvert}{\\lambda}$</td>\n<td style=\"text-align:center\">$\\lambda$</td>\n<td style=\"text-align:center\">$\\lambda$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>特征向量</strong></td>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\">$\\alpha$</td>\n<td style=\"text-align:center\">$P^{-1}\\alpha$</td>\n<td style=\"text-align:center\">未知</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<blockquote>\n<p><strong>通过特征值和特征向量还原矩阵☆☆☆</strong></p>\n<blockquote>\n<p>by B站 晚晴蓝艺</p>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211272127923.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211272129576.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211272129901.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191146148.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"相似矩阵\">相似矩阵</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251112564.png\" alt=\"\"></p>\n<blockquote>\n<p>矩阵等价、相似、合同之间的关系。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309250913393.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>相似矩阵的性质</strong></p>\n<ol>\n<li>相似则等价：$A$与$B$相似，$A$与$B$也就等价。传递性：$A\\sim B，B\\sim C\\Longrightarrow A\\sim C$</li>\n<li>相似则秩相等</li>\n<li>相似则特征值相等，但特征向量可能不相同</li>\n<li>相似则行列式的值相等</li>\n<li>相似则迹相等</li>\n</ol>\n<p>以上为相似的“五等”。</p>\n<p>若$A$与$B$相似，则$\\lambda E-A \\sim\\lambda E-B、|\\lambda E-A|=|\\lambda E-B|$，但$\\lambda E-A\\not= \\lambda E-B$</p>\n<p><strong>充分必要条件</strong>：</p>\n<ol>\n<li>$A$有$n$个线性无关的特征向量。</li>\n<li>$A$的每一个特征值的几何重数都等于其代数重数，也就是说对于$A$的$m$重特征值$\\lambda$，都有$m$个属于$\\lambda$的特征向量。</li>\n</ol>\n<p><strong>充分条件</strong>：<br>\n若$n$阶矩阵$A$有$n$个互不相等的特征值，则$A$可以相似对角化。</p>\n</blockquote>\n<blockquote>\n<p>判断<strong>两个矩阵是否相似</strong><br>\n（1）$A$与$B$有相同特征值<br>\n（2）$A$与$B$都能相似对角化<br>\n则$A$与$B$相似，也就是$A$与$B$与对角阵$\\begin{bmatrix} \\lambda_1 &amp; &amp; \\\\ &amp; \\lambda_2 &amp; \\\\ &amp; &amp; \\lambda_3 \\end{bmatrix}$相似。</p>\n</blockquote>\n<blockquote>\n<p><strong>正交矩阵</strong></p>\n<ol>\n<li>若$n$阶实方阵$A$满足$A^{\\top}A=E$，则称$A$为正交矩阵</li>\n<li>正交矩阵的行（列）向量是<strong>两两正交</strong>的<strong>单位向量</strong>。</li>\n<li>两两正交：$\\alpha\\beta=0$，单位向量：$||\\alpha||=0$内积为零。</li>\n<li>若$A$为正交矩阵，则$$\\begin{aligned}A^{T}A=E \\Longleftrightarrow&amp; A^{-1}=A^{T} \\\\ \\Longleftrightarrow&amp; |A|=\\pm 1 \\\\ \\Longleftrightarrow&amp; A^{-1},A^{T},A^{*},-A都是正交矩阵 \\end{aligned}$$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>Jordan标准型</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312142211122.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312102225114.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>假设$E$为$A_{n\\times n}$的一个特征向量，则特征向量有$n-r(A-E)$个<br>\n$m$重特征值有$m$个特征向量<br>\n假设某矩阵$A_{3\\times 3}$的$2$重特征值为$3$，则$3-r(A-3E)=2\\Longrightarrow r(A-3E)=1$</p>\n</blockquote>\n<blockquote>\n<p>实对称矩阵<br>\n<strong>性质</strong>：</p>\n<ol>\n<li><strong>不同特征值</strong>对应的<strong>特征向量相互正交</strong>。</li>\n<li>特征值都是实数。</li>\n<li>代数重数等于几何重数。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>合同矩阵</strong></p>\n<p><strong>充要条件</strong><br>\n<strong>正负惯性指数相同</strong>或者<strong>正惯性指数、负惯性指数、秩三者中两个相等。</strong></p>\n<p><strong>定义</strong>：设$A、B$为$n$阶矩阵，若存在可逆矩阵$C$，使得$C^{\\top}AC=B$，则称矩阵$A$与矩阵$B$合同。<br>\n<strong>传递性</strong>：若$A$与$B$合同，$B$与$C$合同，则$A$与$C$合同。<br>\n<strong>定理</strong>：</p>\n<ol>\n<li>若$A$与$B$合同，则$A$与$B$等价，且$R(A)=R(B)$</li>\n<li>若$A$与$B$合同，且$A$为对称矩阵，则$B$也为对称矩阵。</li>\n</ol>\n<p><strong>实对称矩阵</strong>只能跟<strong>实对称矩阵合同</strong>，<strong>非实对称矩阵</strong>只能跟<strong>非实对称矩阵合同</strong>。</p>\n</blockquote>\n<h3 id=\"二次型\">二次型</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251112276.png\" alt=\"\"></p>\n<blockquote>\n<p>二次曲面$f(x_1,x_2,x_y)=1$的类型：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">$\\lambda_1,\\lambda_2,\\lambda_3$的符号</th>\n<th style=\"text-align:center\">$f(x_1,x_2,x_3)=1$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$3$正</td>\n<td style=\"text-align:center\">椭圆面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$2$正$1$负</td>\n<td style=\"text-align:center\">单叶双曲面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$1$正$2$负</td>\n<td style=\"text-align:center\">双叶双曲面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$2$正$1$零</td>\n<td style=\"text-align:center\">椭圆柱面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$1$正$1$负$1$零</td>\n<td style=\"text-align:center\">双曲柱面</td>\n</tr>\n</tbody>\n</table>\n<p>当二次曲面$f(x_1,x_2,x_y)=0$时<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311221135933.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>二次型<strong>惯性指数</strong></p>\n<p><strong>充要条件</strong><br>\n<strong>正负惯性指数相同</strong>或者<strong>正惯性指数、负惯性指数、秩三者中两个相等。</strong></p>\n<p>实二次型的<strong>标准型</strong>中<strong>正平方项</strong>的项数称为二次型的<strong>正惯性指数</strong>，<strong>负平方项</strong>的项数称为二次型的<strong>负惯性指数</strong>。</p>\n</blockquote>\n<blockquote>\n<p>二次型$f(x_1,x_2,x_3)$为正定矩阵的<strong>充要</strong>条件</p>\n<ol>\n<li>$A$的特征值$\\lambda_i&gt;0$</li>\n<li>$A$的各阶顺序主子式大于$0$</li>\n<li>$f(x_1,x_2,x_3)&gt;0$<br>\n二次型$f(x_1,x_2,x_3)$为正定矩阵的<strong>必要</strong>条件</li>\n<li>$a_{ii}&gt;0$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>判断二次型正定</p>\n<ol>\n<li>$\\forall$不全为$0$的$x_1,x_2,…,x_n$，且$f(x_1,x_2,…,x_n)&gt;0$，则称$f$正定</li>\n<li><strong>第一条成立</strong>的前提下，当且仅当$x_1,x_2,…,x_n$全为$0$时，且$f(x_1,x_2,…,x_n)=0$，则称$f$正定</li>\n</ol>\n<p>第二条用于求已知正定后求相关信息。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310041023018.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>正交矩阵</strong><br>\n<strong>两两正交</strong>的<strong>单位</strong>特征向量</p>\n<p>求正交矩阵时候，记得单位化。</p>\n</blockquote>\n<blockquote>\n<p><strong>施密特正交化&amp;章克文正交化</strong><br>\n何时需要正交化<br>\n在求<strong>实对称矩阵</strong>$A$特征向量时，若$\\lambda_1=\\lambda_2=k$时。<br>\n方程组$(A-\\lambda E)x=0$一定有<strong>两个线性无关</strong>解向量。<br>\n也就是说属于矩阵二重根$k$的特征向量一定构成一个平面。</p>\n<p><strong>施密特</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310160931641.jpg\" alt=\"\"></p>\n<p>举例：<br>\n$$(A-kE)\\rightarrow … \\rightarrow \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix}，也就是x_1+2x_2+3x=0，解得p_1=\\begin{bmatrix} -2 \\\\ 1 \\\\ 0 \\end{bmatrix}，p_2=\\begin{bmatrix} -3 \\\\ 0 \\\\ 1 \\end{bmatrix}$$<br>\n用<strong>施密特法</strong>把$p_1=\\begin{bmatrix} -2 \\\\ 1 \\\\ 0 \\end{bmatrix}，p_2=\\begin{bmatrix} -3 \\\\ 0 \\\\ 1 \\end{bmatrix}$正交化<br>\n设$q_1=p_1=\\begin{bmatrix} -2 \\\\ 1 \\\\ 0 \\end{bmatrix}$<br>\n$q_2=p_2-\\frac{(p_1,p_2)}{(p_1,p_1)}p_1=\\begin{bmatrix} -3 \\\\ 0 \\\\ 1 \\end{bmatrix}-\\frac{(-2)\\times (-3)}{(-2)\\times (-2)+1\\times 1}\\begin{bmatrix} -2 \\\\ 1 \\\\ 0 \\end{bmatrix}$<br>\n$q_2=\\begin{bmatrix} -0.6 \\\\ -1.2 \\\\ 1 \\end{bmatrix}\\rightarrow \\begin{bmatrix} -6 \\\\ -12 \\\\ 10 \\end{bmatrix}\\rightarrow \\begin{bmatrix} 3 \\\\ 6 \\\\ -5 \\end{bmatrix}$<br>\n用<strong>章克文</strong>法把$p_1=\\begin{bmatrix} -2 \\\\ 1 \\\\ 0 \\end{bmatrix}，p_2=\\begin{bmatrix} -3 \\\\ 0 \\\\ 1 \\end{bmatrix}$正交化<br>\n设$q_1=p_1=\\begin{bmatrix} -2 \\\\ 1 \\\\ 0 \\end{bmatrix}$<br>\n设$q_2$与$q_1$正交，就有$q_2=\\begin{bmatrix} a \\\\ 2a \\\\ b \\end{bmatrix}$，此时$q_1q_2$内积为$0$。将$q_2$代入$x_1+2x_2+3x_3=0$中就可得$5a+3b=0$，设$a=3,b=-5$，可得$q_2=\\begin{bmatrix} 3 \\\\ 6 \\\\ -5 \\end{bmatrix}$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211011716276.jpg\" alt=\"\"></p>\n<p>【<strong>暂时不知道谁的方法（好用）</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311202132465.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>正定（特征值均$&gt;0$）判定：<br>\n如果一个二次型$3$阶矩阵$1，2，3$顺序主子式都大于$0$，则说明二次型正定。</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270747838.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311132158852.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311202115047.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312112206230.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312132129964.jpg\" alt=\"\"></p>\n<p><strong>一个矩阵通过线性变换/正交变换变为另一个矩阵</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312062201918.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"计算方法\">计算方法</h3>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211181804956.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211181804661.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211181805127.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211181805659.jpg\" alt=\"\"><br>\n$f=x^{\\top}Ax=(Qy)^{\\top}AQy=y^{\\top}(Q^{\\top}AQ)y=y^{\\top}\\wedge y$<br>\n其中$x$经过$x=Qy$的线性变化，将$f$化为标准型，也就是$\\wedge$，$A$的特征值。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211221610294.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211181805737.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"总结-5\">总结</h3>\n<blockquote>\n<p>若$n$阶矩阵$A$的行列式，$\\lvert A \\rvert \\not=0$</p>\n<p>$矩阵\\begin{cases}A可以写成若干初等方阵的乘积 \\\\ A与单位矩阵E等价 \\\\ A是非奇异矩阵 \\\\ A是满秩矩阵 \\\\ A是可逆矩阵 \\end{cases}$</p>\n<p>$秩\\begin{cases}R(A的行向量组)=R(A的列向量组)=R(A)=n \\\\ R(AB)=R(B) \\\\ R(CA)=R© \\end{cases}$</p>\n<p>$向量组\\begin{cases}A的行向量组线性无关 \\\\ A的列向量组线性无关 \\\\ A的列向量组是n维实向量空间R^{n}的一组基 \\end{cases}$</p>\n<p>$方程组\\begin{cases}Ax=0只有零解 \\\\ Ax=b有唯一解 \\end{cases}$</p>\n<p>$特征值与二次型\\begin{cases}A的特征值不为零 \\\\ A^{\\top}A是正定矩阵 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>若$n$阶矩阵$A$的行列式，$\\lvert A \\rvert =0$</p>\n<p>$矩阵\\begin{cases}A不能写成若干初等方阵的乘积 \\\\ A与单位矩阵E不等价 \\\\ A是奇异矩阵 \\\\ A是降秩矩阵 \\\\ A是不可逆矩阵 \\end{cases}$</p>\n<p>$秩\\begin{cases}R(A的行向量组)=R(A的列向量组)=R(A)&lt;n \\end{cases}$</p>\n<p>$向量组\\begin{cases}A的行向量组线性相关 \\\\ A的列向量组线性相关 \\end{cases}$</p>\n<p>$方程组\\begin{cases}Ax=0有非零解 \\\\ Ax=b有无穷组解或无解 \\end{cases}$</p>\n<p>$特征值与二次型\\begin{cases}0一定是A的特征值 \\\\ A^{\\top}A是半正定矩阵 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>零向量</p>\n<p>$特点\\begin{cases}零向量总可以被任意一个向量组线性表示 \\\\ 零向量是任意齐次线性方程组的解 \\\\ 若方阵A中有一行(列)为零向量，则\\lvert A \\rvert =0 \\\\ 零向量和任何向量的内积是零 \\\\ 零向量与任意同维向量正交 \\\\ 零向量乘任何数还是零向量 \\\\ 零向量在哪里，哪里就线性相关 \\end{cases}$</p>\n<p>$唯一性\\begin{cases}没有方向 \\\\ 长度为0 \\\\ 在任意向量空间的任意基下坐标为零向量 \\end{cases}$</p>\n<p>$不能作为\\begin{cases}特征向量 \\\\ 向量空间的基 \\\\ 方程组的基础解系 \\\\ 向量组极大无关组 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>秩</p>\n<p>$矩阵的秩\\begin{cases}最高阶非零子式的阶数 \\\\ 求法：化为行阶梯型 \\end{cases}$</p>\n<p>$向量组的秩\\begin{cases}极大无关组所含向量的个数 \\\\ 三秩相等定理：R(A)=R(A的列向量组)=R(A的行向量组) \\end{cases}$</p>\n<p>$方程组与秩\\begin{cases}秩的含义 \\\\ 解得判定 \\end{cases}$</p>\n<p>$向量空间与秩\\begin{cases}A_{m\\times n}x=0解空间的维数是n-R(A)，A的行(列)向量所张成向量空间的维数是R(A) \\end{cases}$</p>\n<p>$二次型的秩\\begin{cases}求法：对称矩阵A的非零特征值的个数 \\\\ 定义：二次型对应对称矩阵A的秩 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>三维列向量组$\\alpha_1,\\alpha_2,\\alpha_3$线性无关$A=(\\alpha_1,\\alpha_2,\\alpha_3)$</p>\n<p>$行列式与矩阵\\begin{cases}A是可逆矩阵 \\\\ A是非奇异矩阵 \\\\ A是满秩矩阵 \\\\ \\lvert A \\rvert \\not= 0 \\end{cases}$</p>\n<p>$向量组\\begin{cases}向量组\\alpha_1,\\alpha_2,\\alpha_3的极大无关组就是它本身 \\\\ R(\\alpha_1,\\alpha_2,\\alpha_3)=3 \\\\ 若(\\beta_1,\\beta_2,\\beta_3)=(\\alpha_1,\\alpha_2,\\alpha_3)P_{3}\\begin{cases}当\\lvert P_3 \\rvert=0时，\\beta_1,\\beta_2,\\beta_3线性相关 \\\\ 当\\lvert P_3 \\rvert \\not=0时，\\beta_1,\\beta_2,\\beta_3线性无关 \\end{cases} \\\\ \\alpha_1,\\alpha_2,\\alpha_3中任意向量都不能由其余向量线性表示 \\\\ \\alpha_1,\\alpha_2,\\alpha_3中任意2个(或1个)向量组成的向量组线性无关 \\\\ 向量组\\begin{bmatrix}\\alpha_1 \\\\ x \\end{bmatrix},\\begin{bmatrix}\\alpha_2 \\\\ y \\end{bmatrix},\\begin{bmatrix}\\alpha_3 \\\\ z \\end{bmatrix}线性无关 \\end{cases}$</p>\n<p>$方程组\\begin{cases}方程组x_1\\alpha_1+x_2\\alpha_2+x_3\\alpha_3=0只有零解 \\\\ 方程组x_1\\alpha_1+x_2\\alpha_2+x_3\\alpha_3=b有唯一解 \\end{cases}$</p>\n<p>$向量空间\\begin{cases}\\alpha_1,\\alpha_2,\\alpha_3是三维实向量空间R^{3}的一组基 \\\\ 任意三维列向量\\beta都可以由\\alpha_1,\\alpha_2,\\alpha_3线性表示 \\end{cases}$</p>\n<p>$相似矩阵\\begin{cases}若\\alpha_1,\\alpha_2,\\alpha_3是矩阵B_{3}的特征向量，则B_{3}可以相似对角化 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>三维列向量组$\\alpha_1,\\alpha_2,\\alpha_3$线性相关$A=(\\alpha_1,\\alpha_2,\\alpha_3)$</p>\n<p>$行列式与矩阵\\begin{cases}A是不可逆矩阵 \\\\ A是奇异矩阵 \\\\ A是降秩矩阵 \\\\ \\lvert A \\rvert = 0 \\end{cases}$</p>\n<p>$向量组\\begin{cases}R(\\alpha_1,\\alpha_2,\\alpha_3)&lt;3 \\\\ \\alpha_1,\\alpha_2,\\alpha_3中至少有一个向量可以由其余向量线性表示 \\\\ 向量组\\alpha_1,\\alpha_2,\\alpha_3,\\beta 线性相关  \\end{cases}$</p>\n<p>$方程组\\begin{cases}方程组x_1\\alpha_1+x_2\\alpha_2+x_3\\alpha_3=0有非零解 \\\\ 方程组x_1\\alpha_1+x_2\\alpha_2+x_3\\alpha_3=b有无穷多组解或无解 \\end{cases}$</p>\n<p>$向量空间\\begin{cases}\\alpha_1,\\alpha_2,\\alpha_3所张成向量空间的维数小于3 \\\\ \\alpha_1,\\alpha_2,\\alpha_3共面 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>齐次线性方程组$A_{n}x=0$只有零解</p>\n<p>$行列式与矩阵\\begin{cases}A是可逆矩阵 \\\\ A是非奇异矩阵 \\\\ A是满秩矩阵 \\\\ \\lvert A \\rvert\\not= 0 \\end{cases}$</p>\n<p>$向量组\\begin{cases}A的列(行)向量组线性无关 \\\\ A的列(行)向量组的秩为n \\end{cases}$</p>\n<p>$方程组\\begin{cases}A_{n}x=b有唯一解 \\end{cases}$</p>\n<p>$向量空间\\begin{cases}A的列(行)向量是n维实向量空间R^{n}的一组基 \\\\ 任意n维列向量都可以由A的列向量组线性表示 \\end{cases}$</p>\n<p>$特征值\\begin{cases}0不是矩阵A的特征值 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>齐次线性方程组$A_{n}x=0$有非零解</p>\n<p>$行列式与矩阵\\begin{cases}A是不可逆矩阵 \\\\ A是奇异矩阵 \\\\ A是降秩矩阵 \\\\ \\lvert A \\rvert = 0 \\end{cases}$</p>\n<p>$向量组\\begin{cases}A的列(行)向量组线性相关 \\\\ A的列(行)向量组的秩小于n \\end{cases}$</p>\n<p>$方程组\\begin{cases}A_{n}x=b有无穷多解或无解 \\end{cases}$</p>\n<p>$向量空间\\begin{cases}A_{n}x=0的解空间维数为n-R(A) \\\\ A的行(列)向量组所张成的向量空间维数为R(A) \\end{cases}$</p>\n<p>$特征值\\begin{cases}0是矩阵A的特征值 \\end{cases}$</p>\n</blockquote>\n<hr>\n<h2 id=\"概率论\">概率论</h2>\n<h3 id=\"随机事件及其概率\">随机事件及其概率</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251113290.png\" alt=\"\"></p>\n<p><strong>主要考点</strong></p>\n<blockquote>\n<p><strong>事件关系运算</strong>：<br>\n直接：吸收率、分配率、对偶率<br>\n特例法<br>\n<strong>概率计算</strong>：<br>\n加法<br>\n减法<br>\n条件概率<br>\n全概率、贝叶斯：完备<br>\n<strong>独立性</strong>：<br>\n原理：如何判断独立性<br>\n应用：伯努利概型</p>\n</blockquote>\n<blockquote>\n<p><strong>互斥（不相容）</strong>：事件$A$与事件$B$不能同时发生，即$A\\cap B=\\varnothing$<br>\n<strong>对立</strong>：若事件$A$与事件$B$不能同时发生，但必须发生一个，即$A\\cap B=\\varnothing$并且$A\\cup B=\\Omega$，记作$A=\\bar{B},B=\\bar{A}$<br>\n对立$\\Longrightarrow$互斥<br>\n<strong>独立</strong>：若事件$A$与事件$B$独立则$P(AB)=P(A)P(B)$</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309040857226.jpg\" alt=\"\"></p>\n<p>【<strong>注</strong>】<br>\n（1）、（4）、（5）重要。<br>\n（5）：大杠变短杠，符号换方向</p>\n</blockquote>\n<blockquote>\n<p><strong>辨析</strong></p>\n<ol>\n<li>$A\\cup(B-C)=A\\cup B-A\\cup C$</li>\n<li>$A\\cap(B-C)=A\\cap B-A\\cap C$</li>\n</ol>\n<p><strong>2是对的、1是错的</strong><br>\n因为交就是逻辑乘，并就是逻辑加</p>\n<p>—by 日语哥、a包</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041232489.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041232322.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>若$0&lt;P(A)&lt;1，P(AB)=P(A)P(B)$<br>\n则有<br>\n$\\displaystyle P(B|A)=\\frac{P(AB)}{P(A)}=\\frac{P(A)P(B)}{P(A)}=P(B)$<br>\n$\\displaystyle P(B|\\bar{A})=\\frac{P(B\\bar{A})}{P(\\bar{A})}=\\frac{P(B)-P(B)P(A)}{1-P(A)}=\\frac{P(B)[1-P(A)]}{1-P(A)}=P(B)$</p>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041234793.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>全概率公式推导</strong>：<br>\n$$\\begin{aligned}P(A)=&amp;P(A\\cap \\Omega)=P[A\\cup(B_{1}\\cap …\\cap B_{n})] \\\\ =&amp;P[AB_{1}\\cup AB_{2}\\cup …\\cup AB_{n}] \\\\ =&amp;P(AB_{1})+…+P(AB_{n}) \\\\ =&amp; \\displaystyle\\sum_{i=1}^{n}P(AB_{i}) \\\\ =&amp;\\sum_{i=1}^{n}P(B_{i})P(A|B_{i}) \\end{aligned}$$</p>\n</blockquote>\n<blockquote>\n<p><strong>一些重要的公式应用</strong><br>\n$P(A\\bar{B})=P(A)-P(AB)$<br>\n$P(AB\\bar{C})=P(AB)-P(ABC)$<br>\n$P(\\bar{B}|A)=1-P(B|A)$<br>\n$P(A\\cup B|C)=P(A|C)+P(B|C)-P(AB|C)$<br>\n$P(A-B)=P(A\\bar{B})$</p>\n</blockquote>\n<blockquote>\n<p>【<strong>注</strong>】<br>\n概率不能推事件</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310172017748.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270747653.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311010940711.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311031126889.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311222152067.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312112208315.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"一维随机变量及其分布\">一维随机变量及其分布</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251113094.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>常用结论</strong>：$\\displaystyle \\int_{-\\infty}^{+\\infty}e^{-t^{2}}dt=\\sqrt{\\pi}$</p>\n</blockquote>\n<blockquote>\n<p><strong>分布函数</strong>：$F(x)=P[X\\le x]$<br>\n满足<br>\n（1）$F(x)$是一个<strong>不减函数</strong>；<br>\n（2）$0\\le F(x)\\le 1$且$F(-\\infty)=0,F(+\\infty)=1$；<br>\n（3）$F(x)$是右连续的，即$F(x+0)=F(x)$。$F(x)$的分布函数满足<strong>左闭右开</strong>$[)$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311140933977.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>概率密度</strong>：存在<strong>非负可积</strong>函数$f(x)$，使得$\\displaystyle F(x)=\\int_{-\\infty}^{x}f(t)dt$。则称$F(x)$为<strong>连续型随机变量</strong>，$f(x)$称为$X$的<strong>概率密度函数</strong>。<br>\n满足<br>\n（1）$f(x)\\ge 0,-\\infty&lt;x&lt;+\\infty$；<br>\n（2）$\\displaystyle \\int_{-\\infty}^{+\\infty}f(x)dx=1$</p>\n</blockquote>\n<blockquote>\n<p><strong>常见的离散型随机变量的分布</strong><br>\n【<strong>注</strong>】<br>\n若离散型随机变量$X$的分布律为$P[X=k]$，则$\\displaystyle \\sum_{k=0}^{\\infty}P[X=k]=1$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309060827071.jpg\" alt=\"\"></p>\n<ol>\n<li>对于离散型随机变量计算$x=1$处的概率时，应使用$P[x=1]=P[x\\le 1]-P[x&lt;1]$</li>\n<li>$\\displaystyle P[X=k]=\\frac{C}{k!},k=0,1,…\\Longrightarrow X\\sim P(1)$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310191103335.jpg\" alt=\"\"></li>\n</ol>\n<p><strong>常见的连续型随机变量的分布</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311062112768.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>一维正态分布</strong>$N(0,1)$的分布函数$\\Phi(x)$与概率密度$\\varphi(x)$的性质</p>\n<ol>\n<li>$\\displaystyle \\Phi(x)=P[X&lt;x]=2\\Phi(x)-1$</li>\n<li>$\\varphi(x)$是偶函数</li>\n<li>$\\varphi$在$(\\infty, 0]$上单增，在$[0,+\\infty)$上单减，在$x=0$处取最大值$\\frac{1}{\\sqrt{2\\pi}}$</li>\n<li>$(1,\\varphi(1)),(-1,\\varphi(-1))$是曲线$y=\\varphi(x)$的两个拐点，其中$\\varphi(1)=\\varphi(-1)=\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{1}{2}}$</li>\n</ol>\n</blockquote>\n<p>给了概率密度就是连续型随机变量。</p>\n<p>分布=概率=积分=面积</p>\n<blockquote>\n<p><strong>随机变量函数的分布</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270742764.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309061053126.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>例题</strong><br>\n例6：设随机变量$X$的概率密度为$\\displaystyle f(x)=\\frac{1}{\\pi (1+x^2)},-\\infty&lt;x+\\infty$，求$Y=1-\\sqrt[3]{x}$的分布函数和概率密度。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309061433120.jpg\" alt=\"\"><br>\n【<strong>总结</strong>】：<br>\n【<strong>例1、2</strong>】若$Y$与$X$的函数<strong>分部函数</strong>：根据$Y$的随机变量画出$X、Y$的图像，找到$Y$的关键点，记得左闭右开。用$Y$将$X$表示出来，代入$F_{x}(X)$中计算即可。<br>\n【<strong>例6</strong>】若$Y$与$X$的函数<strong>不是分部函数</strong>：根据$Y=Y(X)$，代入$F_{Y}(y)=P[Y\\le y]=P[Y(X)\\le y]$反解出$X$关于 $y$的不等式，代入题目已知的$F_{X}(x)$进行计算。</p>\n</blockquote>\n<h3 id=\"二维随机变量及其分布\">二维随机变量及其分布</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251113047.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>分布函数的性质</strong>：</p>\n<p>(1) $0\\le F(x,y) \\le 1$<br>\n(2) $F(-\\infty,y)=f(x,-\\infty)=0，F(+\\infty,+\\infty)=1$<br>\n(3) $F(x,y)$分别关于$x$和$y$是单调不减<br>\n(4) $F(x,y)$分别是$x$和$y$的右连续函数<br>\n(5) 类似于二维前缀和。<br>\n$\\begin{aligned} P[(X,Y)\\in D ]&amp;=P[x_1&lt;X\\le x_2,y_1&lt;Y\\le y_2] \\\\ &amp;=F(x_2,y_2)-F(x_2,y_1)-F(x_1,y_2)+F(x_1,y_1) \\end{aligned}$</p>\n</blockquote>\n<blockquote>\n<p><strong>二维离散型随机变量(X,Y)的分布</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309071601569.jpg\" alt=\"\"><br>\n（2）<strong>边缘（概率）分布</strong>：<br>\n关于$X$的边缘分布为：$$\\displaystyle P[X=x_i]=\\sum_{j=1}^{\\infty}p_{ij}=p_{i.},(i=1,2,…)$$<br>\n关于$Y$的边缘分布为：$$\\displaystyle P[Y=y_i]=\\sum_{i=1}^{\\infty}p_{ij}=p_{.j},(j=1,2,…)$$<br>\n假设看$P[X=2]$的边缘分布，就$p_{21}+p_{22}+p_{23}+…+p_{2n}$<br>\n（3）<strong>条件（概率）分布</strong>：<br>\n当$P[Y=y_j]&gt;0$时，在$Y=y_j$的条件下，$X$的概率分布为：$$\\displaystyle P[X=x_i | Y=y_j]=\\frac{P[X=x_i,Y=y_j]}{P[Y=y_j]}=\\frac{p_{ij}}{p_{.j}}$$<br>\n当$P[X=x_i]&gt;0$时，在$X=x_i$的条件下，$Y$的概率分布为：$$\\displaystyle P[Y=y_j | X=x_i]=\\frac{P[X=x_i,Y=y_j]}{P[X=x_i]}=\\frac{p_{ij}}{p_{i.}}$$<br>\n（4）<strong>联合概率分布</strong>：$\\displaystyle F(x,y)=\\sum_{x_i\\le x}\\sum_{y_i\\le y}p_{ij}$<br>\n（5）<strong>独立性</strong>：若对一切$i,j$，有$p_{ij}=p_{i.}\\times p_{.j}$，则称 $X$与$Y$相互独立。</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312012107965.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>二维连续型随机变量(X,Y)的分布</strong><br>\n（1）<strong>分布函数</strong><br>\n$$\\displaystyle F(x,y)=\\int_{-\\infty}^{x}\\int_{-\\infty}^{y}f(u,v)dudv,(x,y)\\in R^2$$<br>\n（2）<strong>概率密度</strong><br>\n性质：</p>\n<ol>\n<li>$f(x,y)\\ge 0$</li>\n<li>$\\displaystyle \\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}f(x,y)dxdy=1$</li>\n</ol>\n<p>（3）在$f(x,y)$的连续点$(x,y)$处，有$\\displaystyle\\frac{\\partial^{2}F(x,y)}{\\partial x\\partial y}=f(x,y)$<br>\n（4）设$D$为某一区域，则<br>\n$$\\displaystyle P[(X,Y)\\in D]=\\iint\\limits_{D}f(x,y)dxdy$$<br>\n（5）<strong>边缘分布函数</strong>：<br>\n$$\\displaystyle F_{X}(x)=P[X\\le x,Y\\le +\\infty ]=\\lim_{y\\to +\\infty}F(x,y)=F(x,+\\infty)$$<br>\n$$\\displaystyle F_{Y}(y)=P[X\\le +\\infty,Y\\le y ]=\\lim_{x\\to +\\infty}F(x,y)=F(+\\infty,y)$$<br>\n（6）<strong>边缘概率密度</strong>：<br>\n$$\\displaystyle f_{X}(x)=\\int_{-\\infty}^{+\\infty}f(x,y)dy，f_{Y}(y)=\\int_{-\\infty}^{+\\infty}f(x,y)dx$$<br>\n（7）<strong>条件分布函数</strong>：<br>\n$$\\displaystyle F_{X|Y}(x|y)=\\int_{-\\infty}^{x}\\frac{f(u,y)}{f_{Y}(y)}du，(f_{Y}(y)&gt;0)$$<br>\n$$\\displaystyle F_{Y|X}(y|x)=\\int_{-\\infty}^{y}\\frac{f(x,u)}{f_{X}(x)}du，(f_{X}(x)&gt;0)$$<br>\n（8）<strong>条件概率密度</strong>：<br>\n$$\\displaystyle f_{X|Y}(x|y)=\\frac{f(x,y)}{f_{Y}(y)}，(f_{Y}(y)&gt;0)$$<br>\n$$\\displaystyle f_{Y|X}(y|x)=\\frac{f(x,y)}{f_{X}(x)}，(f_{X}(x)&gt;0)$$<br>\n（9）<strong>独立性</strong>：<br>\n$$\\begin{aligned}X与Y相互独立 \\rightleftarrows &amp; f(x,y)=f_{X}(x)\\times f_{Y}(y) \\\\ \\rightleftarrows &amp;f_{X|Y}(x|y)=f_{X}(x) \\\\ \\rightleftarrows &amp;f_{Y|X}(y|x)=f_{Y}(y) \\end{aligned}$$<br>\n（10）<strong>求EX、EY</strong><br>\n当$(X,Y)$是连续型随机变量时，设其概率密度为$f(x,y)$，则$$\\begin{aligned}EXY&amp;=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}xyf(x,y)dxdy \\\\ EX&amp;=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}xf(x,y)dxdy \\\\EY&amp;=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}yf(x,y)dxdy  \\end{aligned}$$</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310220808109.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>常用的二维连续型随机变量分布</strong><br>\n（1）<strong>均匀分布</strong>：$(X,Y)$服从区域$G$上的均匀分布，则其概率密度为：$$\\displaystyle f(x,y)=\\begin{cases}\\frac{1}{G的面积}&amp;,(x,y)\\in G \\\\ 0&amp;, 其他 \\end{cases}$$<br>\n（2）<strong>二维正态分布</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309070937865.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309070937303.jpg\" alt=\"\"><br>\n<strong>第（4）点证明</strong>：<br>\n$$E(aX+bY)=E(aX)+E(bY)=aEx+bEY=aμ_1+bμ_2$$<br>\n$$\\begin{aligned}D(aX+bY)&amp;=D(aX)+D(bY)+2Cov(aX,bY) \\\\ &amp;=a^2DX+b^2DY+2abCov(X,Y) \\\\ &amp;=a^2\\ \\sigma _{1}^{2}+b^2 \\sigma _{2}^{2} +2ab\\rho  \\sigma_1 \\sigma_2  \\end{aligned}$$</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270750696.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011118647.jpg\" alt=\"\"></p>\n<p><strong>二维正态天花板</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311222150816.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312192120445.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311170937350.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>关于</strong>$Z=max(X,Y)，Z=min(X,Y)$<strong>的分布</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309070952249.jpg\" alt=\"\"></p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270752921.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311102211735.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312072158284.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312172131085.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309070953502.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>求随机变量函数的概率密度</strong></p>\n<p>【<strong>基本思路——a包</strong>】<br>\n连续$+$连续 定义/卷积<br>\n连续$+$离散 全概率离散<br>\n离散$+$离散 画图</p>\n<p><strong>当X、Y不是连续型时</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311058876.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311102052910.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311132159173.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312012108015.jpg\" alt=\"\"></p>\n<p><strong>当X、Y是连续型时</strong></p>\n<p>【<strong>定义法</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311201124888.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312062203849.jpg\" alt=\"\"></p>\n<p>【<strong>卷积法</strong>】<br>\n$\\displaystyle Z=g(x,y)\\stackrel{反解}{\\longrightarrow}Y=h(x,z)$<br>\n$\\displaystyle f_{Z}(z)=\\int_{-\\infty}^{+\\infty}f(x,h(x,z))|\\frac{\\partial h(x,z)}{\\partial z}|dx$</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309081118551.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270751515.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270752736.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>一些概念的辨析</strong></p>\n<p><strong>分布函数</strong>是最普适的，针对随机变量。无论是<strong>离散型</strong>随机变量还是<strong>连续型</strong>随机变量都可以有分布函数。<br>\n<strong>分布律</strong>也就是分布列，针对<strong>离散型</strong>随机变量，要写成表格或者矩阵的形式。连续型随机变量没有分布律。</p>\n</blockquote>\n<h3 id=\"随机变量的数字特征\">随机变量的数字特征</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251113795.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>伽马函数（概统中常用）</strong><br>\n$\\Gamma(\\alpha)=\\displaystyle\\int_{0}^{+\\infty}x^{\\alpha-1}e^{-x}dx(\\alpha&gt;0)$</p>\n<p>被积函数是$x$的几次方，积分就是$\\Gamma(几+1)$。</p>\n<p>性质：</p>\n<ol>\n<li>$\\Gamma(1)=1，\\Gamma(\\frac{1}{2})=\\sqrt{\\pi}$</li>\n<li>$\\Gamma(\\alpha+1)=\\alpha\\Gamma(\\alpha)$</li>\n<li>由于1.2.，对自然数$n$，有$\\Gamma(n+1)=n!$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>一维随机变量的数学期望</strong></p>\n<p><strong>期望就是均值（平均值）</strong>。</p>\n<p><strong>定义</strong>：<br>\n设<strong>离散型</strong>随机变量$X$的分布律为：$$P[X=x_k]=p_k,k=1,2,…,$$则称$EX=\\displaystyle\\sum_{k=1}^{\\infty}x_kp_k$为$X$的数学期望，其中$\\displaystyle\\sum_{k=1}^{\\infty}x_kp_k$<strong>绝对收敛</strong>。</p>\n<p>例：<br>\n如果$\\displaystyle P[X=-2]=\\frac{1}{2},P[X=1]=\\frac{1}{3},P[X=3]=\\frac{1}{6}$，则<br>\n$\\displaystyle EX=(-2)\\times \\frac{1}{2}+1\\times\\frac{1}{3}+3\\times \\frac{1}{6}$<br>\n<strong>连续型</strong>随机变量$X$的概率密度为$f(x)$，则称$EX=\\displaystyle\\int_{-\\infty}^{\\infty}xf(x)dx$为$X$的数学其中，要求$\\displaystyle\\int_{-\\infty}^{\\infty}xf(x)dx$绝对收敛。</p>\n</blockquote>\n<blockquote>\n<p><strong>随机变量函数的期望</strong><br>\n（1）$Z=g(x)$当$X$是<strong>离散型</strong>随机变量时，设$P[X=x_k]=p_k,k=1,2,…$，则$$EZ=E[g(x)]=\\displaystyle\\sum_{k=1}^{\\infty}g(x_k)p_k$$<br>\n例$$\\begin{aligned}\\displaystyle&amp;\\sum_{n=1}^{\\infty}(n+1)n(\\frac{7}{8})^{n-1}\\frac{1}{8},n=1,2,3,… \\\\ &amp;\\Longrightarrow E(X^2+X) \\\\ &amp;=(EX^2)+EX \\\\&amp;=(EX)^2+DX+EX \\end{aligned}$$<br>\n（2）$Z=g(x)$当$X$是<strong>连续型</strong>随机变量时，设其概率密度为$f(x)$，则$$EZ=E[g(X)]=\\displaystyle\\int_{-\\infty}^{+\\infty}g(x)f(x)dx$$<br>\n关于（2）可以求<br>\n$Y=f_{Y}(y),EY=\\displaystyle\\int_{-\\infty}^{+\\infty}f_{Y}(y)f_{X}(x)dx$<br>\n$EX^2=\\displaystyle\\int_{-\\infty}^{+\\infty}x^{2}f_{X}(x)dx$<br>\n$E|X|=\\displaystyle\\int_{-\\infty}^{+\\infty}|x|f_{X}(x)dx$</p>\n</blockquote>\n<blockquote>\n<p><strong>二维随机变量的数学期望</strong><br>\n（1）当$(X,Y)$是二维<strong>离散型</strong>随机变量时，其分布律为$P[X=x_i,Y=y_i]=p_{ij},i,j=1,2,…$则$Z=g(X,Y)$的数学期望为：$$EZ=E[g(X,Y)]=\\displaystyle\\sum_{i=1}^{\\infty}\\sum_{j=1}^{\\infty}g(x_i,y_j)p_{ij}$$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309121034948.jpg\" alt=\"\"><br>\n（2）当$(X,Y)$是二维<strong>连续型</strong>随机变量时，设其概率密度为$f(x,y)$，则$Z=g(X,Y)$的数学期望为$$\\begin{aligned}&amp;EZ=E[g(X,Y)]=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}g(x,y)f(x,y)dxdy \\\\&amp;\\Longrightarrow EXY=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}xyf(x,y)dxdy \\\\&amp; \\Longrightarrow EX=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}xf(x,y)dxdy  \\\\&amp; \\Longrightarrow EY=\\displaystyle\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}yf(x,y)dxdy \\end{aligned}$$</p>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311221137461.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>数学期望的性质</strong><br>\n设随机变量$X$和$Y$的数学期望为$E(X),E(Y),a,b,c$为任意常数，则</p>\n<ol>\n<li>$E（c）=c;$</li>\n<li>$E(cX)=cE(X);$</li>\n<li>$E(aX+bY)=aE(X)+bE(Y);$</li>\n<li>若$X$与$Y$是相互独立，则有$E(XY)=E(X)E(Y)$，反之不成立;</li>\n<li>$E(XY)=E(X)E(Y)\\Longleftrightarrow X$与$Y$不相关。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>方差</strong><br>\n<strong>定义</strong>：设$X$是随机变量，则称$E[(X-EX)^2]$为$X$的方差，其中$E[(X-EX)^2]$存在，记$$\\begin{aligned}DX=&amp;\\displaystyle\\sum_{i=1}^{n}[X_i-E(X)]^{2}p_i \\\\ =&amp;E[(X-EX)^2] \\\\=&amp;E[X^2-2XEX+(EX)^2] \\\\=&amp;EX^{2}-2EXEX+(EX)^2 \\\\=&amp;EX^2-(EX)^2 \\\\ \\Longrightarrow&amp; EX^2=DX+(EX)^2 \\end{aligned}$$</p>\n<p>对于连续型随机变量<br>\n$D(X)=\\displaystyle\\int_{-\\infty}^{\\infty}[X-E(X)]^{2}f(x)dx$</p>\n<p><strong>方差的性质</strong><br>\n设随机变量$X$与$Y$的方差存在，$a,b,c$为常数，则</p>\n<ol>\n<li>$D（c）=0;$</li>\n<li>$D(cX)=c^2D(X),D(aX+b)=a^2D(X);$</li>\n<li>$D(X\\pm Y)=D(X)+D(Y)\\pm 2E[[X-E(X)][Y-E(Y)]]=D(X)+D(Y)\\pm Cov(X,Y);$</li>\n<li>若$X$与$Y$是相互独立的随机变量，则$D(X\\pm Y)=D(X)+D(Y)$，<strong>反之不成立</strong>;</li>\n<li>$D(X\\pm Y)=D(X)+D(Y)\\Longleftrightarrow X$与$Y$不相关;</li>\n<li>若$X$与$Y$是相互独立的随机变量，且$E(X)=E(Y)=0$，则$D(XY)=D(X)D(Y)$;</li>\n<li>若任意的常数$c\\not= E(X)$，有$D(X)&lt;E[(X-c)^2]$</li>\n</ol>\n<p>【<strong>例题</strong>】</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312062202610.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270749700.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310310952331.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311082028891.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312112207202.jpg\" alt=\"\"></p>\n<p><strong>方差的性质3</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311222148670.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312192120420.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>条件期望、条件方差</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312192119645.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>常见的随机变量分布的数学期望与方差</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分布名称</th>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">数学期望$EX$</th>\n<th style=\"text-align:center\">方差$DX$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0-1分布</td>\n<td style=\"text-align:center\">$B(1,p)$</td>\n<td style=\"text-align:center\">$p$</td>\n<td style=\"text-align:center\">$p(1-p)$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">二项分布</td>\n<td style=\"text-align:center\">$B(n,p)$</td>\n<td style=\"text-align:center\">$np$</td>\n<td style=\"text-align:center\">$np(1-p)$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">泊松分布</td>\n<td style=\"text-align:center\">$P(\\lambda)$</td>\n<td style=\"text-align:center\">$\\lambda$</td>\n<td style=\"text-align:center\">$\\lambda$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">几何分布</td>\n<td style=\"text-align:center\">$G§$</td>\n<td style=\"text-align:center\">$\\frac{1}{p}$</td>\n<td style=\"text-align:center\">$\\frac{1-p}{p^2}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">均匀分布</td>\n<td style=\"text-align:center\">$U(a,b)$</td>\n<td style=\"text-align:center\">$\\frac{a+b}{2}$</td>\n<td style=\"text-align:center\">$\\frac{(b-a)^2}{12}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">指数分布</td>\n<td style=\"text-align:center\">$E(\\lambda)$</td>\n<td style=\"text-align:center\">$\\frac{1}{\\lambda}$</td>\n<td style=\"text-align:center\">$\\frac{1}{\\lambda^2}$</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">正态分布</td>\n<td style=\"text-align:center\">$N(\\mu,σ^2)$</td>\n<td style=\"text-align:center\">$\\mu$</td>\n<td style=\"text-align:center\">$σ^2$</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>【<strong>注</strong>】<br>\n若$X_1\\sim N(\\mu_1, σ_1^2),X_2\\sim N(\\mu_2, σ_2^2)$，若$X_1$与$X_2$相互独立，则$X_1+X_2\\sim N(\\mu_1+\\mu_2,σ_1^2+σ_2^2)$</p>\n</blockquote>\n<blockquote>\n<p><strong>协方差</strong><br>\n<strong>定义</strong>：设$(X,Y)$为二维随机变量，如果$E[[X-E(X)][Y-E(Y)]]$存在，则称其为随机变量$X$和$Y$的协方差，记为$Cov(X,Y)$，即$$Cov(X,Y)=E[[X-E(X)][Y-E(Y)]]$$<br>\n<strong>计算公式</strong>：</p>\n<ol>\n<li>$Cov(X,Y)=E(XY)-E(X)E(Y)$</li>\n<li>$D(X\\pm Y)=D(X)+D(Y)\\pm 2Cov(X,Y)$</li>\n</ol>\n<p><strong>协方差的性质</strong></p>\n<ol>\n<li>$Cov(X,Y)=Cov(Y,X);$</li>\n<li>$Cov(X,X)=D(X);$</li>\n<li>$Cov(X,c)=0,c$为任意常数;</li>\n<li>$Cov(aX,bY)=abCov(X,Y),a,b$是常数;</li>\n<li>$Cov(X_1+X_2,Y_1+Y_2)=Cov(X_1,Y_1)+Cov(X_1,Y_2)+Cov(X_2,Y_1)+Cov(X_2,Y_2)$;</li>\n<li>如果$X$与$Y$独立，则$Cov(X,Y)=0$</li>\n</ol>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310220812624.jpg\" alt=\"\"><br>\n【<strong>注</strong>】</p>\n<ol>\n<li><strong>关于看法二</strong>$Cov(X,1-X)=Cov(X,1)+Cov(X,-X)=Cov(X,-X)=E(X(-X))-E(X)E(-X)=E(-X^{2})+(EX)^{2}=-(EX^{2}-(EX)^{2})=-DX$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>矩</strong><br>\n（1）$k$阶原点矩：设$X$为随机变量，若$E(X^{k})(k=1,2,…)$存在，则称它为$X$点的$k$阶原点矩($k$阶矩)。$EX：1$阶原点矩。<br>\n（2）$k$阶中心矩：若$E[[X-E(X)]^k]$存在，则称它为$X$的$k$阶中心矩。$DX：2$阶中心矩。</p>\n</blockquote>\n<blockquote>\n<p><strong>随机变量X与Y相互独立与不相关的区别和联系</strong><br>\n$$\\begin{aligned}X与Y相互独立\\Longrightarrow &amp;X与Y不相关 \\\\ X与Y相互独立\\not\\Longleftarrow &amp;X与Y不相关 (如果是二维正态就可以推出独立) \\\\X与Y不相关\\Longleftrightarrow &amp;\\rho_{XY}=0 \\\\ \\Longleftrightarrow &amp;Cov(X,Y)=0 \\\\ \\Longleftrightarrow &amp;EXY=EX \\times EY \\\\ \\Longleftrightarrow &amp;D(X\\pm Y)=DX+DY \\end{aligned}$$</p>\n<p>【<strong>注</strong>】判断$X$与$Y$是否相关，就是计算$Cov(X,Y)$。</p>\n</blockquote>\n<blockquote>\n<p><strong>相关系数</strong><br>\n$$\\rho=\\frac{Cov(X,Y)}{\\sqrt{DX}\\sqrt{DY} }$$</p>\n<p><strong>相关系数的性质</strong></p>\n<ol>\n<li>$\\rho_{XY}=\\rho_{YX};$</li>\n<li>$|\\rho_{XY}|\\le 1$</li>\n<li>$|\\rho_{XY}|=1\\Longleftrightarrow$存在常数$a\\not= 0$和$b$，使得$$P[Y=aX+b]=1$$并有$$\\rho_{XY}=\\begin{cases}1, &amp;a&gt;0,称X,Y正相关 \\\\ -1,&amp;a&lt;0,称X,Y负相关 \\end{cases}$$，其中当$\\rho_{XY}=1$时，$a=\\frac{DY}{DX}$；当$\\rho_{XY}=-1$时，$a=-\\frac{DY}{DX}$。<br>\n此时$\\rho_{XY}=\\frac{\\lvert a \\rvert}{a}$</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270837313.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312092206764.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"大数定律与中心极限定理\">大数定律与中心极限定理</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251114227.png\" alt=\"\"></p>\n<h4 id=\"不等式\">不等式</h4>\n<blockquote>\n<p><strong>切比雪夫不等式</strong><br>\n$X$的期望，方差均存在，对任给的$\\epsilon &gt;0$，有$$P[|X-EX|\\ge \\epsilon ]\\le \\frac{DX}{\\epsilon^2}$$</p>\n<p>可以用于估计$X$落在区间$(EX-\\epsilon,EX+\\epsilon)$内的概率。</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271143945.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271143043.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"大数定律\">大数定律</h4>\n<blockquote>\n<p><strong>依概率收敛</strong><br>\n设$X_1,X_2,…,X_n,…$是随机变量序列，若对于任意给定的$\\epsilon &gt;0$，有$$\\displaystyle \\lim_{n\\to \\infty}P[|X_n-a|&lt;\\epsilon ]=1$$，则称序列$[X_n]$依概率收敛域常数$a$，记为$X_n \\stackrel{P}{\\longrightarrow}a$，即当$n$充分大时，$X_n$落在$(a-\\epsilon,a+\\epsilon)$内的概率接近于$1$。</p>\n</blockquote>\n<blockquote>\n<p><strong>大数定律</strong></p>\n<p>本质：在一定条件下（独立，同分布，$EX$，$DX$($DX$可要可不要)），若干个随机变量的均值$\\displaystyle (\\frac{1}{n}\\sum_{i=1}^{n}X_i)$，依概率收敛到均值的期望。</p>\n<p><strong>三个常用的大数定律</strong><br>\n（1）<strong>切比雪夫大数定律</strong><br>\n$[X_n]$<strong>独立（未必同分布）</strong>，$EX_i=\\mu,DX_i=σ^2$，则$\\forall \\epsilon &gt;0$，有$$\\displaystyle \\lim_{n\\to \\infty}P[|\\frac{1}{n}\\sum_{i=1}^{n}X_i-\\mu|&lt;\\epsilon ]=1$$</p>\n<p>（2）<strong>伯努利大数定律</strong><br>\n$n$次<strong>独立重复</strong>试验中，事件$A$发生的次数为$n_A$，$p$是一次试验发生的概率，$\\forall \\epsilon &gt;0$，有$$\\displaystyle \\lim_{n\\to \\infty}P[|\\frac{n_A}{n}-p|&lt;\\epsilon ]=1$$</p>\n<p>（3）<strong>辛钦大数定律</strong><br>\n$[X_n]$<strong>独立同分布</strong>，$EX_i=\\mu$，则$\\forall \\epsilon &gt;0$，有$$\\displaystyle \\lim_{n\\to \\infty}P[|\\frac{1}{n}\\sum_{i=1}^{n}X_i-\\mu|&lt;\\epsilon ]=1$$</p>\n<p>【<strong>注</strong>】：$\\bar{x}\\stackrel{通过切比雪夫、辛钦依概率收于}{\\longrightarrow}E\\bar{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271142045.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271143270.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310312251248.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271144327.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271144946.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"中心极限定理\">中心极限定理</h4>\n<blockquote>\n<p>大量$(n\\to \\infty)$、独立、同分布，$X_i$(随机变量)之和近似于$N$(一维正态)<br>\n前提：$X_i$<strong>具有期望、方差</strong></p>\n<p>$n\\to\\infty,\\displaystyle\\sum_{i=1}^{n}X_i\\stackrel{满足条件下近似服从}{\\sim}N(n\\mu,n\\sigma^{2})$</p>\n<p>因为是一维正态，因此可以<strong>标准化</strong>，考点也在此处，就是<strong>标准化</strong>。<br>\n$\\displaystyle \\lim_{n\\to\\infty}p[\\frac{\\displaystyle \\sum_{i=1}^{n}X_i-n\\mu}{\\sqrt{n\\sigma^{2}}}\\le x]=\\displaystyle\\lim_{n\\to\\infty}P[\\frac{\\displaystyle\\sum_{i=1}^{n}X_i-n\\mu}{\\sqrt{n}σ}\\le x]=\\Phi(x)$</p>\n</blockquote>\n<blockquote>\n<p><strong>三个常用的中心极限定理</strong></p>\n<p>【<strong>注</strong>】$\\displaystyle \\Phi(x)=\\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}^{x}e^{-\\frac{t^2}{2}}dt$</p>\n<p>（1）<strong>列为-林德伯格定理（独立同分布的中心极限定理）</strong><br>\n$[X_n]$独立同分布，$EX_i=\\mu,DX_i=σ^2&gt;0(i=1,2,…)$，则对$\\forall x\\in R$，随机变量$$ Y_n=\\frac{\\displaystyle\\sum_{i=1}^{n}(X_i-\\mu)}{\\sqrt{n}σ}=\\frac{\\displaystyle\\sum_{i=1}^{n}X_i-n\\mu}{\\sqrt{n}σ}$$<br>\n分布函数满足：$$\\displaystyle \\lim_{n\\to\\infty}F_{n}(x)=\\lim_{n\\to\\infty}P[Y_n\\le x]=\\Phi(x)$$</p>\n<p>（2）<strong>棣莫夫-拉普拉斯定理</strong><br>\n$Y_n\\sim B(n,p)(0&lt;p&lt;1)$，$EY_n=np,DY_n=np(1-p)$，则$\\forall x\\in R$，随机变量$\\displaystyle X_n=\\frac{Y_n-方差}{\\sqrt{期望}}=\\frac{Y_n-np}{\\sqrt{np(1-p)}}$的分布函数$F_{n}(x)$，有$$\\displaystyle \\lim_{n\\to\\infty}F_{n}(x)=\\lim_{n\\to\\infty}P[\\frac{Y_n-np}{\\sqrt{np(1-p)}} \\le x]=\\Phi(x)$$</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271144718.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271144318.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271145558.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"总结-6\">总结</h4>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310270922860.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310271145669.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"数理统计的基本概念\">数理统计的基本概念</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251114847.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>常用的统计量</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042144439.jpg\" alt=\"\"><br>\n（1）样本均值：$\\displaystyle \\bar{X}=\\frac{1}{n}\\sum_{i=1}^{n}X_i$<br>\n【<strong>注</strong>】若$X\\sim N(\\mu,\\sigma)$，则$\\displaystyle \\bar{X}\\sim N(\\mu,\\frac{σ^{2}}{n})$<br>\n（2）样本方差：$\\displaystyle S^2=\\frac{1}{n-1}\\sum_{i=1}^{n}(X_i-\\bar{X})^2$<br>\n（3）样本标准差：$\\displaystyle S=\\sqrt{S^2}$<br>\n（4）样本$X_1,X_2,…X_n$的$k$阶原点矩：$\\displaystyle \\frac{1}{n}\\sum_{i=1}^{n}X_i^k$<br>\n（5）样本$X_1,X_2,…X_n$的$k$阶中心矩：$\\displaystyle \\frac{1}{n}\\sum_{i=1}^{n}(X_i-\\bar{X})$<br>\n（6）样本最大顺序统计量：$U=max[X_1,X_2,…,X_n]$<br>\n（7）样本最小顺序统计量：$v=min[X_1,X_2,…,X_n]$</p>\n<p>【<strong>注</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042144569.jpg\" alt=\"\"><br>\n$E\\bar{X}=EX$<br>\n若$X_i$之间相互独立，则$D\\bar{X}=\\frac{1}{n}DX$<br>\n$E(S^2)=DX$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309180832997.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>$X$与$\\displaystyle \\frac{1}{X}$同分布，则$[X&gt;\\alpha]$=$P [\\frac{1}{X}&gt;\\alpha]$</p>\n</blockquote>\n<p>三大分布(<strong>独立性</strong>)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">分布</th>\n<th style=\"text-align:center\">形式</th>\n<th style=\"text-align:center\">要求</th>\n<th style=\"text-align:center\">自由度</th>\n<th style=\"text-align:center\">性质</th>\n<th style=\"text-align:center\">解题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">$\\mathcal{X}^2(n)$</td>\n<td style=\"text-align:center\">$x_1^2+…+x_n^2$</td>\n<td style=\"text-align:center\">$X\\sim N(0,1)$</td>\n<td style=\"text-align:center\">$n=$平方个数(独立)</td>\n<td style=\"text-align:center\">$\\begin{aligned} E\\mathcal{X}^2(n)&amp;=n \\\\ D\\mathcal{X}^2(n)&amp;=2n \\end{aligned}$</td>\n<td style=\"text-align:center\">标准化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$t(n)$</td>\n<td style=\"text-align:center\">$\\displaystyle\\frac{x}{\\sqrt{\\frac{y_1^2+…+y_n^2}{n}}}$</td>\n<td style=\"text-align:center\">$X$与$Y$相互独立，$X\\sim N(0,1)，Y\\sim \\mathcal{X}^{2}(n)$</td>\n<td style=\"text-align:center\">$n=$分母中平方个数</td>\n<td style=\"text-align:center\">对称性$t_{1-\\alpha}(n)=-t_{\\alpha}(n)$</td>\n<td style=\"text-align:center\">分母中$n$个平方</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$F(n,m)$</td>\n<td style=\"text-align:center\">$\\displaystyle\\frac{\\frac{x_1^2+…+x_n^2}{n}}{\\frac{y_1^2+…+y_n^2}{m}}$</td>\n<td style=\"text-align:center\">$X$与$Y$相互独立，$X\\sim \\mathcal{X}^{2}(n)，Y\\sim \\mathcal{X}^{2}(m)$</td>\n<td style=\"text-align:center\">$\\begin{aligned}n:分子中平方数 \\\\ m:分母中平方数 \\end{aligned}$</td>\n<td style=\"text-align:center\">$\\begin{aligned}\\displaystyle\\frac{1}{F(m,n)}=F(n,m)\\\\ X\\sim F(a,b),则\\frac{1}{X}\\sim F(b,a) \\\\ F_{1-\\alpha}(n,m)=\\frac{1}{F_{\\alpha}(m,n)} \\end{aligned}$</td>\n<td style=\"text-align:center\">分别单位化</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>【<strong>例题</strong>】</p>\n<p><strong>&quot;F&quot;分布</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312102228791.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309160850664.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>t分布与F分布的关系</strong><br>\n设$\\displaystyle T=\\frac{X}{\\sqrt{\\frac{Y}{n}}}，X\\sim N(0,1)，Y\\sim \\mathcal{X}^2(n)$，且$X，Y$独立，则：$$\\displaystyle T^2=\\frac{X^2}{\\frac{Y^2}{n}}\\sim F(1,n)$$</p>\n<p>已知$X\\sim N(0,1)$，求下列统计量服从的分布：<br>\n（1）<br>\n$\\displaystyle T_2=\\frac{\\sqrt{2n-1}X_1}{\\sqrt{\\displaystyle \\sum_{i=2}^{2n}X_i^{2}}}=\\frac{X_1}{\\sqrt{\\displaystyle\\sum_{i=2}^{2n}X_i^{2} / (2n-1)}}\\sim t(2n-1)$<br>\n（2）<br>\n$\\displaystyle T_3=\\frac{(2n-3)\\displaystyle\\sum_{i=1}^{3}X_i^2}{3\\displaystyle\\sum_{i=4}^{2n}X_i^2}$<br>\n由于$\\displaystyle \\sum_{i=1}^{3}X_i^2\\sim \\mathcal{X}^2(3)，\\sum_{i=4}^{2n}X_i^2\\sim \\mathcal{X}^2(2n-3)$且相互独立，故：$$\\displaystyle T_3=\\frac{(2n-3)\\displaystyle\\sum_{i=1}^{3}X_i^2}{3\\displaystyle\\sum_{i=4}^{2n}X_i^2}=\\frac{\\displaystyle \\sum_{i=1}^{3}\\frac{X_i^2}{3}}{\\displaystyle \\sum_{i=4}^{2n}X_i^2/(2n-3)}\\sim F(3,2n-3)$$</p>\n<p>【<strong>例题</strong>】<br>\n设$X\\sim t(n)$，$Y\\sim F(1,n)$，给定$\\alpha,(0&lt;\\alpha&lt;0.5)$，常数$k$满足$P[X&gt;k]=\\alpha$，则$P[Y&gt;k^2]=?$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309181046732.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042144459.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042145957.jpg\" alt=\"\"></p>\n<p>设$X\\sim N(\\mu, σ^2),X_1,X_2,…$来自总体$X$的样本，样本均值为$\\bar{X}$，方差为$S^2$，则<br>\n（0）$\\displaystyle \\bar{X}\\sim N(\\mu,\\frac{σ^{2}}{n})$<br>\n（1）$\\displaystyle \\frac{\\bar{X}-\\mu}{σ/\\sqrt{n}}\\sim N(0,1)$<br>\n（2）$\\displaystyle \\frac{S^2(n-1)}{σ^2}\\sim \\mathcal{X}^2(n-1)$<br>\n【<strong>注</strong>】若$X\\sim N(0,1)$，则$\\displaystyle S^2=\\frac{1}{n-1}\\sum_{i=1}^{n}(X_i-\\bar{X})^2$代入$\\displaystyle \\frac{S^{2}(n-1)}{σ^2}=\\displaystyle\\frac{\\displaystyle\\sum_{i=1}^{n}(X_i-\\bar{X})^2}{σ^2}=\\displaystyle\\frac{\\displaystyle\\sum_{i=1}^{n}(X_i-\\bar{X})^2}{1}=\\displaystyle\\sum_{i=1}^{n}(X_i-\\bar{X})^2\\sim \\mathcal{X}(n-1)$<br>\n（3）$\\displaystyle \\frac{\\bar{X}-\\mu}{S/\\sqrt{n}}\\sim t(n-1)$<br>\n（4）$\\displaystyle \\sum_{i=1}^{n}\\frac{(X_i-\\mu)^2}{σ^2}\\sim\\mathcal{X}^2(n)$</p>\n</blockquote>\n<p><strong>分位点</strong></p>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309251617029.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309180943408.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042156025.jpg\" alt=\"\"></p>\n<p>设随机变量$X\\sim N(0,1)$，对给定$\\alpha(0&lt;\\alpha&lt;1)$，数$u_\\alpha$满足$P[X&gt;u_\\alpha ]=\\alpha$，若$P[|X|&lt;x ]=\\alpha$，则$x=?$<br>\n<strong>解</strong>：<br>\n由$P[|X|&lt;x ]=\\alpha$可得$1-2P[X\\le x]=\\alpha\\Longrightarrow P[X\\le x]=\\frac{\\alpha -1}{2}$。<br>\n又因为$P[X&gt;u_\\alpha ]=\\alpha\\Longrightarrow P[X\\le u_\\alpha]=1-\\alpha$<br>\n对比$P[X\\le x]=\\frac{\\alpha -1}{2}、P[X\\le u_\\alpha]=1-\\alpha$<br>\n$1-\\alpha、1-\\frac{\\alpha -1}{2}=\\frac{1-\\alpha}{2}$<br>\n得$x=u_{\\frac{1-\\alpha}{2}}$</p>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312042145629.jpg\" alt=\"\"></p>\n<p><strong>第二问，利用卡方的期望方差，反求</strong>$D\\bar{X}、DS^{2}$<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312122152789.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"参数估计\">参数估计</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251118884.png\" alt=\"\"></p>\n<h4 id=\"点估计\">点估计</h4>\n<p><strong>矩估计法</strong></p>\n<blockquote>\n<p><strong>矩估计</strong><br>\n如求$\\theta$的矩估计，先求出期望$EX$，比如$EX=3-2\\theta$，将$\\theta$反解出来$\\displaystyle\\theta=\\frac{3-EX}{2}$，将$\\theta$的<strong>矩估计值</strong>设为$\\displaystyle\\hat{\\theta}=\\frac{3-\\bar{x}}{2}$，其中$\\displaystyle\\bar{x}=\\frac{1}{n}\\displaystyle\\sum_{i=1}^{n}X_i$</p>\n<p><strong>极大似然估计</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309180834363.jpg\" alt=\"\"></p>\n<p>【<strong>注</strong>】</p>\n<ol>\n<li>\n<p>对于连续型求$EX=\\displaystyle\\int_{\\infty}^{\\infty}xf(x;\\theta)dx$的时候，如果为$0$，就用$EX^{2}=\\displaystyle\\int_{\\infty}^{\\infty}x^2f(x;\\theta)dx$去求。</p>\n</li>\n<li>\n<p>求$\\theta$的最大似然估计量就是求$\\theta$取什么值时候，$L(\\theta)$的值最大。当出现不能求出$\\theta$的具体值时，可以使用单调性求解，如$\\displaystyle \\frac{dlnL(\\theta)}{d\\theta}=-\\frac{n}{\\theta}=0$，此时$\\theta$不能为$0$，故根据单调性可知$lnL(\\theta)$单减，根据单减的性质和题目条件可以求出$\\theta$的取值范围。</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309181422855.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309181447258.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310202220549.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310222039914.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311082028857.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"估计量的评判标准\">估计量的评判标准</h4>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131021595.jpg\" alt=\"\"></p>\n<blockquote>\n<ol>\n<li>估计量的无偏性($EX$)</li>\n<li>估计量的有效性($DX$)</li>\n<li>估计量的一致性、相合性(依概率收敛，大数定律，一般是辛钦大数定律)</li>\n</ol>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312132127118.jpg\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"区间估计\">区间估计</h4>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131028020.jpg\" alt=\"\"><br>\n【<strong>理解</strong>】：虽然不知道数学平均分多少，但是知道平均分在$120-130$的概率高达$95%$<br>\n$1-\\alpha$置信水平，置信度，常见$90%,95%$</p>\n<p><strong>区间估计</strong>要求算出一个<strong>区间</strong>，<strong>点估计</strong>要求算出<strong>一个式子</strong>。</p>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309180838527.jpg\" alt=\"\"></p>\n<blockquote>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311090904825.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"假设检验\">假设检验</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131602845.jpg\" alt=\"\"></p>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131038491.png\" alt=\"\"></p>\n<p><strong>1.1</strong> 假设数学平均分为$120$，通过求出样本统计量，判断假设平均分是否正确。</p>\n<p><strong>1.2.1</strong><br>\n$H_0,H_1$三种情况<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131042688.png\" alt=\"\"></p>\n<p><strong>1.2.2</strong> 区间估计的四种情况</p>\n<p><strong>1.2.3</strong>  小概率时间发生了，说明原假设错误<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131044486.png\" alt=\"\"></p>\n<p>三种情况：</p>\n<ol>\n<li>备选假设不等于$\\mu_0$，在两侧</li>\n<li>备选假设小于$\\mu_0$，在左侧</li>\n<li>备选假设大于$\\mu_0$，在右侧</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131047526.png\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131049864.png\" alt=\"\"><br>\n<strong>第一类错误</strong>：原假设为真，但是给拒绝了<br>\n<strong>第二类错误</strong>：假设是错的$H_0$是假，但是跑到了接受域中。需要具体计算</p>\n</blockquote>\n<blockquote>\n<p>【<strong>例题</strong>】</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131600729.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131600043.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131601698.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131601375.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131601067.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311131601523.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311170953636.jpg\" alt=\"\"></p>\n</blockquote>\n","categories":[],"tags":["高数"]},{"title":"DS","url":"http://example.com/2022/09/07/DS/","content":"<h2 id=\"考试内容\">考试内容</h2>\n<h3 id=\"一、数据结构的有关概念\">一、数据结构的有关概念</h3>\n<h4 id=\"考纲要求：\">考纲要求：</h4>\n<blockquote>\n<p>1．掌握数据结构的有关概念，理解逻辑结构与物理结构之间的关系。</p>\n<p>2．掌握数据结构的几种基本结构。</p>\n<p>3．掌握抽象数据类型的表示与实现方法。</p>\n<p>4．熟悉算法分析的分析方法。</p>\n</blockquote>\n<h4 id=\"考点总结：\">考点总结：</h4>\n<h5 id=\"数据结构的几种基本结构\">数据结构的几种基本结构</h5>\n<blockquote>\n<ol>\n<li>集合（不常考）</li>\n<li>线性结构（1:1）</li>\n<li>树形结构（1:n）</li>\n<li>图形结构（m:n）</li>\n</ol>\n</blockquote>\n<h5 id=\"数据结构的基本概念和术语\">数据结构的基本概念和术语</h5>\n<p>标识符只能以<strong>英文字母</strong>或<strong>下画线</strong>开头，不能以数字开头。</p>\n<p><strong>数据结构</strong>包括<strong>逻辑结构</strong>和<strong>存储结构</strong>两个层次<br>\n<strong>线性结构</strong>：线性表 ，栈， 队列 ，双队列，串。<br>\n<strong>非线性结构</strong>：二维数组，树，图。<br>\n<strong>它们都可以顺序存储和链式存储。</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308111505436.jpg\" alt=\"\"></p>\n<ol>\n<li><strong>数据</strong></li>\n</ol>\n<blockquote>\n<p>数据适用以描述客观食物且能够输入到计算机储存介质中能被计算机程序识别和处理的符号的总称，它是计算机加工的“原料”。</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>数据元素</strong></li>\n</ol>\n<blockquote>\n<p>数据元素是数据的<strong>基本单位</strong>。在计算机程序中常作为一个整体进行考虑和处理。</p>\n<p>有时一个数据元素可以由若干数据项组成（此时往往把一个数据元素称为一条记录），数据项是具有独立含义的最小标识单位。</p>\n<p>在某些情况下，往往也把数据元素简称为元素或结点。</p>\n</blockquote>\n<ol start=\"3\">\n<li><strong>数据项</strong></li>\n</ol>\n<blockquote>\n<p>数据项是数据结构中讨论的<strong>最小单位</strong>，是数据记录中最基本、不可分的数据单位。</p>\n</blockquote>\n<ol start=\"4\">\n<li><strong>数据对象</strong></li>\n</ol>\n<blockquote>\n<p>具有相同性质的数据元素的集合，是数据的一个子集。<br>\n例如：</p>\n<p>整数数据对象：$N={0,1,2,…}$</p>\n<p>字母字符数据对象：C={‘A’,‘B’,‘C’,…‘F’}​</p>\n</blockquote>\n<ol start=\"5\">\n<li><strong>数据的逻辑结构</strong></li>\n</ol>\n<blockquote>\n<p>（1）定义：逻辑结构用以描述某一数据对象的所有数据元素之间存在的固有逻辑关系。</p>\n<p>（2）逻辑结构的二元组描述方法：</p>\n<p>Data_Structure={D,R}，（$D$是某一数据对象，$R$是该对象中所有数据元素之间的关系的有限集合）。</p>\n</blockquote>\n<ol start=\"6\">\n<li><strong>逻辑结构的分类</strong></li>\n</ol>\n<blockquote>\n<p>（1）线性结构（线性表、栈、队列）</p>\n<p>（2）非线性结构（树、图）</p>\n</blockquote>\n<ol start=\"7\">\n<li><strong>数据的存储结构（物理结构）</strong></li>\n</ol>\n<blockquote>\n<p>（1）定义：数据的存储结构是数据的逻辑结构在计算机中的存储方式或表示方式。<br>\n（2）存储结构的分类：</p>\n<blockquote>\n<p>一、顺序存储结构<br>\n循环队列使用顺序表表示的队列。</p>\n<p>二、链式存储结构<br>\n链式存储设计时，结点内的存储单元地址<strong>一定连续</strong>。</p>\n<p>三、散列存储结构（哈希表）</p>\n<p>四、索引存储结构</p>\n</blockquote>\n</blockquote>\n<p>[<strong>注</strong>]：栈是一种抽象数据结构，可采用顺序存储或链式存储，只表示逻辑结构。</p>\n<ol start=\"8\">\n<li><strong>数据类型</strong></li>\n</ol>\n<blockquote>\n<p>（1）定义：数据类型是一个值的集合和定义在这个集合上的一组操作的总称，可分为简单的数据类型（基本数据类型）和抽象数据类型两大类。</p>\n<p>（2）$C$语言中的基本数据类型（固有数据类型）：<code>int</code>（整型，占4个字节），<code>char</code>（字符型，占1个字节），<code>float</code>（浮点型，占4个字节），<code>double</code>（双精度浮点型，占8个字节），<code>void</code>（空型，占0个字节），<code>long</code>(长整型数据类型，占8个字节)；<strong>注意1字节（Byte）等于8比特（bit），或者说1字节占8位</strong></p>\n<p>（3）抽象数据结构类型：是以基本数据类型或已定义好的其他抽象数据类型为基础，采用数据结构的技术进一步构造出来的复杂数据类型。</p>\n<blockquote>\n<p><strong>抽象数据类型</strong></p>\n<p>抽象数据类型的三个<strong>组成部分</strong>：<strong>数据对象</strong>、<strong>数据关系</strong>和<strong>基本操作</strong></p>\n<p><strong>1</strong>.定义：抽象数据类型是指<strong>数据逻辑结构</strong>及与之相关的<strong>操作</strong></p>\n<p>例如：矩阵$+$（求转置、矩阵加、矩阵乘、求逆、求特征向量）$=$矩阵的抽象数据类型。</p>\n<p><strong>2</strong>.抽象数据类型的三元组表示方法：</p>\n<p>抽象数据类型可用三元组$(D,R,P)$表示。</p>\n<p>其中：$D$是数据对象，$R$是$D$上若干关系的集合，$P$是定义在$D$上的基本操作的集合。</p>\n<p>一般用如下$ADT$格式来描述</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADT抽象数据类型名 &#123;</span><br><span class=\"line\">\t数据对象D：&lt;数据对象的定义&gt;</span><br><span class=\"line\">\t数据关系R：&lt;数据关系的定义&gt;</span><br><span class=\"line\">\t基本操作P：&lt;数据关系的定义&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3</strong>.抽象数据类型的表示和实现</p>\n<p>在高级语言中：抽象数据类型可以利用基本拿数据结构和已经定义好的其他抽象数据类型来实现。</p>\n<p>在$C$语言中，用结构体(<code>structure</code>)类型结合函数或子程序来实现抽象数据类型的定义。</p>\n<p>在$C++$语言中，是用类（<code>class</code>）来定义抽象数据类型的。其中的成员函数就是用来定义抽象数据类型中的&quot;操作&quot;的。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>关于<strong>三元组表</strong>的题目</p>\n<ol>\n<li>\n<p>一个$100\\times 90$的整型稀疏矩阵有$10$个非零元素，设每个整型数占$2$个字节，则用三元组表存储该矩阵时，所需的字节数是？<br>\n【<strong>答</strong>】：&lt;行(2B)，列(2B)，元素(2B)&gt;，一共十个，所以这里是60B，再加上一个三元组表示行有多少，列有多少，元素总共有多少，又是一个6B，加一起66B。</p>\n</li>\n<li>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311271718651.png\" alt=\"\"><br>\n用三元组表表示该数据：<br>\n<code>(0,0,3)、(0,3,5)、(1,1,-1)、(2,0,2)</code><br>\n【<strong>注意</strong>】行表、列表从$0$开始</p>\n</li>\n</ol>\n</blockquote>\n<ol start=\"9\">\n<li><strong>数据结构</strong></li>\n</ol>\n<blockquote>\n<ol>\n<li>相互之间存在一种或多种特定关系的 数据元素 的集合。</li>\n<li><strong>数据结构三要素：逻辑结构、存储结构、数据的运算</strong></li>\n<li>数据的逻辑结构独立于其存储结构</li>\n</ol>\n</blockquote>\n<h5 id=\"算法的有关概念及其分析\">算法的有关概念及其分析</h5>\n<ol>\n<li><strong>算法的定义：</strong></li>\n</ol>\n<blockquote>\n<ol>\n<li>为了解决某个问题而规定的一个有限长的操作序列。</li>\n<li>一个算法应该是问题求解步骤的描述。</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><strong>算法的特性：</strong><br>\n以下特性是算法的必要条件，而非充分条件。</li>\n</ol>\n<blockquote>\n<p>（1）<strong>有穷性</strong>：算法在执行有穷步能结束。</p>\n<p>（2）<strong>确定性</strong>：算法中的每一步操作的定义都无二义性。</p>\n<p>（3）<strong>可行性</strong>：每一条运算都能用已经实现的基本运算来实现。</p>\n<p>（4）<strong>输入</strong>：有0个或者多个输入。</p>\n<p>（5）<strong>输出</strong>：有一个或者多个输出。</p>\n</blockquote>\n<ol start=\"3\">\n<li><strong>算法的设计要求</strong></li>\n</ol>\n<blockquote>\n<p>（1）<strong>正确性</strong>：算法能够正确执行预先规定的功能要求。</p>\n<p>（2）<strong>可读性</strong>：算法要易于理解。</p>\n<p>（3）<strong>健壮性</strong>：算法具有很好的容错率。</p>\n</blockquote>\n<ol start=\"4\">\n<li><strong>算法的空间复杂度</strong></li>\n</ol>\n<blockquote>\n<p>主要在以下两个方面：</p>\n<p>（1）存储空间的固定部分</p>\n<p>（2）可变部分</p>\n<p>尺寸大小在使用过程中是动态变化的，例如：动态栈或动态队列所用空间；通过<code>new</code>和<code>delete</code>命令动态使用存储空间。</p>\n</blockquote>\n<ol start=\"5\">\n<li><strong>算法的时间复杂度（小题考试重点）</strong></li>\n</ol>\n<blockquote>\n<p>（1）算法中每条语句的运行时间</p>\n<p>语句的执行时间$=$该语句执行次数（语句频率）$\\times$语句执行一次所需时间</p>\n<p>（2）算法的运行时间$T$</p>\n<p>算法的运行时间$T=$算法中所有语句的语句频率之和。</p>\n<p>（3）常用的时间复杂度比较关系为：</p>\n<p>$O(1)\\le O(log_{2}n)\\le O(nlog_{2}n)\\le O(n^2) \\le … \\le O(2^n)$</p>\n<p>（4）算法的运行时间$T$的求解</p>\n</blockquote>\n<ol start=\"6\">\n<li><strong>存储密度</strong></li>\n</ol>\n<blockquote>\n<p>存储密度$\\displaystyle =\\frac{存储数据的空间}{存储数据的空间+其他空间}$<br>\n【<strong>例</strong>】<br>\n已知链表定义如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> data[<span class=\"number\">16</span>];</span><br><span class=\"line\">   <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> *next;</span><br><span class=\"line\">&#125; LinkStrNode;</span><br></pre></td></tr></table></figure>\n<p>如果每个字符占$1$个字节，指针占$4$个字节，则该链表的存储密度是？<br>\n【答】$\\displaystyle \\frac{16}{16+4}=0.8$</p>\n</blockquote>\n<hr>\n<h3 id=\"二、线性表\">二、线性表</h3>\n<h4 id=\"考纲要求：-2\">考纲要求：</h4>\n<p>1．掌握线性表的顺序存储方法及链式存储方法。</p>\n<p>2．熟悉线性表的建立、插入、删除、搜索与归并算法。</p>\n<p>3．了解一元多项式的表示方法及其应用。</p>\n<h4 id=\"考点总结：-2\">考点总结：</h4>\n<h5 id=\"线性表的基本概念\">线性表的基本概念</h5>\n<blockquote>\n<p>（1）线性表示具有<strong>相同数据类型</strong>的$n(n\\ge0)$个数据元素的有限序列，通常记为：$L=(\\alpha_1,\\alpha_2,…,\\alpha_{i-1},\\alpha_{i},\\alpha_{i+1},…,a_n)$，其中$L$是表名，$n$为表长，$n=0$时称为空表。<br>\n（2）运用在一个非空的线性表中，存在唯一的一个被称为&quot;第一个&quot;的数据元素（$a_1$）；存在唯一的一个被称做&quot;最后一个&quot;的数据元素$a_n$；除第一个元素以外，每个元素$a_i(i\\not= 1)$都有且仅有一个<strong>直接前驱</strong>$a_{i-1}$；除最后一个元素以外，每个元素$a_i(i\\not= n)$都有且仅有一个<strong>直接后继</strong>$a_{i+1}$。</p>\n</blockquote>\n<h5 id=\"顺序表的定义及相关算法\">顺序表的定义及相关算法</h5>\n<blockquote>\n<p>（1） <strong>线性表的顺序存储</strong>：在内存中用一段地址连续的存储空间来依次顺序存放线性表中各元素，通常称其为顺序表。<br>\n（2） <strong>元素</strong>$a_i$<strong>的地址</strong>：设$a_1$的存储地址的首地址为$Loc(a_i)$，且设每个数据元素占用$k$个存储单元，则第$i$个数据元素的存储地址首址为：$Loc(a_i)=Loc(a_1)+(i-1)\\times k(2\\le i\\le n)$，类似于等差数列。<br>\n（3）<strong>顺序表的定义</strong>：可将<code>data</code>和<code>len</code>封装成一个结构体：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXSIZE 20  <span class=\"comment\">// 定义整型变量MAXSIZE，值为20</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">      datatype data[MAXSIZE];  <span class=\"comment\">// 存放顺序表元素的数组</span></span><br><span class=\"line\">      <span class=\"type\">int</span> len;  <span class=\"comment\">// 顺序表长度</span></span><br><span class=\"line\">&#125;SeqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      SeqList l; </span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"comment\">// 进行操作</span></span><br><span class=\"line\">      <span class=\"built_in\">Init_SeqList</span>(l);</span><br><span class=\"line\">      <span class=\"built_in\">Insert_SeqList</span>(l, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）<strong>顺序表的初始化 Init_SeqList</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Init_SeqList</span><span class=\"params\">(SeqList &amp;L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      L.len = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（5）<strong>插入操作 Insert_SeqList</strong><br>\n插入前：$\\alpha_1,\\alpha_2,…,\\alpha_{i-1},\\alpha_{i},\\alpha_{i+1},…,a_n$<br>\n插入后：$\\alpha_1,\\alpha_2,…,\\alpha_{i-1},e,\\alpha_{i},\\alpha_{i+1},…,a_n$<br>\n注意问题：</p>\n<ol>\n<li>顺序表中数据区域分配有<code>MAXSIZE</code>个存储单元，做插入操作时需要先检验表空间是否已满，表满的情况下不能再做插入。</li>\n<li>要检验插入位置的有效性，这里$i$的有效范围是：$0\\le i\\le n$，其中$n$为原表长。</li>\n<li>将$a_n \\sim a_i$依次顺序向后移动一个位置。</li>\n<li>将$e$存放在腾出来的第$i$个位置上（即原来的）$a_i$的位置。<br>\n更新<code>len</code>值，即<code>len ++ </code>,使<code>len</code>的数值加$1$。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Insert_SeqList</span><span class=\"params\">(SeqList &amp;L, <span class=\"type\">int</span> i, datatype e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> j;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; L.len || L.len == MAXSIZE)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(j = L.len - <span class=\"number\">1</span>; j &gt;= i; -- j)</span><br><span class=\"line\">          L.data[j + <span class=\"number\">1</span>] = L.data[j];</span><br><span class=\"line\">      L.data[i] = e;</span><br><span class=\"line\">      ++ L.len;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>平均数据移动次数：$\\frac{n}{2}$。<br>\n（6）<strong>删除操作 Delete_SeqList</strong><br>\n删除前：$\\alpha_1,\\alpha_2,…,\\alpha_{i-1},\\alpha_{i},\\alpha_{i+1},…,a_n$<br>\n删除后：$\\alpha_1,\\alpha_2,…,\\alpha_{i-1},\\alpha_{i+1},…,a_n$<br>\n注意问题：</p>\n<ol>\n<li>删除第$i$个元素时候，要删除的元素必须真实存在，所以必须要检查$i$的取值是否有效，$i$的有效取值范围为$0\\le i\\le n-1$，否则第$i$个元素不存在。</li>\n<li>空表时不能执行删除操作。</li>\n<li>将$a_{i+1} \\sim a_n$顺序向前移动一个位置。</li>\n<li>更新$len$值，即<code>len -- </code>，使$len$数值减少$1$。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Delete_SeqList</span><span class=\"params\">(SeqList &amp;L, <span class=\"type\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> j;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">0</span> || i &gt; L-&gt;len - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          cout &lt;&lt; <span class=\"string\">&quot;不存在第&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;个元素&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在进行删除操作</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(j = i; j &lt;= L.len; j ++ )</span><br><span class=\"line\">          L.data[j] = L.data[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      -- L.len;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>平均数据移动次数为$\\frac{n-1}{2}$。<br>\n（7）<strong>按值查找 Locate_SeqList</strong><br>\n功能：在线性表中查找是否存在与给定值$e$相等的数据元素。<br>\n实现方法：从第一个元素$a_1$开始一次和$e$比较，知道找到一个与$e$相等的数据元素，则返回它在顺序表中的存储位置的下标值（注意：第一个元素的存储位置的下标值为0）；若查遍整个表都没有找到与$e$相等的元素，则返回$0$，表示查找失败。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Locate_SeqList</span><span class=\"params\">(SeqList &amp;L, datatype e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i &lt;= L.len &amp;&amp; L.data[i] != e)</span><br><span class=\"line\">          i ++ ;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i &gt; L.len) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"built_in\">return</span> (i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（8）<strong>取表中元素 Get_SeqList</strong><br>\n功能：根据所给序号$i$在线性表中查找相应的数据元素。<br>\n实现方法：首先确认所查找的数据元素序号是否合法，若合法则直接返回对应的元素值。否则报错。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Get_SeqList</span><span class=\"params\">(SeqList *L, <span class=\"type\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L.len + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          cout <span class=\"string\">&quot;不存在第&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;个元素&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> L.data[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>顺序表是随机存储结构，具有按数据元素的序号随机存取数据的特点，存储数据的时间复杂度与数据元素所在的位置无关，即通过首地址和元素序号可在时间$O(1)$内找到指定的元素。</p>\n</blockquote>\n<h5 id=\"链表的定义及相关算法\">链表的定义及相关算法</h5>\n<h6 id=\"（一）单链表的定义\">（一）单链表的定义</h6>\n<p><strong>（1）</strong> 线性表链式存储结构的特点是：用一组任意的存储单元存储线性表的数据元素（这组存储单元可以是连续的，也可以是不连续的）。因此，为了表示每个数据元素$a_i$与其直接后继数据元素$a_{i+1}$之间的逻辑关系，对数据元素$a_i$来说，除了存储其<strong>本身的信息</strong>之外，还需要存储一个其<strong>直接后继的信息</strong>（即直接后继的存储位置）。这两部分信息组成数据元素$a_i$的存储映射，称为<strong>结点</strong>(node)。它包括两个域：其中存储数据元素信息的域称为<strong>数据域</strong>；存储直接后继存储位置的域称为<strong>指针域</strong>。指针域中存储的信息称作<strong>指针</strong>或<strong>链</strong>。$n$个结点($a_i(1\\le i\\le n)$的存储映射)链结成一个<strong>链表</strong>，即为线性表。$$(a_1,a_2,…,a_n)$$<br>\n<strong>线性表默认从1开始，数组默认从0开始</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310251518215.jpg\" alt=\"\"></p>\n<p><strong>（2）</strong> 链表可以分为<strong>单链表</strong>、<strong>循环链表</strong>、<strong>二向链表</strong>、<strong>二叉链表</strong>、<strong>十字链表</strong>、<strong>邻接表</strong>、<strong>邻接多重表</strong>等。<br>\n其中单链表、循环链表和双向链表用于实现线性表的链式存储结构，其他形式多用于实现树和图等非线性结构。<br>\n<strong>稀疏矩阵</strong>一般采用的压缩存储方法为：<strong>三元组</strong>和<strong>十字链表</strong>。<br>\n<strong>稀疏矩阵</strong>的三元组表示<strong>顺序</strong>存储结构。</p>\n<p><strong>（3）</strong> 链表增加头结点作用如下：</p>\n<ol>\n<li><strong>便于首元结点的处理</strong><br>\n增加了头结点后，首元结点的地址保存在头结点（即其&quot;前驱&quot;）结点的指针域中，则对链表的一个数据元素的操作与其他数据元素相同，无需进行特殊处理。</li>\n<li><strong>便于空表和非空表的统一处理</strong><br>\n当链表不设头结点时，假设$L$为单链表的头指针，它应该指向首元结点，则当单链表为长度$n$为$0$的空表时，$L$指针为空（判定空表的条件可记为：$L==NULL$ ）<br>\n增加头结点后，无论链表是否为空，头指针都是指向头结点的非空指针。如图$2.10(a)$所示的非空单链表，头指针指向头结点。如图$2.10(b)$所示，若为空表，则头结点的指针域为空（判定空表的条件可记为$L-&gt;next==NULL$）。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308111603628.jpg\" alt=\"\"></li>\n</ol>\n<h6 id=\"（二）单链表的操作\">（二）单链表的操作</h6>\n<blockquote>\n<p><strong>定义</strong></p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ..</span><br><span class=\"line\">&#125;LNode, *LinkList;  <span class=\"comment\">// LinkList指向为结构体LNode的指针类型。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LinkList与LNode*，两者本质上是等价的</span></span><br><span class=\"line\"><span class=\"comment\">// 通常习惯用LinkList定义头指针，如LinkList L;</span></span><br><span class=\"line\"><span class=\"comment\">// 用LNode* 定义任意结点的指针变量，如LNode* p;</span></span><br></pre></td></tr></table></figure>\n<p><strong>①在主函数中操作</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单链表的定义</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> val;</span><br><span class=\"line\">   Node *next;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 两个构造函数，根据传入的参数，用于初始化</span></span><br><span class=\"line\">   <span class=\"comment\">// 如果不加这两句，那么后面的head = new Node(1); 这样的语法就不能使用</span></span><br><span class=\"line\">   <span class=\"comment\">// 需要写成head = new Node(), head-&gt;val = 1;分开写。</span></span><br><span class=\"line\">   <span class=\"built_in\">Node</span>(): <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">   <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">val</span>(_val), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Node* head)</span>  <span class=\"comment\">// 用于打印输出</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// auto:c++11的关键字实现类型推导</span></span><br><span class=\"line\">   <span class=\"comment\">// 如果p不为空，也就是p；那么p就接着向后遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head; p; p = p-&gt;next)</span><br><span class=\"line\">       cout &lt;&lt; p-&gt;val &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">   cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 插入操作</span></span><br><span class=\"line\">   <span class=\"comment\">// 链表插入的时候一定一定一定要注意顺序！！！</span></span><br><span class=\"line\">   Node* head = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// head不是个节点，它只是第一个节点的地址</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">1</span>);  <span class=\"comment\">// 将一个节点插入初始链表中</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 将一个节点插在头结点和第一个节点之间 head -&gt; 1</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">   head-&gt;next = a;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 尾插法 在head-&gt;1-&gt;2 后插一个3</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">   a-&gt;next = b;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 在head-&gt;1-&gt;2-&gt;3 1到2之间插入一个4</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">   c-&gt;next = a;</span><br><span class=\"line\">   head-&gt;next = c;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 删除操作</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 删除4</span></span><br><span class=\"line\">   c-&gt;next = c-&gt;next-&gt;next;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 删除头结点</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> p = head;  <span class=\"comment\">// 先将头结点存储下来，如果不存，后续删了就再也找不到它了，也不能够进行内存的释放</span></span><br><span class=\"line\">   head = head-&gt;next;</span><br><span class=\"line\">   <span class=\"keyword\">delete</span> p;  <span class=\"comment\">// 释放内存</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 注意delete 和 free的区别</span></span><br><span class=\"line\">   <span class=\"comment\">// 申请数组时候使用的区别，如int *p=(int*)malloc(100*sizeof(int))，释放内存的时候直接 free(p)即可，而当int *p=new int[100]释放的时候应为delete []p</span></span><br><span class=\"line\">   <span class=\"comment\">// 并且注意使用delete删除数组的时候，如果delte p只是删除p[0]这一个的内存</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>②在自定义函数中操作</strong><br>\n<strong>注意</strong>：传参的时候<strong>一定</strong>要用<code>Node* &amp;head</code>，如果用<code>Node* head</code>那么传入的指针就变为形参了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    Node* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 两个构造函数，根据传入的参数，用于初始化</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不加这两句，那么后面的head = new Node(1); 这样的语法就不能使用</span></span><br><span class=\"line\">    <span class=\"comment\">// 需要写成head = new Node(), head-&gt;val = 1;分开写。</span></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(): <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">val</span>(_val) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Node* head)</span>  <span class=\"comment\">// 打印函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head; p != <span class=\"literal\">NULL</span>; p = p-&gt;next)</span><br><span class=\"line\">        cout &lt;&lt; p-&gt;val &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_from_head</span><span class=\"params\">(Node* &amp;head, <span class=\"type\">int</span> val)</span>  <span class=\"comment\">// 头插法，在链表头部插入val值</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 如果链表为空</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(val);</span><br><span class=\"line\">        t-&gt;next = head-&gt;next;</span><br><span class=\"line\">        head-&gt;next = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_from_rear</span><span class=\"params\">(Node* &amp;head, <span class=\"type\">int</span> val)</span>  <span class=\"comment\">// 尾插法，在链表尾部插入val值</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 如果链表为空</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> i = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; i-&gt;next != <span class=\"literal\">NULL</span>;)  <span class=\"comment\">// 找到最后一个元素</span></span><br><span class=\"line\">            i = i-&gt;next;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">auto</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(val);</span><br><span class=\"line\">        t-&gt;next = i-&gt;next;  <span class=\"comment\">// 使t-&gt;next指向NULL</span></span><br><span class=\"line\">        i-&gt;next = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(Node* &amp;head, <span class=\"type\">int</span> pos)</span>  <span class=\"comment\">// 查找第几个元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  <span class=\"comment\">// 链表为空</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;  <span class=\"comment\">// 记录个数，为了防止超出链表长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head; p != <span class=\"literal\">NULL</span>; p = p-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++ cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == cnt) <span class=\"keyword\">return</span> p-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;  <span class=\"comment\">// 超出了链表长度</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">find_insert</span><span class=\"params\">(Node* &amp;head, <span class=\"type\">int</span> _val)</span>  <span class=\"comment\">// 查找元素，并在之后添加100这个元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;  <span class=\"comment\">// 链表为空</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head; p != <span class=\"literal\">NULL</span>; p = p-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;val == _val)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 插入操作</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p-&gt;next = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t-&gt;next = p-&gt;next;</span><br><span class=\"line\">                p-&gt;next = t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;  <span class=\"comment\">// 超出了链表长度</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">delete_val</span><span class=\"params\">(Node* &amp;head, <span class=\"type\">int</span> _val)</span>  <span class=\"comment\">// 删除值为_val的元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Node* last = head;  <span class=\"comment\">// 用last记录当前访问的结点的上一个结点，便于删除当前结点。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head; p != <span class=\"literal\">NULL</span>; p = p-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p-&gt;val == _val) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 该值在头部或者尾部</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                last-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"comment\">// 该值在中间</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                last-&gt;next = last-&gt;next-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">delete</span>(p);  <span class=\"comment\">// 回收内存</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">// 表示删除成功</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        last = p;  <span class=\"comment\">// 更新last</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">// 表示删除失败</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    Node* head = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// head不是个节点，它只是第一个节点的地址</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">insert_from_head</span>(head, <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">insert_from_head</span>(head, <span class=\"number\">3</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">insert_from_rear</span>(head, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">find_insert</span>(head, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">delete_val</span>(head, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"（三）双链表的操作\">（三）双链表的操作</h6>\n<blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\">// 双链表的定义</span></span><br><span class=\"line\">&gt;<span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> </span><br><span class=\"line\">&gt;&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> val;</span><br><span class=\"line\">   Node *prev, *next;  <span class=\"comment\">// 多一个指向前面的点prev</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 两个构造函数，根据传入的参数，用于初始化</span></span><br><span class=\"line\">   <span class=\"built_in\">Node</span>(): <span class=\"built_in\">prev</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">   <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">val</span>(_val), <span class=\"built_in\">prev</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&gt;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Node* head)</span>  <span class=\"comment\">// 用于打印输出</span></span></span><br><span class=\"line\"><span class=\"function\">&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// auto:c++11的关键字实现类型推导</span></span><br><span class=\"line\">   <span class=\"comment\">// 如果p不为空，也就是p；那么p就接着向后遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head; p; p = p-&gt;next)</span><br><span class=\"line\">       cout &lt;&lt; p-&gt;val &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">   cout &lt;&lt; endl;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 双链表一般在实现的时候都会存在两个哨兵，防止越界。</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// head 最左边的，tail最右边的</span></span><br><span class=\"line\">   Node *head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(), *tail = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>();</span><br><span class=\"line\">   head-&gt;next = tail, tail-&gt;prev = head;  <span class=\"comment\">// 初始化哨兵</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 双链表的添加</span></span><br><span class=\"line\">   <span class=\"comment\">// 添加一个节点</span></span><br><span class=\"line\">   <span class=\"comment\">// 注意顺序问题！！！</span></span><br><span class=\"line\">   <span class=\"comment\">// 先添加新的边，再删去旧的边</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 在head - tail 之间插入一个节点</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">   a-&gt;next = head-&gt;next, a-&gt;prev = head;</span><br><span class=\"line\">   head-&gt;next-&gt;prev = a, head-&gt;next = a;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// head - 1 - tail，在head和1之间插入一个节点</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">   b-&gt;next = head-&gt;next, b-&gt;prev = head;</span><br><span class=\"line\">   head-&gt;next-&gt;prev = b, head-&gt;next = b;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// head - 1 - 2 - tail，在2和tail之间插入一个节点</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">   c-&gt;next = b-&gt;next, c-&gt;prev = b;</span><br><span class=\"line\">   b-&gt;next-&gt;prev = c, b-&gt;next = c;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 双链表的删除操作</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 删除b这个节点</span></span><br><span class=\"line\">   b-&gt;prev-&gt;next = b-&gt;next;</span><br><span class=\"line\">   b-&gt;next-&gt;prev = b-&gt;prev;</span><br><span class=\"line\">   <span class=\"keyword\">delete</span> b;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308121635375.jpg\" alt=\"\"></p>\n<h6 id=\"（四）循环链表的操作\">（四）循环链表的操作</h6>\n<blockquote>\n<p>循环链表没有使用到哨兵。<br>\n循环链表只需要head和tail都指向同一个节点即可。<br>\n其余操作和双链表相同。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> </span><br><span class=\"line\">&gt;&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> val;</span><br><span class=\"line\">   Node *prev, *next; </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">Node</span>(): <span class=\"built_in\">prev</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">   <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">val</span>(_val), <span class=\"built_in\">prev</span>(<span class=\"literal\">NULL</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&gt;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(Node* head)</span></span></span><br><span class=\"line\"><span class=\"function\">&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head-&gt;next ; p != head; p = p-&gt;next)  <span class=\"comment\">// 从head-&gt;next开始出发，再走回head</span></span><br><span class=\"line\">       cout &lt;&lt; p-&gt;val &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">   cout &lt;&lt; endl;</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 循环链表没有使用到哨兵。</span></span><br><span class=\"line\">   <span class=\"comment\">// 循环链表只需要head和tail都指向同一个节点即可。</span></span><br><span class=\"line\">   Node *head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(), *tail = head;  <span class=\"comment\">// 需要变动这里，注意head，tail都是指针不是节点。</span></span><br><span class=\"line\">   head-&gt;next = tail, tail-&gt;prev = head;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 与双链表进行区分</span></span><br><span class=\"line\">   <span class=\"comment\">// head 最左边的，tail最右边的</span></span><br><span class=\"line\">   <span class=\"comment\">// Node *head = new Node(), *tail = new Node();</span></span><br><span class=\"line\">   <span class=\"comment\">// head-&gt;next = tail, tail-&gt;prev = head;  // 初始化哨兵</span></span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">auto</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">   a-&gt;next = head-&gt;next, a-&gt;prev = head;</span><br><span class=\"line\">   head-&gt;next-&gt;prev = a, head-&gt;next = a;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// head - 1 - tail，在head和1之间插入一个节点</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">   b-&gt;next = head-&gt;next, b-&gt;prev = head;</span><br><span class=\"line\">   head-&gt;next-&gt;prev = b, head-&gt;next = b;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// head - 1 - 2 - tail，在2和tail之间插入一个节点</span></span><br><span class=\"line\">   <span class=\"keyword\">auto</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">   c-&gt;next = b-&gt;next, c-&gt;prev = b;</span><br><span class=\"line\">   b-&gt;next-&gt;prev = c, b-&gt;next = c;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// 删除b这个节点</span></span><br><span class=\"line\">   b-&gt;prev-&gt;next = b-&gt;next;</span><br><span class=\"line\">   b-&gt;next-&gt;prev = b-&gt;prev;</span><br><span class=\"line\">   <span class=\"keyword\">delete</span> b;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(head);</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>头指针为$L$的带头结点的双循环链表，结点的前驱指针域为<code>prior</code>，后继指针域为<code>next</code>，判断该链表为空的条件是：<code>L-&gt;prior == L</code></p>\n<h6 id=\"（五）静态链表\">（五）静态链表</h6>\n<p>使用<strong>结构体数组</strong>来构造静态链表，结构体数组内的每一个元素充当静态链表的结点。<strong>每个结点</strong>都包含<strong>数据域</strong>与<strong>游标</strong>这两部分，<strong>数据域</strong>用来存放数据、<strong>游标</strong>用来指示该结点的下一个结点对应的数组下标。</p>\n<p><strong>定义</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_SIZE 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> data;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cur;  <span class=\"comment\">// 静态链表中的游标</span></span><br><span class=\"line\">&#125;ListNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态链表实际上就是一个结构体数组</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> ListNode StaticList[MAX_SIZE]; </span><br></pre></td></tr></table></figure>\n<h5 id=\"链表的相关选项\">链表的相关选项</h5>\n<ol>\n<li>静态链表中指针表示的是：下一个元素在数组中的位置。</li>\n<li>一般来说，线性表的第$i$个数据元素$a_i$的存储位置为：<br>\n$$LOC(a_i)=LOC(a_1)+(i-1)\\times l$$</li>\n<li>线性表的<strong>顺序储存</strong>结构中，数据元素的<strong>逻辑位置</strong>和<strong>物理位置</strong>的关系是<strong>一致的</strong></li>\n</ol>\n<h5 id=\"总结-4\">总结</h5>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308121649747.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308121649264.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"三、栈和队列\">三、栈和队列</h3>\n<h4 id=\"考纲要求\">考纲要求</h4>\n<p>1．掌握栈和队列的顺序存储方法及链式存储方法。</p>\n<p>2．熟悉进栈、出栈、进队、出队的实现方法。</p>\n<p>3．栈和对列的简单应用。</p>\n<p>4．递归的实现。</p>\n<h4 id=\"考点总结\">考点总结</h4>\n<h5 id=\"栈的逻辑结构\">栈的逻辑结构</h5>\n<blockquote>\n<p>定义：栈（stack），是限定仅在表的<strong>一端</strong>进行插入和删除的特殊的线性表。允许插入、删除的这一端称为栈顶，另一端称为栈底。表中没有元素时称为空栈。<br>\n栈被称为<strong>后进先出</strong>的线性表（$Last In First Out$），简称$FIFO$表，或者被称为先进后出的线性表$First In Last Out$，简称$FILO$表。</p>\n</blockquote>\n<p>堆栈是操作受限的<strong>线性结构</strong>。</p>\n<p><strong>栈与数据存储结构无关</strong></p>\n<h5 id=\"栈的顺序存储结构——顺序栈\">栈的顺序存储结构——顺序栈</h5>\n<blockquote>\n<p>（1）顺序栈的存储结构的实现</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> stk[N];  <span class=\"comment\">// 定义一个栈</span></span><br><span class=\"line\">    <span class=\"comment\">// 栈顶元素指向最后一个元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top = <span class=\"number\">-1</span>;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入元素</span></span><br><span class=\"line\">    stk[ ++ top] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    stk[ ++ top] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\">    -- top;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回栈顶</span></span><br><span class=\"line\">    stk[top];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 栈顶元素指向最后一个元素的下一个位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 与上面的top = -1不一样</span></span><br><span class=\"line\">    top = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入元素</span></span><br><span class=\"line\">    stk[top ++ ] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    stk[top ++ ] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\">    top -- ; <span class=\"comment\">// 或者 -- top,这种略快一点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回栈顶</span></span><br><span class=\"line\">    stk[top - <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\">    top == <span class=\"number\">0</span>;  <span class=\"comment\">// 看top初值为多少这里就是多少</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"栈的链式存储结构——链栈\">栈的链式存储结构——链栈</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    Node* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(): <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">val</span>(_val), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 两头结点有两种写法，理解万岁</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Node* top = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 添加</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    a-&gt;next = top;</span><br><span class=\"line\">    top = a;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    b-&gt;next = top;</span><br><span class=\"line\">    top = b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> c = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    c-&gt;next = top;</span><br><span class=\"line\">    top = c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 删除栈顶</span></span><br><span class=\"line\">    top = top-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> c;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回栈顶</span></span><br><span class=\"line\">    top-&gt;val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">    top == <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"栈的简单应用\">栈的简单应用</h5>\n<p>【注】所有递归都需要用到栈，除了尾递归<br>\n非尾递归：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">fibonacci</span>(n - <span class=\"number\">1</span>) + <span class=\"built_in\">fibonacci</span>(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尾递归：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">fibonacci</span><span class=\"params\">(n, prev = <span class=\"number\">0</span>, next = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">fibonacci</span>(n - <span class=\"number\">1</span>, next, prev + next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"队列的逻辑结构\">队列的逻辑结构</h5>\n<p>线性结构</p>\n<h5 id=\"队列的顺序存储结构\">队列的顺序存储结构</h5>\n<p><strong>注</strong>：队列是在队尾$rear$插入，在队头弹出$front$。</p>\n<p>循环队列</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> q[N];  <span class=\"comment\">// 定义一个队列</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// front,rear 排列组合一共有4种</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> front = <span class=\"number\">0</span>, rear = <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// 这里front指向第一个元素，rear指向最后一个元素的下一个元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 队列是否为空</span></span><br><span class=\"line\">    front == rear % N;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 队列满的判定、由于不能走到重合，只能走向rear前一个位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样才能判断，因此循环队列只能存储N - 1个元素（有一个元素不能使用）</span></span><br><span class=\"line\">    front == (rear + <span class=\"number\">1</span>) % N;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如何实现循环队列，只需要每一操作，让front和rear都与N取模</span></span><br><span class=\"line\">    <span class=\"comment\">// front %= N, rear %= N;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    q[rear ++ ] = <span class=\"number\">1</span>;  <span class=\"comment\">// 由于front，和rear定义需要这样插入，具体问题具体分析。</span></span><br><span class=\"line\">    rear %= N;  <span class=\"comment\">// 循环队列</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回队头</span></span><br><span class=\"line\">    q[front];</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">---    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"type\">int</span> front = <span class=\"number\">0</span>, rear = <span class=\"number\">-1</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// 这里front指向第一个元素，rear指向最后一个元素</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 队列是否为空</span></span><br><span class=\"line\">    front == (rear + <span class=\"number\">1</span>) % N;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 队列满的判定</span></span><br><span class=\"line\">    front == (rear + <span class=\"number\">2</span>) % N;  <span class=\"comment\">// 注意与上一个区分</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里由于在rear + 1的位置为空，因此还要往后走一个位置才能判断满，同样循环队列只能存储N - 1个元素（有一个元素不能使用）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    q[ ++ rear] = <span class=\"number\">1</span>;  <span class=\"comment\">// 由于front，和rear定义需要这样插入，具体问题具体分析。</span></span><br><span class=\"line\">    rear %= N;  <span class=\"comment\">// 循环队列</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 返回队头</span></span><br><span class=\"line\">    q[front];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"队列的链式存储结构（带头结点）\">队列的链式存储结构（带头结点）</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    Node* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(): <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _val): <span class=\"built_in\">val</span>(_val), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Node *front = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(), *rear = front;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    rear-&gt;val = <span class=\"number\">1</span>;</span><br><span class=\"line\">    rear-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>();</span><br><span class=\"line\">    rear = rear-&gt;next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    rear-&gt;val = <span class=\"number\">2</span>;</span><br><span class=\"line\">    rear = rear-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    rear-&gt;val = <span class=\"number\">3</span>;</span><br><span class=\"line\">    rear = rear-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 对头</span></span><br><span class=\"line\">    front-&gt;val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 弹出对头</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = front;</span><br><span class=\"line\">    front = front-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> p;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>循环队列的图示</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212172218034.jpg\" alt=\"\"><br>\n循环队列<strong>入队</strong>操作：<code>Q[rear] = e; rear = (rear + 1) % MAXSIZE</code><br>\n循环队列<strong>出队</strong>操作：<code>front = (front + 1) % MAXSIZE</code><br>\n<strong>队满</strong>条件：<code>(rear + 1) % MAXSIZE == front</code><br>\n【<strong>注</strong>】这里点的<code>MAXSIZE</code>是数组的大小，若题目中说了：队列最多能容纳<code>MAXSIZE - 1</code>个元素，为干扰条件，队满判定还是用<code>(rear + 1) % MAXSIZE == front</code><br>\n<strong>队空</strong>条件：<code>front == rear</code><br>\n队列中一共有<strong>多少个元素</strong>：<code>(rear - front + MAXSIZE) % MAXSIZE</code></p>\n<h5 id=\"栈与队列相关示意图\">栈与队列相关示意图</h5>\n<p><strong>栈</strong></p>\n<p><img src=\"https://jasonqianpic2.oss-cn-chengdu.aliyuncs.com/img/202307122225827.jpg\" alt=\"\"></p>\n<p><strong>队列</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202307122321028.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202307122322647.jpg\" alt=\"\"></p>\n<p><strong>带头结点和不带头结点循环队列</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309251705435.jpg\" alt=\"\"></p>\n<h5 id=\"栈与递归问题\">栈与递归问题</h5>\n<h6 id=\"一、汉诺塔-Hanoi-问题\">一、汉诺塔(Hanoi)问题</h6>\n<p>【问题描述】<br>\n假设有$3$个分别命名为$A$,$B$,和$C$的塔座，在塔座$A$上插有$n$个直径大小各不同，从小到大编号为$1,2,…,n$的圆盘。现要求将塔座$A$上的$n$的圆盘移至塔座$C$上，并按照相同的顺序叠排，圆盘移动时必须遵循一下规则：<br>\n（1）每次只能移动一个圆盘；<br>\n（2）圆盘可以插在$A$，$B$和$C$中的任一塔座上；<br>\n（3）任何时刻都不能将一个较大的圆盘按在较小的圆盘之上。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308171611855.jpg\" alt=\"\"><br>\n【题目分析】<br>\n假设$n=2$，那么只需要将$A$柱上最上的一块圆盘$disk_1$移动到$B$柱上，再将$A$柱上最下面一块$disk_2$移动到$C$柱上，然后将$B$柱上的一块$disk_1$移动到$C$柱上。<br>\n过程为</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A -&gt; B</span><br><span class=\"line\">A -&gt; C</span><br><span class=\"line\">B -&gt; C</span><br></pre></td></tr></table></figure>\n<p>若$n&gt;2$，那么只需要将$A$柱上$n-1$块圆盘$disk_{(1\\sim n-1)}$移动到$B$柱上，再将$A$柱最下面一块$block_n$移动到$C$柱上，然后将$B$柱上的$disk_{(1\\sim n-1)}$移动到$C$柱上。</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">char</span> A, <span class=\"type\">char</span> C)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;第&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"string\">&quot;个圆盘  由&quot;</span> &lt;&lt; A &lt;&lt; <span class=\"string\">&quot;柱运送到&quot;</span> &lt;&lt; C &lt;&lt; <span class=\"string\">&quot;柱&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一共有n个圆盘，将这n个圆盘由A柱通过 辅助柱B 送到C柱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">hanoi</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">char</span> A, <span class=\"type\">char</span> B, <span class=\"type\">char</span> C)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"built_in\">move</span>(n, A, C);  <span class=\"comment\">// 边界情况，当只有一个圆盘直接运输</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">hanoi</span>(n - <span class=\"number\">1</span>, A, C, B);  <span class=\"comment\">// 将n - 1个圆盘从A柱 通过辅助柱C 送到B柱</span></span><br><span class=\"line\">        <span class=\"built_in\">move</span>(n, A, C);  <span class=\"comment\">// 将第n个圆盘从A柱运输到C柱</span></span><br><span class=\"line\">        <span class=\"built_in\">hanoi</span>(n - <span class=\"number\">1</span>, B, A, C);  <span class=\"comment\">// 将n - 1个圆盘从B柱 通过辅助柱A 送到C柱</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">样例：n = 2</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">第1个圆盘  由A柱运送到B柱</span></span><br><span class=\"line\"><span class=\"comment\">第2个圆盘  由A柱运送到C柱</span></span><br><span class=\"line\"><span class=\"comment\">第1个圆盘  由B柱运送到C柱</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"二、表达式求值\">二、表达式求值</h6>\n<p><a href=\"https://www.jasonqian.com/2022/10/26/AcWing-3302-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/\">https://www.jasonqian.com/2022/10/26/AcWing-3302-表达式求值/</a></p>\n<h3 id=\"四、串\">四、串</h3>\n<h4 id=\"考纲要求-2\">考纲要求</h4>\n<blockquote>\n<p>1．掌握串的有关概念，了解顺序存储方法及链式存储方法。<br>\n2．了解串的有关操作的实现方法。<br>\n3．了解串的模式匹配算法。<br>\n4．串的简单应用。</p>\n</blockquote>\n<h4 id=\"考点总结-2\">考点总结</h4>\n<h5 id=\"串的定义以及相关术语\">串的定义以及相关术语</h5>\n<ol>\n<li><strong>串</strong>是由零个或多个任意字符所组成的有限字符序列，记作&quot;$a_1,a_2,…,a_n$&quot;</li>\n<li>'$a_i$‘<strong>的含义</strong>：’$a_i(1\\le i\\le n)$'是字符型数据，是构成串的基本单位。</li>\n<li>$a_i$<strong>的位置</strong>：$i$称为$a_i$在串中的位置或序号。</li>\n<li><strong>串的长度</strong>：$n$称为串的长度；当$n=0$时，称为空串。</li>\n<li><strong>子串与主串</strong>：串中任意连续的字符所组成的子序列称为该串的子串。包含子串的串相对应地称为主串。</li>\n<li><strong>子串的位置</strong>：子串的第一个字符在主串中的序号称为子串在母串中的位置。</li>\n<li><strong>串相等</strong>：称两个串是相等的，是指两个串的长度相等且对应位置上字符都相等。</li>\n<li><strong>空格串</strong>：由一个或多个空格组成的串称为空格串，其长度为空格字符的个数。</li>\n<li><strong>注意</strong>：每个串后面都有一个<code>'\\0'</code>作为串的终结符。</li>\n<li><strong>存储密度</strong>$=\\displaystyle\\frac{串值所占的存储位}{实际分配的存储位}$。<br>\n若字符串&quot;ABCDEFG&quot;采用链式存储，假设每个字符(结点)占1个字节，每个指针占2个字节，则该字符串的存储密度为$\\displaystyle \\frac{1}{3}$。<br>\n也就是$\\displaystyle=\\frac{字符(结点)占的字节数}{字符(结点)占的字节数+指针占的字节数}$。</li>\n<li>串的<strong>特殊性</strong>体现在：数据元素类型是<strong>字符型</strong>。</li>\n</ol>\n<p><code>substr</code>函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string str = <span class=\"string\">&quot;abcdefg&quot;</span>;</span><br><span class=\"line\">string t = str.<span class=\"built_in\">substr</span>(<span class=\"number\">3</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">cout &lt;&lt; t &lt;&lt; endl;  <span class=\"comment\">// t:def</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"五、数组与广义表\">五、数组与广义表</h3>\n<h4 id=\"考纲要求-3\">考纲要求</h4>\n<blockquote>\n<p>1． 掌握数组的顺序存储方法及矩阵的压缩存储方法。<br>\n2． 掌握矩阵的转置算法和矩阵的相加算法的实现。<br>\n3． 了解广义表在m元多项式中的简单应用。</p>\n</blockquote>\n<h4 id=\"考点总结-3\">考点总结</h4>\n<h5 id=\"数组以及相关操作的实现\">数组以及相关操作的实现</h5>\n<ol>\n<li>数组时由类型相同的数据元素构成的有序集合，每个数据元素称为一个数组元素（简称元素），每个元荤受$n(n\\ge 1)$个线性关系的约束，每个元素在$n$个线性关系中的序号称为该元素的下标，并称该元素为$n$维数组，$n$称为该数组的维数($n=1$时称为一维数组，也称为线性表)。</li>\n<li><strong>数组特点</strong>：①数组的数据元素具有相同数据类型；②给定一个确定的下标值就指定了一个具体的数据元素。③数组中的数据元素个数是固定的。一旦定义了一个数组，它的维数和元素数目也就确定了。</li>\n<li><strong>数组中最常用的两种操作</strong>：①存储：给定下标值，存取相应的数据元素；②修改：给定下标值，修改相应的数据元素的值。</li>\n<li><strong>数组的顺序表示</strong>：数组一般都是采用顺序存储结构来表示。一下用二维数组为例，讨论数组的顺序存储方式。\n<ol>\n<li>以行顺序为主存放：将数组的每一行视为一个行向量元素，第$i+1$个行向量元素存储在第$i$个行向量元素的后面，构成一个行向量元素的线性表。</li>\n<li>以列顺序为主存放：将数组的每一列视为一个列向量元素，第$i+1$个列向量元素存储在第$i$个列向量元素的后面，构成一个列向量元素的线性表。</li>\n</ol>\n</li>\n<li>存储数据时$a_{ij}$的<strong>地址计算公式</strong>：设二维数组$A[1…m,1…n]$（即$m$行$n$列），其每一个元素$a_{ij}$占用$L$存储单元，$a_{11}$为该数组的第一个元素，设已知$a_{11}$的首地址为$LOC[a_{11}]$（也即存放空间的首地址）。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211222000556.png\" alt=\"\"></li>\n</ol>\n<h5 id=\"压缩存储\">压缩存储</h5>\n<p>压缩存储：指为多个值<strong>相同的元素</strong>只分配<strong>一个存储空间</strong>，对<strong>零元素不分配</strong>存储空间。其目的是节省存储空间。<br>\n例：对称矩阵，上/下三角矩阵，只存储一半的值即可。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212032255503.png\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212032256356.png\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212032256279.png\" alt=\"\"></p>\n<p><strong>注</strong>：<strong>稀疏矩阵经过压缩存储后，会失去随机存取的功能</strong>。</p>\n<p><strong>三对角矩阵</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309161555002.jpg\" alt=\"\"><br>\n【<strong>注</strong>】<br>\n若为$n$（$n$为大于等于$3$的奇数）对角矩阵，第一排有$\\displaystyle \\frac{n+1}{2}$个元素。<br>\n一个$m$阶的$2n+1,n\\in {1,2,3,…}$对角矩阵化为一维数组大小至少为：$m(2n+1)-2\\displaystyle \\sum_{i=1}^{n}i$<br>\n<strong>例</strong>：<br>\n$n$阶$3$对角矩阵压缩为一维至少要：$n\\times 3-2\\displaystyle\\sum_{i=1}^{1}i=3n-2$<br>\n$n$阶$5$对角矩阵压缩为一维至少要：$n\\times 5-2\\displaystyle\\sum_{i=1}^{2}i=5n-6$</p>\n<h5 id=\"广义表\">广义表</h5>\n<p><strong>概念</strong>：<br>\n广义表（Lists，又称列表）是线性表的推广。在前面的章节中，我们把线性表定义为$n\\ge 0$个元素$a_1,a_2,a_3,…,a_n$的有限序列。线性表的元素仅限于原子项，原子是作为结构上不可分割的成分，它可以是一个数或一个结构，若放松对表元素的这种限制，容许它们具有其自身结构，这样就产生了广义表的概念。</p>\n<p>广义表是$n(n\\ge 0)$个元素$a_1,a_2,a_3,…,a_n$的有限序列，其中$a_i$或者是原子项，或者是一个广义表。通常记作$LS=（a_1,a_2,a_3,…,a_n)$。$LS$是广义表的名字，$n$为它的长度。若$a_i$是广义表，则称它为$LS$的子表。</p>\n<p><strong>表头、表尾的定义</strong>：当广义表LS非空时，<strong>称第一个元素为LS的表头</strong>；称广义表LS中除去表头后<strong>其余元素</strong>组成的广义表为LS的<strong>表尾</strong>。例如，<strong>广义表(a, (b))的表头是单元素a，表尾是广义表((b))</strong>。</p>\n<p>通常用<strong>圆括号</strong>将广义表括起来，用<strong>逗号分隔其中的元素</strong>。为了区别原子和广义表，书写时用<strong>大写字母</strong>表示<strong>广义表</strong>，用<strong>小写字母</strong>表示<strong>原子</strong>。若广义表$LS（n\\ge 1)$非空，则$a_1$是$LS$的表头，其余元素组成的表$(a_1,a_2,a_3,…,a_n)$称为LS的表尾。<br>\n显然广义表是递归定义的，这是因为在定义广义表时又用到了广义表的概念。广义表的例子如下：</p>\n<ol>\n<li>A=（）——A是一个空表，其<strong>长度为零</strong>。</li>\n<li>B=（e）——表B只有一个原子e，B的<strong>长度为1</strong>。</li>\n<li>C=（a,(b,c,d))——表C的<strong>长度为2</strong>，两个元素分别为原子a和子表(b,c,d)。</li>\n<li>D=（A，B，C）——表D的<strong>长度为3</strong>，三个元素都是广义表。显然，将子表的值代入后，则有D=(( ),(e),(a,(b,c,d)))。</li>\n<li>E=（E）——这是一个递归的表，它的<strong>长度为2</strong>，E相当于一个无限的广义表E=(a,(a,(a,(a,…)))).</li>\n</ol>\n<p>从上述定义和例子可推出广义表的<strong>三个重要结论</strong>：</p>\n<ol>\n<li>广义表的元素可以是子表，而子表的元素还可以是子表。由此，广义表是一个多层次的结构，可以用图形象地表示。</li>\n<li>广义表可为其它表所共享。例如在上述例（4）中，广义表A，B，C为D的子表，则在D中可以不必列出子表的值，而是通过子表的名称来引用。</li>\n<li>广义表的递归性。<br>\n综上所述，广义表不仅是线性表的推广，也是树的推广。由表头、表尾的定义可知：任何一个非空广义表其表头可能是广义表，也可能是广义表，而其表尾必定是广义表。</li>\n</ol>\n<p><strong>注意</strong>广义表（ ）和( ( ) )不同。<strong>前者</strong>是长度为0的<strong>空表</strong>，对其<strong>不能做求表头的和表尾的运算</strong>；而后者是长度为1的非空表（只不过该表中唯一的一个元素是空表）。对其可进行分解，得到表头和表尾均为空表（ ）。</p>\n<blockquote>\n<p>转自https://zhuanlan.zhihu.com/p/35200103</p>\n</blockquote>\n<p><strong>例题1</strong>：<br>\n广义表A=(a,b,(c,d),(e,(f,g)))，则Head(Tail(Head(Tail(Tail(A)))))的值为？</p>\n<blockquote>\n<p>tail第一步： (b,(c,d),(e,(f,g)))<br>\ntail第二步：((c,d),(e,(f,g)))<br>\nhead第三步：（c,d）<br>\ntail第四步：（d）<br>\nhead第五步：d<br>\n<strong>注</strong>：(d)是列表，b是元素</p>\n</blockquote>\n<p><strong>例题2</strong>：<br>\n广义表的深度定义为广义表中<strong>括号对的嵌套层数</strong>.<br>\n广义表A=(a,(c,d),(e,(f,(g,(h,i)))))的深度为？</p>\n<blockquote>\n<p>(e,(f,(g,(h,i))))深度为：1<br>\n(f,(g,(h,i)))深度为：2<br>\n(g,(h,i))深度为：3<br>\n(h,i)深度为：4<br>\nh,i深度为：5<br>\n故为5</p>\n</blockquote>\n<p><strong>例题3</strong></p>\n<blockquote>\n<p>去除广义表LS=($a_1,a_2,…,a_n$)中的第$1$个元素，由其余元素构成的广义表称为LS的<strong>表尾</strong></p>\n</blockquote>\n<p><strong>例题4</strong></p>\n<blockquote>\n<p>广义表L=(a,(b,()))的深度为$3$</p>\n</blockquote>\n<p><strong>例题5</strong></p>\n<blockquote>\n<p>已知广义表A=(x,((a,b),c))，函数head(head(tail(A)))的运算结果是：<br>\ntail(A)=(((a,b),c))，<strong>注意此处外套一层括号</strong>，详情见<strong>例题1</strong><br>\nhead(tail(A))=((a,b),c)<br>\nhead(head(tail(A)))=(a,b)</p>\n</blockquote>\n<p><strong>例题6</strong></p>\n<blockquote>\n<p>已知广义表G，head(G)与tail(G)的深度分别为4和6，则G的深度为？</p>\n<p>假设A=(((a)),((b)))</p>\n<ol>\n<li>tail(A)=(((b)))深度为3，A的深度也是3.原因是tail(A)取的时候外面<strong>包了一层皮</strong>。</li>\n<li>head(A)=((a))深度为2，A的深度为3.head(A)取的时候外面<strong>没有一层皮</strong>。</li>\n</ol>\n<p>对于此类问题，G的深度就是Max(head(G)的深度 + 1,tail(G)的深度)。</p>\n<p><strong>此题答案</strong>$\\max{(4+1,6)}=6$</p>\n</blockquote>\n<p><strong>例题7</strong></p>\n<blockquote>\n<p>广义表A=(a,(b,d,(e,f,g,h)))，head(tail(A))=?<br>\ntail(A)=((b,d,(e,f,g,h)))<br>\nhead(tail(A))=(b,d,(e,f,g,h))</p>\n</blockquote>\n<p><strong>例题8</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310081933880.jpg\" alt=\"\"></p>\n<p><strong>例题9</strong></p>\n<ol>\n<li>广义表的表尾是指除第一个元素之外，其余元素组成的表</li>\n<li>广义表简称表，是由零个或多个原子或子表组成的有序序列，原子与表的差别仅在于表的长度是指<strong>原子（氮元素）是结构上不可再分的，可以是一个数或一个结构；而表带结构，本质就是广义表，因作为广义表的元素故称为子表</strong>。为了区分原子和表，一般用<strong>大写字母</strong>表示表，用<strong>小写字母</strong>表示原子，一个表的长度是指<strong>表中元素的个数</strong>，而表的深度是指<strong>表展开后所含括号的层数</strong></li>\n</ol>\n<p><strong>例题10</strong><br>\n设广义表L=((),())，则head(L)=()，tail(L)=(())，L的长度是2，L的深度是2</p>\n<hr>\n<h3 id=\"六、树和二叉树\">六、树和二叉树</h3>\n<h4 id=\"考纲要求-4\">考纲要求</h4>\n<blockquote>\n<p>1． 熟悉树和二叉树的有关定义，掌握二叉树的顺序存储结构和链式存储结构的实现方法。<br>\n2．掌握二叉树的建立及二叉树的几种遍历算法，了解树和森林的遍历方法。<br>\n3．了解最优二叉树和哈夫曼树的应用。<br>\n4．其他简单应用。</p>\n</blockquote>\n<h4 id=\"考点总结-4\">考点总结</h4>\n<h5 id=\"树的基本概念\">树的基本概念</h5>\n<ol>\n<li>\n<p><strong>树</strong>是由根节点和若干颗子树构成的。树是由一个集合以及在该集合上定义的一种关系构成的。集合中的元素称为树的节点，所定义的关系称为父子关系。父子关系在树的节点之间建立了一个层次结构。在这种层次结构中有一个节点具有特殊的地位，这个节点称为该树的根节点，或称为树根。</p>\n</li>\n<li>\n<p>空集合也是树，称为空树。空树中没有节点；</p>\n</li>\n<li>\n<p>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</p>\n</li>\n<li>\n<p><strong>节点的度</strong>：一个节点含有的<strong>子节点</strong>的个数称为该节点的度；</p>\n</li>\n<li>\n<p><strong>叶节点或终端节点</strong>：度为0的节点称为叶节点；</p>\n</li>\n<li>\n<p><strong>非终端节点或分支节点</strong>：度不为0的节点；</p>\n</li>\n<li>\n<p><strong>双亲节点或父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点；</p>\n</li>\n<li>\n<p><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点；</p>\n</li>\n<li>\n<p><strong>树的度</strong>：一棵树中，<strong>最大的节点的度</strong>称为树的度；<br>\n【<strong>例题</strong>】<br>\n设树$T$的度为$4$，其中度为$1,2,3,4$的结点个数分别为$6,4,1,1$。其中叶子结点个数为？<br>\n<strong>解</strong>：度的总数$-$结点个数$+1$<br>\n$(1\\times 6+2\\times 4+3\\times 1+4\\times 1) -(6+4+1+1)+1=10$</p>\n</li>\n<li>\n<p>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</p>\n</li>\n<li>\n<p><strong>树的高度或深度</strong>：树中节点的最大层次；</p>\n</li>\n<li>\n<p><strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点；</p>\n</li>\n<li>\n<p><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙；</p>\n</li>\n<li>\n<p><strong>森林</strong>：由棵互不相交的树的集合称为森林。</p>\n</li>\n<li>\n<p><strong>有序树、无序树</strong>：如果一棵树中节点的各子树从左到右是有次序的，不能交换的，则称这棵树为有序树；否则称为无序树。</p>\n</li>\n<li>\n<p><strong>节点编号</strong>：从1开始将树中的节点依次编号，编号的原则是：从第一层开始往下，每层从左至右依次对节点进行编号。</p>\n</li>\n<li>\n<p><strong>同构</strong>：对两棵树而言，若通过对节点重新命名，就可以使这两棵树完全相等（节点对应相等，节点对应关系也相等），则称这两棵树同构。</p>\n</li>\n</ol>\n<h5 id=\"二叉树\">二叉树</h5>\n<ol>\n<li>二叉树的定义及其主要特征<br>\na. <strong>二叉树的基本形态</strong>：空二叉树、单节点二叉树、左子树、右子树<br>\nb. <strong>性质</strong>：<br>\n[1] 在非空二叉树中，第$i$层上至多有$2^{(i-1)}$ 个结点。<br>\n[2] 深度为$k$的二叉树至多有$2^k - 1$个结点<br>\n[3] 对任何一棵二叉树，若其叶子结点数为$n_0$，度为$2$的结点数为$n_2$，则$n_0 = n_2 + 1$。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011114961.jpg\" alt=\"\"><br>\n[4] $n$个结点的<strong>完全二叉树深度</strong>为：$\\lfloor log_2n\\rfloor$ $+ 1$<br>\n[5] 二叉树的<strong>堆式存储</strong>: 结点$p$的左儿子：$2p$，右儿子：$2p +1$<br>\n[6] 二叉树的<strong>顺序存储</strong>：结点$p$的左儿子：$2p+1$，右儿子：$2(p+1)$<br>\nc. <strong>三种特殊的二叉树</strong><br>\n[1] <strong>满二叉树</strong>：一颗深度为$k$且有$2^k-1$个结点的二叉树<br>\n[2] <strong>完全二叉树</strong>：如果深度为$k$,有$n$个结点的二叉树，当且仅当其每个结点都与深度为k的满二叉树中编号从$1$到$n$的结点一一对应。<strong>深度为</strong>$n$<strong>的完全二叉树结点范围</strong>：$[2^{n-1},2^{n}-1]$<br>\n【<strong>例题1</strong>】<br>\n一棵完全二叉树中有$n$个结点，若用二叉链表作为该完全二叉树的存储结构，则共有$n+1$<strong>个空指针域,</strong>$n-1$<strong>个非空指针域</strong><br>\n【<strong>证明</strong>】<br>\n$n$个结点，有$2n$个指针域，占了$(n-1)$个指针域[<strong>因为树根结点不占用指针域，所以要-1</strong>]，剩$2n-(n-1)=n+1$个空指针<br>\n【<strong>例题2</strong>】<br>\n<strong>完全二叉树的叶节点个数为</strong>$\\lceil \\frac{n}{2}\\rceil$<br>\n设有一棵完全二叉树具有$1001$个结点，则该完全二叉树有$\\lceil \\frac{1001}{2}\\rceil=501$个叶子节点。<br>\n【<strong>例题3</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312172140488.jpg\" alt=\"\"><br>\n[3] <strong>斜树或单支二叉树</strong>：所有节点都只有左子树的二叉树统称为左斜树；所有节点都只有右子树的二叉树称为右斜树；左斜树和右斜树统称为斜树，也称为单枝二叉树。</li>\n<li>二叉树的顺序存储结构和链式存储结构<br>\n二叉树有不同的链式存储结构，其中最常用的是<strong>二叉链表</strong>与<strong>三叉链表</strong></li>\n<li><strong>二叉树的遍历</strong><br>\na. 前序遍历 根左右<br>\nb. 中序遍历 左根右<br>\nc. 后序遍历 左右根<br>\nd. 根据前序 + 中序重建二叉树(AcWing 18)</li>\n<li>$n$层满$2$叉树结点总数 对应公式为$(2^n-1)/1$<br>\n$n$层满$3$叉树结点总数 对应公式为$(3^n-1)/2$<br>\n$n$层满$4$叉树结点总数 对应公式为$(4^n-1)/3$<br>\n…<br>\n$n$层$k$叉树，对应公式为$(k^n-1)/(k-1)$</li>\n<li>严格二叉树：每个非叶节点包含非空的左和右子树。 换句话说，每个非叶节点的等级将始终为$2$。具有$n$个叶子的严格二叉树将具有$(2n-1)$个节点。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309161401891.png\" alt=\"\"></li>\n</ol>\n<h5 id=\"线索二叉树\">线索二叉树</h5>\n<p>二叉树的线索链表利用<strong>空指针域</strong>存放遍历时得到的前驱或后继结点的指针。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308101006613.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308101007281.jpg\" alt=\"\"></p>\n<h5 id=\"树、森林\">树、森林</h5>\n<ol>\n<li><strong>树的存储结构</strong><br>\na. 只存父节点（应用：并查集）<br>\nb. 邻接表存储所有子节点<br>\nc. 左儿子右兄弟（本质上就是邻接表）</li>\n<li><strong>森林F与二叉树T的转换（用左儿子右兄弟转换）</strong><br>\na. 原树中叶子节点数 = 转换后的树中有右儿子的节点数 + $1$<br>\nb. F的前序遍历就是T的前序遍历<br>\nc. F的后序遍历就是T的中序遍历<br>\n真题：15.6<br>\n树转二叉树：<strong>左孩子右兄弟</strong>。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211222020345.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312011114770.jpg\" alt=\"\"></li>\n<li><strong>树和森林的遍历</strong><br>\na. 前序遍历：先遍历根节点，再遍历子树。<br>\nb. 后序遍历：先遍历子树，再遍历根节点。</li>\n<li><strong>森林的一些性质</strong><br>\na. 在$n$个结点的树中有个$n-1$条边，那么对于每棵树，其结点数比边数多$1$。也就是说若森林中有$15$条边，$25$个结点，森林包含的树的个数为$25-15=10$棵树。<br>\nb. 有序树$T$转化为森林、二叉树遍历之间的关系\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">树</th>\n<th style=\"text-align:center\">森林</th>\n<th style=\"text-align:center\">二叉树</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">先</td>\n<td style=\"text-align:center\">先</td>\n<td style=\"text-align:center\">先</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">后</td>\n<td style=\"text-align:center\">中</td>\n<td style=\"text-align:center\">中</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<p><strong>树、森林的转换</strong>：<a href=\"https://zhuanlan.zhihu.com/p/134251528\">https://zhuanlan.zhihu.com/p/134251528</a></p>\n<h5 id=\"证明题方法\">证明题方法</h5>\n<p>节点计算的方法一般有两种：①数学归纳法，②解方程</p>\n<p><strong>例一</strong>：证明在非空二叉树中，第$i$层上至多有$2^{(i-1)}$ 个结点。<br>\n$$<br>\n设k=1时，成立。\\\\<br>\n设k=n时成立，2^{n-1} \\\\<br>\n设k=n+1时，由于n_k\\le 2n_{k-1}=2\\times 2^{n-1}=2^n，也成立。<br>\n$$</p>\n<p><strong>例二</strong>：证明对任何一棵二叉树，若其叶子结点数为n0，度为2的结点数为n2，则n0 = n2 + 1。<br>\n$$<br>\n假设n_0为度数为0的点的数量，n_1为度数为1的点的数量，n_2为度数为2的点的数量 \\\\<br>\n从点来考虑n=n_0+n_1+n_2 \\\\<br>\n从边来考虑n-1=0\\times n_0+1\\times n_1+ 2\\times n_2 \\\\<br>\n联立两个等式就可以的到n_0=n_2+1<br>\n$$</p>\n<p>此结论可以推广至$n$叉树中：<br>\n【<strong>例</strong>】已知一棵度为$3$的树，有$2$个度为$1$的结点，$3$个度为$2$的结点，$4$个度为$3$的结点，则该树中一共有多少个叶子节点？</p>\n<p>度为$3$的树$\\Longrightarrow$为$3$叉树<br>\n设$n_i$为度为$i$的结点，于是$n_1=2，n_2=3，n_4=3$<br>\n设一共有$n$个点。</p>\n<ol>\n<li>从点考虑$n_0+n_1+n_2+n_3=n$</li>\n<li>从边考虑$0\\times n_0+1\\times n_1+2\\times n_2+3\\times n_3=n-1$<br>\n解得$n=21,n_0=12$</li>\n</ol>\n<h5 id=\"哈夫曼编码、哈夫曼树\">哈夫曼编码、哈夫曼树</h5>\n<p><strong>哈夫曼树相关概念</strong></p>\n<ol>\n<li><strong>节点的路径长度</strong>：从根节点沿某条路径到某个节点途中所经历的弧的条数称为该节点的路径长度。</li>\n<li><strong>数的路径长度</strong>：从根节点到每一个叶子节点的路径长度之和。</li>\n<li><strong>节点的带权路径长度</strong>：某节点的路径长度与该节点上的带权的乘积称为该节点的带权路径长度。</li>\n<li><strong>数的带权路径长度（WPL）</strong>：树中所有叶子节点的带权路径长度之和称为树的带权路径长度。</li>\n<li><strong>哈夫曼树的度只有0或2</strong></li>\n</ol>\n<p><strong>哈夫曼树的定义：</strong><br>\n设有$n$个叶子节点的二叉树，其第$i$个叶子节点的权值为$w_i(i=1,2,…,n)$，且第$i$个叶子节点的路径长度为$l_i$，则使得$WPL=\\displaystyle\\sum w_i*l_i$达到最小的二叉树称为&quot;最优二叉树&quot;或者称为&quot;哈夫曼树&quot;。</p>\n<p>按Huffman编码压缩正文共需要$\\displaystyle\\frac{WPL}{字符个数}$个字节。</p>\n<p><strong>哈夫曼树特点、试图达到的目的</strong><br>\n特点：哈夫曼编码是最优前缀编码。<br>\n目的：对于包括$n$个字符的数据文件，分别以它们出现的次数为权值构造哈夫曼树，则利用该树对应的哈夫曼树编码对文件进行编码，能使该<strong>文件压缩后</strong>对应的二进制文件的<strong>长度最短</strong>。</p>\n<p><strong>编码</strong><br>\n有关编码的概念</p>\n<ol>\n<li>编码对应叶节点左零右一，将左边权值设为$0$，右边权值设为$1$。</li>\n<li>前缀编码：在一个编码方案中，任何一个编码都不是其他任何编码的前缀。比如$0, 10, 110, 111$是前缀编码，$0, 01, 010, 111$就不是前缀编码，由于$0$是$01,010$的前缀。</li>\n<li>哈夫曼编码：对于一颗具有$n$个叶子的哈夫曼树，若对树中的每个左分支赋予$0$，右分支赋予$1$，则从根到每个叶子的路径上，各分支的赋值分别构成一个二进制串，该二进制串就是哈夫曼编码。</li>\n</ol>\n<p><strong>哈夫曼编码的两个性质</strong></p>\n<ol>\n<li>哈夫曼编码是<strong>前缀编码</strong>。</li>\n<li>哈夫曼编码是<strong>最优前缀编码</strong>。</li>\n</ol>\n<blockquote>\n<p><strong>哈夫曼树初态和终态</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312092201481.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p><strong>哈夫曼树例题</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312182122922.jpg\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"前序遍历与中序遍历栈的关系\">前序遍历与中序遍历栈的关系</h5>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308101009011.jpg\" alt=\"\"></p>\n<p>此方法可以求给定一个先序序列，如$a,b,c,  d$，求不同的二叉树个数</p>\n<p>就可以将问题转换为：对于$n$个元素进栈，出栈序列的个数为多少？</p>\n<p>答：$\\displaystyle\\frac{1}{n+1}C_{2n}^{n}=14$</p>\n<h5 id=\"根据前序-后序-层次遍历，中序遍历求二叉树\">根据前序/后序/层次遍历，中序遍历求二叉树</h5>\n<p><strong>方法一</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308101010918.jpg\" alt=\"\"></p>\n<p><strong>方法二</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308101011453.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308101011613.jpg\" alt=\"\"></p>\n<h5 id=\"二叉排序树（BST）\">二叉排序树（BST）</h5>\n<p><strong>具有的性质</strong></p>\n<ol>\n<li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>左、右子树也分别为二叉排序树；</li>\n<li>当向二叉排序树中插入一个结点，则该结点一定成为<strong>叶子结点</strong>。</li>\n<li>中序遍历是<strong>有序</strong>的，可以左边节点小于当前节点，右边节点大于当前节点；也可以左边节点大于当前节点，右边节点小于当前节点。【<strong>下面举个例子</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311011619403.jpg\" alt=\"\"></li>\n</ol>\n<p><strong>二叉排序树</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211081532334.gif\" alt=\"94cad1c8a786c9179df9bed6c93d70cf3ac75763\"></p>\n<p><strong>二叉排序树的路径</strong><br>\n二叉排序树的查找路径：是查找过程中走过的节点序列。<br>\n比如$(8,3,6,4)、(8,10,14,13)$就是两条查找路径。</p>\n<p><strong>折半查找判定树</strong>：是一棵二叉排序树，其<strong>中序序列</strong>是一个<strong>有序</strong>序列。</p>\n<p><strong>支持操作</strong></p>\n<ol>\n<li>插入$O(h)$</li>\n<li>删除$O(h)$</li>\n<li>查找$O(h)$</li>\n</ol>\n<p>二叉排序树题目：<a href=\"https://www.jasonqian.com/2022/11/08/AcWing-3786-%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/\">https://www.jasonqian.com/2022/11/08/AcWing-3786-二叉排序树/</a></p>\n<h5 id=\"平衡树——AVL\">平衡树——AVL</h5>\n<p><strong>定义</strong>：</p>\n<ol>\n<li><strong>是二叉排序树</strong></li>\n<li>每个节点的左子树和右子树的高度差最多为$1$</li>\n<li>树的高度$log_2{n}$</li>\n<li>平衡因子：一个结点的左子树的高度减去右子树的高度，可取$-1、0、1$三种值</li>\n<li>理想平衡树：若二叉树有$h$层，上面$h-1$层都是满的</li>\n</ol>\n<p><strong>平衡因子</strong><br>\n根结点$45$的平衡因子为$-1$ (左子树高度$2$，右子树高度$3$)<br>\n$50$结点的平衡因子为$-2$ (左子树高度$0$，右子树高度$2$)<br>\n$40$结点的平衡因子为$0$ (左子树高度$1$，右子树高度$1$)</p>\n<p>根据定义这颗二叉排序树中有结点的平衡因子<strong>超过1</strong>，所以<strong>不是一颗AVL树</strong>。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212032242294.png\" alt=\"\"></p>\n<blockquote>\n<p>若平衡二叉树的<strong>高度</strong>为$n$，且所有<strong>非叶子结点的平衡因子</strong>均为$1$，则该平衡二叉树的<strong>结点总数</strong>为？</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312182123086.jpg\" alt=\"\"></p>\n</blockquote>\n<p><strong>平衡二叉树插入</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309011426676.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309011426622.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309011427474.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309011427472.jpg\" alt=\"\"></p>\n<p><strong>平衡二叉树删除</strong></p>\n<p>删除叶节点<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311011606675.jpg\" alt=\"\"></p>\n<p>删除非叶节点<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311011606567.jpg\" alt=\"\"></p>\n<p><strong>平衡操作</strong></p>\n<ol>\n<li>左旋、右旋（旋转完后保证中序遍历不改变）</li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211082056913.png\" alt=\"image-20221108205611362\"></p>\n<p><strong>性质</strong></p>\n<ol>\n<li>平衡二叉树的结点数的递推公式为$\\displaystyle n_0=0, n_1=1, n_2=2,n_{h}=1+n_{h-1}+n_{h-2}$，其中$n_{h}$表示构造此高度的平衡二叉树所需的<strong>最小结点数</strong>。</li>\n</ol>\n<h5 id=\"表达式树\">表达式树</h5>\n<p>计算表达式树的时候：运算时要用第二个数栈的值处理第一个数栈的值</p>\n<p>特点：所有分叉结点都是运算符，所有叶节点都是数。</p>\n<p>表达式树的应用：<a href=\"https://www.jasonqian.com/2022/10/26/AcWing-3302-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/\">https://www.jasonqian.com/2022/10/26/AcWing-3302-表达式求值/</a></p>\n<p>表达式树：<a href=\"https://www.jasonqian.com/2022/12/20/AcWing-3765-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/\">https://www.jasonqian.com/2022/12/20/AcWing-3765-表达式树/</a></p>\n<hr>\n<h3 id=\"七、图\">七、图</h3>\n<h4 id=\"考纲要求-5\">考纲要求</h4>\n<blockquote>\n<p>1． 熟悉图的有关定义，掌握图的数组存储结构和邻接表存储结构的实现方法。<br>\n2．了解图的深度优先遍历算法和广度优先算法。<br>\n3．了解最小生成树、拓扑排序、关键路径的有关算法。<br>\n4．其他简单应用。</p>\n</blockquote>\n<h4 id=\"考点分析\">考点分析</h4>\n<h5 id=\"图的逻辑结构\">图的逻辑结构</h5>\n<p><strong>图的定义</strong><br>\n图$(Graph)$是由定点的非空集合和定点之间的关系（边或者弧的集合）组成的一种非线性结构。</p>\n<p><strong>图的有关术语</strong></p>\n<ol>\n<li>\n<p>图中的数据元素称为<strong>顶点</strong>。</p>\n</li>\n<li>\n<p>有向图中有<strong>弧</strong>。</p>\n</li>\n<li>\n<p>无向图中有<strong>边</strong>。<br>\n定理： $E$是图$G$中所有弧或边的集合，若用$e$表示图中弧的条数或边的条数，也即$e=|E|$，则有：<br>\n[1]在有向图中：$0\\le e\\le n(n-1)$<br>\n[2]在无向图中：$0\\le e\\le \\frac{n(n-1)}{2}$<br>\n[3]具有$n(n-1)$条边的有向图称为<strong>有向完全图</strong><br>\n[4]具有$\\frac{n(n-1)}{2}$条边的无向图称为<strong>完全图</strong>。</p>\n</li>\n<li>\n<p><strong>有向图中顶点的度</strong>：是该顶点的入度与出度之和。</p>\n</li>\n<li>\n<p><strong>无向图中顶点的度</strong>：是与该顶点相关联的边的条数。</p>\n</li>\n<li>\n<p><strong>子图</strong>：对于$G_1=(V_1,E_1),G_2=(V_2,E_2)$，若$V_2\\in V_1,E_2\\in E_1$，则称$G_2$是$G_1$的子图。</p>\n</li>\n<li>\n<p><strong>路径与回路</strong>：若图中两顶点是连通的，则从一个顶点到达另一个顶点一次所经历的边或弧称为一条路径；除了起点和终点相同外，路径上的其他顶点均不相同的路径称为一个回路或环。</p>\n</li>\n<li>\n<p><strong>无向图</strong>中，若图任意两个顶点都是连通的，则称图为<strong>连通图</strong>。</p>\n</li>\n<li>\n<p><strong>无向图</strong>中的<strong>极大连通子图</strong>（包括尽可能多的顶点和边）称为<strong>连通分量</strong>。</p>\n</li>\n<li>\n<p><strong>有向图</strong>中，如果任何一对顶点$v$和$w$，从$v$到$w$和从$w$到$v$之间都有路径，则称这个图是<strong>强联通图</strong>。<br>\n【<strong>判断</strong>】$n$个结点的有向图，若它有$n(n-1)$条边，则它一定是强联通的<br>\n（<strong>正确</strong>），这里不考虑重边，因为在<strong>数据结构</strong>中进讨论<strong>简单图</strong>。</p>\n</li>\n<li>\n<p><strong>有向图</strong>中的<strong>极大强联通子图</strong>（包括尽可能多的顶点和边）称为有向图的<strong>强联通分量</strong>。</p>\n</li>\n<li>\n<p>一个<strong>连通无向图的生成树</strong>是该图的一个<strong>极小连通子图</strong>，它包含有该图的素有$n$个顶点的$n-1$条边。</p>\n</li>\n<li>\n<p>边或弧上带权值的图称为<strong>网</strong>（分为无向网和有向网）。</p>\n</li>\n<li>\n<p>一个无向图的所有生成树中，边上的权值之和最小的生成树称为该图的<strong>最小生成树</strong>或<strong>最小代价生成树</strong>。</p>\n</li>\n<li>\n<p>【<strong>补充</strong>】</p>\n</li>\n<li>\n<p>对于具有$n$个顶点，$e$条边的无向图，它的度的总数为$2e$。</p>\n</li>\n<li>\n<p>回路$\\Longleftrightarrow$路径、简单回路$\\Longleftrightarrow$简单路径。</p>\n</li>\n<li>\n<p>一个图有$n$个顶点，如果边数小于$n-1$，那么此图必是非连通图。</p>\n</li>\n<li>\n<p>如果图示非连通图，那么最多可以有$C_{n-1}^{2}=\\frac{(n-1)(n-2)}{2}$</p>\n</li>\n<li>\n<p>如果图是强联通图，那么最少需要$n$条边，用于形成回路</p>\n</li>\n<li>\n<p>顶点$a$与顶点$b$是连通的：$a$与$b$之间存在路径。</p>\n</li>\n<li>\n<p>若有向图中存在拓扑排序，则该图一定不存在<strong>回路</strong>。</p>\n</li>\n<li>\n<p>有向图$E_1={&lt;1,2&gt;,&lt;2,3&gt;}$用的<strong>尖括号</strong></p>\n</li>\n<li>\n<p>无向图$E_2={(1,2),(2,3)}$用的<strong>圆括号</strong></p>\n</li>\n</ol>\n<p><strong>强联通分量及个数</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310281501911.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310281502308.png\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309161652432.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310081524609.jpg\" alt=\"\"></p>\n<p><strong>图的遍历</strong></p>\n<ol>\n<li><strong>图的遍历</strong>：有两种遍历算法：深度优先遍历算法$（DFS）$，宽度优先算法$（BFS）$。</li>\n<li><strong>生成子树与生成森林</strong>：对于非连通图而言，可对其某个连通分量求生成树，求的生成子树称为该非连通图的一个生成子树；分别对每个连通分量求一次生成树可得到该非连通图的生成森林。</li>\n</ol>\n<h5 id=\"图的存储结构\">图的存储结构</h5>\n<p><strong>图的数组表示法</strong><br>\n(1) <strong>邻接矩阵</strong>：适用于稠密图，可存有向图、无向图。常用。空间复杂度：$O(n^2)$。无法存重边。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">10010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N];  <span class=\"comment\">// g[i][j]代表i这个节点与j这个节点之间有一条边g[i][j]就是边长。</span></span><br><span class=\"line\"><span class=\"comment\">//（可以通过预处理，将g[i][j] == -1设置为没有边 memset(g, -1, sizeof g)）</span></span><br></pre></td></tr></table></figure>\n<p>(2) <strong>邻接表</strong>：适用于稀疏图，可存有向图、无向图。常用。空间复杂度：$O(n + m)$。可存重边。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义邻接表</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;  <span class=\"comment\">// 节点编号</span></span><br><span class=\"line\">    Node* next;  <span class=\"comment\">// next指针</span></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _id): <span class=\"built_in\">id</span>(_id), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">&#125;*head[N];  <span class=\"comment\">// 每一个点用一个单链表来存储</span></span><br><span class=\"line\"><span class=\"comment\">// 所以要开N个链表存节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加边函数</span></span><br><span class=\"line\"><span class=\"comment\">// 此处存储的是从a点出发能够到达的点的集合</span></span><br><span class=\"line\"><span class=\"comment\">// 单链表的插入，头插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(b);  <span class=\"comment\">// 创建一个节点b</span></span><br><span class=\"line\">    p-&gt;next = head[a];</span><br><span class=\"line\">    head[a] = p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>add</code><strong>函数</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212211955639.jpg\" alt=\"\"></p>\n<p><strong>顶点节点与边表结点</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308251542095.jpg\" alt=\"\"><br>\n(3) <strong>邻接多重表</strong>，适用于稀疏图，可存无向图。不常用。空间复杂度：$O(n + m)$。可存重边。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义邻接多重表，建立无向图的时候用</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val1;  <span class=\"comment\">// val1用来存储下一个节点的信息</span></span><br><span class=\"line\">    Node* next1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> val2;  <span class=\"comment\">// val2用来存储上一个节点的信息</span></span><br><span class=\"line\">    Node* next2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _id): <span class=\"built_in\">id</span>(_id), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;*head[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加边函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(b);</span><br><span class=\"line\">    p-&gt;next = head[a];</span><br><span class=\"line\">    head[a] = p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(4) <strong>十字链表</strong>，适用于稀疏图，可存有向图。不常用。空间复杂度：$O(n + m)$。无法存重边<br>\n(5) <strong>三元组表</strong>，适用于稀疏图，可存有向图，无向图。常用于$Bellman-Ford$算法、$Kruskal$算法。空间复杂度：$O(m)$。可存重边。<br>\n<strong>稀疏矩阵一般采用的压缩存储方法有两种即：三元组表和十字链表</strong><br>\n(6) <strong>逆邻接表</strong>：邻接表虽然在空间上有很大的优势，但是对于一个有向图，如果需要查找每个顶点的入度就需要遍历整个邻接表，在效率上很低下的。因此才有了逆邻接表的诞生。<br>\n<strong>邻接表</strong>：反映的是<strong>顶点出度</strong>的情况。<br>\n<strong>逆邻接表</strong>：反映的是<strong>顶点的入度</strong>情况。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212151649078.jpg\" alt=\"\"><br>\n转自：<a href=\"https://blog.csdn.net/ASJBFJSB/article/details/100887364\">https://blog.csdn.net/ASJBFJSB/article/details/100887364</a></p>\n<p><strong>图的遍历</strong><br>\n(1) <strong>深度优先搜索</strong>。邻接表存储的时间复杂度：$O(n + m)$。邻接矩阵存储的时间复杂度：$O(n^2)$<br>\n(2) <strong>广度优先搜索</strong>。邻接表存储的时间复杂度：$O(n + m)$。邻接矩阵存储的时间复杂度：$O(n^2)$</p>\n<h5 id=\"最小生成树-MST\">最小生成树(MST)</h5>\n<p><strong>概念</strong><br>\n生成树的代价：设$G=（V，E）$是一个无向连通网，生成树上各边的权值之和称为该生成树的代价。</p>\n<p><strong>MST唯一</strong><br>\n当带权连通图的<strong>任意一个环中所包含的边的权值</strong>均不相同时，其 MST 是<strong>唯一</strong>的<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309261508333.jpg\" alt=\"\"></p>\n<p><strong>题目</strong><br>\n给定一个 $n$ 个点 $m$ 条边的无向图，图中可能存在重边和自环，边权可能为负数。</p>\n<p>求最小生成树的树边权重之和，如果最小生成树不存在则输出 <code>impossible</code>。</p>\n<p>给定一张边带权的无向图 $G=(V, E)$，其中 $V$ 表示图中点的集合，$E$ 表示图中边的集合，$n=|V|$，$m=|E|$。</p>\n<p>由 $V$ 中的全部 $n$ 个顶点和 $E$ 中 $n-1$ 条边构成的无向连通子图被称为 $G$ 的一棵生成树，其中边的权值之和最小的生成树被称为无向图 $G$ 的最小生成树。</p>\n<p><strong>输入格式</strong></p>\n<p>第一行包含两个整数 $n$ 和 $m$。</p>\n<p>接下来 $m$ 行，每行包含三个整数 $u,v,w$，表示点 $u$ 和点 $v$ 之间存在一条权值为 $w$ 的边。</p>\n<p><strong>输出格式</strong></p>\n<p>共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出 <code>impossible</code>。</p>\n<p><strong>数据范围</strong></p>\n<p>$1 \\le n \\le 500$,<br>\n$1 \\le m \\le 10^5$,<br>\n图中涉及边的边权的绝对值均不超过 $10000$。</p>\n<p><strong>输入样例：</strong></p>\n<pre><code>4 5\n1 2 1\n1 3 2\n1 4 3\n2 3 2\n3 4 4\n</code></pre>\n<p><strong>输出样例：</strong></p>\n<pre><code>6\n</code></pre>\n<p><strong>朴素版prim算法</strong> $O(n^2)$</p>\n<p><strong>prim算法的思想</strong>就是：先使得一个顶点在一个集合中，然后从这个顶点出发更新其他点到集合中的最小距离，再从集合中选取一个到集合中最短且没有使用过的顶点来更新其他点到集合中的距离。时间复杂度由于有$n$个点，每个点要更新$n$次，所以是$O(n^2)$的复杂度<br>\n<strong>类似于dijkstra</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312182144037.jpg\" alt=\"\"></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">510</span>, INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N], dist[N];  <span class=\"comment\">// g[i][j]:i和j之间的路径长度；dist[i]:i到集合的距离</span></span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[t] &gt; dist[j]))</span><br><span class=\"line\">                t = j;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dist[t] == INF) <span class=\"keyword\">return</span> INF;  <span class=\"comment\">// 注意此处，这就代表这个t点是不连通的</span></span><br><span class=\"line\">        st[t] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        res += dist[t];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">            dist[j] = <span class=\"built_in\">min</span>(dist[j], g[t][j]);  <span class=\"comment\">// 更新j到集合的距离，因为t已经在集合中，</span></span><br><span class=\"line\">                                            <span class=\"comment\">// 只需要比较j到集合中的距离与j到t的距离取最小值。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> g);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        g[a][b] = g[b][a] = <span class=\"built_in\">min</span>(g[a][b], c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"built_in\">prim</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans == INF) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>kruskal算法思想</strong>：将所有边按照边权按照从小到大排序，然后遍历所有的边，如果当前边的两个点不在同一个集合中，就将它们加入同一个集合中（使用<strong>并查集</strong>），最后判断加入的边是否为$n$，进行判断是否为连通图。时间复杂度瓶颈在排序上故为$O(mlog_2m)$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312182143909.jpg\" alt=\"\"></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">510</span>, M = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> p[N];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"type\">const</span> Edge &amp;t) <span class=\"type\">const</span>  <span class=\"comment\">// 重载比较运算符</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c &lt; t.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;e[M];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p[x] != x) p[x] = <span class=\"built_in\">find</span>(p[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        e[i] = &#123;a, b, c&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e, e + m);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) p[i] = i;  <span class=\"comment\">// 初始化并查集。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = n;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = <span class=\"built_in\">find</span>(e[i].a), b = <span class=\"built_in\">find</span>(e[i].b);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a != b) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p[a] = b;</span><br><span class=\"line\">            cnt -- ;</span><br><span class=\"line\">            res += e[i].c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt &gt; <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;impossible&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, res);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"最短路算法\">最短路算法</h5>\n<p>给定一个 $n$ 个点 $m$ 条边的有向图，图中可能存在重边和自环，所有边权均为正值。</p>\n<p>请你求出 $1$ 号点到 $n$ 号点的最短距离，如果无法从 $1$ 号点走到 $n$ 号点，则输出 $-1$。</p>\n<p><strong>输入格式</strong></p>\n<p>第一行包含整数 $n$ 和 $m$。</p>\n<p>接下来 $m$ 行每行包含三个整数 $x,y,z$，表示存在一条从点 $x$ 到点 $y$ 的有向边，边长为 $z$。</p>\n<p><strong>输出格式</strong></p>\n<p>输出一个整数，表示 $1$ 号点到 $n$ 号点的最短距离。</p>\n<p>如果路径不存在，则输出 $-1$。</p>\n<p><strong>数据范围</strong></p>\n<p>$1 \\le n \\le 500$,<br>\n$1 \\le m \\le 10^5$,<br>\n图中涉及边长均不超过10000。</p>\n<p><strong>输入样例：</strong></p>\n<pre><code>3 3\n1 2 2\n2 3 1\n1 3 4\n</code></pre>\n<p><strong>输出样例：</strong></p>\n<pre><code>3\n</code></pre>\n<p>参考文献： <a href=\"https://www.acwing.com/blog/content/140/\">最短路笔记</a><br>\n<img src=\"https://cdn.acwing.com/media/article/image/2022/02/20/53050_5d83e17292-%E6%9C%80%E7%9F%AD%E8%B7%AF.png\" alt=\"最短路.png\"><br>\n<strong>最短路中各个算法的原理</strong></p>\n<p><strong>①dijkstra</strong><br>\n时间复杂度$O(n^2)$<br>\ndijkstra是根据每次找出距离起点最近的一个点，然后用着一个点来更新其他距离，每个点只会被更新一次，用<code>st[]</code>进行判重<br>\n<strong>可以求有环的图</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312182143473.jpg\" alt=\"\"></p>\n<p><strong>②dijkstra堆优化</strong><br>\n时间复杂度$O(mlogn)$<br>\n堆优化的dijkstra就是用c++自带的priority_queue优先队列对每个点<code>i</code>以及起点到<code>i</code>的距离<code>dist</code>进行储存，并按照距离<code>dist</code>进行排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue定义: priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br></pre></td></tr></table></figure>\n<p><strong>③bellman_ford</strong><br>\n时间复杂度$O(nm)$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过循环点的个数n，边的个数m，来更新所有点到起点的距离</span><br><span class=\"line\">两重循环 for n</span><br><span class=\"line\">            for 所有边 a, b, w</span><br><span class=\"line\">                dist[b] = min(dist[b], dist[a] + w)</span><br></pre></td></tr></table></figure>\n<p>bellman_ford可以用于求有边数限制的最短路<br>\n<a href=\"https://www.acwing.com/problem/content/855/\">AcWing 853.有边数限制的最短路</a></p>\n<p><strong>④spfa</strong><br>\n时间复杂度平均$O(km)$线性，最坏情况下$O(nm)$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spfa就是对bellman_ford做了一个优化</span><br><span class=\"line\">因为dist[b] = min(dist[b], dist[a] + w)</span><br><span class=\"line\">a -&gt; b</span><br><span class=\"line\">如果dist[b]要变小，那么只有dist[a]变小了才会变小。</span><br><span class=\"line\">那么做法就是：</span><br><span class=\"line\">1.维护一个队列，先把起点放进去。</span><br><span class=\"line\">2.遍历队列，每次出队的时候标记当前的点是已经被遍历过的</span><br><span class=\"line\">3.用当前的点更新其他点的距离，更新完毕后，判断当点的是否被标记过，如果没有标记过，将这个的点放入队列中，因为此时当前点一定是距离起点最小的点，满足spfa优化条件</span><br><span class=\"line\">4.遍历完所有点后判断dist[end] &gt; INF?  因为spfa可以用来求负权边的最短路</span><br></pre></td></tr></table></figure>\n<p><strong>⑤floyd</strong><br>\n时间复杂度$O(n^3)$</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int k = 1; k &lt;= n; k ++ )   //  将其分为[i, k]和[k, j]两段，基于动态规划</span><br><span class=\"line\">        for(int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\">            for(int j = 1; j &lt;= n; j ++ )</span><br><span class=\"line\">                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong></p>\n<p><strong>稀疏图和稠密图</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 稠密图          稀疏图</span><br><span class=\"line\">边与点的个数      m≈n²           m≈n</span><br><span class=\"line\">存储方式         邻接表          邻接矩阵 </span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>朴素版dijkstra</strong>：$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">510</span>, M = <span class=\"number\">100010</span>, INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> g[N][N], dist[N];</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    dist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[t] &gt; dist[j]))</span><br><span class=\"line\">                t = j;</span><br><span class=\"line\">        </span><br><span class=\"line\">        st[t] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">            dist[j] = <span class=\"built_in\">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(g, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> g);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        g[a][b] = <span class=\"built_in\">min</span>(g[a][b], c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res == INF) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, res);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$floyd$<strong>算法</strong>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">310</span>, INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\"><span class=\"type\">int</span> d[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k ++ )</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j ++ )</span><br><span class=\"line\">                d[i][j] = <span class=\"built_in\">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> d);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) d[i][i] = <span class=\"number\">0</span>;  <span class=\"comment\">// 自环设为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        d[a][b] = <span class=\"built_in\">min</span>(d[a][b], c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">floyd</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = d[a][b];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t &gt; INF / <span class=\"number\">2</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;impossible&quot;</span>);  <span class=\"comment\">// 注意此处只需要大于1/2即可，因为边权可能为负数，会影响INF的值</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout &lt;&lt; t &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"拓扑排序\">拓扑排序</h5>\n<p>给定一个 $n$ 个点 $m$ 条边的有向图，点的编号是 $1$ 到 $n$，图中可能存在重边和自环。</p>\n<p>请输出任意一个该有向图的拓扑序列，如果拓扑序列不存在，则输出 $-1$。</p>\n<p>若一个由图中所有点构成的序列 $A$ 满足：对于图中的每条边 $(x, y)$，$x$ 在 $A$ 中都出现在 $y$ 之前，则称 $A$ 是该图的一个拓扑序列。</p>\n<p><strong>输入格式</strong></p>\n<p>第一行包含两个整数 $n$ 和 $m$。</p>\n<p>接下来 $m$ 行，每行包含两个整数 $x$ 和 $y$，表示存在一条从点 $x$ 到点 $y$ 的有向边 $(x, y)$。</p>\n<p><strong>输出格式</strong></p>\n<p>共一行，如果存在拓扑序列，则输出任意一个合法的拓扑序列即可。</p>\n<p>否则输出 $-1$。</p>\n<p><strong>数据范围</strong></p>\n<p>$1 \\le n,m \\le 10^5$</p>\n<p><strong>输入样例：</strong></p>\n<pre><code>3 3\n1 2\n2 3\n1 3\n</code></pre>\n<p><strong>输出样例：</strong></p>\n<pre><code>1 2 3\n</code></pre>\n<p><strong>思想</strong>：将每个点的入度数记录下来，再将入度数为$0$的点入队，每次从队列中取出一个点，将它能够到达的所有点的入度数<code>--</code>，如果此时，入度数为$0$，则将它加入队列中。<br>\n最后判断是否所有点都入队了，也就是队的长度(队尾<code>tt</code>)是否等于点的个数<code>tt == n - 1</code>。如果是，队列的输出就是拓扑排序。否则就不是。</p>\n<p>$Code$：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    Node* next;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> _id): <span class=\"built_in\">id</span>(_id), <span class=\"built_in\">next</span>(<span class=\"literal\">NULL</span>) &#123;&#125;</span><br><span class=\"line\">&#125;*head[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> d[N], q[N];  <span class=\"comment\">// d:统计每个点的入度数，q数组模拟队列</span></span><br><span class=\"line\"><span class=\"comment\">// q队列中的元素就是拓扑排序的结果</span></span><br><span class=\"line\"><span class=\"type\">int</span> n, m, top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>  <span class=\"comment\">// a到b连一条边</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如何理解？看图</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(b);</span><br><span class=\"line\">    p-&gt;next = head[a];</span><br><span class=\"line\">    head[a] = p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">topsort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh = <span class=\"number\">0</span>, tt = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 将度数为0的点入队</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">            q[ ++ tt] = i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hh &lt;= tt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = q[hh ++ ];  <span class=\"comment\">// 取出对头</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p = head[t]; p != <span class=\"literal\">NULL</span>; p = p-&gt;next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            d[p-&gt;id] -- ;  <span class=\"comment\">// 减少它的一个入队数</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果判断减少后入队数为0就将它加入队列中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[p-&gt;id] == <span class=\"number\">0</span>) q[ ++ tt] = p-&gt;id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> tt == n - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        d[b] ++ ;  <span class=\"comment\">// 入队数加一</span></span><br><span class=\"line\">        <span class=\"built_in\">add</span>(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 有可能存在没有拓扑排序的情况，也就是出现环的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个时候只需要判断每个点是否入队即可，因为只有入度为0的点才会被加入队列中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">topsort</span>()) cout &lt;&lt; <span class=\"string\">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ )</span><br><span class=\"line\">            cout &lt;&lt; q[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>拓扑排序：每次将<strong>入度为零</strong>的点取出，用于更新其他点的信息。<br>\n逆拓扑排序：每次将<strong>出度为零</strong>的点取出，用于更新其他点的信息。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308281712229.jpg\" alt=\"\"></p>\n<h5 id=\"关键路径\">关键路径</h5>\n<p><strong>AOV（Activity On Vertex Network）网</strong><br>\n在一个表示工程的有向图中，用<strong>顶点</strong>表示活动，用弧表示活动之间的优先关系。这样的有向图为顶点表示活动的网，我们称为AOV网</p>\n<ol>\n<li><strong>无边权值</strong>的有向图</li>\n<li><strong>定义</strong>：在现代化管理中，人们常用有向图来描述和分析一项工程的计划和实施过程，一个工程常被分为多个小的子工程，这些子工程被称为活动（Activity)，在有向图中若<strong>以顶点表示活动，有向边表示活动之间的先后关系</strong>，这样的图简称为<strong>AOV网</strong>。</li>\n</ol>\n<p><strong>AOE（Activity On Edge Network）网</strong></p>\n<ol>\n<li><strong>有边权值</strong>的有向图</li>\n<li><strong>定义</strong>：在现代化管理中，人们常用有向图来描述和分析一项工程的计划和实施过程，一个工程常被分为多个小的子工程，这些子工程被称为活动（Activity)，在带权有向图中若<strong>以顶点表示事件</strong>，有向边表示活动，<strong>边上的权值</strong>表示该活动持续的时间，这样的图简称为<strong>AOE网</strong>。</li>\n</ol>\n<p><strong>几个定义</strong>：</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212212119088.jpg\" alt=\"\"></p>\n<ol>\n<li><strong>事件(点)最早发生时间ve()</strong>：决定了所有从$V_k$开始的活动能够开工的最早时间，要求在这个活动之前的的所有活动都已经完成了。比如说$V_3=4$，因为要等待前面的<code>打鸡蛋</code>，<code>洗番茄</code>，<code>切番茄</code>都完成以后。（就是取到达这个事件的最大值）<br>\n<strong>求法</strong>：<strong>找到到当前点最大的从起始点出发的路径权值和。</strong></li>\n<li><strong>活动(边)最早发生时间e()</strong>：等于当前边指向结点的最早发生时间。比如说<code>切番茄</code>这个活动的最早开始时间就是$V_2$可以切了这个事件结束后，因此它的$e_3=1$</li>\n<li><strong>事件(点)最晚发生时间vl()</strong>：它是指在不推迟整个工程完成的前提下，该时间最迟必须发生的时间。比如说，结束的时间为$6$，因此到<code>可以炒了</code>这个事件就必须在$4$这个时刻开始，而它前面的<code>可以切了</code>这个事件就必须在$1$这个时刻开始。（就是取最小值）</li>\n<li><strong>活动(边)最晚发生时间l()</strong>：活动弧的终点所表示时间的最迟发生时间与该活动所需时间之差。比如说，<code>打鸡蛋</code>这个活动要花费两分钟，而<code>可以炒了</code>这个事件的最早发生时间为四分钟，因此<code>打鸡蛋</code>这个活动最晚可以在两分钟后开始（当然打鸡蛋也可以从$1$或$0$分钟开始，但是不是最晚发生时间）</li>\n<li>活动(边)$a_i$的<strong>时间余量</strong>$d(i)=l(i)-e(i)$，表示在不增加完成整个工程所需总时间的情况下，活动$a_i$可以拖延的时间。比如说<code>打鸡蛋</code>可以在$[0\\sim 2]$之间开始。因此它的时间余量$d(3)=2$。<br>\n若一个活动的时间余量为零，则说明该活动必须要如期完成，$d(i)=0$即$l(i)=e(i)$的活动是$a_i$的<strong>关键路径</strong>。<strong>有关键活动组成的路径就是关键路径</strong>。</li>\n<li>正常情况下（网中无回路），AOE网中只有一个入度为0的顶点，称之为<strong>源点</strong>；有一个出度为0 的顶点，称之为<strong>终点</strong>。</li>\n<li><strong>关键路径</strong>：从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为<strong>关键路径</strong>，而这条关键路径上的活动称为<strong>关键活动</strong>。<br>\n【<strong>注</strong>】<strong>关键路径是最长的路径</strong></li>\n<li><strong>关键活动</strong>：完成整个工程的最短时间就是关键路径的长度，若关键活动不能按时完成，则整个工程的完成时间就会延长。</li>\n<li>只有关键路径上的活动时间同时减少，才能缩短工期。</li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202311142210981.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"八、查找\">八、查找</h3>\n<h4 id=\"考纲要求-6\">考纲要求</h4>\n<blockquote>\n<p>1．掌握静态查找表的几种查找方法。<br>\n2．掌握哈希表的构造方法及其冲突处理方法。</p>\n</blockquote>\n<h4 id=\"考点总结-5\">考点总结</h4>\n<h5 id=\"查找的基本概念\">查找的基本概念</h5>\n<p>(1) <strong>平均查找长度</strong> $ASL$ = 每个元素 查找概率  $\\times$找到第$i$个元素需要进行的<strong>比较次数</strong> 的<strong>和</strong>。<br>\n平均查找长度$ASL$和数据元素个数无关的查找方法所使用的数据结构是<strong>散列表</strong>。<br>\n(2) <strong>决策树(判定树)</strong>：类似于如下图的一棵树。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211021952635.jpg\" alt=\"决策树\"></p>\n<h5 id=\"顺序查找法\">顺序查找法</h5>\n<p>(1) <strong>一般线性表的顺序查找</strong></p>\n<ol>\n<li>若每个元素查找概率相同，则 $ASL$(成功) $= \\frac{(1 + 2 + … + n)}{n} = \\frac{(n + 1)}{2}$</li>\n<li>$ASL$(失败)$ = n$或$n+1$，取决于代码写法。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 若设置哨兵，则ASL失败是n+1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>  <span class=\"title\">Search_Seq</span><span class=\"params\">(SSTable ST, KeyType key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ST.R[<span class=\"number\">0</span>].key = key;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = ST.length; ST.R[i].key != key; i -- )  <span class=\"comment\">// 由于这里要多比较一次，故为n+1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 若不设置哨兵，则ASL失败是n</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Search_Seq</span><span class=\"params\">(SSTable ST, KeyType key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = ST.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -- )</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ST.R[i] == key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>顺序查找算法的<strong>平均时间复杂度</strong>为：$O(n)$</li>\n</ol>\n<p>(2) <strong>有序表的顺序查找</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308301443840.jpg\" alt=\"\"></p>\n<ol>\n<li>若每个元素查找概率相同，则 $ASL$(成功) $= \\frac{(1 + 2 + … + n)}{n} = \\frac{(n + 1)}{2}$</li>\n<li>$ASL$(失败) $= \\frac{(1 + 2 + … + n + n)}{(n + 1)} = \\frac{n}{2} + \\frac{n}{(n + 1)}$</li>\n</ol>\n<p>(3)<strong>折半查找法</strong></p>\n<ol>\n<li>$ASL = log_2(n + 1) - 1$（记住就行了）</li>\n<li>折半查找对应的判定树是一棵<strong>平衡二叉树、二叉排序树</strong>，其中序序列是一个有序序列。</li>\n<li>有$n$个记录的顺序表中进行折半查找，<strong>最大</strong>比较次数为$\\lceil \\log_{2}(n) \\rceil$，理解如下图(一共$11$个元素)。</li>\n<li>有$n$个记录的顺序表中进行折半查找，<strong>失败的最小</strong>比较次数为$\\lfloor \\log_{2}(n+1) \\rfloor$，理解如下图(一共$11$个元素)。<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308301430032.jpg\" alt=\"\"></li>\n<li>$Code$</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//折半查找算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Search_Bin</span><span class=\"params\">(SSTable *ST, keyType key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> low = <span class=\"number\">1</span>;　　<span class=\"comment\">//初始状态 low 指针指向第一个关键字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> high = ST-&gt;length;　　<span class=\"comment\">//high 指向最后一个关键字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) </span><br><span class=\"line\">　　&#123;</span><br><span class=\"line\">        mid = (low + high) / <span class=\"number\">2</span>;　　<span class=\"comment\">// int 本身为整形，所以，mid 每次为取整的整数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ST-&gt;elem[mid].key == key)　　<span class=\"comment\">// 如果 mid 指向的同要查找的相等，返回 mid 所指向的位置</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">　　　　 <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ST-&gt;elem[mid].key &gt; key)　　<span class=\"comment\">// 如果mid指向的关键字较大，则更新 high 指针的位置</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 反之，则更新 low 指针的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">　　    &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>折半查找的决策树<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308301430032.jpg\" alt=\"\"></li>\n<li>具有$12$个关键字的有序表中，对每个关键字的查找概率相同，折半查找算法查找<strong>成功的平均查找长度为</strong>（），折半查找查找<strong>失败的平均查找长度</strong>为（）<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308301450258.jpg\" alt=\"\"><br>\n【<strong>注</strong>】查找<strong>成功</strong>分母是元素个数，查找<strong>失败</strong>分母是元素个数加一</li>\n</ol>\n<p>(4)<strong>分块查找法</strong><br>\n分块查找既能<strong>较快</strong>的查找，又能适应<strong>动态变化</strong>。<br>\n设共$n$个元素，每块$s$个元素，共$b = \\frac{n}{s}$块。<strong>块内无序，块间有序</strong>。</p>\n<ol>\n<li>顺序查找平均查找长度：$ASL$(成功) $=\\frac{\\frac{n}{s}+1}{2}+\\frac{s+1}{2}= \\frac{s^2 + 2s + n}{2s}$，$s = \\sqrt{n}$时取最小值</li>\n<li>二分查找平均查找长度：$ASL$(成功)$=\\lceil log_{2}(\\frac{n}{s} + 1)\\rceil + \\frac{s + 1}{2}$</li>\n<li>对于长度为$n$的表，如果采用分块查找，<strong>每块的最佳长度</strong>应该是$\\sqrt{n}$</li>\n</ol>\n<h5 id=\"B-B-树\">B/B+树</h5>\n<p><strong>B树及其基本操作、B+树及其基本概念</strong></p>\n<ol>\n<li><strong>B树</strong><br>\n[1] $m$阶$B$树，每个节点最多有$m$个<strong>孩子</strong>。<br>\n[2] 每个节点最多有$m-1$个<strong>关键字</strong>（可以存有的键值对）。<br>\n[3] 根节点最少可以只有$1$个关键字。<br>\n[4] 非根节点至少有$\\frac{m}{2}$或者$\\lceil \\frac{m}{2} \\rceil - 1$个关键字。<br>\n[5] 每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。<br>\n[6] 所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。<br>\n[7] 每个节点都存有索引和数据，也就是对应的$key$和$value$。<br>\n[8] 所以，根节点的关键字数量范围：$1 \\le k<br>\n\\le m-1$，非根节点的关键字数量范围：$\\frac{m}{2} \\le k \\le m-1$。<br>\n[9] $n$阶$m$个关键字的B树<strong>高度范围</strong>：$\\displaystyle\\log_{n}(m+1)\\le h\\le \\log_{\\lceil \\frac{n}{2}\\rceil }(\\frac{m+1}{2})+1$</li>\n<li><strong>B+树</strong><br>\n[1] B+跟B树不同B+树的非叶子节点不保存关键字记录的指针，只进行数据索引，这样使得B+树每个非叶子节点所能保存的关键字大大增加；<br>\n[2] B+树叶子节点保存了父节点的所有关键字记录的指针，所有数据地址必须要到叶子节点才能获取到。所以每次数据查询的次数都一样；<br>\n[3] B+树叶子节点的关键字从小到大有序排列，左边结尾数据都会保存右边节点开始数据的指针。</li>\n<li><strong>B/B+树的添加和删除</strong>：参考链接：<a href=\"https://www.cnblogs.com/nullzx/p/8729425.html\">https://www.cnblogs.com/nullzx/p/8729425.html</a></li>\n</ol>\n<p><strong>B树\\B+树的比较</strong></p>\n<ol>\n<li>B树的结点中$n$个关键字对应$n+1$棵子树<br>\nB+树的结点中$n$个关键字对应$n$棵子树</li>\n<li>$m$<strong>阶B树</strong><br>\n根节点的关键字数$n\\in [1,m-1]$<br>\n其他结点的关键字数$n\\in [\\lceil m/2\\rceil-1,m-1]$<br>\n最多$m$个分支<br>\n$m$<strong>阶B+树</strong><br>\n根节点的关键字数$n\\in [1,m]$<br>\n其他结点的关键字数$n\\in [\\lceil m/2\\rceil,m]$</li>\n<li>在B树中，各结点中包含的关键字是不重复的<br>\n在B+树中，叶结点包括全部关键字，非叶结点中出现过的关键字也会出现在叶结点中</li>\n<li>B树的结点中都包含了关键字对应的记录的存储地址<br>\n在B+树中，叶结点包含信息，所有非叶结点仅起索引作用，不含该关键字对应记录的存储地址</li>\n<li>B树仅支持<strong>随机查找</strong><br>\nB+树支持<strong>随机查找</strong>和<strong>顺序查找</strong></li>\n</ol>\n<h5 id=\"散列（Hash）表、字符串模式匹配（KMP）\">散列（Hash）表、字符串模式匹配（KMP）</h5>\n<p><strong>散列（Hash）表</strong></p>\n<ol>\n<li>\n<p>负载因子$=\\frac{已有元素数}{数组长度}$，负载因子<strong>越低</strong>，效率<strong>越高</strong>。</p>\n</li>\n<li>\n<p><strong>离散函数</strong>（<strong>哈希函数</strong>）构造方法<br>\n[1] <strong>数字分析法(数字选择法)</strong>：提前知道数据，选取数据中几乎随机的值进行构造。比如<strong>手机号</strong>前三位是电信商的，中间四位是分地区的，<strong>最后四位是随机的</strong>，如果给定一串手机号码，可以<strong>采取</strong>使用手机号码<strong>最后四位</strong>进行<strong>构造离散函数</strong>。<br>\n[2] <strong>平方取中法</strong>：将编码平方后取中间一部分。如：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">内部编码</th>\n<th style=\"text-align:center\">内部编码的平方</th>\n<th style=\"text-align:center\">散列地址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">09040101</td>\n<td style=\"text-align:center\">081723<strong>426</strong>090201</td>\n<td style=\"text-align:center\">426</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">09040202</td>\n<td style=\"text-align:center\">081725<strong>252</strong>200804</td>\n<td style=\"text-align:center\">252</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24090403</td>\n<td style=\"text-align:center\">580347<strong>516</strong>702409</td>\n<td style=\"text-align:center\">516</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25090404</td>\n<td style=\"text-align:center\">629538<strong>372</strong>883216</td>\n<td style=\"text-align:center\">372</td>\n</tr>\n</tbody>\n</table>\n<p>[3] <strong>折叠法</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041506080.jpg\" alt=\"\"><br>\n折叠法<strong>适用</strong>的情况：散列地址的位数较少，而关键字的位数较多，且难于直接从关键字中找到取值较分散的几位。<br>\n[4] <strong>处留余数法（最常用）</strong>：假设散列表表长为$m$，选择一个不大于$m$的<strong>最大质数</strong>$p$,用$p$去除关键字，除后所得余数为散列地址，即$$H(key)=key% p$$</p>\n</li>\n<li>\n<p>解决冲突的方式<br>\n[1] <strong>开散列方法（拉链法）</strong>：如果一个位置有多个元素，开一个链表，将所有元素都存储下来。<br>\n[2] <strong>闭散列方法（开放寻址法）</strong>：$H_i=(H(key)+d_i)%m$，其中$H(key)$为散列函数，$i=0,1,2,…,k(k\\le m-1)$，$m$表示散列表表长，$d_i$为<strong>增量序列</strong>。下面介绍几种<strong>增量的取法</strong>。</p>\n<ol>\n<li><strong>线性探测法</strong>：当发生冲突的时候，看下一个位置是否有冲突，如果走到最后一个位置还是有冲突时，从开头继续判断。</li>\n<li><strong>平方探测法（二次探查法）</strong>：$d_i=0^2,1^2,-1^2,2^2,-2^2,…$就这样加上$d_i$进行判断是否位置上发生冲突。缺点是不能探测到散列表上个所有单元，但是至少能探测到一半单元。</li>\n<li><strong>双散列法</strong>：使用两个哈希函数。</li>\n<li><strong>伪随机序列法</strong>：当$d_i=$伪随机数序列时，称为伪随机序列法。</li>\n</ol>\n<p>[3] 代码详见$AcWing.840$模拟散列表: <a href=\"https://www.jasonqian.com//2022/11/05/AcWing-840-%E6%A8%A1%E6%8B%9F%E6%95%A3%E5%88%97%E8%A1%A8/\">https://www.jasonqian.com//2022/11/05/AcWing-840-模拟散列表/</a></p>\n<p>【<strong>注</strong>】：采用<strong>开放定址法</strong>处理散列表的冲突时，其平均查找长度<strong>高于链接法</strong>处理冲突。</p>\n</li>\n<li>\n<p>聚集/二级聚集<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041622706.jpg\" alt=\"\"></p>\n<ol>\n<li>线性探查法 $d(i) = (d(0) + i * c) % M$。易产生<strong>聚集</strong>问题。</li>\n<li>二次探查法。易产生<strong>二级聚集</strong>问题。二次聚集：</li>\n<li>随机探查法。易产生<strong>二级聚集</strong>问题。</li>\n<li>双散列探查法</li>\n</ol>\n</li>\n<li>\n<p><strong>哈希表的平均查找长度不是表长 (节点个数)n的函数，而是哈希表装填因子alpha的函数，与节点个数无关</strong>。</p>\n</li>\n<li>\n<p><strong>装填因子</strong>：$\\displaystyle \\alpha=\\frac{n}{m}$ 其中$n$为关键字个数，$m$为表长。<br>\n平均查找长度与装填因子$\\alpha$直接相关。<br>\n加载因子是表示Hsah表中元素的<strong>填满的程度</strong>。若：<strong>加载因子越大</strong>，填满的元素越多，好处是空间利用率高了，但冲突的机会加大了。反之，<strong>加载因子越小</strong>，填满的元素越少，好处是：冲突的机会减小了，但空间浪费多了。</p>\n</li>\n<li>\n<p><strong>同义词</strong>：产生冲突现象的两个关键字。</p>\n</li>\n</ol>\n<p>【<strong>例题</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041654814.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309041654702.jpg\" alt=\"\"></p>\n<p><strong>KMP</strong></p>\n<p>匹配串长度$n$，模式串长度$m$<br>\n<strong>时间复杂度</strong>：预处理部分$O(m)$，匹配过程$O(n)$，总的时间复杂度$O(n+m)$</p>\n<ol>\n<li>\n<p><code>next[i]</code>：前$i$个字母构成的字符串中（下标从$0$开始，也可能从$1$开始），<strong>最长的</strong>与<strong>前缀相等</strong>的<strong>后缀长度</strong>（非平凡，就是前缀长度与后缀长度都不能等于字符串长度）。</p>\n</li>\n<li>\n<p>定义<br>\n<strong>字符串的前缀</strong>：符号串左部的任意子串（或者说是字符串的任意首部）<br>\n<strong>字符串的后缀</strong>：符号串右部的任意子串（或者说是字符串的任意尾部）<br>\n<strong>举例</strong>：比如说有一个长度为5字符串 x = <code>ababc</code>，其中前缀有 <code>ε</code>（空串），<code>a</code>，<code>ab</code>，<code>aba</code>，<code>abab</code>，<code>ababc</code>；后缀有 <code>ε</code>（空串），<code>c</code>，<code>bc</code>，<code>abc</code>，<code>babc</code>，<code>ababc</code>。</p>\n</li>\n<li>\n<p><strong>应用</strong><br>\n手求<code>next</code>数组时：恒有<code>next[1] = 0</code>, <code>next[2] = 1</code><br>\n比如我们的Q串为：<code>abaabc</code></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308221605813.png\" alt=\"\"></p>\n</li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212092306085.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308221614536.png\" alt=\"\"></p>\n<p>$Q:ababaa$</p>\n<ol>\n<li>当遍历到$Q[1]$时，规定<code>nextval[1] = 0</code></li>\n<li>当遍历到$Q[2]$时，由于<code>next[2] = 1</code>，$Q[2]=b \\not= Q[1]=a$，故<code>nextval[2] = next[2] = 1</code></li>\n<li>当遍历到$Q[3]$时，由于<code>next[3] = 1</code>，$Q[3]=a=Q[1]=a$，$Q[1]$跳转到$0$，故<code>nextval[3] = 0</code></li>\n<li>当遍历到$Q[4]$时，由于<code>next[4] = 2</code>，$Q[4]=b =Q[2]=b$，$Q[2]$跳转到$Q[1]$，$Q[4]=b \\not= Q[1]=a$，故<code>nextval[4] = 1</code></li>\n<li>当遍历到$Q[5]$时，由于<code>next[5] = 3</code>，$Q[5]=a=Q[3]=a$，$Q[3]$跳转到$Q[1]$，$Q[5]=a=Q[1]=a$，$Q[1]$跳转到$0$，故<code>nextval[5] = 0</code></li>\n<li>遍历到$Q[6]$时，由于<code>next[6] = 4</code>，$Q[6]=a\\not= Q[4]=b$，故<code>nextval[6] = next[6] = 4</code></li>\n</ol>\n<p>故<code>nextval[] = &#123;0, 1, 0, 1, 0, 4&#125;</code></p>\n<p>参考「<strong>辰佬</strong>」的文章<br>\n原文链接：<a href=\"https://blog.csdn.net/qq_52156445/article/details/130274070\">https://blog.csdn.net/qq_52156445/article/details/130274070</a></p>\n<hr>\n<h3 id=\"九、内部排序和外部排序\">九、内部排序和外部排序</h3>\n<h4 id=\"考纲要求-7\">考纲要求</h4>\n<blockquote>\n<p>1． 掌握内部排序和外部排序的概念。</p>\n<p>2． 熟悉插入排序、选择排序及常用的几种排序方法。</p>\n<p>能分析几种常用的排序算法的时间复杂度与空间复杂度。</p>\n</blockquote>\n<h4 id=\"考点分析-2\">考点分析</h4>\n<h5 id=\"排序的基本概念\">排序的基本概念</h5>\n<p><strong>内排序和外排序</strong></p>\n<p><strong>内排序</strong>：数据量不是很大，可以存储在内存当中，就是内排序。</p>\n<p><strong>外排序</strong>：数据量很大，内存存储不下来，需要借助于外存（硬盘）来进行存储，就是外排序。</p>\n<p><strong>运行效率</strong>：①时间复杂度，②空间复杂度，③稳定性。</p>\n<p>其中时间复杂度包括：最好情况，平均情况，最坏情况。</p>\n<p>时间复杂度包括：①比较次数，②移动次数。</p>\n<p><strong>算法的稳定性</strong></p>\n<p>排序过程不改变<strong>关键字相同记录</strong>之间的相对次序，则称该排序是<strong>稳定</strong>的。</p>\n<p><strong>定义</strong>：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，A1=A2，且A1在A2之前，而在排序后的序列中，A1仍在A2之前，则称这种排序算法是<strong>稳定</strong>的；否则称为<strong>不稳定</strong>的</p>\n<p>一般情况下基于<strong>相邻</strong>关键字比较的排序算法是稳定的。</p>\n<p>假设如下情况：</p>\n<p>存在数组：$2,1_1,1_2,3$，排序后：$1_1,1_2,2,3$，则称为稳定的。如果排序后：$1_2,1_1,2,3$则称不稳定的。</p>\n<h5 id=\"排序的一些性质\">排序的一些性质</h5>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309071525882.jpg\" alt=\"\"></p>\n<ol>\n<li><strong>茶(插入)几(基数)稳定冒(冒泡)鬼(归并)</strong></li>\n</ol>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212142146404.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212142146531.jpg\" alt=\"\"></p>\n<ol start=\"2\">\n<li>对于任意序列进行<strong>基于比较</strong>的排序，求至少的比较次数应考虑最坏情况。对任意$n$个<strong>关键字排序</strong>的比较次数至少为$\\displaystyle\\lceil\\log_{2}(n!) \\rceil$</li>\n</ol>\n<blockquote>\n<p><strong>各种排序趟数的结果</strong></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202312072203373.jpg\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"直接插入排序\">直接插入排序</h5>\n<p><strong>算法思路</strong>：将待排序的序列分成两个序列，使得前面一个<strong>有序</strong>，每一次从后面一个序列中拿第一个元素$t$，在第前面的元素中从大到小与$t$进行比较，每次比较时，如果当前元素$&gt;t$，就将当前元素的值赋给它之后的元素，直到当前元素$&lt;t$，最后将$t$的值赋值给当前元素。（从大到小的原因是为了移动排序后的元素方便，更高效）。</p>\n<p>【<strong>注</strong>】直接插入排序前面的序列<strong>一定是有序的</strong></p>\n<p><strong>时间复杂度</strong><br>\n[1] 最好情况：$O(n-1)=O(n)$<br>\n[2] 平均情况：$O(n^2)$<br>\n[3] 最坏情况：$O(\\frac{n(n-1)}{2})=O(n^2)$</p>\n<p><strong>辅助空间复杂度</strong>：$O(1)$</p>\n<p><strong>稳定</strong></p>\n<p>【<strong>例题</strong>】<br>\n若序列的原始状态为$(1,2,3,4,5,10,6,7,8,9)$，要使得排序过程中元素比较次数最少，应采用（A）<br>\nA. 插入排序<br>\nB. 选择排序<br>\nC. 希尔排序<br>\nD. 冒泡排序</p>\n<p><strong>解析</strong>：插入排序和序列初态无关，直接排除。初始序列基本有序时，插入排序比较次数较少。本题中插入排序仅需要比较<code>n - 1 + 4</code>次，而希尔、冒泡远大于</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组从1开始，0位置作为哨兵单元</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i - <span class=\"number\">1</span>] &gt; a[i])  <span class=\"comment\">// 前一个值a[i - 1]比当前值a[i]大  eg. _ 1 2 3 6 4← 就要进行插入</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">0</span>] = a[i];  <span class=\"comment\">// 将当前值存储在哨兵位置</span></span><br><span class=\"line\">            a[i] = a[i - <span class=\"number\">1</span>];  <span class=\"comment\">// 将比当前值大的元素移动到当前值  eg. 4 1 2 3 _ 6</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 开始查找当前值所在的位置</span></span><br><span class=\"line\">            <span class=\"type\">int</span> j = i - <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; a[<span class=\"number\">0</span>] &lt; a[j]; j -- )  <span class=\"comment\">// 如果a[0]哨兵值小于遍历的值，就继续往后查找，找到第一个大于或等于的下标</span></span><br><span class=\"line\">                a[j + <span class=\"number\">1</span>] = a[j];  <span class=\"comment\">// 开始移动</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 当上面for循环结束后，a[j + 1]就是需要插入的位置</span></span><br><span class=\"line\">            a[j + <span class=\"number\">1</span>] = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309221524591.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311942116.gif\" alt=\"\"></p>\n<h5 id=\"折半插入排序\">折半插入排序</h5>\n<p><strong>算法思路</strong>：对于直接插入排序，计算每一次插入的位置可以进行优化，因为前面<strong>序列是有序的</strong>，因此可以使用<strong>二分</strong>来确定需要插入的位置在哪。优化比较次数，不能优化移动次数，因此不会对时间复杂度产生重大影响，头头在移动次数。</p>\n<p><strong>时间复杂度</strong><br>\n​\t\t[1] 最好情况：$O(n)$<br>\n​\t\t[2] 平均情况：$O(n^2)$<br>\n​\t\t[3] 最坏情况：$O(n^2)$</p>\n<p><strong>辅助空间复杂度</strong>：$O(1)$</p>\n<p><strong>稳定</strong></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组从1开始，0位置作为哨兵单元</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">binary_insert_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt;= r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[<span class=\"number\">0</span>] &lt; a[mid]) r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;  <span class=\"comment\">// 此时l 不一定等于 r，记住要用r，r的位置就是a[0] &gt; a[r]，应该将a[0]插到a[r + 1]上</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= r + <span class=\"number\">1</span>; j -- ) a[j + <span class=\"number\">1</span>] = a[j];</span><br><span class=\"line\">        a[r + <span class=\"number\">1</span>] = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 7 6 1 4 3 5 </span><br><span class=\"line\">-</span><br><span class=\"line\">2 6 7 1 4 3 5 </span><br><span class=\"line\">1 2 6 7 4 3 5 </span><br><span class=\"line\">1 2 4 6 7 3 5 </span><br><span class=\"line\">1 2 3 4 6 7 5 </span><br><span class=\"line\">1 2 3 4 5 6 7 </span><br><span class=\"line\">1 2 3 4 5 6 7 </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309221554390.jpg\" alt=\"\"></p>\n<h5 id=\"冒泡排序（bubble-sort）\">冒泡排序（bubble sort）</h5>\n<p><strong>算法思想</strong>：一共比较$n-1$次，每次比较区间为$[0,n-1]$，$[1,n-1]$，…，$[n-2,n-1]$。每次比较时相邻两个元素，<strong>从后往前</strong>遍历或者<strong>从前往后</strong>遍历，相邻的两个数如果不满足要求，就进行交换。<br>\n下面代码是从前往后。</p>\n<p><strong>自底向上</strong>就是<strong>从后往前</strong>遍历。</p>\n<p>冒泡排序：<strong>排序趟数</strong>与<strong>序列的初始状态有关</strong>的排序。</p>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：$O(n)$<br>\nb. 平均情况：$O(n^2)$<br>\nc. 最坏情况：$O(n^2)$<br>\n<strong>空间复杂度</strong>：$O(1)$</p>\n<p><strong>稳定</strong></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// q[],下标从0开始</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bubble_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = n - <span class=\"number\">1</span>; j &gt; i; j -- )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q[j - <span class=\"number\">1</span>] &gt; q[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(q[j - <span class=\"number\">1</span>], q[j]);</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 这里有个小优化，如果在某一次排序中</span></span><br><span class=\"line\">        <span class=\"comment\">// 没有任何一对元素进行过交换，那么此时就是有序的状态了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311939394.gif\" alt=\"\"></p>\n<h5 id=\"简单-直接-选择排序\">简单(直接)选择排序</h5>\n<p><strong>算法思路</strong>：一开始往后面遍历，用$k$记录当前排序区间$[i,n-1]$中的最小元素的下标，遍历完区间$[i,n-1]$后，交换$q[i]、q[k]$的值，这样算一次排序。需要从第一个元素一直重复以上排序直到最后一个元素下标$-1$（因为遍历到最后一个元素前一个位置的时候一定是有序的）。</p>\n<p><strong>直接选择排序在每一趟都能选出一个元素放到其最终位置。</strong></p>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：$O(n^2)$<br>\nb. 平均情况：$O(n^2)$<br>\nc. 最坏情况：$O(n^2)$<br>\n<strong>空间复杂度</strong>：$O(1)$</p>\n<p><strong>不稳定</strong></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// q[],下标从0开始</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">select_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j ++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(q[j] &lt; q[k])</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(q[i], q[k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310311942584.gif\" alt=\"\"></p>\n<h5 id=\"希尔排序（shell-sort）\">希尔排序（shell sort）</h5>\n<p><strong>算法思想</strong>：首先定义一个<strong>公差</strong>将数组内的元素进行分组，对每组进行<strong>插入排序</strong>，紧接着<strong>减少公差</strong>，再对分好组的每一组元素进行插入排序。最后当公差为$1$的时候，此时再进行插入排序整个序列就是有序的了。<strong>最后一个增量必须是</strong>$1$。</p>\n<p>公差的减少是自定义的，比如说第一次是$5$，第二次可以是$2，3，4$都可以。</p>\n<p>比如公比$n=3$，对$a_1,a_2,a_3,a_4,a_5,a_6,a_7$进行一次希尔排序，就是分别对$(a_1,a_4,a_7)$、$(a_2,a_5)$、$(a_3,a_6)$进行插入排序。</p>\n<p><strong>时间复杂度</strong><br>\n$O(n^{\\frac{3}{2}})$<br>\n<strong>空间复杂度</strong><br>\n$O(1)$<br>\n<strong>不稳定</strong></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// q[],下标从0开始</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">shell_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时的公差定义为 n/2, n/4, n/8, ..., 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> d = n / <span class=\"number\">2</span>; d; d /= <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义每组的起点下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> start = <span class=\"number\">0</span>; start &lt; d; start ++ )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对于每一组，进行直接插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = start + d; i &lt; n; i += d)</span><br><span class=\"line\">            <span class=\"comment\">// start + d开始相当于从每一组的第二个元素开始</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> t = q[i], j = i;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(j &gt; start &amp;&amp; q[j - d] &gt; t)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    q[j] = q[j - d];</span><br><span class=\"line\">                    j -= d;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">                q[j] = t;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 7 6 1 4 3 5 </span><br><span class=\"line\">-</span><br><span class=\"line\">1 4 3 2 7 6 5  // 公差为7/2=3</span><br><span class=\"line\">1 2 3 4 5 6 7  // 公差为7/4=1</span><br><span class=\"line\">1 2 3 4 5 6 7  // 公差为7/8=0</span><br></pre></td></tr></table></figure>\n<h5 id=\"快速排序\">快速排序</h5>\n<p><strong>算法思想</strong>：<br>\n样例：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212042310164.jpg\" alt=\"\"><br>\n对$49,38,68,97,76,13,27$进行排序。<br>\n<strong>第一次排序过程</strong>：<br>\n选择$q[0]=49$为枢轴，缓冲值为$q[0]$。<br>\n<code>49 38 65 97 76 13 27</code><br>\n<strong>第一次交换</strong>：在区间$[0,6]$中从<strong>右往左</strong>$\\longleftarrow$进行遍历，找到第一个<strong>小于或者等于</strong>$49$的值，也就是$q[6]=27$，将$q[6]$的值赋给缓冲值$q[0]$，<code>q[0]=q[6]</code>，此时缓冲值变为$q[6]$。<br>\n<code>27 38 65 97 76 13 __</code><br>\n<strong>第二次交换</strong>：在区间$[0,5]$中从<strong>左往右</strong>$\\longrightarrow$进行遍历，找到第一个<strong>大于</strong>$49$的值，也就是$q[2]=65$，将$q[2]$的值赋给缓冲区$q[6]$，<code>q[6]=q[2]</code>，此时缓冲区变为$q[2]$。<br>\n<code>27 38 __ 97 76 13 65</code><br>\n<strong>第三次交换</strong>：在区间$[3,5]$中从<strong>右往左</strong>$\\longleftarrow$进行遍历，找到第一个<strong>小于或者等于</strong>$49$的值，也就是$q[5]=13$，将$q[5]$的值赋值给缓冲区$q[2]$，<code>q[2]=q[5]</code>，此时缓冲区变为$q[5]$。<br>\n<code>27 38 13 97 76 __ 65</code><br>\n<strong>第四次交换</strong>：在区间$[3,4]$中从<strong>左往右</strong>$\\longrightarrow$进行遍历，找到第一个<strong>大于</strong>$49$的值，也就是$q[3]=97$，将$q[3]$的值赋给缓冲区$q[5]$，<code>q[5]=q[3]</code>，此时缓冲区变为$q[3]$。<br>\n由于$l=r$，此时不在进行交换，而是将枢轴的值赋值给缓冲区，也就是<code>q[3]=49</code>。<br>\n<code>27 38 13 __ 76 97 65</code></p>\n<p>$\\Longrightarrow$ <code>27 38 13 49 76 97 65</code></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310031631645.jpg\" alt=\"\"></p>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：$O(nlogn)$<br>\nb. 平均情况：$O(nlogn)$<br>\nc. 最坏情况：$O(n^2)$<br>\n<strong>空间复杂度</strong>：平均：$O(logn)$，最坏情况下：$O(n)$</p>\n<p><strong>不稳定</strong></p>\n<p><strong>性质</strong>：</p>\n<ol>\n<li>在第$i$趟，至少有$i$个元素在正确的位置上（左边的元素都$\\le$它，右边的元素都$\\ge$它）。<strong>用于判断快速排序第几趟结果是否正确</strong>。</li>\n<li>在快速排序中，序列约接近<strong>无序</strong>，效率越<strong>高</strong>，若序列约接近<strong>有序</strong>，效率越<strong>低</strong>。</li>\n<li>当表本身已经有序或者逆序时，速度最慢。</li>\n<li>当每次枢轴都把表等分为长度相近的两个子表时，速度是最快的<br>\n例：$A={21,25,5,17,9,23,90}、B={21,9,17,30,25,23,5}、C={25,23,30,17,21,5,9}$中$A$速度最快。<br>\n$A$第一次：<strong>9 17 5</strong> 21 <strong>25 23 90</strong><br>\n$B$第一次：<strong>5 9 17</strong> 21 <strong>25 23 30</strong> (两个子表有序，因此速度慢)<br>\n$C$第一次：<strong>9 23 5 17</strong> 21 <strong>25 30</strong> （长度不相近）</li>\n<li>快速排序过程构成一个<strong>递归树</strong>，递归深度即递归树的高度。枢轴值每次都将子表等分时，递归树的高为$log_{2}n$；枢轴值每次都是<strong>子表的最大值或最小值</strong>时，递归树退化为单链表，树高为$n$。</li>\n</ol>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 左边都小于枢轴记录的关键字</span></span><br><span class=\"line\"><span class=\"comment\">// 右边都大于等于枢轴记录的关键字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = a[l];  <span class=\"comment\">// 用子表[l, r]中第一个作为枢轴记录中的关键字</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r &amp;&amp; a[r] &gt;= val) r -- ;  <span class=\"comment\">// 找到右边第一个小于val的下标</span></span><br><span class=\"line\">        a[l] = a[r];  <span class=\"comment\">// 将其移动到低端</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r &amp;&amp; a[l] &lt; val) l ++ ;  <span class=\"comment\">// 找到左边第一个大于val的下标</span></span><br><span class=\"line\">        a[r] = a[l];  <span class=\"comment\">// 将其移动到高端</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a[l] = val;  <span class=\"comment\">// 枢轴记录到位</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;  <span class=\"comment\">// 返回枢轴位置</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt; r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = <span class=\"built_in\">partition</span>(l, r);</span><br><span class=\"line\">        <span class=\"built_in\">quick_sort</span>(l, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">quick_sort</span>(mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"堆排序\">堆排序</h5>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：O(nlogn)<br>\nb. 平均情况：O(nlogn)<br>\nc. 最坏情况：O(nlogn)<br>\n<strong>空间复杂度</strong><br>\n$O(1)$<br>\n<strong>不稳定</strong></p>\n<p>筛选法建堆的最坏情况：$C(n)\\le O(n)$<br>\n插入法建堆的最坏情况：$C(n)\\le O(n\\log_{2}n)$<br>\n综上：堆排序最坏复杂度为$O(n\\log_{2}(n))$。</p>\n<p>堆分为：小根堆、大根堆<br>\n<strong>完全二叉树</strong>，高度$log_2n$，这是时间复杂度的关键<br>\n是一个递归定义的数据结构</p>\n<p><strong>大根堆</strong>：满足某个根节点的值大于左右两个结点的值<br>\n存储：顺序存储比链式存储好</p>\n<ol>\n<li>用<strong>下标</strong>从$1$开始的数组来存储。</li>\n<li>由于某个结点编号为$x$，那么它的<strong>左儿子结点</strong>为$2x$，<strong>右儿子</strong>为$2x+1$</li>\n<li>某个结点$y$的<strong>父节点</strong>为$y/2$向下取整</li>\n</ol>\n<p><strong>筛选法建堆</strong>：<br>\n对关键字序列$（12，13，11，18，60，15，7，18，25，100）$，用筛选法建堆，则开始节点的值必须为（<strong>C</strong>）</p>\n<p>A.100 B.12 C.60 D.15<br>\n【<strong>解答</strong>】：$\\displaystyle \\lfloor \\frac{9}{2} \\rfloor=4$</p>\n<p>对${15,9,7,8,20,-1,7,4}$用堆排序的筛选方式创建初始小根堆为：${-1,4,7,8,20,15,7,9}$<br>\n【<strong>解答</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309061728258.png\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211101112901.png\" alt=\"image-20221110111239438\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> size;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">down</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 寻找当前节点与左右儿子结点中最大的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> t = u;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u * <span class=\"number\">2</span> &lt;= size &amp;&amp; q[u * <span class=\"number\">2</span>] &gt; q[t]) t = u * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt;= size &amp;&amp; q[u * <span class=\"number\">2</span> + <span class=\"number\">1</span>] &gt; q[t]) t = u * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u != t)  <span class=\"comment\">// 如果最大值在儿子结点，则继续递归</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(q[u], q[t]);</span><br><span class=\"line\">        <span class=\"built_in\">down</span>(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">heap_sort</span><span class=\"params\">()</span>  <span class=\"comment\">// 堆排序，下标一定要从1开始</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    size = n;</span><br><span class=\"line\">    <span class=\"comment\">// 为什么从n/2开始建堆？</span></span><br><span class=\"line\">    <span class=\"comment\">// 从n/2开始，因为n是最大值，n/2是n的父节点，因为n是最大，所以n/2是最大的有子节点的父节点，所以从n/2往前遍历，就可以把整个数组遍历一遍</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n / <span class=\"number\">2</span>; i; i -- ) <span class=\"built_in\">down</span>(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次取出堆顶最大的那个元素放在最后</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样操作n次后，整个数组就是一个升序数组了</span></span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(q[<span class=\"number\">1</span>], q[size]);</span><br><span class=\"line\">        size -- ;</span><br><span class=\"line\">        <span class=\"built_in\">down</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 7 6 1 4 3 5 </span><br><span class=\"line\">-</span><br><span class=\"line\">建堆过程</span><br><span class=\"line\">2 7 6 1 4 3 5 </span><br><span class=\"line\">2 7 6 1 4 3 5 </span><br><span class=\"line\">7 4 6 1 2 3 5 </span><br><span class=\"line\">求升序序列：</span><br><span class=\"line\">6 4 5 1 2 3 7 </span><br><span class=\"line\">5 4 3 1 2 6 7 </span><br><span class=\"line\">4 2 3 1 5 6 7 </span><br><span class=\"line\">3 2 1 4 5 6 7 </span><br><span class=\"line\">2 1 3 4 5 6 7 </span><br><span class=\"line\">1 2 3 4 5 6 7 </span><br></pre></td></tr></table></figure>\n<p><strong>堆的插入删除操作</strong><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309062009002.jpg\" alt=\"\"></p>\n<h5 id=\"二路归并排序（merge-sort）\">二路归并排序（merge sort）</h5>\n<p><strong>算法思想</strong>：平均分成两份，通过递归，从而从$n^2$层开始排序，递归至最高层</p>\n<blockquote>\n<p>对于$N$个元素进行$k$路归并排序时，排序的趟数$m$满足$k^{m}=N$，所以$m=\\lceil log_{k}N \\rceil$。<br>\n若是二路归并，$m=\\lceil log_{2}N \\rceil$</p>\n</blockquote>\n<p><strong>占用辅助空间最多</strong></p>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：$O(nlogn)$<br>\nb. 平均情况：$O(nlogn)$<br>\nc. 最坏情况：$O(nlogn)$<br>\n<strong>空间复杂度</strong>：$O(n)$<br>\n<strong>稳定</strong></p>\n<p>【<strong>注</strong>】<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309071511930.jpg\" alt=\"\"></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> q[N], temp[N];  <span class=\"comment\">// temp是辅助数组，用来存储排序后的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> q[], <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r) <span class=\"keyword\">return</span>;  <span class=\"comment\">// 边界情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">merge_sort</span>(q, l, mid), <span class=\"built_in\">merge_sort</span>(q, mid + <span class=\"number\">1</span>, r);  <span class=\"comment\">// 从左边递归排序，从右边递归排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>, i = l, j = mid + <span class=\"number\">1</span>;  <span class=\"comment\">// j = mid + 1平均分为两份[i, mid]、[j + 1, r]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)  <span class=\"comment\">// 如果两个数组不越界，每次找到两个数组中最小的值放入temp中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[i] &gt; q[j]) temp[k ++ ] = q[j ++ ];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> temp[k ++ ] = q[i ++ ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid) temp[k ++ ] = q[i ++ ];  <span class=\"comment\">// 处理上个操作没有处理完的数组，有可能是[i, mid]、[j + 1, r]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= r) temp[k ++ ] = q[j ++ ];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l, k = <span class=\"number\">0</span>; i &lt;= r; i ++, k ++ )  <span class=\"comment\">// 将辅助数组赋值给原数组q[l, r], temp[0, r - l + 1]</span></span><br><span class=\"line\">        q[i] = temp[k];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>样例</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 7 6 1 4 3 5 </span><br><span class=\"line\">-</span><br><span class=\"line\">l的值为：0 r的值为：1  |2 7 6 1 4 3 5 </span><br><span class=\"line\">l的值为：2 r的值为：3  |2 7 1 6 4 3 5 </span><br><span class=\"line\">l的值为：0 r的值为：3  |1 2 6 7 4 3 5 </span><br><span class=\"line\">l的值为：4 r的值为：5  |1 2 6 7 3 4 5 </span><br><span class=\"line\">l的值为：4 r的值为：6  |1 2 6 7 3 4 5 </span><br><span class=\"line\">l的值为：0 r的值为：6  |1 2 3 4 5 6 7 </span><br></pre></td></tr></table></figure>\n<h5 id=\"桶排序（计数排序）\">桶排序（计数排序）</h5>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：$O(n + m)$<br>\nb. 平均情况：$O(n + m)$<br>\nc. 最坏情况：$O(n + m)$<br>\n<strong>空间复杂度</strong><br>\n$O(n + m)$<br>\n<strong>稳定</strong></p>\n<p><strong>思想</strong>：桶排序不是基于比较的排序。<br>\n对于每一个$a_i$，直接计算出它在数组中排好序的位置。<br>\n这个位置就是：小于$a_i$的元素个数$+$等于$a_i$且在$a_i$左边的元素个数。</p>\n<p>如何计算呢？<br>\n开$m$个桶，将每个元素出现的次数相加<br>\n<code>c[i]</code>：表示$i$出现的次数<br>\n<code>s[i]</code>：表示<strong>小于等于</strong>$i$的数有多少个，也就是<code>c[i]</code>的前缀和。<br>\n这样当需要查询某一个数应该在哪个位置直接用<code>s[i - 1]</code>即可。<br>\n<strong>瓶颈在数值很大</strong>，若最大数为$1e^{10}$，那么就需要开$1e^{10}$个数组作为桶</p>\n<p>如果有相等的元素，规定相对顺序不发生变化，因此这个排序是稳定的 ，在摆放的时候从后往前摆放</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> q[N], s[N], w[N];  <span class=\"comment\">// q存放数据，s前缀和数组，w临时数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// q:[0, n - 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bucket_sort</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ ) s[q[i]] ++ ;  <span class=\"comment\">// 记录q[i]出现的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i ++ ) s[i] = s[i - <span class=\"number\">1</span>] + s[i];  <span class=\"comment\">// 计算桶的前缀和，注意N也可以是q[]中的最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -- ) w[ -- s[q[i]]] = q[i];  <span class=\"comment\">// 将q[i]这个元素放在它应该在的位置</span></span><br><span class=\"line\">                                                              <span class=\"comment\">// 注意要从大到小，为了使元素的相对位置不发生改变</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ ) q[i] = w[i];  <span class=\"comment\">// 将临时数组元素赋值给q</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"基数排序-基于桶排序\">基数排序(基于桶排序)</h5>\n<p><strong>时间复杂度</strong><br>\na. 最好情况：$O(d(n + r))$，一趟分配$O(n)$，一趟收集$O®$，总共$d$趟分配、收集。<br>\nb. 平均情况：$O(d(n + r))$<br>\nc. 最坏情况：$O(d(n + r))$<br>\n<strong>空间复杂度</strong><br>\n$O(n + r)$<br>\n<strong>稳定</strong></p>\n<p><strong>思想</strong>：<br>\n将每个数看作$r$进制的数，转化完后将每一位数开拆，化为有序数组，进行多关键字排序</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309071453471.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202309071453124.jpg\" alt=\"\"></p>\n<p>【<strong>注</strong>】：<br>\n如果没有特殊说明的话，认为是10进制。<br>\n基数排序不是基于&quot;比较&quot;的排序算法</p>\n<p>擅长处理$\\begin{cases}数据元素的关键字可以方便地拆分为d组，且d较小 \\\\ 每组关键字的取值范围不大，即r较小 \\\\ 数据元素个数n较大 \\end{cases}$</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> q[N], s[N], w[N];  <span class=\"comment\">// q存放数据，s前缀和数组，w临时数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">radix_sort</span><span class=\"params\">(<span class=\"type\">int</span> d, <span class=\"type\">int</span> r)</span>  <span class=\"comment\">// r:r进制，d:在r进制下一共有d位</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> radix = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= d; i ++ )  <span class=\"comment\">// 循环d次，也就是将每个数的每一位用桶排序</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; r; j ++ ) s[j] = <span class=\"number\">0</span>;  <span class=\"comment\">// 初始前缀和数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++ ) s[q[j] / radix % r] ++ ;  <span class=\"comment\">// 记录r进制下第d位上的数出现的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; r; j ++ ) s[j] = s[j - <span class=\"number\">1</span>] + s[j];  <span class=\"comment\">// 计算前缀和</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = n - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j -- ) w[-- s[q[j] / radix % r]] = q[j];  <span class=\"comment\">// 将q[i]这个元素放在它应该在的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++ ) q[j] = w[j];</span><br><span class=\"line\">        </span><br><span class=\"line\">        radix *= r;  <span class=\"comment\">// 每次做完后要乘r，做完个位做十位，做完十位做百位...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"外排优化内容\">外排优化内容</h2>\n<h5 id=\"外部排序\">外部排序</h5>\n<p><strong>定义</strong>：在排序过程中，如果需要在<strong>内、外存之间交换数据</strong>就称为<strong>外部排序</strong>。</p>\n<p>(1) 置换选择排序<br>\n(2) 归并排序</p>\n<ol>\n<li>胜者树</li>\n<li>败者树</li>\n<li>huffman树</li>\n</ol>\n<p>由于外部排序的瓶颈在于读写速度，也就是$I/O$，因此要想办法减少读写次数，由于外部排序一共排$log_{k}{m}$轮，每一轮读写为整个数组的长度，为了使读写次数减少，就可以增加$k$，或者减少$m$。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202212151730221.png\" alt=\"\"></p>\n","categories":[],"tags":["DS"]},{"title":"现代杨","url":"http://example.com/2022/08/29/现代杨/","content":"<h2 id=\"第一章-行列式\">第一章 行列式</h2>\n<h3 id=\"例题-2\">例题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第27题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-7\">总结</h4>\n<blockquote>\n<p>第二题：变换3,4行为X型行列式。</p>\n</blockquote>\n<blockquote>\n<p>第三题：把含有$x$的项化简为越少越好。</p>\n</blockquote>\n<blockquote>\n<p>第四题：数学归纳法，先找$n=1,n=2,n=3$的特殊情况，找出规律，再用数学归纳法进行证明。</p>\n</blockquote>\n<blockquote>\n<p>第五题：研究n阶行列式，先看4阶或者5阶行列式找规律。此题是&quot;么&quot;字型行列式。</p>\n</blockquote>\n<blockquote>\n<p>第六题：判断A是否为可逆矩阵，就分析$|A|$是否为零。<br>\n$\\begin{cases} |A|\\not ={0} \\Longleftrightarrow A可逆 \\\\ |A|={0} \\Longleftrightarrow A不可逆 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>第七题：考察行列式性质：(1)行列式拆行，列的性质；(2)行列式行，列调换位置。</p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n（1）学会使用矩阵等式描述线性代数的语言。<br>\n（2）$\\alpha_1,\\alpha_2,\\alpha_3$是线性无关的向量组$\\Longrightarrow |\\alpha_1,\\alpha_2,\\alpha_3| \\not= 0$。</p>\n</blockquote>\n<blockquote>\n<p>第九题：<br>\n（1）$|A+B| \\not= |A| + |B|$。<br>\n（2）通过恒等变形分离出$|B|$，利用已知的$A$求出$|B|$。</p>\n</blockquote>\n<blockquote>\n<p>第十题：同九题思路，通过恒等变形，分离出需要的条件。<br>\n注意：$|kA_n|=k^n|A|$。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：<br>\n（1）伴随矩阵的母公式。<br>\n（2）$|A^{-1}B^{-1}|=|A^{-1}||B^{-1}|$。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：从已知条件触发，构建一个矩阵等式。<br>\n（1）$|A||A+B^{-1}||B|=|A^{-1}+B|$.</p>\n</blockquote>\n<blockquote>\n<p>第十三题：从已知条件出发，构造矩阵等式。<br>\n（1）$|A^T|=|A|$。<br>\n（2）$AA^T=E \\Longrightarrow |A|=\\pm 1$。</p>\n</blockquote>\n<blockquote>\n<p>第十四题：<br>\n（1）$A \\stackrel{r_1 \\leftrightarrow r_2}{\\longrightarrow}B \\Longrightarrow |A|=-|B|$。<br>\n（2）$|A_n^{*}|=|A_n|^{n-1}$</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n（1）$\\begin{vmatrix} 0 &amp; A_m \\\\ B_n &amp; 0 \\end{vmatrix}=(-1)^{n \\times m} \\times |A||B|$。<br>\n（2）$|A_n^{*}|=|A_n|^{n-1}$</p>\n</blockquote>\n<blockquote>\n<p>第十六题：&quot;胖矩阵&quot;一定是降秩矩阵（不可逆矩阵）$\\Longrightarrow |C|=0$。<br>\n证明：$R(c_4)=R(AB) \\le R(A_{4\\times 2}) \\le 2 &lt; 4$</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n（1）若$|A| \\not= 0 \\Longrightarrow Ax=b$有唯一解。<br>\n（1）若$R(A) \\not= R(A,b) \\Longrightarrow Ax=b$无解。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n学会用矩阵等式描述线性代数语言。<br>\n$a_{ij}+A_{ij}=0\\Longrightarrow a_{ij}=-A_{ij}$</p>\n</blockquote>\n<blockquote>\n<p>第十九题：学会用矩阵等式描述线性代数语言。</p>\n</blockquote>\n<blockquote>\n<p>第二十题：有四种方法，后面再进行补充。</p>\n</blockquote>\n<blockquote>\n<p>第二十一题：<br>\n（1）3个3维列向量$\\alpha_1,\\alpha_2,\\alpha_3$线性无关$\\Longleftrightarrow |\\alpha_1,\\alpha_2,\\alpha_3| \\not= 0$。<br>\n（2）3个3维列向量$\\alpha_1,\\alpha_2,\\alpha_3$线性相关$\\Longleftrightarrow |\\alpha_1,\\alpha_2,\\alpha_3| = 0$。</p>\n</blockquote>\n<blockquote>\n<p>第二十二题：求特征值，就是求$|A-\\lambda E|=0$，思路：把某一行（列）化出两个0，然后进行展开。</p>\n</blockquote>\n<blockquote>\n<p>第二十三题：<br>\n（1）若$A$与$B$相似，则$A$与$B$有相同的特征值。<br>\n（2）若$\\lambda$是$A$的特征值，则$\\frac{1}{ \\lambda }$是$A^{-1}$的特征值。<br>\n（3）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（4）$|A_n|=\\alpha_1 \\alpha_2 …\\alpha_n$</p>\n</blockquote>\n<blockquote>\n<p>第二十四题：若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。</p>\n</blockquote>\n<blockquote>\n<p>第二十五题：<br>\n（1）特征值的几何重数$\\le$代数重数。<br>\n（2）若$\\alpha_1,\\alpha_2$线性无关，则$k_1\\alpha_1 + k_2\\alpha_2=0$只有零解$k_1=0,k_2=0$</p>\n</blockquote>\n<blockquote>\n<p>第二十六题：<br>\n（1）若$R(A_n)=1$，则$A_n$的特征值为$0,0,…,0,tr(A)$，$(n-1个零)$。<br>\n（2）若$\\alpha,\\beta$为$n$维列向量，则$tr(\\alpha\\beta^T)=\\alpha^T\\beta$。<br>\n（3）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（4）$|A_n|=\\lambda_1\\lambda_2…\\lambda_n$。</p>\n</blockquote>\n<blockquote>\n<p>第二十七题：<br>\n针对带参数的具体矩阵一般用顺序主子式为正来判断正定性 。<br>\n例：矩阵$A=\\begin{bmatrix} 2 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; \\frac{t}{2} \\\\ 0 &amp; \\frac{t}{2} &amp; 1 \\end{bmatrix}$。<br>\n它的一阶顺序主子式为$|2|&gt;0$<br>\n二阶顺序主子式$\\begin{vmatrix} 2 &amp; 1 \\\\ 1 &amp; 1 \\end{vmatrix}=2-1=1&gt;0$<br>\n三阶顺序主子式$|A|=1-\\frac{1}{2}t^2&gt;0$<br>\n故如果二次型为正定，那么它的三阶顺序主子式的行列式就必须大于0$\\Longrightarrow -\\sqrt{2}&lt;t&lt;\\sqrt{2}$。</p>\n</blockquote>\n<h3 id=\"习题\">习题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第27题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-8\">总结</h4>\n<blockquote>\n<p>第一题：观察得，行（列）和相等的行列式，将所有元素提至相等的那一行（列）的第一行（列），然后提出总和，再进行化简。</p>\n</blockquote>\n<blockquote>\n<p>第二题：将x消得越少越好。</p>\n</blockquote>\n<blockquote>\n<p>第三题：&quot;么&quot;字型行列式。</p>\n</blockquote>\n<blockquote>\n<p>第四题：&quot;ab&quot;行列式。</p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n（1）特值法。<br>\n（2）行列式拆行拆列的性质。</p>\n</blockquote>\n<blockquote>\n<p>第九题：设$A$为可逆矩阵。<br>\n（1）$A^*=|A|A^{-1}$<br>\n（2）$(KA)^{-1}=K^{-1}A^{-1}$<br>\n（3）$|A^{-1}|=\\frac{1}{|A|}$<br>\n（4）$|KA_n|=K^n|A_n|$</p>\n</blockquote>\n<blockquote>\n<p>第十题：计算出错。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：从已知条件触发构造矩阵等式。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n（1）若$A$为正交矩阵，则$A^TA=E$<br>\n（2）若$A$为正交矩阵，则$|A|=\\pm 1$<br>\n（3）$(A+B)^T=A^T+B^T$<br>\n（4）$(AB)^T=B^TA^T$<br>\n（5）$(A^T)^T=A$<br>\n（6）$ E^T=E$</p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072048850.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十四题：克莱姆法则：$|A^T| \\not= 0$，有唯一解。<br>\n解为$X_j=\\frac{D_j}{D}$</p>\n</blockquote>\n<blockquote>\n<p>第十五题：弄清楚$A_{ij}=(-1)^{i+j}M_{ij}$。</p>\n</blockquote>\n<blockquote>\n<p>第十六题：<br>\n（1）$A^*=|A|A^{-1}$<br>\n（2）$\\begin{bmatrix} 0 &amp; A \\\\ B &amp; 0 \\end{bmatrix}^{-1}=\\begin{bmatrix} 0 &amp; B^{-1} \\\\ A^{-1} &amp; 0 \\end{bmatrix}$<br>\n（3）$\\begin{bmatrix} a &amp; 0 &amp; 0 \\\\ 0 &amp; b &amp; 0 \\\\ 0 &amp; 0 &amp; c \\end{bmatrix}^{-1}=\\begin{bmatrix} a^{-1} &amp; 0 &amp; 0 \\\\ 0 &amp; b^{-1} &amp; 0 \\\\ 0 &amp; 0 &amp; c^{-1} \\end{bmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n（1）若$r(A_n)=1$，则$A$的特征值为$\\underbrace{0,0,…,0}_{n-1},tr(A)$。<br>\n（2）若$A=\\alpha \\beta ^T$,($\\alpha \\beta$为$n$维列向量)。则$tr(A)=\\alpha^T\\beta$。<br>\n（3）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（4）若0是$A$的特征值，则$|A|=0$。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：跟着题目描述把$A^*A=|A|E$换为$A^TA=|A|E$进行运算，然后利用反证法。</p>\n</blockquote>\n<blockquote>\n<p>第十九题：<br>\n若$\\alpha_1,\\alpha_2,\\alpha_3$线性无关，且$(\\beta_1,\\beta_2,…,\\beta_n)=(\\alpha_1,\\alpha_2,…,\\alpha_n)P_n$<br>\n（1）若$|P| \\not= 0 \\Longrightarrow \\beta_1,\\beta_2,…,\\beta_n$线性无关。<br>\n（1）若$|P| = 0 \\Longrightarrow \\beta_1,\\beta_2,…,\\beta_n$线性相关。</p>\n</blockquote>\n<blockquote>\n<p>第二十题：<br>\n（1）<img src=\"http://latex.codecogs.com/gif.latex?tr(A_3^{*})=A_{11}+A_{22}+A_{33}\" /><br>\n（2）<img src=\"http://latex.codecogs.com/gif.latex?tr(A_3)=\\lambda_1+\\lambda_2+\\lambda_3\" /><br>\n（3）若$\\lambda$是$A$的特征值，则$\\frac{|A|}{\\lambda}$是$A^*$的特征值，$|A_3|=\\lambda_1\\lambda_2\\lambda_3$。</p>\n</blockquote>\n<blockquote>\n<p>第二十三题：<br>\n（1）若$|A-KE|=0$，则$K$是$A$的特征值（特征方程的概念）。<br>\n（2）$A$不可逆$\\Longleftrightarrow |A|=0$<br>\n（3）若$r(A_n)=r&lt;n$，则0是$A_n$的至少$n-r$重特征值。<br>\n（4）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（5）$|A|=\\lambda_1\\lambda_2…\\lambda_n$</p>\n</blockquote>\n<blockquote>\n<p>第二十四题：<br>\n思想：如果看见$n$阶矩阵可以想到降维（阶）处理，将其视为$2$维（阶）进行处理。</p>\n</blockquote>\n<blockquote>\n<p>第二十五题：<br>\n（1）若$A_n(A_n-3E_n)=0$，则$r(A)+r(A-2E)=0$。<br>\n（2）$r(A_n)&lt;n\\Longleftrightarrow |A_n|=0 \\Longleftrightarrow 0$是$A$的特征值。<br>\n（3）<br>\n$Ax=0$的非零解向量是$A$的属于$\\lambda=0$的特征向量。<br>\n$(A-2E)x=0$的非零解向量是$A$的属于$\\lambda=2$的特征向量。<br>\n（4）$A_nx=0$基础解系含有$n-r(A)$个解向量（几何重数）。<br>\n（5）$A$的特征值的代数重数$\\ge$几何重数。<br>\n（6）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（7）$|A_n|=\\lambda_1\\lambda_2…\\lambda_n$<br>\n（8）$A_n$有$n$个特征值</p>\n</blockquote>\n<blockquote>\n<p>第二十七题：<br>\n（1）$A_n$为正交矩阵$\\Longleftrightarrow A_n^{T}A_n=E \\Longleftrightarrow A^T=A^{-1}$。<br>\n（2）$|A^T|=|A|$<br>\n（3）$(A+B)^T=A^T+B^T$<br>\n（4）$|kA_n|=k^n|A|$<br>\n（5）$(A^T)^T=A$<br>\n（6）$|AB|=|A||B|$</p>\n</blockquote>\n<hr>\n<h2 id=\"第二章-矩阵\">第二章 矩阵</h2>\n<h3 id=\"例题-3\">例题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\">√ <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\">√ <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-9\">总结</h4>\n<blockquote>\n<p>第一题：<br>\n掌握六中高次幂的方阵处理方法：<br>\n（1）对角(分块)矩阵<br>\n（2）找规律<br>\n（3）秩为1的矩阵<br>\n（4）$A=E+B$，$B$简单<br>\n（5）$A=P^{-1}BP$，$B$简单<br>\n（6）$P^nAQ^m$，其中$P$和$Q$是初等方阵<br>\n此题需要将$A$变为一个列向量$\\times$行向量。</p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n掌握六中高次幂的方阵处理方法。<br>\n属于第4种。</p>\n</blockquote>\n<blockquote>\n<p>第四题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072037582.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n看见复杂的4阶行列式一般都需要用技巧，而不是硬着头皮求。<br>\n通过观察可以得$A^TA=30E \\Longrightarrow \\frac{1}{30}A^TA=E$，那么$\\frac{1}{30}A^T$就是$A^{-1}$。</p>\n</blockquote>\n<blockquote>\n<p>第七题：通过矩阵的恒等变形。</p>\n</blockquote>\n<blockquote>\n<p>第八题：矩阵等式恒等变形。<br>\n通用解法：<br>\n若$f(A)=0$，求$(A-kE)^{-1}=?$<br>\n[分析]：$(A-kE)g(A)=\\lambda E$<br>\n若$\\lambda \\not= 0 \\Longrightarrow (A-kE)^{-1}=\\frac{1}{\\lambda}g(A)$</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n（1）$|A^k|=|A|^k$。<br>\n（2）若$A_n B_n C_n=E_n$，则$A,B,C$都可逆。<br>\n（3）$|ABC|=|A||B||C|$<br>\n（4）$|A|\\not= 0\\Longrightarrow A$可逆。<br>\n（5）$(AB)^{-1}=B^{-1}A^{-1}$。<br>\n（6）求$A^{-1}$的方法：$(A,E) \\longrightarrow 初等行变换… \\longrightarrow (E,A^{-1})$。<br>\n错误原因：最后一步求逆出错QAQ。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：取$k=2，k=3，k=4$找找规律。</p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n（1）若$f(A)=0$，则$A$的特征值一定在$f(x)=0$的根中选取。<br>\n（2）若$A$为实对称矩阵，则$A$的特征值都是实数。<br>\n（3）若$A$为实对称矩阵，则$A$一定可以相似对角化。<br>\n（4）若实对称矩阵$A$的特征值都为正，则$A$正定。<br>\n（5）若$A^TA=E$，则$A$为正交矩阵。<br>\n（6）若$|A|\\not= 0$，则$A$为非奇异矩阵。</p>\n</blockquote>\n<blockquote>\n<p>第十四题：<br>\n（1）初等矩阵的逆<br>\n$\\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 0 \\end{bmatrix}^{-1} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 0 \\end{bmatrix} \\\\$<br>\n$\\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 7 \\end{bmatrix}^{-1}=\\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; \\frac{1}{7} \\end{bmatrix} \\\\$<br>\n$\\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 5 &amp; 1 \\end{bmatrix}^{-1}=\\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; -5 &amp; 1 \\end{bmatrix}$<br>\n（2）初等矩阵定理<br>\n若$A\\stackrel{r_1 \\rightleftarrows r_2}{\\longrightarrow}B，E\\stackrel{r_1 \\rightleftarrows r_2}{\\longrightarrow}P$，<br>\n则一定存在一个矩阵$P$，使得$PA=B$，进行行变换。<br>\n若$A\\stackrel{c_3 \\rightleftarrows 3c_3}{\\longrightarrow}C，E\\stackrel{c_3 \\rightleftarrows 3c_3}{\\longrightarrow}P$，<br>\n则一定存在一个矩阵$Q$，使得$AQ=C$，进行列变换。<br>\n<strong>[总结]左乘行变换，右乘列变换。</strong></p>\n</blockquote>\n<blockquote>\n<p>第十五题：找到$P$与$Q$的关系。</p>\n</blockquote>\n<blockquote>\n<p>第十六题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072048685.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n对一个矩阵$A$<strong>左乘</strong>$\\begin{bmatrix} 1 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}$就相当于对矩阵$A$进行<strong>初等行变换</strong>，第一行加上第三行。<br>\n对一个矩阵$A$<strong>右乘</strong>$\\begin{bmatrix} 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\end{bmatrix}$就相当于对矩阵$A$进行<strong>初等列变换</strong>，第一列与第三列进行交换。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n（1）<br>\n$A$的列向量组可以线性表示$AB$的列向量组<br>\n假设$C_3=A_3B_3\\Longrightarrow (C_1,C_2,C_2)=(\\alpha_1,\\alpha_2,\\alpha_3)\\begin{bmatrix} 1 &amp; 3 &amp; 1 \\\\ 2 &amp; 2 &amp; 1 \\\\ 3 &amp; 1 &amp; 7 \\end{bmatrix}$<br>\n就有$\\begin{cases} C_1=\\alpha_1+2\\alpha_2+3\\alpha_3 \\\\ C_2=3\\alpha_1+2\\alpha_2+\\alpha_3 \\\\ C_3=\\alpha_1+\\alpha_2+7\\alpha_3 \\end{cases}$<br>\n（2）<br>\n$A$的行向量组可以线性表示$BA$的行向量组<br>\n假设$C_3=B_3A_3\\Longrightarrow \\begin{bmatrix} P_1 \\\\ P_2 \\\\ P_3 \\end{bmatrix}=\\begin{bmatrix} 1 &amp; 3 &amp; 1 \\\\ 2 &amp; 2 &amp; 1 \\\\ 3 &amp; 1 &amp; 7 \\end{bmatrix}\\begin{bmatrix} \\alpha_1 \\\\ \\alpha_2 \\\\ \\alpha_3 \\end{bmatrix}$<br>\n就有$\\begin{cases} C_1=\\alpha_1+3\\alpha_2+\\alpha_3 \\\\ C_2=2\\alpha_1+2\\alpha_2+\\alpha_3 \\\\ C_3=3\\alpha_1+\\alpha_2+7\\alpha_3 \\end{cases}$<br>\n（3）$r\\begin{bmatrix} A &amp; \\\\ &amp; B \\end{bmatrix}=r(A)+r(B)$<br>\n（4）$r(A)=r(A^T)=r(AA^T)=r(A^TA)$</p>\n</blockquote>\n<blockquote>\n<p>第十九题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072038685.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第二十题：<br>\n（1）$R(AB) \\le R(A)，R(AB) \\le R(B)$<br>\n（2）$R(A_{m\\times n}) \\le m，R(A_{m\\times n}) \\le n$<br>\n（3）$R(E_m) = m$</p>\n</blockquote>\n<blockquote>\n<p>第二十一题：<br>\n（1）$r(A) \\le r([A,B])$<br>\n（2）$r(AB) \\le r(A)$<br>\n（3）$A(B,C)=(AB,AC)$<br>\n（4）$(B,C)A \\not= (BA,CA)$，但是$\\begin{pmatrix} B \\\\ C \\end{pmatrix}A = \\begin{pmatrix} BA \\\\ CA \\end{pmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第二十二题：<br>\n（1）设$\\alpha,\\beta$为$n$维列向量，若$A=\\alpha \\beta^T$，则$A$的特征值为$n-1$个$0$，$tr(A)=\\alpha^T\\beta=\\beta^T\\alpha$。<br>\n（2）实对称矩阵一定可以相似对角化。<br>\n（3）若$A$可以相似对角化，则$r(A)$等于$A$的非零特征值的个数。<br>\n（4）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。</p>\n</blockquote>\n<blockquote>\n<p>第二十三题：若$A$与$B$等价<br>\n则：<br>\n（1）$r(A)=r(B)$。<br>\n（2）$A$与$B$具有相同的行最简形(此题需要)。<br>\n（3）$Ax=0$与$Bx=0$同解。</p>\n</blockquote>\n<blockquote>\n<p>第二十四题：<br>\n（1）若$r(A_{m\\times n})=m$，则$Ax=b$一定有解，若$A$行满秩，则$A$列向量组可以线性表示任意同维行向量。<br>\n（2）若$A$列满秩，则$A$列向量组可以线性表示任意同维列向量。<br>\n（3）$A$列向量组可以线性表示$Ax$列向量组。<br>\n（4）$A$行向量组可以线性表示$yA$行向量组。<br>\n（5）$r(\\begin{bmatrix} A &amp; 0 \\\\ 0 &amp; B \\end{bmatrix})=r(A)+r(B) \\\\ r(\\begin{bmatrix} 0 &amp; A \\\\ B &amp; 0 \\end{bmatrix})=r(A)+r(B)$</p>\n</blockquote>\n<blockquote>\n<p>第二十五题：<br>\n（1）若$A-kE$不可逆，则$|A-kE|=0$。<br>\n（2）若$|A-kE|=0$，则$k$是A的特征值。<br>\n（3）若实对称矩阵，$r(A_n)=r&lt;n$，则$0$是$A$的$n-r$重特征值。<br>\n（4）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（5）实对称矩阵的秩等于它的非零特征值的个数。<br>\n出错原因：特征值计算出错。</p>\n</blockquote>\n<h3 id=\"习题-2\">习题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"><strong>x</strong> <strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"><strong>x</strong> √</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第27题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-10\">总结</h4>\n<blockquote>\n<p>第二题：由于0很多，直接求二次方，四次方找规律。</p>\n</blockquote>\n<blockquote>\n<p>第三题：<br>\n（1）$|A-eE|\\not= 0 \\Longrightarrow |A-3E|可逆$。<br>\n主对角线矩阵求逆：主对角线元素取倒数<br>\n副对角线矩阵求逆：副对角线元素取倒数并逆序<br>\n计算出错惹。</p>\n</blockquote>\n<blockquote>\n<p>第五题：看错题目。（c#）</p>\n</blockquote>\n<blockquote>\n<p>第七题：$A(\\alpha_1,\\alpha_2,\\alpha_3)=A\\alpha_1+A\\alpha_2+A\\alpha_3$是乘法法则。</p>\n</blockquote>\n<blockquote>\n<p>第九题：$|A||B||C|=1\\not= 0 \\Longrightarrow A,B,C$可逆，于是将式子进行变换。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072052940.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十二题：进行初等变换。切记$\\alpha \\alpha^T \\alpha \\alpha^T = 2a^2\\alpha \\alpha^T \\not= 4a^4$。</p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n（1）若$A_nB_n=E_n$则$A,B$都是可逆矩阵。<br>\n（2）$\\begin{aligned}A^3+E=(A+E)(A^2-A+E) \\\\ A^3-E=(A-E)(A^2+A+E)\\end{aligned}$</p>\n</blockquote>\n<blockquote>\n<p>第十四题：$|A_n^*|=|A|^{n-1} \\Longrightarrow 可以推出|A|$。<br>\n矩阵等式的恒定变形问题；注意进行恒等变形的时候，不能只考虑逆的运算，也需要考虑伴随矩阵的运算。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：计算出错。</p>\n</blockquote>\n<blockquote>\n<p>第十六题：求逆矩阵搞错惹。</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072040435.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十八题：左乘进行初等行变换，右乘进行初等列变换。</p>\n</blockquote>\n<blockquote>\n<p>第二十题：初等变化。</p>\n</blockquote>\n<hr>\n<h2 id=\"第三章-向量\">第三章 向量</h2>\n<h3 id=\"例题-4\">例题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-11\">总结</h4>\n<blockquote>\n<p>第一题：<br>\n（1）若$A_n \\not= 0 \\Longrightarrow A_n$的列向量组线性无关。<br>\n（2）若$A_n = 0 \\Longrightarrow A_n$的列向量组线性相关。<br>\n（3）若$n$个$n$维列向量组$\\alpha_1 \\alpha_2 … \\alpha_n$线性无关，则任一$n$维向量可以由$\\alpha_1 \\alpha_2 … \\alpha_n$线性表示。<br>\n（4）若一个$n$维列向量$\\beta$不能由$n$个$n$维列向量组$\\alpha_1 \\alpha_2 … \\alpha_n$线性表示，则$\\alpha_1 \\alpha_2 … \\alpha_n$线性相关。<br>\n（5）用$\\alpha_1 \\alpha_2 \\alpha_3$线性表示$\\beta_1\\beta_2\\beta_3$的方法：$$\\begin{bmatrix} \\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 &amp; \\beta_1 &amp; \\beta_2 &amp; \\beta_3 \\end{bmatrix} \\longrightarrow 初等行变换 \\longrightarrow \\begin{bmatrix} 行最简形 \\end{bmatrix}$$</p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n（1）$R(A)=R(A,b)\\Longleftrightarrow Ax=b$有解$\\Longleftrightarrow A$列向量可以线性表示 $b$。<br>\n（2）<br>\n$R(A)=R(A,B) \\Longleftrightarrow A$列向量可以线性表示$B$列向量。<br>\n$R(B)=R(B,A) \\Longleftrightarrow B$列向量可以线性表示$A$列向量。<br>\n（3）$R(A)=R(B)=R(A,B)\\Longleftrightarrow A$列向量与$B$列向量组等价。<br>\n（4）用$\\alpha_1 \\alpha_2 \\alpha_3$线性表示$\\beta_1\\beta_2\\beta_3$的方法：$$\\begin{bmatrix} \\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 &amp; \\beta_1 &amp; \\beta_2 &amp; \\beta_3 \\end{bmatrix} \\longrightarrow 初等行变换 \\longrightarrow \\begin{bmatrix} 行最简形 \\end{bmatrix}$$</p>\n</blockquote>\n<blockquote>\n<p>第三题：<br>\n（1）部分与整体定理：$\\begin{aligned} 整体无关 \\Longrightarrow 部分无关 \\\\ 部分相关 \\Longrightarrow 整体相关 \\end{aligned}$<br>\n（2）一个向量与一个向量组定理：$\\begin{cases} \\alpha_1\\alpha_2\\alpha_3 无关 \\\\ \\alpha_1\\alpha_2\\alpha_3\\alpha_4相关 \\end{cases} \\Longrightarrow \\alpha_4可由\\alpha_1\\alpha_2\\alpha_3唯一线性表示$。</p>\n</blockquote>\n<blockquote>\n<p>第四题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072042488.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n（1）$m$个$n$维向量$(m&gt;n)$一定线性相关。<br>\n（2）$\\alpha_1\\alpha_2…\\alpha_m$线性无关$\\Longleftrightarrow x_1\\alpha_1 + x_2\\alpha_2 + … + x_m\\alpha_m=0$只有零解。<br>\n（3）$\\alpha_1\\alpha_2…\\alpha_m$线性相关$\\Longleftrightarrow x_1\\alpha_1 + x_2\\alpha_2 + … + x_m\\alpha_m=0$有非零解。</p>\n</blockquote>\n<blockquote>\n<p>第六题：<br>\n（1）$\\begin{bmatrix} A\\alpha_1,A\\alpha_2…A\\alpha_s\\end{bmatrix}=A(\\alpha_1\\alpha_2…\\alpha_s)$<br>\n（2）矩阵越乘秩越小$\\begin{aligned} r(AB) \\le r(A) \\\\ r(AB) \\le r(B) \\end{aligned}$<br>\n（3）$r(\\alpha_1\\alpha_2…\\alpha_s) &lt; S,(\\alpha_1\\alpha_2…\\alpha_s$线性相关)。<br>\n（4）根据题目选项进行判断。</p>\n</blockquote>\n<blockquote>\n<p>第七题:<br>\n给定的都是三个三维列向量，因此需要判断的是行列式是否为零。<br>\n若$|A|=0 \\Longrightarrow$线性相关。<br>\n若$|A|\\not= 0 \\Longrightarrow$线性无关。</p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n（1）针对一般矩阵<br>\n若$\\alpha_1\\alpha_2…\\alpha_m$线性无关，且$\\beta_1\\beta_2…\\beta_s=(\\alpha_1\\alpha_2…\\alpha_m)P_{m\\times s}$<br>\n若$r(P_{m\\times s})=S$，则$\\beta_1\\beta_2…\\beta_s$线性无关。<br>\n若$r(P_{m\\times s})&lt;S$，则$\\beta_1\\beta_2…\\beta_s$线性相关。<br>\n（2）针对方阵<br>\n若$\\alpha_1\\alpha_2…\\alpha_m$线性无关，且$\\beta_1\\beta_2…\\beta_m=(\\alpha_1\\alpha_2…\\alpha_m)P_{m\\times m}$<br>\n若$|P|\\not= 0$则$\\beta_1\\beta_2…\\beta_m$线性无关；若$|P|=0$，则$\\beta_1\\beta_2…\\beta_m$线性相关。<br>\n（3）含有零向量的向量组一定是线性相关的。</p>\n</blockquote>\n<blockquote>\n<p>第九题：<br>\n（1）若$\\alpha$是$A$的属于$\\lambda$的特征向量，则$A\\alpha=\\lambda\\alpha$且$\\alpha\\not= 0$。<br>\n（2）$A$的属于不同特征值的特征向量线性无关。<br>\n（3）用定义证明$\\alpha_1\\alpha_2…\\alpha_m$线性无关的方法：$$设：k_1\\alpha_1+k_2\\alpha_2+k_3\\alpha_3=0 \\\\ …$$最后得到$k_1=0,k_2=0,k_3=0$，则$\\alpha_1\\alpha_2\\alpha_3$线性无关。<br>\n（4）若3个3维列向量线性无关，则$\\begin{bmatrix} \\alpha_1,\\alpha_2,\\alpha_3 \\end{bmatrix}$是可逆矩阵。<br>\n（5）若$\\alpha_1\\alpha_2\\alpha_3$线性无关，则方程组$x_1 \\alpha_1 +x_2 \\alpha_2+x_3 \\alpha_3=0$只有零解。</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n（1）若列向量$\\alpha$与$\\beta$正交，则$\\alpha^T\\beta=0,\\alpha\\beta^T=0$。<br>\n（2）若列向量组$\\alpha_1\\alpha_2\\alpha_3$与列向量组$\\beta_1\\beta_2\\beta_3$都正交。则$\\begin{bmatrix} \\alpha_1^T \\\\ \\alpha_2^T \\\\ \\alpha_3^T\\end{bmatrix} \\begin{bmatrix} \\beta_1,\\beta_2,\\beta_3 \\end{bmatrix}=0$<br>\n（3）若$A_{m\\times n}B_{n\\times s}=0，$则$r(A)+r(b)\\le n$。两个矩阵乘积为零矩阵，那么它们矩阵秩的和一定不会超过相邻的下标$n$。<br>\n（4）若$r(\\alpha_1\\alpha_2…\\alpha_m)&lt;m$，则$\\alpha_1\\alpha_2…\\alpha_m$线性相关；$r(\\alpha_1\\alpha_2…\\alpha_m)=m$，则$\\alpha_1\\alpha_2…\\alpha_m$线性相关。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072053247.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072054783.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十三题：同十二题A选项。</p>\n</blockquote>\n<blockquote>\n<p>第十四题：<br>\nA：利用反证法以及<br>\n一个向量与一个向量组定理：$\\begin{cases} \\alpha_1\\alpha_2\\alpha_3 无关 \\\\ \\alpha_1\\alpha_2\\alpha_3\\alpha_4相关 \\end{cases} \\Longrightarrow \\alpha_4可由\\alpha_1\\alpha_2\\alpha_3唯一线性表示$；同时任意一个向量可由其余向量唯一线性表示。<br>\nB：设$\\alpha_1\\alpha_2\\alpha_3$线性无关，$\\alpha_1,\\alpha_2,\\alpha_3, \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix}$是4个3维向量，故线性相关，与已知条件矛盾。<br>\nC：其次线性方程组$Ax=0$的任意一个解向量$\\varphi$一定与$A$的行向量正交。<br>\nD：<br>\n（1）若列向量$\\alpha$与$\\beta$正交，则$\\alpha^T\\beta=0,\\alpha\\beta^T=0$。<br>\n（2）若$A_{m\\times n}B_{n\\times s}=0，$则$r(A)+r(b)\\le n$。两个举证乘积为零举证，那么它们矩阵秩的和一定不会超过相邻的下标$n$。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209072055842.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十六题：<br>\n若$A=\\begin{bmatrix} \\alpha_1,\\alpha_2,\\alpha_3,\\alpha_4 \\end{bmatrix} \\longrightarrow 经过初等行变换 \\longrightarrow \\begin{bmatrix} \\beta_1,\\beta_2,\\beta_3,\\beta_4 \\end{bmatrix}$<br>\n则：<br>\n①$\\alpha_1\\alpha_2\\alpha_3$线性无关$\\Longleftrightarrow \\beta_1\\beta_2\\beta_3$线性无关。<br>\n②$\\alpha_1\\alpha_2\\alpha_3\\alpha_4$线性相关$\\Longleftrightarrow \\beta_1\\beta_2\\beta_3\\beta_4$线性相关。<br>\n③$\\alpha_1=2\\alpha_2+3\\alpha_3+4\\alpha_4 \\Longleftrightarrow \\beta_1=2\\beta_2+3\\beta_3+4\\beta_4$。<br>\n④$A$的行向量组与$B$的行向量组等价。<br>\n⑤$\\alpha_1\\alpha_2\\alpha_3\\alpha_4$与$\\beta_1\\beta_2\\beta_3\\beta_4$不等价。</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n（1）$|A|=0 \\Longleftrightarrow A$列（行）向量线性相关。<br>\n（2）若$r(A_{m\\times n})=n$，则$r(AB)=r(B)$。<br>\n（3）若$r(B_{n\\times s})=n$，则$r(AB)=r(A)$。<br>\n（4）$r(A_{m\\times n})=n \\Longleftrightarrow A$列向量线性无关。<br>\n（5）$r(B_{n\\times s})=n \\Longleftrightarrow B$列向量线性无关。<br>\n（6）&quot;胖&quot;方阵是不可逆矩阵，但&quot;瘦&quot;方阵不一定是 可逆矩阵。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n（1）$\\alpha_1\\alpha_2…\\alpha_s$与$\\beta_1\\beta_2…\\beta_t$等价$\\Longrightarrow r(\\alpha_1\\alpha_2…\\alpha_s)=r(\\beta_1\\beta_2…\\beta_t)$<br>\n（2）$A_{m\\times n}$与$B_{m\\times n}$等价$\\Longleftrightarrow r(A_{m\\times n})=r(B_{m\\times n})$<br>\n（3）$\\alpha_1\\alpha_2…\\alpha_s$与$\\beta_1\\beta_2…\\beta_s$等价 $\\Longrightarrow$矩阵$\\begin{bmatrix} \\alpha_1\\alpha_2…\\alpha_s \\end{bmatrix}$与矩阵$\\begin{bmatrix} \\beta_1\\beta_2…\\beta_s \\end{bmatrix}$等价<br>\n（4）$\\alpha_1\\alpha_2…\\alpha_s$可由$\\beta_1\\beta_2…\\beta_t$线性表示$\\Longleftrightarrow r(\\beta_1\\beta_2…\\beta_t)=r(\\beta_1\\beta_2…\\beta_t\\alpha_1\\alpha_2…\\alpha_s)$<br>\n（5）$\\beta_1\\beta_2…\\beta_t$可由$\\alpha_1\\alpha_2…\\alpha_s$线性表示$\\Longleftrightarrow r(\\alpha_1\\alpha_2…\\alpha_s)=r(\\alpha_1\\alpha_2…\\alpha_s\\beta_1\\beta_2…\\beta_t)$<br>\n（6）$\\alpha_1\\alpha_2…\\alpha_s$与$\\beta_1\\beta_2…\\beta_t$等价$\\Longleftrightarrow r(\\alpha_1\\alpha_2…\\alpha_s)=r(\\beta_1\\beta_2…\\beta_t)=r(\\alpha_1\\alpha_2…\\alpha_s\\beta_1\\beta_2…\\beta_t)$</p>\n</blockquote>\n<h3 id=\"习题-3\">习题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-12\">总结</h4>\n<blockquote>\n<p>第一题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092110936.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n（1）$|A_3|\\not= 0 \\Longrightarrow A$的列向量组线性无关 。$r(A_3)=3$<br>\n（2）$|A_3|=0\\Longrightarrow A$的列向量组线性相关。$r(A_3)&lt;3$<br>\n（3）若3个3维列向量线性无关，则任意一个3维列向量都可以由它线性表示。<br>\n（4）若向量组$\\alpha_1\\alpha_2\\alpha_3$与$\\beta_1\\beta_2\\beta_3$等价，则$r(\\alpha_1,\\alpha_2,\\alpha_3)=r(\\beta_1,\\beta_2,\\beta_3)$<br>\n（5）若向量组$\\alpha_1\\alpha_2\\alpha_3$与$\\beta_1\\beta_2\\beta_3$不等价，则$r(\\alpha_1,\\alpha_2,\\alpha_3)\\not= r(\\beta_1,\\beta_2,\\beta_3)$<br>\n（6）矩阵等价于向量组等价</p>\n<ol>\n<li>矩阵等价$\\Longleftrightarrow$两个矩阵具有相同的秩。</li>\n<li>两个向量组$\\alpha,\\beta$等价$\\Longleftrightarrow$向量组$\\alpha,\\beta$之间可以相互线性表示$\\Longleftrightarrow \\alpha$可以通过线性变换得到$\\beta$，反之亦然$\\Longleftrightarrow$两个向量组具有相同的秩且等于$R(\\alpha,\\beta)$。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>第三题：<br>\n利用反证法的思路求证。</p>\n</blockquote>\n<blockquote>\n<p>第四题：<br>\n（1）一个向量组$A$如果可以被另一个向量组$B$线性表示的话，那么$r(A)&lt;r(B)$。<br>\n（2）向量组&quot;臃肿性&quot;，&quot;紧凑&quot;定理：$r=r(\\alpha_1,…,\\alpha_r) \\le r(\\beta_1,…,\\beta_s) \\le s$。</p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n（1）$|A_3|\\not= 0 \\Longleftrightarrow A_3$的列向量组可以线性表示任意3维列向量。<br>\n（2）$r(\\alpha_1\\alpha_2\\alpha_3)=r(\\alpha_1\\alpha_2\\alpha_3\\beta_1\\beta_2\\beta_3) \\Longleftrightarrow \\beta_1\\beta_2\\beta_3$可由$\\alpha_1\\alpha_2\\alpha_3$线性表示。<br>\n（3）$r(\\alpha_1\\alpha_2\\alpha_3)\\not=r(\\alpha_1\\alpha_2\\alpha_3\\beta_1\\beta_2\\beta_3) \\Longleftrightarrow \\beta_1\\beta_2\\beta_3$不能被$\\alpha_1\\alpha_2\\alpha_3$线性表示。</p>\n</blockquote>\n<blockquote>\n<p>第六题：<br>\n（1）针对矩阵<br>\n若$\\alpha_1\\alpha_2…\\alpha_m$线性无关，且$\\begin{bmatrix} \\beta_1\\beta_2…\\beta_s \\end{bmatrix}=\\begin{bmatrix}\\alpha_1\\alpha_2…\\alpha_m \\end{bmatrix}P_{m\\times s}$<br>\n若$r(P_{m\\times s})=s$，则$\\beta_1\\beta_2\\beta_3$线性无关。<br>\n若$r(P_{m\\times s})&lt;s$，则$\\beta_1\\beta_2\\beta_3$线性相关。<br>\n（2）针对方阵<br>\n若$\\alpha_1\\alpha_2…\\alpha_m$线性无关，且$\\beta_1\\beta_2…\\beta_m=\\begin{bmatrix}\\alpha_1\\alpha_2…\\alpha_m \\end{bmatrix}P_{m\\times m}$<br>\n若$|P|\\not= 0$，则$\\beta_1\\beta_2…\\beta_m$线性无关；若$|P|=0$，则$\\beta_1\\beta_2…\\beta_m$线性相关。</p>\n</blockquote>\n<blockquote>\n<p>第七题：<br>\n（1）若$A_{m\\times n}B_{n\\times s}=0$，则$r(A)+r(B)\\le n$<br>\n（2）若$A\\not= 0$，则$r(A)&gt;0$<br>\n（3）$r(A_{m\\times n})&lt;n$，则$A_{m\\times n}列向量组线性相关$。<br>\n（4）$r(A_{n\\times s})&lt;n$，则$A_{m\\times n}行向量组线性相关$。</p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n向量组线性相关$\\Longrightarrow$行列式为0</p>\n</blockquote>\n<blockquote>\n<p>第九题：没有分情况讨论。<br>\n原理就是用线性代数的语言描述等式。</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n（1）<br>\n$r(AB)\\le r(B)$<br>\n$r(AB)\\le r(A)$<br>\n（2）<br>\n若$|A| \\not= 0$，则$r(AB)=r(B)$<br>\n若$|B| \\not= 0$，则$r(AB)=r(A)$<br>\n（3）<br>\n若$A$列满秩，则$r(AB)=r(B)$<br>\n若$B$列满秩，则$r(AB)=r(A)$</p>\n</blockquote>\n<blockquote>\n<p>第十一题：<br>\n（1）极大线性无关组：<br>\n假设有向量$\\alpha_1\\alpha_2\\alpha_3\\alpha_4\\alpha_5$<br>\n①$\\alpha_1\\alpha_2$线性无关。<br>\n②任意3个向量线性相关，则$\\alpha_1\\alpha_2$是一个极大物管组。<br>\n（2）向量组$\\alpha_1\\alpha_2…\\alpha_m$的极大线性无关组所含向量个数称为该向量组的秩。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n（1）通过计算我们可以知道向量组$\\beta$的行列式必需为$0$，得到一个等式。<br>\n（2）若一个向量$\\beta$能够被另一个向量组$\\alpha_1\\alpha_2\\alpha_3$线性表示的话，系数矩阵的秩就等于增广矩阵的秩$\\Longrightarrow r(\\alpha_1\\alpha_2\\alpha_3)=r(\\alpha_1\\alpha_2\\alpha_3\\beta)$</p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n（1）$r(\\alpha + \\beta) \\le r(\\alpha) + r(\\beta)$。<br>\n（2）矩阵越乘秩越小。<br>\n（3）$\\alpha,\\beta$线性相关$\\Longrightarrow \\beta=k\\alpha 或者 \\alpha=k\\beta$。</p>\n</blockquote>\n<blockquote>\n<p>第十四题：<br>\n可以的，挺基础的^ ^。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n暂时不懂C选项。</p>\n</blockquote>\n<hr>\n<h2 id=\"第四章-线性方程组\">第四章 线性方程组</h2>\n<h3 id=\"例题-5\">例题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第27题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第28题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第29题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-13\">总结</h4>\n<blockquote>\n<p>第一题：<br>\n（1）由克莱姆法则知若$|A|=0\\Longrightarrow Ax=\\beta$有无穷多解或者无解。<br>\n（2）$a$的取值可能会使得$Ax=\\beta$无解。<br>\n（3）$Ax=\\beta$通解$\\begin{cases} Ax=0的通解 \\\\ Ax=\\beta的特解 \\end{cases}$</p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n（1）$Ax=\\beta$无解$\\Longrightarrow |A|=0$。<br>\n（2）$Ax=\\beta$无解$\\Longrightarrow \\begin{bmatrix} A,\\beta \\end{bmatrix}$这个增广矩阵存在一组矛盾方程。<br>\n（3）$A^TAx=A^T\\beta$，其中$A^TA$就相当于3阶方阵，$A^T\\beta$就相当于列向量。</p>\n</blockquote>\n<blockquote>\n<p>第三题：<br>\n（1）<br>\n两个向量组等价<br>\n$\\Longrightarrow$两个向量组之间能够相互线性表示<br>\n$\\Longrightarrow r(A)=r(B)=r(A,B)$。<br>\n（2）讨论$A,B,[A,B]$之间的秩的关系。<br>\n（3）题目中说“将$\\beta_3$用$\\alpha_1\\alpha_2\\alpha_3$线性表示”其实就是让我们求$Ax=\\beta_3$的解向量。</p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n第一问：<br>\n由于全是平方项，要等于0$\\Longrightarrow$各个部分都等于0。</p>\n</blockquote>\n<blockquote>\n<p>第六题：<br>\n（1）数学归纳法。<br>\n（2）$|A|\\not= 0 \\Longrightarrow a\\not= 0 \\Longrightarrow Ax=b$有唯一解。<br>\n（3）方程组有无穷多解$\\Longrightarrow a=0$。</p>\n</blockquote>\n<blockquote>\n<p>第七题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092116908.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n（1）$AB=0 \\Longrightarrow \\begin{cases} r(A)+r(B)\\le 3 \\\\ B的所有列向量都是Ax=0的解向量 \\end{cases}$<br>\n（2）矩阵$A$为非零矩阵$\\Longrightarrow |A|\\not= 0$。<br>\n（3）分情况讨论$r(B)$的值，从而判断$r(A)$，进而知道通解有几个自由变量。<br>\n（4）自由变量必须线性相关。</p>\n</blockquote>\n<blockquote>\n<p>第九题：同第八题知识点大致。</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n（1）题目中求$A\\zeta_2=\\zeta_1$就是表示求$A$的解向量，类比一下$Ax=\\beta$。<br>\n（2）判断向量组线性无关可以判断向量组的值是为0。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：<br>\n（1）抽象矩阵，抽象方程组的题目。<br>\n（2）$A_n$有$n$个不同的特征值$\\Longrightarrow A_n$一定可以相似对角化。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092117821.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n求出$Ax=0$的基础解系中含有几个解向量。<br>\n由$\\alpha_1=2\\alpha_2-\\alpha_3 \\Longrightarrow \\alpha_1-2\\alpha_2+\\alpha_3+0\\alpha_4=0$于是$(1,-2,1,0)^T$就是$Ax=0$的一个解。</p>\n</blockquote>\n<blockquote>\n<p>第十四题：与13题类似。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n（1）若$\\zeta$是$A$的属于$\\lambda$的特征向量$\\Longrightarrow A\\zeta=\\lambda \\zeta, \\zeta\\not= 0$。<br>\n（2）若$r(A_n)=1$，则$A_n$的特征值为$n-1$个$0$,$1$个$tr(A)$。<br>\n（3）属于实对称矩阵的不同特征值的特征向量正交。<br>\n（4）$A_nx=0$基础解系含有$n-r(A)$个解向量。<br>\n（5）$Ax=0$的非零解向量是$A$的属于$\\lambda=0$的特征向量。<br>\n（6）$Ax=b$通解：$Ax=0$通解$+ Ax=b$特解。</p>\n</blockquote>\n<blockquote>\n<p>第十六题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092117782.png\" alt=\"\"></p>\n</blockquote>\n<p>第十七题：</p>\n<blockquote>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092053106.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n（1）三秩相等定理，$r(A)=r(A的列向量)=r(A的行向量)$。<br>\n（2）若$A$可逆，则$A=P_1P_2…P_i$（$P_i$为初等矩阵）。<br>\n（3）$A\\longrightarrow 列初等变换 \\longrightarrow B \\Longleftrightarrow AP=B$（$P$为初等矩阵）。<br>\n（4）$r(A_{m\\times n})=m \\Longrightarrow A_{m\\times n}x=b$一定有解。<br>\n（5）若$AB=0$，则$B$列向量都是$Ax=0$的解向量。<br>\n（6）$Ax=0$只有零解$\\Longleftrightarrow r(A_{m\\times n})=n$。</p>\n</blockquote>\n<blockquote>\n<p>第十九题：<br>\n（1）若$n&gt;m$，则$A_{m\\times n}x=0$一定有非零解。<br>\n（2）<br>\n$Ax=0$只有零解$\\Longleftrightarrow r(A)=A$列数$\\Longleftrightarrow r(A)\\not= 0$。<br>\n$Ax=0$有非零解$\\Longleftrightarrow r(A)&lt; A$列数$\\Longleftrightarrow r(A)= 0$。<br>\n（3）&quot;胖矩阵&quot;一定是降秩阵。$A_{4\\times 3}B_{3\\times 4}=C_{4\\times 4}，C$一定是降秩阵。<br>\n（4）$r(A)=A$行数，则$Ax=b$一定有解。<br>\n（5）<br>\n若$Ax=b$有解，且$r(A)&lt;A$列数，则$Ax=b$有无穷多组解。<br>\n因为行相当于约数条件，也就是方程个数；列等价于未知数个数；当列$&gt;$行的时候，约束条件杀不死我的$x$个数，于是就有无穷多组解。<br>\n（6）$r(A)=r(A^T)=r(AA^T)=r(A^TA)$。</p>\n</blockquote>\n<blockquote>\n<p>第二十一题：<br>\n（1）$Ax=0$与$Bx=0$的公共解就是$\\begin{bmatrix} A \\\\ B \\end{bmatrix}x=\\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}$的解。<br>\n（2）$A^TAx=A^Tb$有解。证明：$$r(A) = r(A^TA)\\le r(A^TA,A^Tb)=r(A^T(A,b))\\le r(A^T)=r(A)$$</p>\n</blockquote>\n<blockquote>\n<p>第二十二题：<br>\n若$Ax=0$基础解系含有$t$个向量，则$Ax=\\beta$有$t+1$线性无关解向量。</p>\n</blockquote>\n<blockquote>\n<p>第二十三题：<br>\n（A）方程组$A_{n}x=0$的所有解向量都可以由一个向量线性表示，存在以下两种情况：①、$r(A_{n})=n$，②、$r(A_{n})=n-1$。<br>\n（B）$\\zeta$是$A^{T}x=0$的解向量$\\Longrightarrow \\zeta$与$A^{T}$行向量正交$\\Longrightarrow \\zeta$与$A$列向量正交。<br>\n（D）<br>\n向量组线性无关定理：<br>\n向量组$\\alpha_1,\\alpha_2,…\\alpha_m(m\\ge 2)$线性无关的充要条件是其中任意一个向量都不能由其他向量线性表示。</p>\n</blockquote>\n<blockquote>\n<p>第二十四题：<br>\n<strong>tip</strong>：对于$\\begin{bmatrix} A, B \\end{bmatrix} \\longrightarrow \\begin{bmatrix} E, A^{-1}B \\end{bmatrix}$可以直接使得等式左边通过初等行变换变为单位矩阵$E$，右边就是$A^{-1}B$。类比于普通举证求逆的过程$\\begin{bmatrix} A, E \\end{bmatrix} \\longrightarrow \\begin{bmatrix} E, A^{-1} \\end{bmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第二十五题：<br>\n$$\\begin{aligned} AB &amp; =E \\\\ A(\\beta_1,\\beta_2,\\beta_3) &amp; = (E_1, E_2, E_3)\\end{aligned}$$<br>\n$$\\Longrightarrow  \\begin{cases} A\\beta_1=E_1 \\\\ A\\beta_2=E_2 \\\\ A\\beta_3=E_3 \\end{cases}$$<br>\n进而转化为求三个解向量的问题$（Ax=b）$，然后在组合在一起。</p>\n</blockquote>\n<blockquote>\n<p>第二十六题：方程之间有公共解，就将它们联立起来。</p>\n</blockquote>\n<h3 id=\"习题-4\">习题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"><strong>x</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第27题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第28题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第29题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第30题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-14\">总结</h4>\n<blockquote>\n<p>第一题：因为有两不同的解$\\Longrightarrow |A|=0$，求$|A|=0$得出$\\lambda$，回带判断是否存在矛盾方程。紧接着不用在意$a$继续解答即可。</p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n直接把$C$设出来：设$C=\\begin{bmatrix} x_1 &amp; x_2 \\\\ x_3 &amp; x_4 \\end{bmatrix}$。<br>\n通过化简可以得到一个关系$x_1,x_2,x_3,x_4$的一个方程组。</p>\n</blockquote>\n<blockquote>\n<p>第三题：由已知条件可以判断$a \\in \\Omega$，然后利用增广矩阵化为行最简形，由于不能出现矛盾方程，就会出现相应的等式，然后求解即可。</p>\n</blockquote>\n<blockquote>\n<p>第四题：<br>\n方程有非零解$\\Longrightarrow |A|=0$，求出$a$，然后再进行分类讨论。<br>\n要擅长化简行列式。</p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n（1）设$\\eta_1,\\eta_2,\\eta_3$为$Ax=b$的三个线性无关解向量，则有$\\eta_1 - \\eta_2，\\eta_1-\\eta_3$是$Ax=0$的线性无关的解向量。<br>\n（2）$A_{n}x=0$共有$4-r(A)\\ge 2\\Longrightarrow r(A)\\le 2$。<br>\n（3）若一个矩阵$A$的$n$阶子式的行列式的值$\\not= 0 \\Longrightarrow R(A) \\ge n$</p>\n</blockquote>\n<blockquote>\n<p>第七题：任意$n$维列向量都是$A_{m\\times n}x=0$的解向量$\\Longleftrightarrow A_{m\\times n}=0$。</p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n$B=\\beta^{T}\\alpha=\\begin{bmatrix} 1 &amp; \\frac{1}{2} &amp; 0 \\end{bmatrix}\\begin{bmatrix} 1 \\\\ 2 \\\\ 1 \\end{bmatrix}=2$是一个数，$B^2=4$。<br>\n$A^2=\\alpha\\beta^{T}\\alpha\\beta^{T}=2\\alpha\\beta^{T}=2A$。<br>\n$A^4=8A$。</p>\n</blockquote>\n<blockquote>\n<p>第九题：<br>\n（1）抽象齐次方程组问题，先找秩，然后判断方程组的个数，利用题目已知条件求出（拼凑出）$Ax=0$的解向量。<br>\n（2）$\\alpha_3=-\\alpha_1+2\\alpha_2$。</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n（1）$A_nx=0$基础解系含有$n-R(A)$个向量。<br>\n（2）<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092015295.png\" alt=\"\"><br>\n（3）$R(A_n)&lt;n \\Longleftrightarrow |A|=0$。<br>\n（4）$A^*A=|A|E$。<br>\n（5）$A^*A=0 \\Longleftrightarrow A$的所有列向量都是$A^*x=0$的解向量。<br>\n（6）$(1,0,1,0)^T$是$Ax=0$之解$\\Longleftrightarrow x_1+x_3=0$。<br>\n（7）基础解系都是线性无关的。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n（1）$Ax=\\beta$通解$= \\begin{cases} Ax=0 通解 \\\\ Ax=\\beta 特解 \\end{cases}$<br>\n（2）<br>\n若$\\eta_i+\\eta_j+\\eta_k$是$Ax=\\beta$的解<br>\n则$\\eta_i-\\eta_j$是$Ax=0$的解<br>\n$\\frac{\\eta_i+\\eta_j+\\eta_k}{3}$是$Ax=\\beta$的解<br>\n$\\frac{\\eta_i+\\eta_j}{2}$是$Ax=\\beta$的解<br>\n（3）若$\\eta_1+\\eta_2+\\eta_3$线性无关，则$\\eta_2-\\eta_1，\\eta_3-\\eta_1$线性无关。</p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n$r(\\begin{bmatrix} A &amp; \\alpha \\\\ \\alpha^T &amp; 0 \\end{bmatrix})=r(A_n)\\le n &lt; n+1$。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n（1）<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209092015295.png\" alt=\"\"><br>\n（2）$\\lambda_1\\lambda_2\\lambda_3\\lambda_4$是$Ax=b$的互不相同的解$\\Longrightarrow Ax=b$有无穷多解$\\Longrightarrow r(A)=r(A,b)&lt;n $。<br>\n（3）$Ax=0$基础解系含有$n-R(A)$个解向量。</p>\n</blockquote>\n<blockquote>\n<p>第十六题：<br>\n利用线性代数的语言描述矩阵等式<br>\n$n$阶矩阵$A$的各行元素之和均为零$\\Longrightarrow A_n\\begin{bmatrix} 1 \\\\ 1 \\\\ … \\\\ 1 \\end{bmatrix}=\\begin{bmatrix} 0 \\\\ 0 \\\\ … \\\\ 0 \\end{bmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n（1）$Ax=\\beta$通解$= \\begin{cases} Ax=0 通解 \\\\ Ax=\\beta 特解 \\end{cases}$<br>\n（2）<br>\n若$\\alpha_1\\alpha_2\\alpha_3$是$Ax=b$的三个解向量</p>\n<ol>\n<li>则$\\frac{1}{k_1+k_2+k_3}(k_1\\alpha_1+k_2\\alpha_2+k_3\\alpha_3)$是$Ax=b$解向量。</li>\n<li>若$C_1+C_2+C_3=0$，则$C_1\\alpha_1+C_2\\alpha_2+C_3\\alpha_3$是$Ax=0$解向量。</li>\n</ol>\n<p>（3）$A_nx=0$基础解系含有$n-r(A)$个解向量。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：同十七题。</p>\n</blockquote>\n<blockquote>\n<p>第十九题：$Ax=\\beta$通解$= \\begin{cases} Ax=0 通解 \\\\ Ax=\\beta 特解 \\end{cases}$。</p>\n</blockquote>\n<blockquote>\n<p>第二十一题：<br>\n（1）$A$是正交矩阵$\\Longleftrightarrow A$列（行）向量组是两两正交的单位向量组。<br>\n（2）$A$是正交矩阵$\\Longleftrightarrow A^TA=E （A^{-1}=A^T）$。<br>\n（3）$A$是正交矩阵$\\Longrightarrow |A|=1$或$|A|=-1（|A| \\not= 0）$。</p>\n</blockquote>\n<blockquote>\n<p>第二十二题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202211232145203.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第二十三题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209171920016.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第二十四题：<br>\n$Ax=b$有唯一解$\\Longleftrightarrow r(A)=r(A,b)=A$列数。<br>\n$Ax=0$只有零解$\\Longleftrightarrow r(A)=A$列数，相当于约束死了。<br>\n$Ax=b$有唯无穷多解$\\Longleftrightarrow r(A)=r(A,b)&lt; A$ 列数。<br>\n$Ax=0$有非零解$\\Longleftrightarrow r(A)&lt; A$ 列数，约束不死。</p>\n</blockquote>\n<blockquote>\n<p>第二十六题：考虑秩。</p>\n</blockquote>\n<blockquote>\n<p>第二十七题：矩阵经过初等变换不改变矩阵的秩。</p>\n</blockquote>\n<blockquote>\n<p>第二十八题：两个方程组有公共解$\\Longrightarrow$将两个方程联立解$Ax=b$的线性方程。</p>\n</blockquote>\n<blockquote>\n<p>第二十九题：满足$x_1=x_2 \\Longrightarrow x_1-x_2=0$是一个条件。</p>\n</blockquote>\n<blockquote>\n<p>第三十题：<br>\n证明$Ax=0$与$A^TAx=0$同解。<br>\n（1）设$\\Phi$是$Ax=0$的解，则$A\\Phi=0$，用$A^T$左乘等式两端$A^TA\\Phi=0$，于是$\\Phi$也是$A^TAx=0$的解。<br>\n（2）设$\\eta$是$A^TAx=0$的解，则$A^TA\\eta=0$，用$\\eta^T$左乘等式两端，有$\\eta^TA^TA\\eta=0 \\Longrightarrow (A\\eta)^T(A\\eta)=0 \\Longrightarrow ||A_n||^2=0 \\Longrightarrow A\\eta=0$，∴$\\eta$也是$Ax=0$的解。</p>\n</blockquote>\n<blockquote>\n<p>第三十一题：<br>\n①、③：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202210182012856.png\" alt=\"\"><br>\n②、④：不能由前面推出后面。</p>\n</blockquote>\n<blockquote>\n<p>第三十二题：<br>\n（1）若$A\\longrightarrow 初等行变换 \\longrightarrow B$，则$Ax=0$的解和$Bx=0$同解。<br>\n（2）$Ax=0$与$Bx=0$同解为$r(A)=r(B)=r(\\begin{matrix} A \\\\ B \\end{matrix})=r(A^T,B^T)$。</p>\n</blockquote>\n<h2 id=\"第五章-特征值与特征向量\">第五章 特征值与特征向量</h2>\n<h3 id=\"例题-6\">例题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-15\">总结</h4>\n<blockquote>\n<p>第一题<br>\n矩阵相似对角化的过程<br>\n（1）第一步：求出$n$阶矩阵$A$的$n$个特征值$\\lambda_1,\\lambda_2,…,\\lambda_n$。<br>\n（2）求出$n$个特征值$\\lambda_1,\\lambda_2,…,\\lambda_n$对应的$n$个特征向量$\\alpha_1,\\alpha_2,…,\\alpha_n$<br>\n于是有$A\\alpha_1=\\lambda_1\\alpha_1，A\\alpha_2=\\lambda_2\\alpha_2，…，A\\alpha_n=\\lambda_n\\alpha_n$<br>\n$(A\\alpha_1,A\\alpha_2,…,A\\alpha_n)=(\\lambda_1\\alpha_1,\\lambda_2\\alpha_2,…,\\lambda_n\\alpha_n)$<br>\n$A(\\alpha_1,\\alpha_2,…,\\alpha_n)=(\\alpha_1,\\alpha_2,…,\\alpha_n) \\begin{bmatrix} \\lambda_1 &amp; &amp; &amp; \\\\ &amp; \\lambda_2 &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; \\\\ &amp; &amp; &amp; \\lambda_n \\end{bmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n矩阵仅有两个不同的特征值$\\Longrightarrow$直接求出所有特征值，发现与$a$无关，接下来通过讨论$b$的值而确定$a$的值然后再求$P$矩阵。<br>\n矩阵相似对角化的过程可看第一题。</p>\n</blockquote>\n<blockquote>\n<p>第三题：<br>\n（1）矩阵相似对角化的过程可看第一题。<br>\n（2）若$P_1,P_2$是$A$属于$\\lambda_0$的特征向量，则$k_1P_1+k_2P_2$（$k_1,k_2$不同时为空）也是$A$的属于$\\lambda_0$的特征向量。<br>\n（3）<br>\n若$P_1$是$A$的属于$\\lambda_1$的特征向量<br>\n$P_2$是$A$的属于$\\lambda_2$的特征向量<br>\n且$\\lambda_1\\not= \\lambda_2$<br>\n则$P_1+P_2$不是$A$的特征向量。</p>\n</blockquote>\n<blockquote>\n<p>第四题：<br>\n（1）$AB=0\\Longrightarrow R(A)+R(B)\\ge n$<br>\n（2）$R(A+B)\\ge R(A)+R(B)$<br>\n（3）$R(kA)=R(A),(k\\not= 0)$<br>\n（4）$R(E_n)=n$<br>\n（5）若$(A-aE)(A-bE)=0$，且$a\\not= b$，则$A_n$可相似对角化。<br>\n（6）若$R(A_n)=n-1$，且$A$的特征值为$\\lambda_1,\\lambda_2,…,\\lambda_3$，则$A^*$的特征值为$0,0,…,0,\\displaystyle\\sum_{i=1}^{b-1}\\lambda_i$</p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n（1）若$A$与$B$相似，则$A$与$B$有相同的特征值<br>\n（2）若$\\lambda$是$A$的特征值，$\\alpha$是$A$的特征向量$(A\\alpha=\\lambda\\alpha,\\alpha \\not= 0)$，则：</p>\n<ol>\n<li>$f(\\lambda)$是$f(A)$的特征值</li>\n<li>$\\alpha$是$f(A)$的特征向量</li>\n<li>$\\frac{|A|}{\\lambda}$是$A^*$特征值</li>\n<li>$\\alpha$是$A^*$的特征向量</li>\n</ol>\n<p>（3）对于一个实对称矩阵不同特征值的特征向量是正交的，所以单根的特征向量就是重根对应的多项式矩阵的任何一行或一列。<br>\n例：假设$A$是一个实对称矩阵，特征值分别为$\\lambda_1=\\lambda_2=1,\\lambda_3=7$。$\\lambda_1和\\lambda_2$对应的特征多项式矩阵为$A-E=\\begin{bmatrix} 1 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix}$，那么$\\lambda_3=7$时对应的特征向量就是特征多项式的第一行，于是$\\lambda_3$的特征向量就是$\\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}$。</p>\n</blockquote>\n<blockquote>\n<p>第六题：<br>\n（1）$r(A)&lt;n\\Rightarrow |A|=0\\Rightarrow 0$是$A$的特征值。<br>\n（2）<br>\n关于特征值的几何重数和代数重数。</p>\n<ol>\n<li>特征值的代数重数：若$\\lambda_0$是矩阵$A$的$m$重特征值，则称$m$为特征值$\\lambda_0$的代数重数。</li>\n<li>特征值的几何重数：若齐次线性方程组$(A-\\lambda_{0}E)x=0$基础解系所含解向量的个数为$t$，则称$t$为特征值$\\lambda_0$的集合重数。<br>\n例如矩阵$A=\\begin{bmatrix} 3 &amp; 0 &amp; -1 \\\\ 1 &amp; 3 &amp; 1 \\\\ 0 &amp; 0 &amp; 2 \\end{bmatrix}$的特征值为$\\lambda_1=\\lambda_2=3,\\lambda_3=2$，当$\\lambda_1=\\lambda_2=3$时，解方程组$(A-3E)x=0$，解得基础解系为$\\begin{bmatrix} 0 \\\\ 1 \\\\ 0 \\end{bmatrix}$，说明特征值3的代数重数是2，几何重数是1，此时，代数重数大于几何重数。</li>\n</ol>\n<p>（3）若矩阵$A$代数重数$\\ge$几何重数$\\Longrightarrow$至少有$n-r(A)$个特征值为$0：\\lambda_1=\\lambda_2=…=\\lambda_{n-1}=0$。<br>\n（4）$\\displaystyle\\sum_{i=1}^{n}\\lambda_{i}=\\displaystyle\\sum_{i=1}^{n}a_{ii}$<br>\n（5）若$A$找不到$n$个线性无关的特征向量$\\Longrightarrow A$不能相似对角化。</p>\n</blockquote>\n<blockquote>\n<p>第七题：<br>\n证明向量组线性无关的方法之一：<br>\n假设有$k_1\\lambda_1 +k_2\\lambda_2 +k_3\\lambda_3=0$，若$k_1=k_2=k_3=0$，只有唯一解，那么$\\lambda_1,\\lambda_2,\\lambda_3$线性无关。</p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n判断两个矩阵是否相似<br>\n（1）$A$与$B$有相同特征值<br>\n（2）$A$与$B$都能相似对角化<br>\n则$A$与$B$相似，也就是$A$与$B$与对角阵$\\begin{bmatrix} \\lambda_1 &amp; &amp; \\\\ &amp; \\lambda_2 &amp; \\\\ &amp; &amp; \\lambda_3 \\end{bmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第九题：<br>\n（1）<br>\n$A_n$可以相似对角化的充要条件</p>\n<ol>\n<li>$A$有$n$个线性无关特征向量</li>\n<li>$A$的所有特征值的集合重数都等于代数重数</li>\n</ol>\n<p>（2）三角矩阵的特征值为主对角线上元素的值<br>\n（3）$A_nx=0$基础解系有$n-r(A)$个解向量</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n注意$E$是个变色龙，$E=PEP^{-1}$。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：求出二重根，分类讨论$a$的值，然后求相似对角化。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n解决高次幂可以使用对角矩阵转化的方法：若$A$相似与对角矩阵$\\wedge$，即存在可逆矩阵$P$，使得$P^{-1}AP=\\wedge$，则$A=P\\wedge P^{-1}\\Longrightarrow A^n=P\\wedge^nP^{-1}$。</p>\n</blockquote>\n<blockquote>\n<p>第十三题：<br>\n（1）矩阵相似$\\Longleftrightarrow |A|=|B|,tr(A)=tr(B)$。<br>\n（2）对于可逆矩阵$P$答案不唯一，因为在过程中由于特征向量选取不同会导致$P$的值也不同，反正最后能够使得$P^{-1}AP=B$这个式子成立即可。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n（1）$A_n$可以相似对角化$\\Longleftrightarrow A_n$有$n$个线性无关的特征向量。<br>\n（2）实对称矩阵一定能相似对角化<br>\n（3）若$r(A_n)=1$，则$A$的特征值为$n-1$个$0$，1个$tr(A)$<br>\n（4）$r(AB)\\le R(A)$<br>\n（5）$R(非零向量)=1$<br>\n（6）若$f(A)=0$，则$A$的特征值只能在方程$f(\\lambda)=0$的根中选取。<br>\n（7）$tr(\\alpha\\beta^{T})=\\alpha^T\\beta$<br>\n（8）$R(A+B)\\le R(A)+R(B)$<br>\n（9）若$A_nB_n=0_n$，则$R(A)+R(B)\\le n$<br>\n（10）$r(kA)=R(A)$<br>\n（11）$R(E_n)=n$<br>\n（12）若有$(A_n-aE)(A_n-bE)=0(a\\not= b)$，则$A$可相似对角化。</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n（1）$\\alpha_1,\\alpha_2,…,\\alpha_n$线性相关形象定理：至少存在一个向量可由其余向量线性表示。<br>\n（2）$\\alpha_1,\\alpha_2$线性相关$\\Longrightarrow \\alpha_2=k\\alpha_1(\\alpha_1\\not= 0)$<br>\n（3）<br>\n$|P|\\not= 0 \\Longrightarrow P$可逆矩阵$\\Longrightarrow P$列向量线性无关。<br>\n$|P|= 0 \\Longrightarrow P$不可逆矩阵$\\Longrightarrow P$列向量线性相关。<br>\n（4）$A\\alpha=k\\alpha (\\alpha\\not= 0)\\Longrightarrow \\alpha$是$A$的属于$k$的特征向量。<br>\n（5）<br>\n向量组与向量组的转化<br>\n若存在两个向量组$\\begin{bmatrix} A\\alpha &amp; 6\\alpha-A\\alpha \\end{bmatrix}$和$\\begin{bmatrix} \\alpha &amp; A\\alpha \\end{bmatrix}$<br>\n$\\Longrightarrow \\begin{bmatrix} A\\alpha &amp; 6\\alpha-A\\alpha \\end{bmatrix} = \\begin{bmatrix} \\alpha &amp; A\\alpha \\end{bmatrix}\\begin{bmatrix} 0 &amp; 6 \\\\ 1 &amp; -1 \\end{bmatrix}$<br>\n（6）相似对角化：若存在可逆矩阵$P$使得$P^{-1}AP=\\wedge$（对角阵），有的矩阵可以，有的矩阵不可以。<br>\n（7）矩阵$A_n$可以相似对角化$\\Longleftrightarrow A_n$有$n$个线性无关特征向量$\\Longleftarrow A_n$有$n$个互不相等的特征值。<br>\n（8）求矩阵的特征值。<br>\n（9）矩阵相似具有传递性，若$A$与$B$相似，$B$与$C$相似，则$A$与$C$也相似。<br>\n（10）<br>\n反证法：<br>\n<strong>使用条件</strong>：…不是…，…不可…<br>\n假设所要证明的逆命题正确<br>\n$\\ldots$<br>\n得出于定理，公理，已知条件矛盾结论。则假设错误，于是原命题正确。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n（1）<br>\n若$A$的各行元素之和均为$k$<br>\n则有$A\\begin{bmatrix} 1 \\\\ 1 \\\\ \\ldots \\\\ 1 \\end{bmatrix}=k\\begin{bmatrix} 1 \\\\ 1 \\\\ \\ldots \\\\ 1 \\end{bmatrix}$<br>\n则有$k$是$A$的特征值，所对应特征向量为$\\begin{bmatrix} 1 \\\\ 1 \\\\ \\ldots \\\\ 1 \\end{bmatrix}$<br>\n（2）$Ax=0$的非零解向量为$A$属于特征值$0$的特征向量。</p>\n</blockquote>\n<blockquote>\n<p>第十九题：<br>\n（1）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（2）若$B$为实对称阵$(B^T=B)$，则属于不同特征值的特征向量是正交（垂直）的。</p>\n</blockquote>\n<blockquote>\n<p>第二十题：<br>\n（1）若$B$为实对称阵$(B^T=B)$，则属于不同特征值的特征向量是正交（垂直）的。<br>\n（2）正交矩阵必须单位化。<br>\n（3）$BA^{-1}$求法：<br>\n$\\begin{bmatrix} A \\\\ B \\end{bmatrix} \\longrightarrow 初等列变换 \\longrightarrow \\begin{bmatrix} E \\\\ BA^{-1} \\end{bmatrix}$</p>\n</blockquote>\n<h3 id=\"习题-5\">习题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第24题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第25题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第26题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-16\">总结</h4>\n<blockquote>\n<p>第二题：<br>\n（1）$A_n$可以相似对角化$\\Longleftarrow A_n$有$n$个互不相等的特征值。<br>\n（2）$A_n$可以相似对角化$\\Longleftrightarrow A_n$有$n$个线性无关的特征向量。<br>\n（3）若$A$是实对称矩阵，则$A$的属于不同特征值的特征向量正交。<br>\n（4）$\\alpha_1,\\alpha_2,…,\\alpha_n$线性无关$\\Longrightarrow \\alpha_1,\\alpha_2,…,\\alpha_n$两两线性无关。</p>\n</blockquote>\n<blockquote>\n<p>第七题：<br>\n矩阵相似对角化的过程<br>\n（1）第一步：求出$n$阶矩阵$A$的$n$个特征值$\\lambda_1,\\lambda_2,…,\\lambda_n$。<br>\n（2）求出$n$个特征值$\\lambda_1,\\lambda_2,…,\\lambda_n$对应的$n$个特征向量$\\alpha_1,\\alpha_2,…,\\alpha_n$<br>\n于是有$A\\alpha_1=\\lambda_1\\alpha_1，A\\alpha_2=\\lambda_2\\alpha_2，…，A\\alpha_n=\\lambda_n\\alpha_n$<br>\n$(A\\alpha_1,A\\alpha_2,…,A\\alpha_n)=(\\lambda_1\\alpha_1,\\lambda_2\\alpha_2,…,\\lambda_n\\alpha_n)$<br>\n$A(\\alpha_1,\\alpha_2,…,\\alpha_n)=\\alpha_1,\\alpha_2,…,\\alpha_n \\begin{bmatrix} \\lambda_1 &amp; &amp; &amp; \\\\ &amp; \\lambda_2 &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; \\\\ &amp; &amp; &amp; \\lambda_n \\end{bmatrix}$</p>\n</blockquote>\n<blockquote>\n<p>第八题：<br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209171918879.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>第九题：<br>\n（1）若$A$与$B$相似，则$A$与$B$有相同的特征值。<br>\n（2）<br>\n若$A$与$B$相似，则$A$与$B$的每一个特征值的集合重数都相同。<br>\n例：假设$A$的特征值为$1,2,2$，所对应的特征向量$\\lambda_1=1$的特征向量为$P_1$，$\\lambda_2=\\lambda_3=2$的特征向量为$P_2,P_3$，为二重特征向量。<br>\n假设$B$的特征值为$1,2,2$，所对应的特征向量$\\lambda_1=1$的特征向量为$P_1$，$\\lambda_2=\\lambda_3=2$的特征向量为$P_2$，为一重特征向量。<br>\n此时$A$与$B$不相似。<br>\n（3）三角矩阵的特征值就是主对角线上的元素。<br>\n（4）$Ax=0$的基础解系含有$n-r(A)$个解向量。</p>\n</blockquote>\n<blockquote>\n<p>第十题：<br>\n（1）若$\\alpha,\\beta$为$n$维列向量，则$\\alpha\\beta^T$的特征值为$n-1$个$0$和$tr(\\alpha\\beta^T)=\\alpha^T\\beta$。<br>\n（2）若$A$与$B$相似，则$A$与$B$有相同的特征值。</p>\n</blockquote>\n<blockquote>\n<p>第十一题：<br>\n若$A$能相似对角化可以得出以下结论：<br>\n（1）$A$有$n$个线性无关的特征向量。<br>\n（2）$n$的每一个特征值的几何重数都等于其代数重数。<br>\n以下条件可以推出矩阵$A$可以相似对角化。<br>\n（1）若$n$解矩阵$A$有$n$个互不相等的特征值，则$A$可以相似对角化。<br>\n（2）$n$阶实对称矩阵$A$一定可以对角化。</p>\n</blockquote>\n<blockquote>\n<p>第十二题：<br>\n若$A$与$B$相似<br>\n（1）相似则等价<br>\n（2）相似则等秩<br>\n（3）相似则特征值相等<br>\n（4）相似则行列式相等<br>\n（5）相似则迹$tr$相等</p>\n</blockquote>\n<blockquote>\n<p>第十四题：若$A$可以相似对角化$\\Longrightarrow A$的$n$重特征值对应$n$个线性无关的特征向量。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n（1）若$\\alpha$是$A$属于$\\lambda$的特征向量，则$A\\alpha=\\lambda\\alpha$，且$\\alpha \\not= 0$。<br>\n（2）$A$的属于不同特征值的特征向量线性无关。<br>\n（3）<br>\n用定义证明$\\alpha_1\\alpha_2\\alpha_3$线性无关的方法：<br>\n设$k_1\\alpha_1+k_2\\alpha_2+k_3\\alpha_3=0$<br>\n$…$<br>\n最后得到$k_1=0,k_2=0,k_3=0$，则$\\alpha_1,\\alpha_2,\\alpha_3$线性无关。<br>\n（4）若3个3为列向量线性无关，则$\\begin{bmatrix} \\alpha_1 &amp; \\alpha_2 &amp; \\alpha_3 \\end{bmatrix}$是可逆矩阵。<br>\n（5）若$\\alpha_1,\\alpha_2,\\alpha_3$线性无关，则方程组$x_1\\alpha_1+x_2\\alpha_2+x_3\\alpha_3=0$只有零解。</p>\n</blockquote>\n<blockquote>\n<p>第十六题：<br>\n（1）若$A$与$B$相似，则$A$和$B$有相同的特征值。<br>\n（2）若$A$可以相似对角化，则$R(A)$可以由$A$的非零特征值的个数来确定，$R(A)=A的非零特征值的个数$。<br>\n（3）实对称矩阵一定可以相似对角化。<br>\n（4）若$A$可以相似对角化，则$A+kE$也可以相似对角化。</p>\n</blockquote>\n<blockquote>\n<p>第十七题：<br>\n（1）若$A^2+A-2E=0$，则$A$的特征值在$x^2+x-2=0$的根中选取。<br>\n（2）$|A_3|=\\lambda_1\\lambda_2\\lambda_3$<br>\n（3）若$\\lambda$是$A$的特征值$(\\lambda \\not= 0)$，则$\\frac{|A|}{\\lambda}$是$A^*$的特征值。<br>\n（4）$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n（1）特征值几何重数$\\le$代数重数。<br>\n（2）若$\\alpha_1,\\alpha_2$线性无关，则$k_1\\alpha_1+k_2\\alpha_2=0$只有零解：$k_1=0,k_2=0$。<br>\n（3）$|A_2|=\\lambda_1\\lambda_2$。<br>\n（4）若$\\alpha$是$A$属于$\\lambda$的特征向量，则$A\\alpha=\\lambda\\alpha$。</p>\n</blockquote>\n<blockquote>\n<p>第十九题：<br>\n（1）实对称矩阵一定可以相似对角化。<br>\n（2）若$A$可以相似对角化，则$R(A)=A$的非零特征值的个数。<br>\n（3）若$f(A)=0$，则$A$的特征值只能在方程$f(x)=0$的根中选取。</p>\n</blockquote>\n<blockquote>\n<p>第二十一题：<br>\n将$a$视作常数，然后计算，不用想复杂了。</p>\n</blockquote>\n<blockquote>\n<p>第二十二题：<br>\n（1）$A$的每一行元素之和都等于$a$，则$A\\begin{bmatrix} 1 \\\\ 1 \\\\ \\ddots \\\\ 1 \\end{bmatrix}=a\\begin{bmatrix} 1 \\\\ 1 \\\\ \\ddots \\\\ 1 \\end{bmatrix}$，$a$是$A$的特征值，$\\begin{bmatrix} 1 \\\\ 1 \\\\ \\ddots \\\\ 1 \\end{bmatrix}$是$A$的属于$a$的特征向量。<br>\n（2）$R(A_n-kE)&lt;n \\Longleftrightarrow |A-kE|=0$<br>\n（3）$|A-kE|=0=0\\Longleftrightarrow k$是$A$的特征值。<br>\n（4）若$\\alpha$是$A$的特征向量，则$k\\alpha（k\\not=0）$也是$A$的特征向量。<br>\n（5）属于实对称阵不同特征值的特征向量正交。<br>\n（6）特征值几何重数$\\le$代数重数。<br>\n（7）对于实对称阵，它的所有几何重数$=$代数重数。</p>\n</blockquote>\n<blockquote>\n<p>第二十三题：<br>\n（1）若$A=(\\alpha_1,\\alpha_2,\\alpha_3)$，且$k_1\\alpha_1+k_2\\alpha_2+k_3\\alpha_3=0$，则$Ax=0$有一个解向量为$\\begin{bmatrix} k_1 \\\\ k_2 \\\\ k_3 \\end{bmatrix}$。<br>\n（2）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（3）若$\\alpha$是$A$的特征向量，则$\\alpha$也是$f(A)$的特征向量。<br>\n（4）实对称阵的属于不同特征值的特征向量正交。</p>\n</blockquote>\n<blockquote>\n<p>第二十四题：<br>\n（1）<br>\n矩阵相似对角化的过程<br>\n（1）第一步：求出$n$阶矩阵$A$的$n$个特征值$\\lambda_1,\\lambda_2,…,\\lambda_n$。<br>\n（2）求出$n$个特征值$\\lambda_1,\\lambda_2,…,\\lambda_n$对应的$n$个特征向量$\\alpha_1,\\alpha_2,…,\\alpha_n$<br>\n于是有$A\\alpha_1=\\lambda_1\\alpha_1，A\\alpha_2=\\lambda_2\\alpha_2，…，A\\alpha_n=\\lambda_n\\alpha_n$<br>\n$(A\\alpha_1,A\\alpha_2,…,A\\alpha_n)=(\\lambda_1\\alpha_1,\\lambda_2\\alpha_2,…,\\lambda_n\\alpha_n)$<br>\n$A(\\alpha_1,\\alpha_2,…,\\alpha_n)=\\alpha_1,\\alpha_2,…,\\alpha_n \\begin{bmatrix} \\lambda_1 &amp; &amp; &amp; \\\\ &amp; \\lambda_2 &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; \\\\ &amp; &amp; &amp; \\lambda_n \\end{bmatrix}$<br>\n（2）若$\\alpha$是$A$的特征向量，则$k\\alpha$一定也是$A$的特征向量$（k\\not=0）$。<br>\n（3）若$\\alpha_1,\\alpha_2$是$A$的属于$\\lambda_1=5$的特征向量，则$k_1\\alpha_1+k_2\\alpha_2（k_1,k_2不同时为零）$一定也是$A$的属于$\\lambda_1=5$的特征向量。<br>\n（4）若$\\alpha_1,\\alpha_2$是$A$的属于不同特征值$\\alpha_1,\\alpha_2$的特征向量，则$k_1\\alpha_1+k_2\\alpha_2（k_1\\not=0且k_2\\not=0）$一定不是$A$的特征向量。<br>\n（5）<br>\n有$\\begin{bmatrix} \\alpha_2-\\alpha_3,\\alpha_3+\\alpha_2 \\end{bmatrix}=\\begin{bmatrix} \\alpha_2,\\alpha_3 \\end{bmatrix} \\begin{bmatrix} 1 &amp; 1 \\\\ -1 &amp; 1 \\end{bmatrix}$。<br>\n若$\\begin{bmatrix} 1 &amp; 1 \\\\ -1 &amp; 1 \\end{bmatrix}$可逆，则$\\begin{bmatrix} \\alpha_2-\\alpha_3,\\alpha_3+\\alpha_2 \\end{bmatrix}$线性无关。</p>\n</blockquote>\n<blockquote>\n<p>第二十五题：<br>\n（1）若$A_n(A_n-2E_n)=0$，则$r(A)+r(A-2E)=n$。<br>\n证明：<br>\n$$\\begin{aligned} &amp; \\because A(A-2E)=0 \\therefore r(A)+r(A-2E)\\le n \\\\ &amp; \\because r(A)+r(A-2E)=r(A)+r(2E-A)\\ge r(A+2E-A)=n<br>\n\\\\ &amp; \\therefore r(A)+r(A-2E)=n \\\\ 结论：&amp; 若(A_n+k_1E)(A_n+k_2E)=0,k_1\\not=k_2，则r(A_n+k_1E)+r(A_n+k_2E)=n \\end{aligned}$$<br>\n（2）<br>\n$r(A_n)&lt;n\\Longleftrightarrow |A_n|=0$。<br>\n$|A_n|=0\\Longleftrightarrow 0$是$A$的特征值。<br>\n（3）<br>\n$Ax=0$非零解向量是$A$的属于$\\lambda=0$的特征值。<br>\n$(A-2E)x=0$非零解向量是$A$的属于$\\lambda=2$的特征值。<br>\n（4）$A$的特征值的代数重数$\\ge$几何重数。<br>\n（5）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（6）$A_nx=0$的基础解系共有$n-r(A)$个解向量。<br>\n（7）$|A_n|=\\lambda_1\\lambda_2…\\lambda_n$。<br>\n（8）$A_n$有$n$个解向量。</p>\n</blockquote>\n<blockquote>\n<p>第二十六题：<br>\n（1）若$A_3$有3个互不相同的特征值$\\lambda_1\\lambda_2\\lambda_3$，则$A$一定可以与对角阵$\\wedge$相似，$\\wedge=\\begin{bmatrix} \\lambda_1 &amp; &amp; \\\\ &amp; \\lambda_2 &amp; \\\\ &amp; &amp; \\lambda_3  \\end{bmatrix}$。<br>\n（2）若$A_3$与三阶对角阵$\\wedge=\\begin{bmatrix} \\lambda_1 &amp; &amp; \\\\ &amp; \\lambda_2 &amp; \\\\ &amp; &amp; \\lambda_3  \\end{bmatrix}$相似，则$A_3$的特征值就是$\\lambda_1,\\lambda_2,\\lambda_3$。<br>\n（3）若$A$为实对称矩阵，则一定存在正交矩阵使得$Q^TAQ=\\wedge$。</p>\n</blockquote>\n<h2 id=\"第六章-二次型\">第六章 二次型</h2>\n<h3 id=\"例题-7\">例题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第12题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第13题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第14题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第15题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第16题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第17题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第18题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第19题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第20题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第21题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第22题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第23题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-17\">总结</h4>\n<blockquote>\n<p>第一题：<br>\n（1）若$f(A)=0$，则$A$的特征值在$f(\\lambda)=0$的根中选取。<br>\n例：<br>\n$$\\begin{aligned}A^2-A-6E&amp;=0 \\\\ (A-3E)(A+2E)&amp;=0 \\\\ (\\lambda-3)(\\lambda+2)&amp;=0 \\longrightarrow \\lambda_1=3,\\lambda_2=-2 \\\\ 特征值只能在&amp;-2,3中选取  \\end{aligned}$$<br>\n（2）$\\lambda_1,\\lambda_2,…,\\lambda_n=|A_n|$。<br>\n（3）二次型$f=x^TAx$总可以经过正交变换$x=py$化为标准形式额二次型$f=y^T\\wedge y$。<br>\n（4）标准的二次型$f=y^T\\wedge y$总可以经过可逆变换$y=Cz$化为规范形$f=Z^T \\begin{bmatrix} 1 &amp; &amp; &amp; \\\\ &amp; -1 &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; \\\\ &amp; &amp; &amp; 0 \\end{bmatrix}Z$，也就是对角阵上只有$0,-1,1$三种情况。</p>\n</blockquote>\n<blockquote>\n<p>第二题：<br>\n掌握相似对角化的过程。</p>\n</blockquote>\n<blockquote>\n<p>第三题：<br>\n（1）若$\\alpha=\\begin{bmatrix} a_1 \\\\ a_2 \\\\ a_3 \\end{bmatrix}，\\beta=\\begin{bmatrix} b_1 \\\\ b_2 \\\\ b_3 \\end{bmatrix}$，则$\\alpha^T\\beta=\\beta^T\\alpha=a_1b_1+a_2b_2+a_3b_3$（向量内积）。<br>\n（2）若列向量$\\alpha$与$\\beta$正交，则$\\alpha^T\\beta=\\beta^T\\alpha=0$。<br>\n（3）若列向量$\\alpha$是单位向量，则$\\alpha^T\\alpha=1$。<br>\n（4）若$A_n\\alpha=k\\alpha$，列向量$\\alpha\\not=0$，则$k$是$A$的特征值。<br>\n（5）若$\\alpha$为列向量，则$R(\\alpha\\alpha^T)\\le R(\\alpha) \\le 1$。<br>\n（6）$R(A+B)\\le R(A)+R(B)$。<br>\n（7）若$R(A_n)&lt;n$，则$|A|=0$。<br>\n（8）若$|A|=0$，则$0$是$A$的特征值。<br>\n（9）若二次型矩阵$A_3$的特征值是$a,b,c$，则$x^TAx$在正交变换下的标准型是$ay_1^2+by_2^2+cy_3^2$。</p>\n</blockquote>\n<blockquote>\n<p>第五题：<br>\n（1）二次型$x^TAx$的秩就等于$A$的秩。<br>\n（2）若$R(A_3)=1$，则$A$的特征值为$0,0,\\lambda_3$。<br>\n（3）<br>\n若$A_3$的各行元素之和均为$k$，<br>\n则有$A\\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}=k\\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}$<br>\n则有$k$是$A$的特征值，$\\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}$是$A$属于$k$的特征向量。<br>\n（4）若二次型矩阵$A_3$的特征值是$a,b,c$，则$x^TAx$在正交变换下的标准型是$ay_1^2+by_2^2+cy_3^2$。</p>\n</blockquote>\n<blockquote>\n<p>第六题：<br>\n惯性定理：对于一个二次型$f(x_1,x_2,…,x_n)=x^TAx$，无论用怎样的可逆线性变换使它化为标准型，其中的正惯性指数，负惯性指数一定都是唯一确定的。</p>\n</blockquote>\n<blockquote>\n<p>第十四题：<br>\n（1）$R(A^TA)=R(A)=R(A^T)$。<br>\n（2）二次型的正交变换问题。</p>\n</blockquote>\n<blockquote>\n<p>第十五题：<br>\n（1）<br>\n&quot;ab&quot;矩阵的秩<br>\n$A=\\begin{bmatrix} a &amp; b &amp; b \\\\ b &amp; a &amp; b \\\\ b &amp; b &amp; a \\end{bmatrix}$，当$\\begin{cases} a=b\\not=0\\rightarrow R(A)=1 \\\\ 2b+a=0,a\\not=0\\rightarrow R(A)=2 \\end{cases}$<br>\n（2）若$P$可逆，$P^TAP=B$，表示$A$与$(B)$合同，则$R(A)=R$。<br>\n（3）同一个二次型其规范形式唯一的形式。</p>\n</blockquote>\n<blockquote>\n<p>第十八题：<br>\n（1）若$A$为实对称矩阵，则属于不同特征值的特征向量正交。<br>\n（2）若$A$为实对称矩阵，且$\\lambda$是$A$的$k$重特征值，则$A$的属于$\\lambda$的线性无关的特征向量有$k$个，几何重数$=$代数重数。<br>\n（3）若$\\lambda$是$A$的特征值，则$f(\\lambda)$是$f(A)$的特征值。<br>\n（4）若对称矩阵$A$的所有特征值都为正，则$A$正定。</p>\n</blockquote>\n<blockquote>\n<p>第十九题：<br>\n（1）同阶对称矩阵$A$与$B$有相同的正、负惯性指数，则$A$与$B$合同。<br>\n（2）二阶&quot;ab&quot;矩阵特征值：$A=\\begin{bmatrix} a &amp; b \\\\ b &amp; a \\end{bmatrix}$的特征值为：$a-b,a+b$。</p>\n</blockquote>\n<blockquote>\n<p>第二十题：<br>\n（1）<br>\n$A$与$B$相似：$P^{-1}AP=B$（$P$可逆）。<br>\n$A$与$B$相似：$P^{T}AP=B$（$P$可逆）。<br>\n（2）<br>\n判定方法：<br>\n若$A$与$B$有相同的特征值，且$A$与$B$都能相似对角化，则$A$与$B$相似。<br>\n$A$与$B$特征值的正负个数相同      $\\Longleftrightarrow A$与$B$有相同的正负惯性指数$\\Longleftrightarrow A$与$B$合同。<br>\n（3）对于&quot;ab&quot;矩阵$A=\\begin{bmatrix} 2 &amp; -1 &amp; -1 \\\\ -1 &amp; 2 &amp; -1 \\\\ -1 &amp; -1 &amp; 2 \\end{bmatrix}$<br>\n可以看主对角线减几与其余元素相同：$2-3=-1$<br>\n故$\\lambda_1=\\lambda_2=3$<br>\n又根据$tr(A)=2+2+2=\\lambda_1+\\lambda_2+\\lambda_3\\Longrightarrow \\lambda_3=0$。</p>\n</blockquote>\n<blockquote>\n<p>第二十三题：<br>\n（1）$\\alpha$为单位列向量$\\Longleftrightarrow \\alpha^T\\beta=0$。<br>\n（2）列向量$\\alpha$与$\\beta$正交$\\Longleftrightarrow \\alpha^T\\beta=0$。<br>\n（3）$A\\alpha=2\\alpha,\\alpha \\not=0，\\alpha $是$A$的属于$2$的特征向量。<br>\n（4）三角矩阵的特征值为对角线上元素。<br>\n（5）&quot;ab&quot;矩阵的特征值$n-1$个$a-b$，1个（列和）$(n-1)b+a$。<br>\n（7）$R(A)+R(B)\\ge R(A+B)$。<br>\n（8）$R(A)=R(kA),k\\not= 0$。<br>\n（9）$R(AB)\\le R(A)$。<br>\n（10）<br>\n$R(A_{m\\times n})\\le m$<br>\n$R(A_{m\\times n})\\le n$<br>\nR(非零向量)=1。<br>\n（11）$R(A_n)&lt;n\\Longleftrightarrow |A_n|=0$。<br>\n（12）$|A|=0\\Longleftrightarrow 0$是$A$的特征值。<br>\n（6）☆若$A,B$都为对称阵，则$A$与$B$有相同的正、负惯性指数（特征值）$\\Longleftrightarrow A$与$B$合同。</p>\n</blockquote>\n<h3 id=\"习题-6\">习题</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">题目</th>\n<th style=\"text-align:center\">回答情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第1题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第7题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第8题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第9题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第10题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第11题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"总结-18\">总结</h4>\n<blockquote>\n<p>第四题：<br>\n针对带参数的具体矩阵一般用顺序主子式为正来判断正定性 。<br>\n例：矩阵$A=\\begin{bmatrix} 2 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; \\frac{t}{2} \\\\ 0 &amp; \\frac{t}{2} &amp; 1 \\end{bmatrix}$。<br>\n它的一阶顺序主子式为$|2|&gt;0$<br>\n二阶顺序主子式$\\begin{vmatrix} 2 &amp; 1 \\\\ 1 &amp; 1 \\end{vmatrix}=2-1=1&gt;0$<br>\n三阶顺序主子式$|A|=1-\\frac{1}{2}t^2&gt;0$<br>\n故如果二次型为正定，那么它的三阶顺序主子式的行列式就必须大于0$\\Longrightarrow -\\sqrt{2}&lt;t&lt;\\sqrt{2}$。</p>\n</blockquote>\n","categories":[],"tags":["高数"]},{"title":"数学公式自测","url":"http://example.com/2022/08/09/数学公式自测/","content":"<h3 id=\"画出一下函数的大致图像\">画出一下函数的大致图像</h3>\n<p>(1)$\\sin{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091146933.png\" alt=\"\"></p>\n<p>(2)$\\cos{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091147986.png\" alt=\"\"></p>\n<p>(3)$\\tan{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091148232.png\" alt=\"\"></p>\n<p>(4)$\\cot{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091149038.png\" alt=\"\"></p>\n<p>(5)$\\sec{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091152427.png\" alt=\"\"></p>\n<p>(6)$\\csc{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091153843.png\" alt=\"\"></p>\n<p>(7)$\\arcsin{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091157354.png\" alt=\"\"></p>\n<p>(8)$\\arccos{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091158269.png\" alt=\"\"></p>\n<p>(9)$\\arctan{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091158220.png\" alt=\"\"></p>\n<p>(10)$arccot{x}$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091158398.png\" alt=\"\"></p>\n<p>(11)$\\arctan{x}+arccot{x}=\\frac{\\pi}{2}$</p>\n<p>(12)三幅图：$y=x^\\alpha$，当$\\begin{cases} \\alpha&lt;0 \\\\ \\alpha=0 \\\\ \\alpha&gt;0 \\begin{cases} 0&lt;\\alpha&lt;1 \\\\ \\alpha=1 \\\\ \\alpha&gt;1 \\end{cases} \\end{cases} $</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091157653.png\" alt=\"\"></p>\n<p>(13)1、心形线，2、双纽线，3、星形线，4、摆线。</p>\n<p>心形线</p>\n<p><strong>注</strong>：$ρ=a(1-\\cos{x})$，根据坐标变换公式$\\cos{\\theta}=\\frac{x}{ρ}$以及$ρ=\\sqrt{x^2+y^2}$可知其直角坐标方程$x^2+y^2=(x+\\frac{x^2+y^2}{a})^2$</p>\n<p><strong>注</strong>：记忆技巧：代入$0,\\frac{\\pi}{2},\\pi$，然后看$ρ$的取值。</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202209030909791.jpg\" alt=\"\"></p>\n<p>双纽线</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091204246.png\" alt=\"\"><br>\n<strong>图像范围(第一象限)</strong>：图一：$[0,\\frac{\\pi}{4}]$，图二：$[0,\\frac{\\pi}{2}]$</p>\n<p>星形线</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091645587.png\" alt=\"\"></p>\n<p>摆线</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208091646921.png\" alt=\"\"></p>\n<p>(14) 抛物线</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208252213731.jpg\" alt=\"\"></p>\n<p>(15) 双曲线</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208252215204.jpg\" alt=\"\"></p>\n<p>(16) 椭圆</p>\n<p>面积：$S=\\pi ab$</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208252216235.jpg\" alt=\"\"></p>\n<p>(17) 绝对值曲线</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202208252218408.jpg\" alt=\"\"></p>\n<p>(19)三维图像</p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308102005570.jpg\" alt=\"\"></p>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308102005623.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"泰勒展开\">泰勒展开</h3>\n<p>$f(x)=f(0)+f^{\\prime}(0)x+\\frac{f^{\\prime\\prime}(0)}{2!}x^2+…+\\frac{f^{(n)}(0)}{n!}x^n+o(x^n)$</p>\n<p>(1)$\\displaystyle{\\ln(1+x)=x-\\frac{1}{2}x^2+\\frac{1}{3}x^3-\\frac{1}{4}x^4+…+(-1)^{n+1}\\frac{1}{n}x^n+o{(x^n)}}$</p>\n<p>(2)$\\displaystyle{e^x=1+x+\\frac{1}{2}x^2+\\frac{1}{3!}x^3+…+\\frac{1}{n!}x^n+o(x^n)}$</p>\n<p>(3)$\\displaystyle{\\frac{1}{1-x}=1+x+x^2+x^3+…+x^n+o(x^n)}$</p>\n<p>(4)$\\displaystyle{\\frac{1}{1+x}=1-x+x^2-x^3+…+(-1)^{n}x^n+o(x^n)}$</p>\n<p>(5)$\\displaystyle{\\sin{x}=x-\\frac{1}{3!}x^3+…+(-1)^n\\frac{1}{(2n+1)!}x^{(2n+1)}+o(x^{(2n+1)})}$</p>\n<p>(6)$\\displaystyle{\\cos{x}=1-\\frac{1}{2!}x^2+…+(-1)^n\\frac{1}{(2n)!}x^{(2n)}+o(x^{(2n)})}$</p>\n<p>(7)$\\displaystyle{\\arctan{x}=x-\\frac{1}{3}x^3+…+(-1)^n\\frac{1}{2n+1}x^{(2n+1)}+o(x^{(2n+1)})}$</p>\n<p>(8)$\\displaystyle{\\tan{x}=x+\\frac{1}{3}x^3+o(x^3)}$，无规律。</p>\n<p>(9)$\\displaystyle{\\arcsin{x}=x+\\frac{1}{6}x^3+o(x^3)}$，无规律。</p>\n<p>(10)$\\displaystyle\\ln{(x+\\sqrt{1+x^2})}=x-\\frac{1}{6}x^3+o(x^3)$</p>\n<p>(11)$\\displaystyle(1+x)^{\\frac{1}{x}}=e-\\frac{1e}{2}x+\\frac{11e}{24}x^2$</p>\n<p>(12)$\\displaystyle(1+x)^{a}=1+ax+\\frac{a(a-1)}{2!}x^2+\\frac{a(a-1)(a-2)}{3!}+…$</p>\n<hr>\n<h3 id=\"等价无穷小\">等价无穷小</h3>\n<blockquote>\n<p>当 x —&gt; 0 时，但不等于0.</p>\n</blockquote>\n<p>(1)与△等价的无穷小？<br>\n$x \\sim \\sin{x} \\sim \\tan{x} \\sim \\arcsin{x} \\sim \\arctan{x} \\sim \\ln{(1+x)} \\sim e^x-1$</p>\n<p>(2)$(1+x)^{\\alpha}-1 \\sim \\alpha x$</p>\n<p>(3)$1-\\cos{x} \\sim \\frac{1}{2} x^2$</p>\n<p>(4)$a^x-1 \\sim x\\ln{a}$</p>\n<p>(5)$x-\\sin{x} \\sim \\frac{x^3}{6}$</p>\n<p>(6)$\\arcsin{x}-x \\sim \\frac{x^3}{6}$</p>\n<p>(7)$x-\\ln{(1+x)} \\sim \\frac{x^2}{2}$</p>\n<p>(8)$\\tan{x}-x \\sim \\frac{x^3}{3}$</p>\n<p>(9)$x-\\arctan{x} \\sim \\frac{x^3}{3}$</p>\n<p>(10)$f(x)\\rightarrow 1$时，$f^{\\alpha}(x)-1=[1+f(x)-1]^{\\alpha} \\sim \\alpha[f(x)-1]$</p>\n<p>(11)若$\\lim f(x)=0，\\lim f(x)g(x)=0$，则$[1+f(x)]^{g(x)}-1\\sim f(x)g(x)$</p>\n<hr>\n<h3 id=\"求导公式\">求导公式</h3>\n<p>(1)$©^{\\prime}=0$</p>\n<p>(2)$(x^a)^{\\prime}=ax^{a-1}$</p>\n<p>(3)$(a^x)^{\\prime}=a^x \\ln{a}$</p>\n<p>(4)$(e^x)^{\\prime}=e^x$</p>\n<p>(5)$(\\log_a{x})^{\\prime}=\\frac{1}{x\\ln{a}}$</p>\n<p>(6)$(\\ln{|x|})^{\\prime}=\\frac{1}{x}$</p>\n<p>(7)$(\\sin{x})^{\\prime}=\\cos{x}$</p>\n<p>(8)$(\\cos{x})^{\\prime}-\\sin{x}$</p>\n<p>(9)$(\\tan{x})^{\\prime}=\\sec^2{x}$</p>\n<p>(10)$(\\cot{x})^{\\prime}=-\\csc^2{x}$</p>\n<p>(11)$(\\sec{x})^{\\prime}=\\sec{x}\\tan{x}$</p>\n<p>(12)$(\\csc{x})^{\\prime}=-\\csc{x}\\cot{x}$</p>\n<p>(13)$(\\arcsin{x})^{\\prime}=\\frac{1}{\\sqrt{1-x^2}}$</p>\n<p>(14)$(\\arccos{x})^{\\prime}=-\\frac{1}{\\sqrt{1-x^2}}$</p>\n<p>(15)$(\\arctan{x})^{\\prime}=\\frac{1}{1+x^2}$</p>\n<p>(16)$(arccot{x})^{\\prime}=-\\frac{1}{1+x^2}$</p>\n<hr>\n<h3 id=\"不定积分\">不定积分</h3>\n<p>(1)$\\displaystyle\\int x^a dx = \\frac{1}{a+1}x^{(a+1)}+C (a \\ne -1)$</p>\n<p>(2)$\\displaystyle\\int \\frac{1}{x} dx = \\ln{|x|}+C$</p>\n<p>(3)$\\displaystyle\\int a^x dx = \\frac{a^x}{\\ln{a}}+C (a&gt;0, a \\ne 1)$</p>\n<p>(4)$\\displaystyle\\int e^x dx = e^x+C$</p>\n<p>(5)$\\displaystyle\\int \\sin{x} dx = -\\cos{x}+C$</p>\n<p>(6)$\\displaystyle\\int \\cos{x} dx = \\sin{x}+C$</p>\n<p>(7)$\\displaystyle\\int \\sec^2{x} dx = \\tan{x}+C$</p>\n<p>(8)$\\displaystyle\\int \\csc^2{x} dx = -\\cot{x}+C$</p>\n<p>(9)$\\displaystyle\\int \\sec{x}\\tan{x} dx = \\sec{x}+C$</p>\n<p>(10)$\\displaystyle\\int \\csc{x}\\cot{x} dx = -\\csc{x}+C$</p>\n<p>(11)$\\displaystyle\\int \\sec{x} dx = \\ln{|\\sec{x}+\\tan{x}|}+C$</p>\n<p>(12)$\\displaystyle\\int \\csc{x} dx = \\ln{|\\csc{x}-\\cot{x}|}+C$</p>\n<p>(13)$\\displaystyle\\int \\frac{1}{a^2+x^2} dx = \\frac{1}{a}\\arctan{\\frac{x}{a}}+C$</p>\n<p>(14)$\\displaystyle\\int \\frac{1}{a^2-x^2} dx = \\frac{1}{2a}\\ln{|\\frac{a+x}{a-x}|}+C$</p>\n<p>(15)$\\displaystyle\\int \\frac{1}{\\sqrt{a^2-x^2}} dx = \\arcsin{\\frac{x}{a}}+C$，要求$a&gt;0$！！！</p>\n<p>(16)$\\displaystyle\\int \\frac{1}{\\sqrt{x^2+a^2}} dx = \\ln{|x+\\sqrt{x^2+a^2}|}+C$</p>\n<p>(17)$\\displaystyle\\int \\frac{1}{\\sqrt{x^2-a^2}} dx = \\ln{|x+\\sqrt{x^2-a^2}|}+C$</p>\n<p>(18)$\\displaystyle\\int \\sec^{3}xdx=\\frac{1}{2}[\\ln{|\\sec{x}+\\tan{x}|}+\\sec{x}\\tan{x}]+C$</p>\n<hr>\n<h3 id=\"微分方程\">微分方程</h3>\n<p><img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202310081047547.jpg\" alt=\"\"><br>\n<img src=\"https://jasonqianpic.oss-cn-chengdu.aliyuncs.com/img/202308171144269.jpg\" alt=\"\"><br>\n【注】<br>\n$x^2f^{\\prime\\prime}(x)-2xf^{\\prime}(x)+2f(x)=0$<br>\n令$x=e^{t}$<br>\n$\\Longrightarrow f^{\\prime\\prime}(t)-3f^{\\prime}(t)+2f(t)=0$<br>\n这里的$f(t)$为什么不是$f(x)$?<br>\n因为，令$x$等于$e^{t}$后，将$x$的函数$f(x)$变为了$t$的函数$f(t)$，这里写成$f(t)$是为了统一，方便计算。</p>\n<h3 id=\"无穷级数\">无穷级数</h3>\n<p>(1)$\\displaystyle\\sum_{n=0}^{\\infty}x^{n}=\\frac{1}{1-x},|x|&lt;1$</p>\n<p>(2)$\\displaystyle\\sum_{n=0}^{\\infty}(-1)^{n}x^{n}=\\frac{1}{1+x},|x|&lt;1$</p>\n<p>(3)$\\displaystyle\\sum_{n=0}^{\\infty}\\frac{x^n}{n!}=e^{x},x\\in (-\\infty,+\\infty)$</p>\n<p>(4)$\\displaystyle\\sum_{n=0}^{\\infty}\\frac{(-1)^nx^{2n+1}}{(2n+1)!}=\\sin{x},x\\in (-\\infty,+\\infty)$</p>\n<p>(5)$\\displaystyle\\sum_{n=0}^{\\infty}\\frac{(-1)^nx^{2n}}{(2n)!}=\\cos{x},x\\in (-\\infty,+\\infty)$</p>\n<p>(6)$\\displaystyle\\sum_{n=0}^{\\infty}\\frac{(-1)^nx^{n+1}}{n+1}=\\ln{(1+x)},x\\in (-1,1]$</p>\n<p>(7)$\\displaystyle\\sum_{n=0}^{\\infty}\\frac{(-1)^{n}x^{2n+1}}{2n+1}=\\arctan{x}$</p>\n","categories":[],"tags":["高数"]},{"title":"mathjax-test","url":"http://example.com/2022/06/27/mathjax-test/","content":"<p>$f(x)$ 一阶连续可导 $\\quad\\Rightarrow\\quad$ $\\lim\\limits_{x \\to 0} f’(x_0 + x) = f’(x_0)$</p>\n<p>$$ \\begin{aligned} \\lim\\limits_{x\\to0}\\dfrac{\\displaystyle\\int_0^{x^2}f(t)dt}{x^2\\displaystyle\\int_0^xf(t)dt} &amp;\\xlongequal{L’} \\lim\\limits_{x\\to0}\\dfrac{2x f(x^2)}{2x\\displaystyle\\int_0^xf(t)dt + x^2f(x)} \\\\ &amp;= \\lim\\limits_{x\\to0}\\dfrac{2f(x^2)}{2\\displaystyle\\int_0^xf(t)dt + xf(x)} \\\\ &amp;\\xlongequal{L’} \\lim\\limits_{x\\to0}\\dfrac{4xf’(x^2)}{3f(x) + xf’(x)} \\\\ &amp;= \\lim\\limits_{x\\to0}\\dfrac{4f’(x^2)}{3 \\cdot \\dfrac{f(x)}{x} + f’(x)} \\\\ &amp;= \\frac{4f’(0)}{3 \\cdot \\lim\\limits_{x\\to0} \\dfrac{f(x)}{x} + f’(0)} \\\\ &amp;= \\frac{4f’(0)}{3f’(0) + f’(0)} \\\\ &amp;= 1 \\\\ \\end{aligned} \\\\  $$</p>\n<hr>\n<p>$$ \\left(x = 1 \\\\ y = 1 \\right) $$</p>\n<p>$$ f(x)=\\left(\\begin{aligned} x &amp;=  \\cos(t) \\ y &amp;=  \\sin(t) \\ z &amp;=  \\frac xy \\end{aligned} \\right.$$</p>\n<hr>\n<p>常用极限结论：$\\lim\\limits_{n\\to\\infty} x^n = \\begin{cases} 0 &amp; ,|x| &lt; 1 \\\\ \\infty &amp; ,|x| &gt; 1 \\\\ 1 &amp; ,x = 1 \\\\ \\not\\exists &amp;,x=-1 \\end{cases}$</p>\n<hr>\n<p>反推：$AP = C$，则 $\\begin{pmatrix}A&amp;C\\\\0&amp;B\\end{pmatrix} \\begin{pmatrix}E_n&amp;-P\\\\0&amp;E_n\\end{pmatrix}=\\begin{pmatrix}A&amp;0\\\\0&amp;B\\end{pmatrix} \\Rightarrow r(A) + r(B)$<br>\n正推不成立，反例读者自构不难</p>\n<hr>\n<p>$y = \\begin{cases} 1, &amp;x = 1 \\\\ x^2 + 2, &amp;x = 2 \\end{cases}$</p>\n<hr>\n<p>$\\begin{pmatrix} A &amp; B &amp; E \\\\ C &amp; D &amp;2X \\end{pmatrix}$</p>\n","categories":[],"tags":[]},{"title":"AtCoder Beginner Contest 255   A—E","url":"http://example.com/2022/06/13/AtCoder-Beginner-Contest-255-A—E/","content":"<h2 id=\"A-4\">A</h2>\n<h3 id=\"题目描述-16\">题目描述</h3>\n<p>给定一个的$ \\ 2 \\times 2 \\ $矩阵$ \\ A \\ $，输出其中的值$ \\ A_{R,C} \\ $。</p>\n<h3 id=\"题目分析-16\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>输入就行嘞。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span>; i ++ )</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">2</span>; j ++ )</span><br><span class=\"line\">\t\t\tcin &gt;&gt; a[i][j];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; a[n][m] &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"B-4\">B</h2>\n<h3 id=\"题目描述-17\">题目描述</h3>\n<p>有$ \\ N \\ $个人在位置为$(X_i,Y_i)$的位置上。</p>\n<p>其中有$ \\ K \\ $个人是特殊人~~(被选中的孩子)~~，能够发射光芒。</p>\n<p>当一个人位于$ \\ (x,y) \\ $坐标发射半径为$ \\ R \\ $的光芒时候，能够照亮以$ \\ (x,y) \\ $为圆心，半径为$ \\ R \\ $的一个光圈（包括边界）。</p>\n<p>找到最小的半径使得所有特殊人能够将所有人都照耀。</p>\n<h3 id=\"题目分析-17\">题目分析</h3>\n<p>时间复杂度：$O(nk)$。</p>\n<p>要使得所有人都能够被照耀到，即需要求出每个人到<strong>特殊人</strong>距离的<strong>最小值</strong>（因为只用被一个特殊人照射即可，所以取最近的特殊人的位置），然后在这些<strong>最小值</strong>中取<strong>最大值</strong>即可。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; PII;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];  <span class=\"comment\">// 特殊人对应的下标</span></span><br><span class=\"line\">PII b[N];  <span class=\"comment\">// 每个人的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a, b;</span><br><span class=\"line\">\t\tcin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">\t\tb[i] = &#123;a, b&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">double</span> res = <span class=\"number\">1e9</span>;  <span class=\"comment\">// res求的是每个人到特殊人j的距离的最小值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j ++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> u = a[j];  <span class=\"comment\">// 获取特殊人的下标</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tres = <span class=\"built_in\">min</span>(res, <span class=\"built_in\">sqrt</span>(</span><br><span class=\"line\">\t\t\t<span class=\"number\">1.0</span> * (b[i].x - b[u].x) * (b[i].x - b[u].x) + </span><br><span class=\"line\">\t\t\t<span class=\"number\">1.0</span> * (b[i].y - b[u].y) * (b[i].y - b[u].y))); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, res);  <span class=\"comment\">// ans求的是所有最小值的最大值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.10f\\n&quot;</span>, ans);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"C-4\">C</h2>\n<h3 id=\"题目描述-18\">题目描述</h3>\n<p>给定一个整数$ \\ X \\ $，如下的操作会被记为一次操作。</p>\n<ul>\n<li>选择并做一下其中一项操作\n<ul>\n<li>给$ \\ X \\ $加$ \\ 1 \\ $</li>\n<li>给$ \\ X \\ $减$ \\ 1 \\ $</li>\n</ul>\n</li>\n</ul>\n<p>给定一个首项为$ \\ A \\ $，公差为$ \\ D \\ $，一共$ \\ N \\ $项的等差数组$ \\ S \\ $。</p>\n<p>问经过多少次操作才能将$ \\ X \\ $变为等差数组$ \\ S \\ $中的一个数。</p>\n<h3 id=\"题目分析-18\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>分情况讨论即可。</p>\n<p>详见代码注释。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLL x, a, d, n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; x &gt;&gt; a &gt;&gt; d &gt;&gt; n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 当公差为0的时候，只需要判断x与首项的位置即可。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(d == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"built_in\">abs</span>(x - a) &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 当公差小于0的时候，可以将这个单调递减的数列变为单调递增的数列，方便统一计算，就不同讨论公差小于0的情况哩</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(d &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td = -d;</span><br><span class=\"line\">\t\ta -= (n - <span class=\"number\">1</span>) * d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 当x小于首项a的时候，（由于当前的数列已经是公差大于0的数列，为单增的数列）</span></span><br><span class=\"line\">    <span class=\"comment\">// x----a----a+d-----a+2d-----...</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以只需要计算x到a的距离即可</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt;= a) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; a - x &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 当x大于数列最后一项的时候</span></span><br><span class=\"line\">    <span class=\"comment\">// ...----a+(n-2)d----a+(n-1)d----x</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以只需要计算x到最后一项a + (n-1)d的距离即可</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt;= a + (n - <span class=\"number\">1</span>) * d)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; x - a - (n - <span class=\"number\">1</span>) * d &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 上述情况讨论完毕后，就只剩下x在数列中的情况了</span></span><br><span class=\"line\">    <span class=\"comment\">// ...----a+kd----x----a+(k+1)d-----...</span></span><br><span class=\"line\">    <span class=\"comment\">// 这种情况需要判断x到左边还是到右边的距离，取最小值即可</span></span><br><span class=\"line\">    <span class=\"comment\">// (x - a) % d就是x到左边的距离</span></span><br><span class=\"line\">    <span class=\"comment\">// d - (x - a) % d就是x到右边的距离</span></span><br><span class=\"line\">\tLL pos = (x - a) % d;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">min</span>(pos, d - pos) &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"D-4\">D</h2>\n<h3 id=\"题目描述-19\">题目描述</h3>\n<p>给定一个数组$ \\ N:A = (A_1,A_2,…,A_N) \\ $，如下的操作会被记为一次操作。</p>\n<ul>\n<li>首先，选择一个$ \\ 1 \\ $到$ \\ N \\ $中的一个位置$ \\ A_i \\ $。</li>\n<li>接下来，选择其中一项进行操作\n<ul>\n<li>给$ \\ A_i \\ $加$ \\ 1 \\ $</li>\n<li>给$ \\ A_i \\ $减$ \\ 1 \\ $</li>\n</ul>\n</li>\n</ul>\n<p>有$ \\ Q \\ $个询问。</p>\n<p>每个询问如下：</p>\n<ul>\n<li>找到使得数组$ \\ N \\ $中的每一个元素都变为$ \\ X \\ $的最小步骤为多少？</li>\n</ul>\n<h3 id=\"题目分析-19\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>对于案例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N:<span class=\"number\">6</span> <span class=\"number\">11</span> <span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">5</span></span><br><span class=\"line\">X:<span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>如果暴力计算每个与$ \\ X \\ $的差的绝对值，那么是恐怖的$O(n^2)$。</p>\n<p>因此需要优化。</p>\n<p>如果我们对$ \\ N \\ $进行排序后：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N:<span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">11</span></span><br><span class=\"line\">X:<span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>我们能够发现对于数字$ \\ 5 \\ $来说，它<strong>之前</strong>的数$ \\ A_i \\ $一定<strong>小于</strong>$ \\ 5 \\ $， 它<strong>之后</strong>的数$ \\ A_j \\ $一定<strong>大于</strong>$ \\ 5 \\ $， 那么如果我们能够将某个数字$ \\ A \\ $比它小的<strong>所有数</strong>和比它大的<strong>所有数</strong>统计出来，就能优化计算。这就可以用到<strong>前缀和</strong>的知识了</p>\n<blockquote>\n<p>如何优化计算？</p>\n<p>首先不用判断正负号。</p>\n<p>然后计算这个数<strong>前面</strong>的所有数变为X所需要的数字：$cnt(前面所有数的个数) \\times X - sum(前面的所有数的和)$ 。</p>\n<p>计算这个数<strong>后面</strong>的所有数变为X所需要的数字：$sum(后面的所有数的和) - cnt(后面所有数的个数) \\times X$ 。</p>\n</blockquote>\n<p>这里又要涉及到如何快速找到数$ \\ A \\ $的下标，可以使用二分</p>\n<p><strong>STL库函数</strong></p>\n<p><code>lower_bound/upper_bound</code>二分</p>\n<p><code>lower_bound</code>的第三个参数传入一个元素<code>x</code>，在两个迭代器（指针）指定的部分上执行二分查找，返回指向第一个<strong>大于等于</strong><code>x</code>的元素的位置的迭代器（指针）。</p>\n<p><code>upper_bound</code>的用法和<code>lower_bound</code>大致相同，唯一的区间就是查找的第一个<strong>大于</strong><code>x</code>的元素。当然，两个迭代器（指针）指定的部分应该是<strong>提前排好序</strong>的。</p>\n<p>在有序<code>int</code>数组（元素放在下标<code>1 ~ n</code>）中查找大于等于<code>x</code>的最小整数的下标：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"built_in\">lower_bound</span>(a + <span class=\"number\">1</span>, a + <span class=\"number\">1</span> + n, x) - a;</span><br></pre></td></tr></table></figure>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\">LL s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) s[i] = s[i - <span class=\"number\">1</span>] + a[i];\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m -- )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> d1 = <span class=\"built_in\">lower_bound</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, x) - a;  <span class=\"comment\">// 找到第一个大于或者等于x的下标</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> d2 = <span class=\"built_in\">upper_bound</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, x) - a;  <span class=\"comment\">// 找到第一个大于x的下标</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcout &lt;&lt; (LL)(d1 - <span class=\"number\">1</span>) * x - s[d1 - <span class=\"number\">1</span>] +</span><br><span class=\"line\">\t\ts[n] - s[d2 - <span class=\"number\">1</span>] - (LL)(n - d2 + <span class=\"number\">1</span>) * x &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"E-3\">E</h2>\n<h3 id=\"题目描述-20\">题目描述</h3>\n<p>给定长度为$ \\ N - 1 \\ $的数组$S = (S_1,S_2,…,S_{N - 1})$，以及$ \\ M \\ $个被称为幸运数的数字。</p>\n<p>一个长度为$ \\ N \\ $的数组$A = (A_1, A_2,…,A_N)$的数组，满足如下情况：</p>\n<blockquote>\n<p>$A_i + A_{i + 1} = S_i$，对于$i \\in [1,N - 1]$都成立</p>\n</blockquote>\n<p>找到一组数组$ \\ A \\ $，使得其中包含的幸运数字足够多。</p>\n<h3 id=\"题目分析-20\">题目分析</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1Ba411L736?vd_source=d1bcfd604c1b1a3017998e1536eeef07\">思路来自于这位佬</a></p>\n<p>时间复杂度：$O(nmlogn)$。</p>\n<p>枚举每一位$\\ A_i \\ $为幸运数字的情况，那么$ \\ A \\ $数组的第一位就可以被计算出来（因为只要确定一个数后，所有的数都可以确定出来）。</p>\n<p>假设当前位置为$ \\ i \\ $枚举的幸运数为$ \\ x \\ $，通过计算可以得到$ \\ A_1 \\ $，我们假设它为$ \\ y \\ $，也就是说当$ \\ A_1 \\ $为$ \\ y \\ $的时候，在当前位置$ \\ i \\ $会出现一个幸运数$ \\ x \\ $。</p>\n<p>我们用<code>map&lt;long long, int&gt; cnt</code>来统计$ \\ cnt[x] \\ $如果第一位数字为$ \\ y \\ $，那么它就有$ \\ cnt[y] \\ $个幸运数。在所有情况中取一个最大值即可。</p>\n<blockquote>\n<p>知道了其中一个数如何求第一个数呢？</p>\n</blockquote>\n<p>我们知道：</p>\n<p>$$A_1 + A_2 = S_1$$</p>\n<p>$$A_2 + A_3 = S_2$$</p>\n<p>$$A_3 + A_4 = S_3$$</p>\n<p>$$…$$</p>\n<p>$$A_{N-1} + A_N = S_{N-1}$$</p>\n<p>假设$ \\ A_4 \\ $为幸运数$ \\ x \\ $，那么通过上面的等式可以计算出$ \\ A_1 \\ $为$ \\ S_1 - S_2 + S_3 - x \\ $。</p>\n<p>假设$ \\ A_3 \\ $为幸运数$ \\ x \\ $，那么通过上面的等式可以计算出$ \\ A_1 \\ $为$ \\ S_1 - S_2 + x \\ $。</p>\n<p><strong>注意</strong>当$ \\ A_i \\ $的位数偶数时需要$ \\ -x \\ $，而当$ \\ A_i \\ $的位数奇数时需要$ \\ +x \\ $。</p>\n<p>为了更快速的统计出$ \\ \\sum S \\ $，我们可以通过一个$ \\ sum \\ $数组来记录$ \\ \\sum_{i=1}^n (-1)^{n+1}S_i \\ $</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[N], s[N];</span><br><span class=\"line\">LL sum[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - <span class=\"number\">1</span>; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, s + i);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, a + i);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i ++ )  <span class=\"comment\">// 求出1 ~ n的sum，记得下标处理一下 </span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &amp; <span class=\"number\">1</span>) sum[i] = sum[i - <span class=\"number\">1</span>] + s[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> sum[i] = sum[i - <span class=\"number\">1</span>] - s[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmap&lt;LL, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> x = a[j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i &amp; <span class=\"number\">1</span>) cnt[sum[i] + x] ++ ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> cnt[sum[i] - x] ++ ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;t : cnt) ans = <span class=\"built_in\">max</span>(ans, t.second);\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h3 id=\"题目分析-21\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>$Code$</p>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"F-先空着-。\">F(先空着-。-)</h2>\n<h3 id=\"题目描述-21\">题目描述</h3>\n<h3 id=\"题目分析-22\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>$Code$</p>\n<p>$ \\ $<br>\n$ \\ $</p>\n","categories":[],"tags":["AtCoder题解集"]},{"title":"AtCoder Beginner Contest 252   A—F","url":"http://example.com/2022/06/10/AtCoder-Beginner-Contest-252-A—F/","content":"<blockquote>\n<p>本题解思路来自这两位大佬 <a href=\"https://zhuanlan.zhihu.com/p/517999894\">cup-pyy</a> 、 <a href=\"https://blog.csdn.net/write_1m_lines/article/details/124908389\">GoodCoder666</a></p>\n</blockquote>\n<h2 id=\"A\">A</h2>\n<h3 id=\"题目描述\">题目描述</h3>\n<p>输出一个数字对应的ASCII码。</p>\n<h3 id=\"题目分析\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tcout &lt;&lt; (<span class=\"type\">char</span>)n &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"B\">B</h2>\n<h3 id=\"题目描述-2\">题目描述</h3>\n<p>高桥有$ \\ N \\ $个食物，第 $ \\ i \\ $个食物有个美味程度$ \\ A_i\\ $。</p>\n<p>在这些食物中，他有$ \\ K \\ $个不喜欢的食物，下标分别为$i = 1,2,…,K$。</p>\n<p>高桥会选择美味程度最大的品尝，他是否会吃到他不喜欢的食物呢？</p>\n<p>如果吃到了输出<code>Yes</code>，否则输出<code>No</code>。</p>\n<h3 id=\"题目分析-2\">题目分析</h3>\n<p>时间复杂度：$O(n)$。</p>\n<p>我们用$ \\ a \\ $数组记录每个食物的美味程度，用$ \\ b \\ $布尔数组记录高桥不喜欢的食物。</p>\n<p>用$ \\ maxv \\ $记录美味程度最大的值。</p>\n<p>遍历$ \\ a \\ $数组，如果找到</p>\n<ul>\n<li><code>maxv == a[i] &amp;&amp; b[i]</code>，则说明当前<strong>食物美味程度是最大的</strong>，并且<strong>高桥不喜欢当前食物</strong>，就可以直接输出<code>Yes</code>即可</li>\n</ul>\n<p>若遍历完$ \\ a \\ $数组都没找到，则说明不会吃到不喜欢的食物，输出<code>No</code>即可。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], b[N];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tb[x] = <span class=\"literal\">true</span>;  <span class=\"comment\">// 记录当前位置是高桥不喜欢的食物</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> maxv = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; maxv) </span><br><span class=\"line\">\t\t\tmaxv = a[i];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(maxv == a[i] &amp;&amp; b[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"C\">C</h2>\n<h3 id=\"题目描述-3\">题目描述</h3>\n<p>（题目读起来很难受- -）</p>\n<p>有一个$ \\ N \\ $个卷轴的老虎机。</p>\n<p>每一个卷轴上是一个长度为$ \\ 10 \\ $的字符串$ \\ S_i \\ $，<code>0</code>,<code>1</code>,…,<code>9</code>只会出现一次。</p>\n<p>每一个卷轴上对应这一个按钮。对于非负时刻$ \\ t \\ $，高桥可以选择按或者不按其中一个按钮。</p>\n<p>如果其中的第$ \\ i \\ $个卷轴再在$ \\ t \\ $时刻按下，那么会显示出卷轴$ \\ S_i \\ $在$((t \\ % \\ 10) + 1)$的位置上字符</p>\n<p>高桥想让所有卷轴都显示出相同的字符。</p>\n<p>找到高桥能完成任务的最小时刻。</p>\n<h3 id=\"题目分析-3\">题目分析</h3>\n<blockquote>\n<p>写的我都不知道写的什么了，好难解释-。-</p>\n</blockquote>\n<p>时间复杂度：$O(100n)$。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子A</span><br><span class=\"line\"><span class=\"number\">1937458062</span></span><br><span class=\"line\"><span class=\"number\">8124690357</span></span><br><span class=\"line\"><span class=\"number\">2385760149</span></span><br></pre></td></tr></table></figure>\n<p>通过观察可得：</p>\n<p>每一个数字如果在卷轴中想要被显示，那么就要<strong>满足</strong> 下标 = (t % 10) + 1。</p>\n<p>对于数字3来说，它在第一个卷轴中的位置为<strong>3</strong>（下标从1开始），第二个卷轴中的位置为<strong>8</strong>，第三个卷轴中的位置为<strong>2</strong>。</p>\n<p>如果想要<strong>显示3</strong>，则时间是取这三个卷轴中<strong>数字3位置最远的时间</strong>，也就是说想要显示3，时间就需要为 $max(3,8,2)  = 8 = (t \\ % \\ 10) +1, \\ \\ t=7$。</p>\n<p>同理，如果想要<strong>显示8</strong>，则时间是取这三个卷轴中<strong>数字8位置最远的时间</strong>，也就是说想要显示8，时间就需要为 $max(7,1,3)  = 7 = (t \\ % \\ 10) +1, \\ \\ t=6$。</p>\n<p>这就启发了我们一种思路，找到每个数字在每个卷轴中的<strong>最远位置</strong>，求出每个数字的<strong>最远距离</strong>的<strong>最小值</strong>，<strong>答案</strong>就是这个<strong>最小值转化为时间</strong>。</p>\n<hr>\n<p><strong>但是</strong>，上述思想仅仅针对没有重复的情况，每个数字在所有卷轴中位置为(0 ~ 9)的地方出现次数不能大于1。比如如下情况</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子B</span><br><span class=\"line\"><span class=\"number\">0123456789</span></span><br><span class=\"line\"><span class=\"number\">0123456789</span></span><br><span class=\"line\"><span class=\"number\">0123456789</span></span><br></pre></td></tr></table></figure>\n<p>在这种情况下，数字0的最近距离为1，按照上述说法，答案就因为为0，但是是错误的。</p>\n<p><strong>思想错误，就找另外的出路。</strong></p>\n<p>上述<strong>错误原因</strong>是因为某个数字在所有卷轴中位置为(0 ~ 9)的地方出现次数大于1。</p>\n<p>对于此原因，我们可以用$ \\ cnt \\ $数组来记录每个数字在卷轴中出现的下标。</p>\n<p>如<strong>例子B</strong>，假设枚举到数字2时$cnt[3] = 3$，就表示数字2在所有卷轴中位置为3的地方出现了3次（看例子B也很容易理解）。$cnt[4] = 0$，就表示数字2在所有卷轴中位置为4的地方出现了0次.</p>\n<p>假设某个数字在位置为0 ~ 9中出现了$cnt_1,cnt_2,…,cnt_9$，如图：</p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2022/06/10/53050_d954db78e8-abc_252_c.png\" alt=\"abc_252_c.png\"></p>\n<p>想要枚举完所有数，就必须枚举到最高位数，也就是$cnt_5$，注意观察，每次只能消除一层，所以我们用$ \\ cnt \\ $数组记录当前枚举的值的在所有卷轴中位置为(0 ~ 9)的地方出现次数。取最大的次数值。</p>\n<p>详见代码。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">string str[N];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ ) cin &gt;&gt; str[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans = INF;  <span class=\"comment\">// 定义全局答案</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; i ++ )  <span class=\"comment\">// 枚举每一个数字0 ~ 9</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> res = <span class=\"number\">0</span>;  <span class=\"comment\">// 定义局部答案，也就是每个数字达成目标状态所对应的时间</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> cnt);  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j ++ )  <span class=\"comment\">// 枚举所有卷轴</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt;= <span class=\"number\">9</span>; k ++ )  <span class=\"comment\">// 枚举当前卷轴的位置上的数字</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(str[j][k] == <span class=\"string\">&#x27;0&#x27;</span> + i)  <span class=\"comment\">// 如果与当前枚举的数i是相同的数字</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tres = <span class=\"built_in\">max</span>(res, <span class=\"number\">10</span> * cnt[k] + k);  <span class=\"comment\">// 取答案，最大值</span></span><br><span class=\"line\">                    <span class=\"comment\">// 这里的是求局部定义的最大值</span></span><br><span class=\"line\">\t\t\t\t\tcnt[k] ++ ;  <span class=\"comment\">// 出现的位置数量加一</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;  <span class=\"comment\">// 提前退出当前卷轴</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">min</span>(ans, res);  <span class=\"comment\">// 求全局答案用最小值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"D\">D</h2>\n<h3 id=\"题目描述-4\">题目描述</h3>\n<p>给定一个长度为$ \\ N \\ $的数组，$ A = (A_1, A_2, …, A_N).$</p>\n<p>找到有多少个三元组$ \\ (i,j,k) \\ $满足下面的情况</p>\n<ul>\n<li>$1 \\le i &lt; j &lt; k \\le N$</li>\n<li>$A_i,A_j,和A_k都是不同的数$</li>\n</ul>\n<h3 id=\"题目分析-4\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>利用<strong>容斥原理</strong>。</p>\n<p>不考虑$A_i,A_j,A_k$中有重复的元素，求出所有的方案数。<strong>在</strong>$ \\ N \\ $<strong>个物品中选3个物品</strong>，可以用$C_N^3$求的。</p>\n<p>然后考虑$A_i,A_j,A_k$中有重复的个数：</p>\n<ul>\n<li>对于$ \\ A \\ $中每一个数$x$，我们用$cnt[x]$录$x$出现的次数</li>\n<li>对于$cnt[x] \\ge 2$的情况，先排除$x,x,y$的情况，即有<strong>两个重复</strong>的元素，$C_{cntx}^2$：从$cnt[x]$（$x$的个数）中选择2个相同的元素，$(N - cnt_x)$：排除$x$的个数后，从剩下的数中选择1个数。对于这种情况答案要减去$C_{cntx}^2 \\times (N - cnt_x)$。</li>\n<li>对于$cnt[x] \\ge 3$的情况，先排除$x,x,x$的情况，即有<strong>三个重复</strong>的元素，$C_{cntx}^3$从$cnt[x]$（$x$的个数）中选择3个相同的元素。对于这种情况答案要减去$C_{cntx}^3$。</li>\n</ul>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmap&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;  <span class=\"comment\">// 用map代替cnt数组</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> x;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tmp[x] ++ ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLL ans = (LL)n * (n - <span class=\"number\">1</span>) * (n - <span class=\"number\">2</span>) / <span class=\"number\">6</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> item : mp)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item.y &gt;= <span class=\"number\">2</span>) ans -= (LL)item.y * (item.y - <span class=\"number\">1</span>) / <span class=\"number\">2</span> * (n - item.y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(item.y &gt;= <span class=\"number\">3</span>) ans -= (LL)item.y * (item.y - <span class=\"number\">1</span>) * (item.y - <span class=\"number\">2</span>) / <span class=\"number\">6</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"E\">E</h2>\n<h3 id=\"题目描述-5\">题目描述</h3>\n<p>AtCoder的国王有$ \\ N \\ $个城市，$M$条道路。</p>\n<p>每一条道路连接着$ \\ A_i \\ $和$ \\ B_i \\ $两座城市，之间的距离为$ \\ C_i \\ $。</p>\n<p>一定能通过一些道路到达任一城市。</p>\n<p>在财政困难下，国王决定保留$N - 1$条道路，使得从城市1开始到其他的距离最短。</p>\n<p>求出要保留的道路。</p>\n<h3 id=\"题目分析-5\">题目分析</h3>\n<p>时间复杂度：$O(NlogN + MlogN)$。</p>\n<p>保留$N - 1$条道路就提示我们该题应该是<strong>最小生成树</strong>的模型。</p>\n<p>要求从城市1开始到其他距离最短提示我们要用<strong>最短路</strong>模型</p>\n<p>于是我们就可以先跑一遍<strong>dijsktra</strong>，求出<strong>城市1到其它点的最短距离</strong>。</p>\n<p>再枚举每个点$ \\ x \\ $以及它下一个点$ \\ j \\ $,之间的距离$w[i]$，如果<strong>满足</strong><code>dist[x] == dist[j] + w[i]</code>则说明它是由最短路求得的，同时它也在最小生成树中。</p>\n<p>$ \\ $</p>\n<p><strong>[提示]</strong>：每次记得看看数据，被龙龙卡麻了-。 -</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> h[N], id[N &lt;&lt; <span class=\"number\">1</span>], e[N &lt;&lt; <span class=\"number\">1</span>], ne[N &lt;&lt; <span class=\"number\">1</span>], w[N &lt;&lt; <span class=\"number\">1</span>], idx;</span><br><span class=\"line\"><span class=\"type\">bool</span> st[N];</span><br><span class=\"line\">LL dist[N];  <span class=\"comment\">// 注意题目中的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c, <span class=\"type\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\te[idx] = b, id[idx] = d, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpriority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; q;</span><br><span class=\"line\">\tq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tPII t = q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ver = t.y, distance = t.x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(st[ver]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tst[ver] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[ver]; ~i; i = ne[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> j = e[i];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不能写distance + w[i]</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 因为distance不会变，但是dist[ver]可能会被后面入队的更新 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dist[j] &gt; dist[ver] + w[i])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[ver] + w[i];</span><br><span class=\"line\">\t\t\t\tq.<span class=\"built_in\">push</span>(&#123;dist[j], j&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(h, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> h);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(a, b, c, i), <span class=\"built_in\">add</span>(b, a, c, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> x = <span class=\"number\">2</span>; x &lt;= n; x ++ )  <span class=\"comment\">// 枚举每个点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = h[x]; ~i; i = ne[i])  <span class=\"comment\">// 枚举出边</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> j = e[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dist[x] == dist[j] + w[i])  <span class=\"comment\">// 判断条件</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, id[i]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"F\">F</h2>\n<h3 id=\"题目描述-6\">题目描述</h3>\n<p>现在有长度为$ \\ L \\ $的面包，需要切分并分配给$ \\ N \\ $个小朋友。</p>\n<p>每个小朋友$ \\ i \\ $，需要长度为$ \\ A_i \\ $的面包。</p>\n<p>现在高桥将进行如下操作将面包切分：</p>\n<ul>\n<li>选择长度为$ \\ k \\ $的面包，在$x$位置下将面包分为长度为$ \\ x \\ $以及长度为$ \\ k - x \\ $的两条</li>\n<li>需要花费$ \\ k \\ $的价值</li>\n</ul>\n<p>每一个小朋友都必须得到长度为$A_i$的面包，允许有遗留下来的面包。</p>\n<p>找到满足小朋友需求的最小花费。</p>\n<h3 id=\"题目分析-6\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>将长度为$ \\ k \\ $的面包<strong>切成两半</strong>，<strong>需要花费</strong>的价值为$ \\ k \\ $，转过来一想，<strong>合并两块</strong>总长度为$ \\ k \\ $的面包<strong>需要花费</strong>的价值也是$ \\ k \\ $。</p>\n<p>于是将一条长度为$ \\ k \\ $的面包需要花多少代价才能变为$a_1,a_2,…,a_n$转变为$a_1,a_2,…,a_n$需要花多少代价才能合并为长度为$ \\ k \\ $的面包。</p>\n<p>这就转为了 <a href=\"https://www.acwing.com/problem/content/description/150/\">合并果子</a> 的这道题。</p>\n<p>$ \\ $</p>\n<p><strong>[提示]</strong>：每次记得看看数据，被龙龙卡麻了-。 -</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">200010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, l;</span><br><span class=\"line\">LL a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; l;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tl -= a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpriority_queue&lt;LL, vector&lt;LL&gt;, greater&lt;LL&gt;&gt; q;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) q.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l) q.<span class=\"built_in\">push</span>(l);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tLL a = q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\tLL b = q.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\tres += a + b;</span><br><span class=\"line\">\t\tq.<span class=\"built_in\">push</span>(a + b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["AtCoder题解集"]},{"title":"AtCoder Beginner Contest 254   A—D","url":"http://example.com/2022/06/08/AtCoder-Beginner-Contest-254-A—D/","content":"<h2 id=\"A-3\">A</h2>\n<h3 id=\"题目描述-12\">题目描述</h3>\n<p>给定一个至少为100的数字，输出它的十位和个位。</p>\n<h3 id=\"题目分析-12\">题目分析</h3>\n<p>时间复杂度：$O(1)$。</p>\n<p>枚举即可。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstring s;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; s;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> len = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tcout &lt;&lt; s[len - <span class=\"number\">2</span>] &lt;&lt; s[len - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"B-3\">B</h2>\n<h3 id=\"题目描述-13\">题目描述</h3>\n<p>找到$n$行如下定义的数组：</p>\n<ol>\n<li>第$ \\ i \\ $行的数组长度为$ \\ i \\ $。</li>\n<li>对于第$ \\ i \\ $行$ \\ j \\ $列的元素需要满足 如下定义：\n<ol>\n<li>$a_{i,j} \\ = \\  1。如果j \\ = \\ 1 \\ 或者 \\ j \\ = \\ i$</li>\n<li>$a_{i,j} \\ = \\ a_{i - 1, j - 1} + a_{i - 1, j}$</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"题目分析-13\">题目分析</h3>\n<p>时间复杂度：$O(n^2)$。</p>\n<p>由于数据范围很小$1 \\le N \\le 30$，所有我们可以将所有的情况列出，直接查表即可。</p>\n<p>先处理特殊情况$j \\ = \\ 1和i \\ = \\ j$的情况。</p>\n<p>然后在区域中做一遍dp。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> f[<span class=\"number\">40</span>][<span class=\"number\">40</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;  <span class=\"comment\">// 处理特殊情况。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">35</span>; i ++ ) f[i][<span class=\"number\">1</span>] = f[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">// 打表处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>; i &lt; <span class=\"number\">35</span>; i ++ )</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">2</span>; j &lt; i; j ++ )</span><br><span class=\"line\">\t\t\tf[i][j] = f[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + f[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j ++ )</span><br><span class=\"line\">\t\t\tcout &lt;&lt; f[i][j] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"C-3\">C</h2>\n<h3 id=\"题目描述-14\">题目描述</h3>\n<p>给定一个长度为$ \\ N \\ $的的数组$A$，给定一个值$K$。</p>\n<p>每次可以进行0次或者无限次如下操作：</p>\n<ol>\n<li>选择一个$1 \\le i \\le N - K $中的一个数，将它与$i + k$的位置的数进行交换。</li>\n</ol>\n<p>判断经过若干次操作后，数组$A$是否为递增数组。</p>\n<h3 id=\"题目分析-14\">题目分析</h3>\n<p>时间复杂度：$O(nlogn)$。</p>\n<p>首先观察到能够进行交换的数都是与 <strong>K</strong> 相关的数，也就是 <strong>K的倍数</strong>。</p>\n<p>$a_i，a_{i + k}，a_{i + 2k}，…，a_{i + nk} \\ \\ \\ \\ i + nk \\le N$</p>\n<p>如下图展示：</p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2022/06/08/53050_f134e84de6-abc_3.png\" alt=\"abc_3.png\"></p>\n<p>题目要求<strong>数组</strong>$A$<strong>为递增</strong>数组，那么就要求<strong>组内的数（相同颜色的格子）<strong>也是</strong>递增</strong>的。</p>\n<p>于是我们只需要对<strong>组内的数进行排序</strong>，在判断数组$A$是否为递增数组即可。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N];</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span> + <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i - <span class=\"number\">1</span>] &gt; a[i])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> b = <span class=\"number\">1</span>; b &lt;= k; b ++ )  <span class=\"comment\">// 枚举每组的开头的值，下标 </span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvector&lt;<span class=\"type\">int</span>&gt; c;  <span class=\"comment\">// 用c来存储每组的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = b; i &lt;= n; i += k)  <span class=\"comment\">// 插入每组的值 </span></span><br><span class=\"line\">\t\t\tc.<span class=\"built_in\">push_back</span>(a[i]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(c.<span class=\"built_in\">begin</span>(), c.<span class=\"built_in\">end</span>());  <span class=\"comment\">// 排序</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = b; i &lt;= n; i += k)  <span class=\"comment\">// 将排序好的值放回a中 </span></span><br><span class=\"line\">\t\t\ta[i] = c[(i - b) / k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此处的check()可以由 is_sorted(a + 1, a + n + 1) 取代 </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>()) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"D-3\">D</h2>\n<h3 id=\"题目描述-15\">题目描述</h3>\n<p>给定一个数$ \\ N \\ $，求有多少组$ \\ i \\ \\times \\ j \\ $为平方数。</p>\n<p>$1 \\le i \\le N，1 \\le j \\le N。$</p>\n<h3 id=\"题目分析-15\">题目分析</h3>\n<blockquote>\n<p>思路来自于 <a href=\"https://zhuanlan.zhihu.com/p/524503584\">严格鸽巨巨</a></p>\n</blockquote>\n<p>时间复杂度：$O(n \\sqrt{n})$。</p>\n<p>对于一个平方数来说，它分解出来的质因子一定为<strong>2</strong>的倍数。</p>\n<p>$$s^2 = p_1^{k_1} \\times p_2^{k_2} \\times p_3^{k_3}… 其中 k_i % 2 == 0$$</p>\n<p>比如说$36 = 2^2 \\times 3^2$</p>\n<p>$ \\ $</p>\n<p>$ \\ $</p>\n<p>接下来，我们可以对每一个数进行质因数分解，将质因数出现的次数<strong>模2</strong>，并记录下来。</p>\n<p>例如：</p>\n<p>$12 = 2^2 \\times 3^1$，将质因数出现的次数<strong>模2</strong>后为$2^0 \\times 3^1 = 3$。</p>\n<p>于是<strong>12</strong>这个数就映射为<strong>3</strong>。</p>\n<p>若后续再出现同样映射为<strong>3</strong>的数字时，比如$27 = 3^3 = 3^1$，<strong>27</strong>映射出的数也为<strong>3</strong>，那么<strong>12</strong> $\\times$ <strong>27</strong>$ = 2^2 \\times 3^1 \\times 3^2 \\times 3^1$就一定为平方数。于是我们可以得出，对于<strong>同样映射关系</strong>的两个数来说，<strong>它们的积</strong>一定是<strong>平方数</strong>。</p>\n<p>那如何统计个数呢？对于映射出来的数字<strong>3</strong>，我们可以用<code>map&lt;int, int&gt; mp</code>来进行存储，<code>mp[3] ++ ;</code>将这个映射出现的次数<strong>加一</strong>，于是平方数的总数$sum += mp[3] \\times mp[3]$。</p>\n<p>所有的平方数总和就是所有映射关系的乘积。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n / i; i ++ )  <span class=\"comment\">// 分解质因数 </span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(x % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tcnt ++ ;</span><br><span class=\"line\">\t\t\t\tx /= i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cnt % <span class=\"number\">2</span> != <span class=\"number\">0</span>) res *= i;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt; <span class=\"number\">1</span>) res *= x;  <span class=\"comment\">// 若没有除干净，则需要乘上没除干净的数 </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> res = <span class=\"built_in\">fun</span>(i);  <span class=\"comment\">// 计算映射关系 </span></span><br><span class=\"line\">\t\tmp[res] ++ ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> a : mp) ans += a.second * a.second;  <span class=\"comment\">// 遍历mp中的值 </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["AtCoder题解集"]},{"title":"AtCoder Beginner Contest 253   A—E","url":"http://example.com/2022/05/29/AtCoder-Beginner-Contest-253-A—E/","content":"<blockquote>\n<p>本题解思路来自于 <a href=\"https://www.bilibili.com/video/BV19U4y1y7Kf\">spoonjunxi</a></p>\n</blockquote>\n<h2 id=\"A-2\">A</h2>\n<h3 id=\"题目描述-7\">题目描述</h3>\n<p>给定三个数$a,b,c$，判断$b$是否在$[a,c]$之间，如果是输出<code>Yes</code>，否则输出<code>No</code>。</p>\n<h3 id=\"题目分析-7\">题目分析</h3>\n<p>直接判断即可。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(b &gt;= a &amp;&amp; b &lt;= c || b &lt;= a &amp;&amp; b &gt;= c) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"B-2\">B</h2>\n<h3 id=\"题目描述-8\">题目描述</h3>\n<p>给定一个矩形，求出矩形中两个<strong>o</strong>之间的距离。</p>\n<h3 id=\"题目分析-8\">题目分析</h3>\n<p>曼哈顿距离公式。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> idx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span> c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ )\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; c;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;o&#x27;</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ta[idx ++ ] = i;</span><br><span class=\"line\">\t\t\t\ta[idx ++ ] = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">abs</span>(a[<span class=\"number\">0</span>] - a[<span class=\"number\">2</span>]) + <span class=\"built_in\">abs</span>(a[<span class=\"number\">1</span>] - a[<span class=\"number\">3</span>]) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"C-2\">C</h2>\n<h3 id=\"题目描述-9\">题目描述</h3>\n<p>给定一个<strong>multiset</strong>——<strong>S</strong>，最开始置为空。</p>\n<p>给定<strong>Q</strong>个询问</p>\n<ol>\n<li><code>1 x</code>：向<strong>S</strong>中插入$x$。</li>\n<li><code>2 x c</code>：在<strong>S</strong>中删除$min(c, x的个数)$个$x$。</li>\n<li>输出<strong>S</strong>中最大值$-$最小值。</li>\n</ol>\n<h3 id=\"题目分析-9\">题目分析</h3>\n<p>对于此题，题目要求我们使用<strong>multiset</strong>，但为了方便，我们使用<strong>set</strong>，用数组来统计每个$x$出现的次数。</p>\n<p>由于$0 \\le x \\le 10^9$，用数组开会浪费空间。</p>\n<p>注意到询问次数$1 \\le Q \\le 2 \\times 10^5$，最多$2 \\times 10^5$，启发我们可以使用unordered_map来记录每个数出现的次数。</p>\n<p><code>unordered_map&lt;int, int&gt; mp</code>;</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> T;</span><br><span class=\"line\">\tcin &gt;&gt; T;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tset&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">\tunordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T -- )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> t, x, c;</span><br><span class=\"line\">\t\tcin &gt;&gt; t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mp[x] == <span class=\"number\">0</span>)  s.<span class=\"built_in\">insert</span>(x);  <span class=\"comment\">// 当mp[x] == 0时说明s中一个x都没有，则加入s中 </span></span><br><span class=\"line\">\t\t\tmp[x] ++ ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t == <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; x &gt;&gt; c;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mp[x] &gt; c) mp[x] -= c;  <span class=\"comment\">// 如果数量够减就减 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>  <span class=\"comment\">// 不够则置为0，同时将s中的x删除，因为此时x的数量为0 </span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tmp[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">erase</span>(x);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; *s.<span class=\"built_in\">rbegin</span>() - *s.<span class=\"built_in\">begin</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"D-2\">D</h2>\n<h3 id=\"题目描述-10\">题目描述</h3>\n<p>求出$1$到$N$中不是$A$的倍数，或者不是$B$的倍数的<strong>总数和</strong>是多少。</p>\n<h3 id=\"题目分析-10\">题目分析</h3>\n<p>利用容斥原理。</p>\n<p>如图，<strong>总数和</strong>就是大圈减去两个小圈在加上两个小圈的重合部分。</p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2022/05/29/53050_d8a5e07cdf-abc_d.png\" alt=\"abc_d.png\"></p>\n<p><strong>对于A的倍数的总和：</strong></p>\n<p>$q_1 = N / A$：$1$到$N$中$A$的倍数的数有多少个。</p>\n<p>假设$N$ = 10，$A$ = 3。</p>\n<p>$q_1$ = 3，说明有三个数是$A$的倍数，分别为$3、6、9$。</p>\n<p>如何求它们的和呢？</p>\n<p>我们发现它们呈现<strong>等差数列</strong>的现象，<strong>公差</strong>为$a$，有$q_1$个数字。</p>\n<p>于是$suma = \\frac{q_1 (q_1 + 1)}{2} \\times A$</p>\n<p>同理我们可以求出：</p>\n<p><strong>B的倍数的总和：</strong></p>\n<p>$q_2 = N / B$</p>\n<p>$sumb = \\frac{q_2(q_2 + 1)}{2} \\times B$</p>\n<p><strong>A,B最小公倍数的倍数的总和(既是A的倍数，也是B的倍数的总和)：</strong></p>\n<p>$q_3 = N / lcm(A,B)$</p>\n<p>$sumc = \\frac{q_3(q_3 + 1)}{2} \\times lcm(A,B)$</p>\n<p><strong>所有数的总和：</strong></p>\n<p>$\\frac{N (N + 1)}{2}$</p>\n<p>于是答案就是$\\frac{N (N + 1)}{2} - suma - sumb + sumc$</p>\n<p><strong>注意开long long！！！</strong></p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">lcm</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a / <span class=\"built_in\">gcd</span>(a, b) * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLL n, a, b;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLL q1 = n / a;</span><br><span class=\"line\">\tLL q2 = n / b;</span><br><span class=\"line\">\tLL t = <span class=\"built_in\">lcm</span>(a, b);</span><br><span class=\"line\">\tLL q3 = n / t;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLL suma = q1 * (q1 + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * a;</span><br><span class=\"line\">\tLL sumb = q2 * (q2 + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * b;</span><br><span class=\"line\">\tLL sumc = q3 * (q3 + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * t;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLL sum = suma + sumb - sumc;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLL ans = n * (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span> - sum;</span><br><span class=\"line\">\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>$ \\ $<br>\n$ \\ $</p>\n<h2 id=\"E-2\">E</h2>\n<h3 id=\"题目描述-11\">题目描述</h3>\n<p>有多少个长度为$N$的 $A$数组。</p>\n<p>满足</p>\n<ol>\n<li>每一位小于$M$</li>\n<li>相邻两位的的绝对值之差小于$K$</li>\n</ol>\n<p>答案MOD$998244353$</p>\n<h3 id=\"题目分析-11\">题目分析</h3>\n<p>由于每一位与前面一位有关系，启发我们可以使用<strong>动态规划</strong>。</p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2022/05/30/53050_3c986cd8df-abc_e.png\" alt=\"abc_e.png\"></p>\n<p><strong>优化</strong></p>\n<p>在状态计算中，我们可以通过<strong>前缀和</strong>的思想进行优化。</p>\n<p>求$\\sum_{u = 1}^{j - k} f[i][u]$</p>\n<p>可以开个前缀和数组$s$，用来记录上一层所有情况的前缀和。</p>\n<p>$$\\sum_{u = 1}^{j - k} f[i][u] = s[j - k]$$</p>\n<p>$$\\sum_{u = j + k}^{n} f[i][u] = s[n] - s[j + k - 1]$$</p>\n<p><strong>注意</strong></p>\n<p>$k$的取值可能<strong>为0</strong>，此时注意特判一下即可。</p>\n<p>$Code$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> LL;</span><br><span class=\"line\"></span><br><span class=\"line\">LL n, m, k;</span><br><span class=\"line\">LL s[N];</span><br><span class=\"line\">LL f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++ ) f[<span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;  <span class=\"comment\">// 初始化，第一位填什么都只有一种情况 </span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i ++ )  <span class=\"comment\">// 从第二位开始计算 </span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++ )  <span class=\"comment\">// 处理前缀和数组 </span></span><br><span class=\"line\">\t\t\ts[j] = (s[j - <span class=\"number\">1</span>] + f[i - <span class=\"number\">1</span>][j]) % MOD;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> a = j - k;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> b = j + k;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 当k = 0时，则说明上一层的所有数都满足要求 </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(k == <span class=\"number\">0</span>) f[i][j] = (f[i][j] + s[m]) % MOD;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(a &gt; <span class=\"number\">0</span>) f[i][j] = (f[i][j] + s[a]) % MOD;  <span class=\"comment\">// 如果j - k不是负数 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(b &lt;= m) f[i][j] = (f[i][j] + s[m] - s[b - <span class=\"number\">1</span>] + MOD) % MOD;  <span class=\"comment\">// 如果j + k不大于m </span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 为什么要加MOD在模MOD呢？？？</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 为什么要加MOD在模MOD呢？？？</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 为什么要加MOD在模MOD呢？？？</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i ++ )  <span class=\"comment\">// 计算枚举到n，最后一个数字为i的所有方案数 </span></span><br><span class=\"line\">\t\tans = (ans + f[n][i]) % MOD;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>为什么要加MOD在模MOD呢？？？</strong><br>\n感谢 <a href=\"https://www.acwing.com/user/myspace/index/47428/\">Gzm1317</a> 巨巨的解答。<br>\n因为在处理前缀和的时候用了<code>s[j] = (s[j - 1] + f[i - 1][j]) % MOD</code>。<br>\n可能会导致$s[m] &lt; s[b - 1]$的情况出现，于是需要加上一个<strong>MOD</strong>，防止出现负数的情况。</p>\n","categories":[],"tags":["AtCoder题解集"]},{"title":"不定积分-换元法-分部积分","url":"http://example.com/2022/04/10/不定积分-换元法-分部积分/","content":"<h1>换元法</h1>\n<p>换元法最重要的作用就是&quot;打开局面&quot;。在做积分题时，只需我们选择恰当的换元，就可以将复杂的积分变得非常简洁，尤其是在处理有根式的积分时，常常会使用换元法。</p>\n<h2 id=\"1-整体换元\">(1)  整体换元</h2>\n<p>被积函数中出现&quot;$\\sqrt{一次函数}，\\sqrt{\\frac{一次函数}{一次函数}}，\\sqrt{e^{ax} + b}，\\frac{e^{ax} + b}{e^{ax} - b}$&quot;可以直接将整个根号令为$t$，达到去掉根号的效果！</p>\n<p>(当然，该方法虽然一定可行，但不一定是最快的方法，所以也需要具体问题具体分析)</p>\n<h3 id=\"例1-2\">例1</h3>\n<p>$\\int\\sqrt{\\frac{x}{1 + x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$令\\sqrt{\\frac{x}{1 + x}} = t \\Rightarrow I = \\int td\\frac{1}{1 - t^2}$$</p>\n<p>$$分部积分 \\Rightarrow \\frac{t}{1 - t^2} - \\int\\frac{1}{1 - t^2}dt$$</p>\n<p>$$= \\ \\frac{t}{1 - t^2} + \\int\\frac{1}{t^2 - 1}dt$$</p>\n<p>$$= \\ \\frac{t}{1 - t^2} + \\frac{1}{2}\\ln|\\frac{t - 1}{t + 1}| + C$$</p>\n<p>$$= \\ \\frac{\\sqrt{\\frac{x}{1 + x}}}{1 - (\\sqrt{\\frac{x}{1 + x}})^2} + \\frac{1}{2}\\ln|\\frac{\\sqrt{\\frac{x}{1 + x}} - 1}{\\sqrt{\\frac{x}{1 + x}} + 1}| + C$$</p>\n<p><strong>[注]：</strong></p>\n<p>本题换元法后，<strong>最好不需</strong>将dx解出来，而应直接分部积分！否则被积函数次数太高，不好做！</p>\n<h3 id=\"类题1-3\">类题1</h3>\n<p>$\\int\\frac{1}{x}\\sqrt{\\frac{x + 1}{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$令\\sqrt{\\frac{x + 1}{x}} = t \\Rightarrow I \\ \\int(t^2 - 1)td\\frac{1}{t^2 - 1}$$</p>\n<p>$$分部 \\Rightarrow t - \\int\\frac{1}{t^2 - 1}d(t^3 - t)$$</p>\n<p>$$= \\ t - \\int\\frac{3t^2 - 1}{t^2 - 1}dt$$</p>\n<p>$$= \\ t - \\int\\frac{3t^2 - 3 + 2}{t^2 - 1}dt$$</p>\n<p>$$= \\ t - 3t - 2\\frac{1}{t^2 - 1}dt$$</p>\n<p>$$= \\ -2t -\\ln|\\frac{t - 1}{t + 1}| + C$$</p>\n<h3 id=\"类题2-2\">类题2</h3>\n<p>$①：\\int\\sqrt{\\frac{1 - x}{1 + x}}dx$</p>\n<p>可以换元，但是<strong>没必要</strong></p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int{\\frac{1 - x}{\\sqrt{1 - x^2}}}dx(分子有理化)$$</p>\n<p>$$= \\ \\int\\frac{1}{\\sqrt{1 - x^2}}dx - \\int\\frac{x}{\\sqrt{1 - x^2}}dx$$</p>\n<p>$$= \\ \\arcsin{x} + \\sqrt{1 - x^2} + C$$</p>\n<p>$②： \\int{(\\sqrt{\\frac{1 - x}{1 + x}} + \\sqrt{\\frac{1 + x}{1 - x}})}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int(\\frac{1 - x}{\\sqrt{1 - x^2}} + \\frac{1 + x}{\\sqrt{1 - x^2}})dx$$</p>\n<p>$$= \\ 2\\int\\frac{1}{\\sqrt{1 - x^2}}dx$$</p>\n<p>$$= \\ 2\\arcsin{x} = C$$</p>\n<p>**[注]：**换元法当然可行，但需要思考更快的解法。</p>\n<h3 id=\"类题3-2\">类题3</h3>\n<p>$\\int\\frac{xe^x}{\\sqrt{e^x - 2}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$令t = \\sqrt{e^x - 2} \\Rightarrow x = \\ln{(2 + t^2)}， dx = d\\ln{(2 + t^2)}(先别解出dt，看后面是否需要再说)$$</p>\n<p>$$I = \\int\\frac{\\ln{(2 + t^2)(2 + t^2)}}{t}d\\ln{(2 + t^2)}$$</p>\n<p>$$(通过观察，如果直接分部积分，次数就太大了，因此需要化简)$$</p>\n<p>$$= \\ \\int\\frac{\\ln{(2 + t^2)(2 + t^2)}}{t}\\frac{2t}{2 + t^2}dt$$</p>\n<p>$$= \\ 2\\int\\ln{(2 + t^2)}dt$$</p>\n<p>$$分部积分 \\Rightarrow 2t\\ln{(2 + t^2)} - 2\\int t\\frac{2t}{2 + t^2}dt$$</p>\n<p>$$= \\ 2t\\ln(2 + t^2) - 4\\int\\frac{t^2 + 2 - 2}{2 + t^2}dt$$</p>\n<p>$$= \\ 2t\\ln(2 + t^2) - 4t + 8\\frac{1}{2 + t^2}dt$$</p>\n<p>$$= \\ 2t\\ln(2 + t^2) - 4t + \\frac{8}{\\sqrt{2}}\\arctan{\\frac{t}{\\sqrt{2}}} + C$$</p>\n<p>$$= \\ 2t\\ln(2 + t^2) - 4t + 4\\sqrt{2}\\arctan{\\frac{t}{\\sqrt{2}}} + C$$</p>\n<h3 id=\"类题4\">类题4</h3>\n<p>$\\int\\frac{1}{\\sqrt[3]{(x + 1)^2(x - 1)^4}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{1}{(x - 1)(x + 1)\\sqrt[3]{\\frac{x - 1}{x + 1}}}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{(x^2 - 1)\\sqrt[3]{\\frac{x - 1}{x + 1}}}dx$$</p>\n<p>$$令\\frac{x - 1}{x + 1} = t^3 \\Rightarrow x = \\frac{2}{1 - t^3} - 1，dx = $$</p>\n<p>$$= \\ \\int\\frac{1}{([(\\frac{2}{1 - t^2} - 1)^2 - 1]t}d\t(寄！！！不会了)$$</p>\n<h3 id=\"例2-2\">例2</h3>\n<p>$\\int\\frac{1}{(1 + \\sqrt[3]{x})\\sqrt{x}}dx$</p>\n<p><strong>[解]：<strong>为了消去$\\sqrt[3]{x}$和$\\sqrt{x}$中的根号，则很明显需要令$x = t^6$。这说明我们在换元的时候，<strong>不需要拘泥于套路</strong>。而应该具体问题具体分析。总之记住一点——换元的目的就是</strong>为了化简</strong>被积函数，从而打开局面</p>\n<p>$$令x = t^6，dx = 6t^5 \\Rightarrow I = \\int\\frac{6t^5}{(1 + t^2)t^3}dt$$</p>\n<p>$$= \\ 6\\int\\frac{t^2 + 1 - 1}{1 + t^2}dt$$</p>\n<p>$$= \\ 6t - 6\\arctan{t}$$</p>\n<p>$$= \\ 6x^{\\frac{1}{6}} - 6\\arctan{x^{\\frac{1}{6}}}$$</p>\n<h3 id=\"类题\">类题</h3>\n<p>$\\int\\frac{1}{1 + e^{\\frac{x}{2}} + e^{\\frac{x}{3}} + e^{\\frac{x}{6}}}dx$</p>\n<p><strong>[提示]：</strong>$e^{\\frac{x}{2}} = \\sqrt{e^x}，e^{\\frac{x}{3}} = \\sqrt[3]{x}，e^{\\frac{x}{6}} = \\sqrt[6]{x}$</p>\n<p>$$令e^{\\frac{x}{6}} = t \\Rightarrow x = 6 \\ln{t}，dx = \\frac{6}{t}dt$$</p>\n<p>$$I = \\frac{1}{1 + t^3 + t^2 + t}\\frac{6}{t}dt$$</p>\n<p>$$= \\ 6\\frac{1}{t(t + 1)(t^2 + 1)}dt$$</p>\n<p>$$= \\ 6(\\frac{A}{t} + \\frac{B}{t + 1} + \\frac{2C + D}{t^2 + 1})dt$$</p>\n<p>$$= \\ 6(\\frac{A(t + 1)(t^2 + 1) + Bt(t^2 + 1) + (2C + D)t(t + 1)}{t(t + 1)(t^2 + 1)})dt$$</p>\n<p>$$= \\ 6(\\frac{At^3 + At + At^2 + A + Bt^3 + Bt + 2Ct^2 + 2Ct + Dt^2 + D}{t(t + 1)(t^2 + 1)})dt$$</p>\n<p>$$= \\ 6(\\frac{(A + B)t^3 + (A + 2C + D)t^2 + (A + B + 2C)t + A}{t(t + 1)(t^2 + 1)})dt$$</p>\n<p><strong>待定系数法得</strong></p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\nA + B = &amp; 0 \\\\<br>\nA + 2C + D = &amp; 0 \\\\<br>\nA + B + 2C = &amp; 0 \\\\<br>\nA = &amp; 1 \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$解得：$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\nA = &amp; 1 \\\\<br>\nB = &amp; -1 \\\\<br>\nC = &amp; 0 \\\\<br>\nD = &amp; -1 \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$I = \\ 6(\\frac{1}{t} - \\frac{1}{t + 1} - \\frac{1}{t^2 + 1})dt$$</p>\n<p>$$= \\ 6[\\ln{t} - \\ln{(t + 1)} - \\arctan{t}] + C$$</p>\n<p>$$= \\ 6[\\ln{e^{\\frac{x}{6}}} - \\ln{(e^{\\frac{x}{6}} + 1)} + \\arctan{e^{\\frac{x}{6}}}] + C$$</p>\n<h2 id=\"2-三角换元\">(2)  三角换元</h2>\n<p>若被积函数中出现了&quot;$\\sqrt{二次函数}$&quot;，则一般采用三角换元，具体可细分为以下几种：</p>\n<p><strong>1)</strong> 若根号内没有一次项，只有平方项和常数项，则直接换元</p>\n<ul>\n<li>$\\sqrt{a^2 - x^2} \\Rightarrow 令x = a\\sin{t}$</li>\n<li>$\\sqrt{a^2 + x^2} \\Rightarrow 令x = a\\tan{x}$</li>\n<li>$\\sqrt{x^2 - a^2} \\Rightarrow 令x = a\\sec{x}$</li>\n</ul>\n<p><strong>[注]</strong>：不一定非要出现根号才能三角换元，如$\\int\\frac{1}{(1 + x^2)^2}dx$，则可用$x = \\tan{x}$，再用二倍角处理！</p>\n<p><strong>2)</strong> 若根号内含有一次函数，则需先对根号内的二次函数配方，消去一次项后，便转化为了上面的情况，然后换元即可！</p>\n<h1>分部积分</h1>\n<h1>换元 + 分部 ☆☆☆</h1>\n<h1>利用分部积分对分母降阶</h1>\n<h1>分部积分 + 积分抵消</h1>\n<h1>对复杂因式求导，期待奇迹发生</h1>\n","categories":[],"tags":["高数"]},{"title":"不定积分--三角函数的积分","url":"http://example.com/2022/04/01/不定积分-三角函数的积分/","content":"<h1>套路二  三角有理函数的积分</h1>\n<h2 id=\"引言\">引言</h2>\n<p>以$R(u,v)$表示由$u,v$及常数经过有限次的四则运算得到的二次函数。而$R(\\sin{x}, \\cos{x})$则称为三角有理函数，比如$y = \\frac{\\sin{x}}{\\cos^2{x}} \\ \\ \\ y = \\frac{1}{1 + \\cos{x}} \\ \\ \\ y = \\frac{1}{(\\sin{x} + \\cos{x})^2}$这些都属于三角有理函数。</p>\n<p>而一切的三角有理函数，都可以用过<strong>换元</strong>$\\tan{\\frac{x}{2}} = t(万能公式)$化为有理函数，而有理函数的积分，在套路一中已经解决过了，所以，“从理论上来说”，一切的三角有理函数的积分，其实也已经解决了。</p>\n<p><strong>但是！<strong>万能的方法，不一定是最好的方法。很多三角有理函数的积分，如果盲目的使用万能公式，$\\tan{\\frac{x}{2}} = t$，则计算量会特别大，所以我们需要</strong>具体问题具体分析</strong>，找到每一个题目的特殊解法！</p>\n<h2 id=\"一-万能公式换元法，令-tan-frac-x-2-t\">(一)  万能公式换元法，令$\\tan{\\frac{x}{2}} = t$</h2>\n<p>对于$\\int R(\\sin{x}, \\cos{x})dx$，只需令$\\tan{\\frac{x}{2}} = t$，可以反解出$x = 2\\arctan{t}$，故$dx = \\frac{2}{1 + t^2}dt$，且</p>\n<p>$\\sin{x} = \\frac{2\\sin{\\frac{x}{2}}\\cos{\\frac{x}{2}}}{1} = \\frac{2\\sin{\\frac{x}{2}}\\cos{\\frac{x}{2}}}{\\sin^2{\\frac{x}{2}} + \\cos^2{\\frac{x}{2}}} 同时除\\cos^2{\\frac{x}{2}} \\Rightarrow \\frac{2t}{t^2 + 1};$</p>\n<p>$\\cos{x} = \\frac{\\cos^2{\\frac{x}{2}}{2} - \\sin^2{\\frac{x}{2}}}{1} = \\frac{\\cos^2{\\frac{x}{2}}{2} - \\sin^2{\\frac{x}{2}}}{\\sin^2{\\frac{x}{2}} + \\cos^2{\\frac{x}{2}}} 同时除\\cos^2{\\frac{x}{2}} \\Rightarrow \\frac{1 - t^2}{1 + t^2};$</p>\n<p>代入可得，原积分$= \\int{R(\\frac{2t}{1 + t^2},\\frac{1 - t^2}{1 + t^2})}\\frac{1}{1 + t^2}dt$。成功化为了一个关于t的有理函数积分，积出来以后，再将$t = \\tan{\\frac{x}{2}}$回代即可。</p>\n<h3 id=\"例1\">例1</h3>\n<p>$\\int\\frac{1}{3 +5\\cos{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$令\\tan{\\frac{x}{2}} = t \\Rightarrow x = 2\\arctan{t}，dx = \\frac{2}{1 + t^2}dt，且\\cos{x} = \\frac{\\cos^2{\\frac{x}{2} - \\sin{\\frac{x}{2}}}}{\\cos^2{\\frac{x}{2} + \\sin{\\frac{x}{2}}}} = \\frac{1 - t^2}{1 + t^2}$$</p>\n<p>$$I = \\int\\frac{1}{3 + 5\\frac{1 - t^2}{1 + t^2}}\\frac{2}{1 + t^2}dt$$</p>\n<p>$$= \\ \\int\\frac{2}{3 + 3t^2 + 5 - 5t^2}dt$$</p>\n<p>$$= \\ \\int\\frac{1}{4 - t^2}dt$$</p>\n<p>$$ = \\ \\int\\frac{1}{(2 - t)(2 +t)}dt$$</p>\n<p>$$= \\ \\frac{1}{4}\\ln|\\frac{t + 2}{t - 2}| + C$$</p>\n<p>$$= \\ \\frac{1}{4}\\ln|\\frac{\\tan{\\frac{x}{2}} + 2}{\\tan{\\frac{x}{2} - 2}}| + C$$</p>\n<h3 id=\"例2\">例2</h3>\n<p>$\\int\\frac{1}{1 + \\sin{x} + \\cos{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$令\\tan{\\frac{x}{2}} = t \\Rightarrow x = 2\\arctan{t}，dx = \\frac{2}{1 + t^2}dt，\\cos{x} = \\frac{1 - t^2}{1 + t^2}，\\sin{x} = \\frac{2t}{1 + t^2}$$</p>\n<p>$$I = \\int\\frac{1}{1 + \\frac{2t}{1+ t^2} + \\frac{1 - t^2}{1 + t^2}}\\frac{2}{1 + t^2}dt$$</p>\n<p>$$= \\ \\int\\frac{2}{1 + t^2 + 2t + 1 - t^2}dt$$</p>\n<p>$$= \\ \\int\\frac{1}{1 + t}dt$$</p>\n<p>$$= \\ \\ln|{1 + t}| + C$$</p>\n<p>$$= \\ \\ln|{1 + \\tan{\\frac{x}{2}}}| + C$$</p>\n<h3 id=\"注\">[注]</h3>\n<p>对于三角函数的积分，如果被积函数中$\\sin{x}和\\cos{x}$的<strong>次方太高</strong>，真不建议使用万能公式$\\tan{\\frac{x}{2}} = t$，因为你将会得到一个次方更高的有理函数积分。</p>\n<p>所以，三角有理函数积分的传统解法点到为止，下面将特殊解法。</p>\n<h2 id=\"二-三角有理函数积分的特殊解法\">(二)  三角有理函数积分的特殊解法</h2>\n<p>灵活使用三角函数的各种<strong>恒等变形</strong>和<strong>凑微分技巧</strong>，已达到<strong>快速求解</strong>的目的。以下是几个最常用，最好用的套路。</p>\n<h3 id=\"1-擅于使用-缩分母-技巧\">(1)  擅于使用&quot;缩分母&quot;技巧</h3>\n<p>对于分母为$1 + \\cos{x}$或$1 + \\sin{x}$的积分，我们可以分子分母同时乘以<strong>共轭表达式</strong>（$1 + 2i \\iff 1 - 2i$），使分母从两项变为一项，达到&quot;缩分母&quot;的效果。</p>\n<p>因为，对于一个不定积分而言，我们宁愿分子有很多项，也不远分母有很多项，毕竟，就算分子项数再多，我们也能拆成若干个小积分之和，分别计算再相加；而如果分母项数太多，就很难处理。</p>\n<p>当然，利用二倍角公式，$1 + \\cos{x} = 2\\cos^2{\\frac{x}{2}}$也能将分母合二为一。</p>\n<h4 id=\"例3\">例3</h4>\n<p>$\\int\\frac{1}{1 + \\cos{x}}dx$</p>\n<h5 id=\"方法一-：同乘共轭表达式\">[方法一]：同乘共轭表达式</h5>\n<p>$$\\Longrightarrow \\int\\frac{1 - \\cos{x}}{\\sin^2{x}}dx$$</p>\n<p>$$= \\ \\int\\csc^2{x}dx - \\int\\frac{\\cos{x}}{\\sin^2{x}}dx$$</p>\n<p>$$= \\ -\\cot{x} - \\int\\frac{1}{\\sin^2{x}}d\\sin{x}$$</p>\n<p>$$= \\ -cot{x} + \\frac{1}{\\sin{x}} + C$$</p>\n<p>$$(注：\\int\\frac{\\cos{x}}{\\sin^2{x}}dx = \\int\\cot{x}\\csc{x}dx = -\\csc{x} + C)$$</p>\n<h5 id=\"方法二-：二倍角公式\">[方法二]：二倍角公式</h5>\n<p>$$\\Longrightarrow \\int\\frac{1}{2\\cos^2{\\frac{x}{2}}}dx $$</p>\n<p>$$= \\ \\frac{1}{cos^2{\\frac{x}{2}}}d{(\\frac{x}{2})}$$</p>\n<p>$$ = \\ \\sec^2{\\frac{x}{2}}d{(\\frac{x}{2})}$$</p>\n<p>$$ = \\ \\tan{\\frac{x}{2}} + C$$</p>\n<h5 id=\"关于结果\">关于结果</h5>\n<p>用不同的两种方法算出来的答案，长得不一样很正常，三角函数转化方式太多了</p>\n<h4 id=\"类题1\">类题1</h4>\n<p>$\\int\\frac{\\sin{x}}{1 + \\sin{x}}dx$</p>\n<h5 id=\"方法一\">[方法一]</h5>\n<p>$$I = \\int\\frac{\\sin{x} + 1 - 1}{1 + \\sin{x}}dx$$</p>\n<p>$$= \\ \\int1dx - \\int\\frac{1}{1 + \\sin{x}}dx$$</p>\n<p>$$= \\ x - \\int\\frac{1}{1 + \\cos{(\\frac{π}{2} - x)}}dx(利用化归的思想)$$</p>\n<p>$$= \\ x - \\tan{(\\frac{x}{2} - \\frac{π}{4})} + C$$</p>\n<h5 id=\"方法二\">[方法二]</h5>\n<p>$$I = \\int\\frac{\\sin{x}(1 - \\sin{x})}{\\cos^2{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{\\sin{x}}{\\cos^2{x}}dx - \\int\\tan^2{x}dx $$</p>\n<p>$$= \\ -\\frac{1}{\\cos^2{x}}d(\\cos{x}) - \\int(sec^2{x} - 1)dx $$</p>\n<p>$$= \\ \\frac{1}{\\cos{x}} - tan{x} + x + C$$</p>\n<h4 id=\"类题2\">类题2</h4>\n<p>$\\int\\frac{1}{\\sin{x} + \\cos{x}}dx$</p>\n<p><strong>辅助角公式：</strong></p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\n\\sin{x} + \\cos{x} = &amp; \\sqrt{2}\\sin(x + \\frac{π}{4}) \\\\<br>\n\\sin{x} - \\cos{x} = &amp; \\sqrt{2}\\sin(x - \\frac{π}{4})  \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{1}{\\sqrt{2}\\sin({x} + \\frac{π}{4})}dx(辅助角公式)$$</p>\n<p>$$ = \\ \\frac{1}{\\sqrt{2}}{\\csc(x + \\frac{π}{4})}dx$$</p>\n<p>$$= \\ \\frac{1}{\\sqrt{2}}\\ln|\\cot(x + \\frac{π}{4}) - csc(x + \\frac{π}{4}))| + C$$</p>\n<h4 id=\"类题3\">类题3</h4>\n<p>$\\int\\frac{\\cos{x}}{\\sin{x} + \\cos{x}}dx$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\n\\cos^2{x} = &amp; \\frac{1 + \\cos{2x}}{2} \\\\<br>\n\\sin{x}\\cos{x} = &amp; \\frac{1}{2}\\sin{2x} \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{\\cos{x}(\\cos{x} - \\sin{x})}{\\cos^2{x} - \\sin^2{x}}$$</p>\n<p>$$= \\ \\int\\frac{\\cos^2{x} - \\cos{x}\\sin{x}}{cos{2x}}dx$$</p>\n<p>$$= \\ \\int\\frac{\\frac{1 + \\cos{2x}}{2} -  \\frac{1}{2}\\sin{2x}}{cos{2x}}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1 + \\cos{2}x - \\sin{2x}}{\\cos{2x}}dx$$</p>\n<p>$$= \\ \\frac{1}{4}\\int\\sec{(2x)}d{(2x)} + \\frac{1}{2}\\int1dx - \\frac{1}{4}\\tan{(2x)}d{(2x)}$$</p>\n<p>$$= \\ -\\frac{1}{4}\\ln|\\sec{2x} + \\tan{2x}| + \\frac{1}{2}x + \\frac{1}{4}\\ln|\\cos{2x}| + C$$</p>\n<h3 id=\"2-若-R-sin-x-，-cos-x-R-sin-x-，-cos-x\">(2)  若$R(\\sin{x}，-\\cos{x}) = -R(\\sin{x}，\\cos{x})$</h3>\n<p>想办法将$\\cos{x}$凑到$d$后面，形成$d\\sin{x}$，然后将$\\sin{x}$看成整体，令为$t$，则该积分化为关于$t$的有理函数积分。</p>\n<h4 id=\"例4\">例4</h4>\n<p>$\\int\\frac{1}{sin^2{x}\\cos{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{\\cos{x}}{\\sin^2{x}\\cos^2{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{\\sin^2{x}\\cos^2{x}}d{\\sin{x}}$$</p>\n<p>$$= \\ \\int\\frac{1}{\\sin^2{x}(1 - \\sin^2{x})}d{\\sin{x}}$$</p>\n<p>$$令t = \\sin{x} \\Rightarrow \\ \\int\\frac{1}{t^2(1 - t^2)}d{t}$$</p>\n<p>$$= \\ \\int\\frac{1}{t^2}dx + \\int\\frac{1}{1 - t^2}dt$$</p>\n<p>$$= \\ -\\frac{1}{t} + \\frac{1}{2}\\ln|\\frac{a + t}{a - t}| + C$$</p>\n<p>$$= \\ -\\frac{1}{\\sin{x}} + \\frac{1}{2}\\ln|\\frac{a + \\sin{x}}{a - \\sin{x}}| + C$$</p>\n<h4 id=\"例5\">例5</h4>\n<p>$\\int\\frac{\\cos^3{x} - 2\\cos{x}}{1 + \\sin^2{x} + \\sin^4{x}}dx$</p>\n<p>$$I = \\int\\frac{\\cos^2{x} - 2}{1 + \\sin^2{x} + \\sin^4{x}}d\\sin{x}$$</p>\n<p>$$= \\ -\\int\\frac{\\sin^2{x} + 1}{1 + \\sin^2{x} + \\sin^4{x}}d\\sin{x}$$</p>\n<p>$$令t = \\sin{x} \\Rightarrow -\\int\\frac{t^2 + 1}{1 + t^2 + t^4}dt$$</p>\n<p>$$= \\ -\\int\\frac{1 + \\frac{1}{t^2}}{\\frac{1}{t^2} + 1 + t^2}dt$$</p>\n<p>$$= \\ -\\int\\frac{1}{(t - \\frac{1}{t})^2 + 3}d(t - \\frac{1}{t})$$</p>\n<p>$$= \\ -\\frac{1}{\\sqrt{3}}\\arctan{\\frac{t - \\frac{1}{t}}{\\sqrt{3}}}$$</p>\n<p>$$= \\ -\\frac{1}{\\sqrt{3}}\\arctan{\\frac{\\sin{x} - \\frac{1}{\\sin{x}}}{\\sqrt{3}}} + C$$</p>\n<h4 id=\"例6\">例6</h4>\n<p>$\\int\\sec^3{x}dx(☆☆☆)$</p>\n<h5 id=\"方法一-：\">[方法一]：</h5>\n<p>$$I = \\int\\frac{1}{\\cos^3{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{\\cos{x}}{\\cos^4{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{\\cos^4{x}}d\\sin{x}$$</p>\n<p>$$= \\ \\int\\frac{1}{(1 - \\sin^2{x})^2}dx$$</p>\n<p>$$令t = \\sin{x} \\Rightarrow \\ \\int[\\frac{1}{(1 - t)(1 + t)}]^2dx$$</p>\n<p>$$= \\ \\int[\\frac{1}{(t - 1)(t + 1)}]^2dx$$</p>\n<p>$$= \\ \\int[\\frac{1}{2}(\\frac{1}{t - 1} - \\frac{1}{t + 1})]^2$$</p>\n<p>$$= \\ \\frac{1}{4}\\int[\\frac{1}{(t - 1)^2} - \\frac{2}{t^2 - 1} + \\frac{1}{(t + 1)^2}]dt$$</p>\n<p>$$= \\ \\frac{1}{4}(-\\frac{1}{t - 1} - 2\\frac{1}{2}\\ln|\\frac{t - 1}{t + 1}| -\\frac{1}{t + 1}) + C$$</p>\n<p>$$= \\ -\\frac{1}{4}(\\frac{1}{\\sin{x} - 1} + \\ln{\\frac{\\sin{x} - 1}{\\sin{x} + 1}} + \\frac{1}{\\sin{x} + 1}) + C$$</p>\n<h5 id=\"方法二-：“分部积分-积分重现”\">[方法二]：“分部积分 + 积分重现”</h5>\n<p>$$I = \\sec{x}d\\tan{x}$$</p>\n<p>$$= \\ \\sec{x}\\tan{x} - \\tan{x}d\\sec{x}$$</p>\n<p>$$= \\ \\sec{x}\\tan{x} - \\tan^2{x}\\sec{x}dx$$</p>\n<p>$$= \\ \\sec{x}\\tan{x} - (\\sec^2{x} - 1)\\sec{x}dx$$</p>\n<p>$$= \\ \\sec{x}\\tan{x} - \\sec^3{x}dx + \\sec{x}dx$$</p>\n<p>$$= \\ \\sec{x}\\tan{x} - I + \\ln|\\sec{x} + \\tan{x}| + C$$</p>\n<p>$$解得 \\Rightarrow I = \\frac{\\sec{x}\\tan{x} + \\ln|\\sec{x} + \\tan{x}|}{2} + C$$</p>\n<h4 id=\"小总结\">[小总结]</h4>\n<p>上一题中，利用&quot;分部积分 + 积分重现&quot;的思想，在不定积分**/**定积分中都非常常见，看下面几道例题。</p>\n<h4 id=\"类题1-2\">类题1</h4>\n<p>$\\int\\sqrt{1 + x^2}dx$</p>\n<h5 id=\"方法一-：-2\">[方法一]：</h5>\n<p>先换元，转化为上一题。</p>\n<p>$$令x = \\tan{t} \\Rightarrow I = \\int\\sqrt{1 + \\tan^2{x}}d\\tan{x}$$</p>\n<p>$$= \\ \\int\\sec{x}\\sec^2{x}dx$$</p>\n<p>$$= \\ \\int sec^3{x}dx$$</p>\n<p>$$进而转化为上一题$$</p>\n<h5 id=\"方法二-：\">[方法二]：</h5>\n<p>直接淦！</p>\n<p>$$I = x\\sqrt{1 + x^2} - \\int xd(\\sqrt{1 + x^2})$$</p>\n<p>$$= \\ x\\sqrt{1 + x^2} - \\int x\\frac{1}{2}\\frac{2x}{\\sqrt{1 + x^2}}dx$$</p>\n<p>$$= \\ x\\sqrt{1 + x^2} - \\int\\frac{x^2 + 1 - 1}{\\sqrt{x^2 + 1}}dx$$</p>\n<p>$$= \\ x\\sqrt{1 + x^2} - \\int(\\sqrt{x^2 + 1} - \\frac{1}{\\sqrt{x^2 + 1}})dx$$</p>\n<p>$$= \\ x\\sqrt{1 + x^2} - I + \\int\\frac{1}{\\sqrt{x^2 + 1}}dx$$</p>\n<p>$$= \\ x\\sqrt{1 + x^2} - I + \\ln(x + \\sqrt{x^2 + 1})$$</p>\n<p>$$解得I = \\frac{x\\sqrt{1 + x^2} + \\ln(x + \\sqrt{x^2 + 1})}{2} + C$$</p>\n<h4 id=\"类题2-探索题：\">类题2 探索题：</h4>\n<p>$\\int\\sec{x}dx = \\ln|\\tan{x} + \\sec{x}| + C$和$\\int\\sec^2{x}dx = \\tan{x} + C$是最基本积分公式。</p>\n<p>上一题中我们有解决了$\\int\\sec^3{x}dx$的计算，现在计算$\\int\\sec^4{x}dx$和$\\int\\sec^5{x}dx$。并探索出$\\int\\sec^n{x}dx$的计算方法$(n \\in N^*)$</p>\n<p><strong>[解]：</strong></p>\n<p>记$I_n = \\int\\sec^n{x}dx$</p>\n<p>$ \\ $</p>\n<p>$ \\ $</p>\n<p>$$则I_4 = \\int\\sec^4{x}dx$$</p>\n<p>$$= \\ \\int\\sec^2{x}d\\tan{x}$$</p>\n<p>$$= \\ \\int(1 + \\tan^2{x})d{\\tan{x}}$$</p>\n<p>$$= \\ \\tan{x} + \\frac{1}{3}\\tan^3{x} + C$$</p>\n<p>$ \\ $</p>\n<p>$$则I_5 = \\int\\sec^5{x}dx$$</p>\n<p>$$= \\ \\int\\sec^3{x}d\\tan{x}$$</p>\n<p>$$= \\ \\sec^3{x}\\tan{x} - \\int\\tan{x}d{\\sec^3{x}}$$</p>\n<p>$$= \\ \\sec^3{x}\\tan{x} - \\int\\tan{x} \\ 3\\sec^2{x}\\sec{x}\\tan{x}dx$$</p>\n<p>$$= \\ \\sec^3{x}\\tan{x} - 3\\int\\tan^2{x}sec^3{x}dx$$</p>\n<p>$$= \\ \\sec^3{x}\\tan{x} - 3\\int(\\sec^2{x} - 1)sec^3{x}dx$$</p>\n<p>$$= \\ \\sec^3{x}\\tan{x} - 3\\int\\sec^5{x}dx + 3\\int sec^3{x}dx$$</p>\n<p>$$= \\ \\sec^3{x}\\tan{x} - 3I + 3\\int sec^3{x}dx$$</p>\n<p>$$把I解出来，由于\\int sec^3{x}dx已经求过了，所以不在继续写下去了hh$$</p>\n<p>$ \\ $</p>\n<p>计算$\\int\\sec^n{x}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I_{2n + 2} = \\int\\sec^{2n}xd\\tan{x} = \\int(1 + \\tan^2{x})^nd\\tan{x}$$</p>\n<p>$ \\ $</p>\n<p>$$I_{2n + 1} = \\int \\sec^{2n + 1}xdx = \\int\\sec^{2n - 1}xd\\tan{x}$$</p>\n<p>$$= \\sec^{2n - 1}x\\tan{x} - \\int\\tan^2{x}(2n - 1)\\sec^{2n - 1}dx$$</p>\n<p>$$= \\sec^{2n - 1}x\\tan{x} - (2n - 1)[I_{2n + 1} - I_{2n - 1}]$$</p>\n<p>$$\\Longrightarrow I_{2n + 1} = …(递推公式)$$</p>\n<h4 id=\"类题-3\">类题 3</h4>\n<p>请推导出积分$I_n = \\int\\tan^n{x}dx(n \\ge 2)的递推公式$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I_n = \\int\\tan^{n - 2}{x}(\\sec^2{x} - 1)dx$$</p>\n<p>$$= \\ \\int\\tan^{n - 2}{x}d\\tan{x} - I_{n - 2}$$</p>\n<p>$$= \\ \\frac{1}{n - 1}\\tan^{n - 1}{x} - I_{n - 2}$$</p>\n<h3 id=\"3-若-R-sin-x-cos-x-R-sin-x-cos-x\">(3)若$R(-\\sin{x}, \\cos{x}) = -R(\\sin{x}, \\cos{x})$</h3>\n<p>则将$\\sin{x}$凑到$d$后面，形成$d\\cos{x}$这种情况和上一种情况基本相似.</p>\n<h4 id=\"例7\">例7</h4>\n<p>$\\int\\frac{1}{\\sin{x}\\cos^2{x}}dx$</p>\n<p>$$I = \\int\\frac{\\sin{x}}{\\sin^2{x}cos^2{x}}dx$$</p>\n<p>$$= \\ -\\int\\frac{1}{(1 - \\cos^2{x})\\cos^2{x}}d\\cos{x}$$</p>\n<p>$$令t = \\cos{x} \\Rightarrow -(\\int\\frac{1}{t^2}dt + \\int\\frac{1}{1 - t^2}dt)$$</p>\n<p>$$= \\ \\frac{1}{t} + \\frac{1}{2}\\ln|\\frac{t + 1}{t - 1}| + C$$</p>\n<p>$$= \\ \\frac{1}{\\cos{x}} + \\frac{1}{2}\\ln|\\frac{\\cos{x} + 1}{\\cos{x} - 1}| + C$$</p>\n<h4 id=\"例8\">例8</h4>\n<p>$\\int\\frac{5 + 4\\cos{x}}{(2 + \\cos{x})^2 \\sin{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{(5 + 4\\cos{x})\\sin{x}}{(2 + \\cos{x})^2 \\sin^2{x}}dx$$</p>\n<p>$$= \\ -\\int\\frac{(5 + 4\\cos{x})}{(2 + \\cos{x})^2\\sin^2{x}}d\\cos{x}$$</p>\n<p>$$令t = \\cos{x} \\Rightarrow -\\int\\frac{(5 + 4t)}{(2 + t)^2(1 - t^2)}dt$$</p>\n<p>$$做到这里有两种方法$$</p>\n<p>$$1.裂项展开$$</p>\n<p>$$2.观察法，注意到分子和分母之间的关系$$</p>\n<p>$$= \\ -\\frac{(2 + t)^2 + (1 - t^2)}{(2 + t)^2(1 - t^2)}$$</p>\n<p>$$= \\ -\\int\\frac{1}{1 - t^2}dt - \\int\\frac{1}{(2 + t)^2}dt$$</p>\n<p>$$= \\ \\frac{1}{2}\\ln|\\frac{t - 1}{t + 1}| + \\frac{1}{t + 2} + C$$</p>\n<h3 id=\"4-若-R-sin-x-cos-x-R-sin-x-cos-x\">(4)  若$R(-\\sin{x}, -\\cos{x}) = R(\\sin{x}, \\cos{x})$</h3>\n<p>则想办法制造出$\\sec^2{x}dx$，凑成$d\\tan{x}$，再将$\\tan{x}$看成整体，令为$t$即可。</p>\n<p>我们有时候很喜欢分子分母同时除以$\\cos^2{x}$，便分子出现$\\sec^2{x}$，就是这个原因。</p>\n<h4 id=\"例9\">例9</h4>\n<p>$\\int\\frac{1}{1 + \\cos^2{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{\\sec^2x}{\\sec^2{x} + 1}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{\\sec^{2}{x} + 1}d\\tan{x}$$</p>\n<p>$$= \\ \\int\\frac{1}{2 + \\tan^2{x}}d\\tan{x}$$</p>\n<p>$$= \\ \\frac{1}{\\sqrt{2}}\\arctan{\\frac{tan{x}}{\\sqrt{2}}} + C$$</p>\n<h4 id=\"例10\">例10</h4>\n<p>$\\int\\frac{1}{(3\\sin{x} + 2\\cos{x})^2}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{\\sec^2{x}}{(3\\tan{x} + 2)^2}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{(3\\tan{x} + 2)^2}d{\\tan{x}}$$</p>\n<p>$$= \\ -\\frac{1}{3}\\frac{1}{3\\tan{x} + 2} + C$$</p>\n<h4 id=\"例11\">例11</h4>\n<p>$\\int\\frac{1}{a^2\\sin^2{x} + b^2\\cos^2{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{sec^2{x}}{a^2\\tan^2{x} + b^2}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{a^2\\tan^2{x} + b^2}d\\tan{x}$$</p>\n<p>$$= \\ \\int\\frac{1}{a^2}\\frac{1}{\\tan^2{x} + (\\frac{b}{a})^2}d\\tan{x}$$</p>\n<p>$$= \\ \\frac{1}{a^2}\\frac{a}{b}\\arctan{\\frac{a\\tan{x}}{b}} + C$$</p>\n<p>$$= \\ \\frac{1}{ab}\\arctan{\\frac{a\\tan{x}}{b}} + C$$</p>\n<p>$$做到这里其实没做完，需要讨论a，b是否等于0$$</p>\n<p>$$② \\ 当a = 0,b \\ne 0时，I = \\frac{1}{b^2}\\int\\sec^2{x}dx$$</p>\n<p>$$= \\ \\frac{1}{b^2}\\tan{x} + C$$</p>\n<p>$$③ \\ 当a \\ne 0,b = 0时，I = \\frac{1}{a^2}\\int\\csc^2{x}dx$$</p>\n<p>$$= \\ -\\frac{1}{a^2}\\cot{x} + C$$</p>\n<p>$$(至此，情况讨论完毕)$$</p>\n<h4 id=\"例12\">例12</h4>\n<p>$\\int\\frac{1}{\\sin^4{x}\\cos^2{x}}dx$</p>\n<p>$$I = \\int\\frac{sec^2{x}}{\\sin^4{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{\\sin^4{x}}d\\tan{x}$$</p>\n<p>$$= \\ \\int\\frac{\\sec^4{x}}{\\tan^4{x}}d\\tan{x}$$</p>\n<p>$$= \\ \\int\\frac{(1 + \\tan^2{x})^2}{\\tan^4{x}}d\\tan{x}$$</p>\n<p>$$= \\ \\int(\\frac{1}{\\tan^4{x}} + \\frac{2}{\\tan^2{x}} + 1)d\\tan{x}$$</p>\n<p>$$= \\ -\\frac{1}{3}\\frac{1}{\\tan^3{x}} - \\frac{2}{\\tan{x}} + \\tan{x} + C$$</p>\n<h4 id=\"注-2\">[注]</h4>\n<p>若将上题中的分子分母颠倒，改为$\\int\\sin^4{x}\\cos^2{x}dx$，当然也能凑$d\\tan{x}$，但后续操作比较麻烦。若能灵活地使用<strong>二倍角公式</strong>：$\\sin^2{x} = \\frac{1 - cos{2x}}{2}$和$\\sin{x}\\cos{x} = \\frac{1}{2}\\sin{2x}$，则计算量会小很多</p>\n<h4 id=\"例12-b\">例12-b</h4>\n<p>求$\\int \\sin^4{x}\\cos^2{x}dx$</p>\n<h5 id=\"方法一-2\">[方法一]</h5>\n<p>$$I = \\int\\frac{sin^4{x}\\cos^2{x}\\sec^2{x}}{\\sec^2{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{\\sin^4{x}\\cos^2{x}}{\\sec^2{x}}d{\\tan{x}}$$</p>\n<p>$$= \\ \\frac{sin^4{x}\\cos^4{x}}{1}d\\tan{x}$$</p>\n<p>$$= \\ \\frac{tan^4{x}}{(1 + \\tan^2{x})^4}d\\tan{x}$$</p>\n<p>$$= \\ …(贼难算)$$</p>\n<h5 id=\"方法二-2\">[方法二]</h5>\n<p>$$I = \\int\\sin^2{x}(\\sin{x}\\cos{x})^2dx$$</p>\n<p>$$ = \\ \\int\\frac{1 - \\cos{2x}}{2}\\frac{sin^2{2x}}{4}dx$$</p>\n<p>$$= \\ \\frac{1}{8}(\\int\\sin^2{2x}dx - \\int\\cos{2x}\\sin^2{2x}dx)$$</p>\n<p>$$= \\ \\frac{1}{8}(\\int\\frac{1 - \\cos{2x}}{2}dx + \\frac{1}{6}\\sin^3{2x})$$</p>\n<p>$$= \\ \\frac{1}{8}(\\frac{x}{2} - \\frac{1}{2}\\frac{1}{2}\\sin{2x} + \\frac{1}{6}\\sin^3{2x}) + C$$</p>\n<h4 id=\"思考\">[思考]</h4>\n<p>对于$\\int\\sin^m{x}\\cos^n{x}dx$，有无规律总结?</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\n①：若m，n中至少有一个奇数 \\Rightarrow 凑微分 \\\\<br>\n②：若m，n均为偶数 \\Rightarrow 二倍角\\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<h4 id=\"例13\">例13</h4>\n<p>$\\int\\frac{1 + \\sin{x} + \\cos{x}}{1 + \\sin^2{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{1}{1 + \\sin^2{x}}dx + \\int\\frac{\\sin{x}}{1 + \\sin^2{x}}dx + \\int\\frac{\\cos{x}}{1 + \\sin^2{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{\\sec^2{x}}{\\sec^2{x} + \\tan^2{x}}dx - \\int\\frac{1}{1 + 1 - \\cos^2{x}}d\\cos{x} + \\int\\frac{1}{1 + \\sin^2{x}}d\\sin{x}$$</p>\n<p>$$= \\ \\int\\frac{1}{\\tan^2{x} + 1 + \\tan^2{x}}d\\tan{x} - \\frac{1}{2\\sqrt{2}}\\ln|\\frac{\\cos{x} + \\sqrt{2}}{\\cos{x} - \\sqrt{2}}| + \\arctan{\\sin{x}}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1}{\\tan^2{x} + \\frac{1}{2}}d\\tan{x} - \\frac{1}{2\\sqrt{2}}\\ln|\\frac{\\cos{x} + \\sqrt{2}}{\\cos{x} - \\sqrt{2}}| + \\arctan{\\sin{x}}$$</p>\n<p>$$= \\ \\frac{1}{2}\\sqrt{2}\\arctan{\\sqrt{2}\\tan{x}} - \\frac{1}{2\\sqrt{2}}\\ln|\\frac{\\cos{x} + \\sqrt{2}}{\\cos{x} - \\sqrt{2}}| + \\arctan{\\sin{x}} + C$$</p>\n<h3 id=\"5-形如-int-frac-A-sin-x-B-cos-x-C-sin-x-D-cos-x-dx\">(5)  形如$\\int\\frac{A\\sin{x} + B\\cos{x}}{C\\sin{x} + D\\cos{x}}dx$</h3>\n<p>对于一切形如$\\int\\frac{A\\sin{x} + B\\cos{x}}{C\\sin{x} + D\\cos{x}}dx$的积分，我们可以设&quot;<strong>分子 = p * 分母 + q(分母)</strong>$\\prime$&quot;</p>\n<p>然后利用<strong>系数相等的原则</strong>，求出$p$和$q$，则此时的积分结果一定为：</p>\n<p>$$I = \\int\\frac{A\\sin{x} + B\\cos{x}}{C\\sin{x} + D\\cos{x}}dx = px + q\\ln|分母| + C(任意常数)$$</p>\n<h4 id=\"例14\">例14</h4>\n<p>$\\int\\frac{3\\sin{x} + 4\\cos{x}}{2\\sin{x} + \\cos{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$假设3\\sin{x} + 4\\cos{x} = p(2\\sin{x} + \\cos{x}) + q(2\\cos{x} - \\sin{x})$$</p>\n<p>$$= \\ (2p - q)\\sin{x} + (p + 2q)\\cos{x}$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\n2p - 1 = &amp; 3 \\\\<br>\np + 2q = &amp; 4 \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$解得p = 2，q = 1$$</p>\n<p>$$I = \\int\\frac{2(2\\sin{x} + \\cos{x}) + (2\\cos{x} - \\sin{x})}{2\\sin{x} + \\cos{x}}dx$$</p>\n<p>$$= \\ 2x + ln|(2\\sin{x} + \\cos{x})| + C$$</p>\n<h3 id=\"6-出现不同角度的三角函数\">(6)  出现不同角度的三角函数</h3>\n<p>当被积函数中，出现不同角度的三角函数时，先想办法同一角度</p>\n<h4 id=\"例15\">例15</h4>\n<p>$\\int\\frac{1}{2\\sin{x} + \\sin{2x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{1}{2\\sin{x} + 2\\sin{x}\\cos{x}}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1}{\\sin{x}(1 + \\cos{x})}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1}{\\sin{x}(2\\cos^2{\\frac{x}{2}})}dx$$</p>\n<p>$$= \\ \\frac{1}{8}\\int\\frac{1}{\\sin{\\frac{x}{2}}\\cos^3{\\frac{x}{2}}}dx$$</p>\n<p>$$= \\ \\frac{1}{4}\\int\\frac{\\sec^2{\\frac{x}{2}}}{\\sin{\\frac{x}{2}}\\cos{\\frac{x}{2}}}d\\frac{x}{2}$$</p>\n<p>$$= \\ \\frac{1}{4}\\int\\frac{1}{\\sin{\\frac{x}{2}}\\cos{\\frac{x}{2}}}d\\tan{\\frac{x}{2}}$$</p>\n<p>$$= \\ \\frac{1}{4}\\int\\frac{\\sin^2{x} + \\cos^2{x}}{\\sin{\\frac{x}{2}}\\cos{\\frac{x}{2}}}d\\tan{\\frac{x}{2}}$$</p>\n<p>$$= \\ \\frac{1}{4}\\int(\\tan{\\frac{x}{2}} + \\frac{1}{\\tan{\\frac{x}{2}}})d\\tan{\\frac{x}{2}}$$</p>\n<p>$$= \\ \\frac{1}{4}(\\frac{1}{2}\\tan^2{\\frac{x}{2}} + \\ln|\\tan{x}|) + C$$</p>\n<h4 id=\"例16\">例16</h4>\n<p>$\\int\\frac{\\cos{2x} - \\sin{2x}}{\\sin{x} + \\cos{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{\\cos^2{x} - \\sin^2{x} - 2\\sin{x}\\cos{x}}{\\sin{x} + \\cos{x}}dx$$</p>\n<p>$$= \\ \\int\\frac{\\cos^2{x} - \\sin^2{x}}{\\sin{x} + \\cos{x}}dx - \\int\\frac{2\\sin{x}\\cos{x}}{\\sin{x} + \\cos{x}}dx$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\n(\\sin{x} + \\cos{x})^2 = &amp; 1 + 2\\sin{x}\\cos{x} \\\\<br>\n(\\sin{x} - \\cos{x})^2 = &amp; 1 - 2\\sin{x}\\cos{x} \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$= \\ \\int(\\cos{x} - \\sin{x})dx - \\int\\frac{(\\sin{x} + \\cos{x})^2 - 1}{\\sin{x} + \\cos{x}}$$</p>\n<p>$$= \\ sin{x} + \\cos{x} -[\\int(\\sin{x} + \\cos{x})dx - \\int\\frac{1}{\\sin{x} + \\cos{x}}dx]$$</p>\n<p>$$= \\ 2\\cos{x} - \\int\\frac{1}{\\sin{x} + \\cos{x}}dx（类题2）$$</p>\n<p>$$略…$$</p>\n<h3 id=\"7-形如-int-sin-ax-sin-bx-dx-a-ne-b\">(7)  形如$\\int\\sin{ax} \\sin{bx} \\ dx(a \\ne b)$</h3>\n<p>利用<strong>积化和差公式</strong>，一步<strong>爆杀</strong>！！！</p>\n<h4 id=\"例17\">例17</h4>\n<p>$\\int\\sin{2x}\\sin{3x}dx$</p>\n<p>分析：想办法凑出$\\sin{2x}\\sin{3x}$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = -\\frac{1}{2}\\int[\\cos{(2x + 3x)} - \\cos{(2x - 3x)}]dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int{[\\cos{x} - \\cos{5x}]}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\sin{x} - \\frac{1}{10}\\sin{5x} + C$$</p>\n","categories":[],"tags":["高数"]},{"title":"不定积分--有理函数的积分","url":"http://example.com/2022/03/29/不定积分-有理函数的积分/","content":"<h1>套路一 有理函数的积分 ($\\int \\frac{多项式}{多项式}dx)$</h1>\n<h2 id=\"一-有理函数积分的通项方法——裂项-待定系数\">(一)有理函数积分的通项方法——裂项$ \\ $+$ \\ $待定系数</h2>\n<p>$ \\ \\ $有理函数从宏观上可分为<strong>真分式（分母为最高次项）<strong>和</strong>假分式（分子为最高次项）</strong>，而任意一个<strong>假分式</strong>都可以通过多项式除法变成<strong>多项式</strong>与<strong>真分式</strong>之和。由于多项式的积分是简单的，所以解决有理函数函数的积分。本质上就变成了解决有理真分式的积分。而对于真分式的积分，我们有如下固定套路——</p>\n<ol>\n<li>\n<p>将该真分式的分母进行因式分解（一直分解到无法再分解为止）</p>\n</li>\n<li>\n<p>然后进行裂项，裂项的原则如下——</p>\n<ul>\n<li>①只需分母中含有$(x \\ - \\ a)^{k}$，则裂项后的式子中一定含有$\\frac{A_1}{x \\ - \\ a} \\ + \\ \\frac{A_2}{(x \\ - \\ a)^2} \\ + \\ … \\ + \\frac{A_k}{(x \\ - \\ a)^{k}}$</li>\n<li>②只需要分母中含有$(x^2 \\ + \\ px \\ + \\ q)^k$（注：因为已经分解到&quot;不能再分解&quot;了，所以这里的$p^2 \\ - 4q \\ &lt; \\ 0$），则裂项后的式子中一定含有$\\frac{B_1x \\ + \\ C_1}{x^2 \\ + \\ px \\ + \\  q} \\ + \\ \\frac{B_2x \\ + \\ C_2}{(x^2 \\ + \\ px \\ + \\ q)^2} \\ + \\ … \\ + \\ \\frac{B_kx \\ + \\ C_k}{(x^2 \\ + \\ px \\ + \\ q)^k}$</li>\n</ul>\n</li>\n<li>\n<p>将裂项以后得到的所有项进行通分，根据&quot;通分后的分子与原被积函数的分子应该相等&quot;的原则，列出待定系数所满足的方程，解出待定系数。这样就将真分式分解成了各个基本公式了</p>\n</li>\n<li>\n<p>对于①中所得到的一些列基本分式$\\frac{A}{(x \\ - \\ a)^k}$，它们的积分十分容易；</p>\n<p>对于②中所得到的一些列基本分式$\\frac{Bx \\ + \\ C}{(x^2 \\ + \\ px \\ + \\ q)^k}$，其积分<strong>稍微复杂一点</strong>，但其实，所有形如$\\frac{Bx \\ + \\ C}{(x^2 \\ + \\ px \\ + \\ q)^k}$ 和 $\\int \\frac{Bx \\ + \\ C}{(x^2 \\ + \\ px \\ + \\ q)^k}dx$的计算学会即可！</p>\n</li>\n</ol>\n<p>我们在下面的<strong>例题1</strong>和<strong>例题2</strong>中，会详细的介绍这两个积分的计算方法。至此，整个有理函数的积分，就找到了一个完善的解决方法。</p>\n<p>总之，通过<strong>裂项</strong>，最终会归结于计算$\\int \\frac{A}{(x \\ - \\ a)^k}dx$，$\\int \\frac{Bx \\ + \\ C}{x^2 \\ + \\ px \\ + \\ q}dx$和$\\int \\frac{Bx \\ + \\ c}{(x^2 \\ + \\ px \\ + \\ q)^2}dx$三类积分。</p>\n<h3 id=\"例1：\">例1：</h3>\n<p>$\\int \\frac{x \\ + \\ 3}{x^2 \\ + \\ 2x \\ + \\ 4}dx$</p>\n<p>$$I \\ = \\ \\int \\frac{\\frac{1}{2} (2x \\ + \\ 2) \\ + \\ 2}{x^2 \\ + \\ 2x \\ + 4}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{2x \\ + \\ 2}{x^2 \\ + \\ 2x \\ + 4}dx \\ + \\ 2\\int\\frac{1}{x^2 \\ + \\ 2x \\ + \\ 4} $$</p>\n<p>$$( \\ \\frac{f\\prime}{f}dx \\ = \\ ln|f| \\ + \\ C)$$</p>\n<p>$$= \\ \\frac{1}{2}\\ln(x^2 \\ + \\ 2x \\ + 4) \\ + \\ 2\\int\\frac{1}{(x \\ + \\ 1)^2 \\ + \\ 3}dx$$</p>\n<p>$$ (\\ \\int\\frac{1}{a^2 \\ + \\ x^2}dx \\ = \\ \\frac{1}{a}\\arctan{\\frac{x}{a}} \\ +  \\ C)$$</p>\n<p>$$= \\ \\frac{1}{2}\\ln(x^2 \\ + \\ 2x \\ + 4) \\ + \\ 2\\frac{1}{\\sqrt{3}}\\arctan{\\frac{x \\ + \\ 1}{\\sqrt{3}}} \\ + \\ C$$</p>\n<p><strong>[注]<strong>通过该题，可以总结出一切$\\frac{Bx \\ + \\ C}{x^2 \\ + \\ px \\ + q}$的积分，其套路为</strong>&quot;改造分子，拆分为两个积分，其中第一个积分直接凑微分，第二个积分配方后套公式即可！&quot;</strong></p>\n<h3 id=\"例2：\">例2：</h3>\n<p>$\\frac{x^2}{(a^2 \\ + \\ x^2)^2}dx \\ (a \\ &gt; \\ 0)$</p>\n<h4 id=\"方法一-：三角换元，令-x-a-tan-t-dx-a-sec-2-t-dt-t-arctan-frac-x-a\">[方法一]：三角换元，令$x \\ = \\ a\\tan{t}, \\ dx \\ = \\ a\\sec^2{t}dt, \\ t \\ = \\ \\arctan{\\frac{x}{a}}$</h4>\n<p><strong>[解]：</strong></p>\n<p>$$I \\ =\\ \\frac{a^2\\tan^2{t}}{a^4 \\sec^4{t}}a\\sec^2{t}dt$$</p>\n<p>$$= \\ \\frac{1}{a}\\int\\frac{tan^2t}{sec^2t}$$</p>\n<p>$$= \\ \\frac{1}{a}\\int\\sin^2{t}dt$$</p>\n<p>$$= \\ \\frac{1}{a}\\frac{1 \\ - \\ \\cos{2t}}{2}dt$$</p>\n<p>$$= \\ \\frac{1}{2a}[\\int dt \\ - \\ \\int cos{2t}dt]$$</p>\n<p>$$= \\ \\frac{1}{2a}[t \\ - \\ \\frac{1}{2}sin{2t}] \\ + \\ C$$</p>\n<p>$$= \\ \\frac{1}{2a}[t \\ - \\ \\sin{t}\\cos{t}]$$</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">画一个三角形出来</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"operator\">|</span>\\</span><br><span class=\"line\">    <span class=\"operator\">|</span> \\ </span><br><span class=\"line\">  <span class=\"variable\">x</span> <span class=\"operator\">|</span>  \\ <span class=\"variable\">sqrt</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"operator\">*</span><span class=\"variable\">x</span> <span class=\"operator\">+</span> <span class=\"variable\">a</span><span class=\"operator\">*</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">    <span class=\"operator\">|</span>   \\</span><br><span class=\"line\">    <span class=\"operator\">|____</span>\\ <span class=\"punctuation\">(</span>角度<span class=\"variable\">t</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">      <span class=\"variable\">a</span></span><br><span class=\"line\"><span class=\"variable\">tant</span> <span class=\"operator\">=</span> <span class=\"variable\">x</span> <span class=\"operator\">/</span> <span class=\"variable\">a</span></span><br><span class=\"line\"><span class=\"variable\">sint</span> <span class=\"operator\">=</span> <span class=\"variable\">x</span> <span class=\"operator\">/</span> <span class=\"variable\">sqrt</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"operator\">*</span><span class=\"variable\">x</span> <span class=\"operator\">+</span> <span class=\"variable\">a</span><span class=\"operator\">*</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"variable\">cost</span> <span class=\"operator\">=</span> <span class=\"variable\">a</span> <span class=\"operator\">/</span> <span class=\"variable\">sqrt</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"operator\">*</span><span class=\"variable\">x</span> <span class=\"operator\">+</span> <span class=\"variable\">a</span><span class=\"operator\">*</span><span class=\"variable\">a</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"variable\">arctan</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span> <span class=\"operator\">/</span> <span class=\"variable\">a</span><span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>$$= \\ \\frac{1}{2a}[\\arctan{\\frac{x}{a}} \\ - \\ \\frac{x}{\\sqrt{x^2 \\ + \\ a^2}}\\frac{a}{\\sqrt{x^2 \\ + \\ a^2}}] \\ + \\ C$$</p>\n<p>$$= \\ \\frac{1}{2a}\\arctan{\\frac{x}{a}} \\ - \\ \\frac{1}{2}\\frac{x}{x^2 \\ + \\ a^2} \\ + \\ C$$</p>\n<h4 id=\"方法二-：分母次数太高，可以使用分部积分来降低分母的次数（☆☆☆）\">[方法二]：分母次数太高，可以使用分部积分来降低分母的次数（☆☆☆）</h4>\n<p><strong>[解]：</strong></p>\n<p>$$I \\ = \\ \\int\\frac{x \\ * \\ x}{(a^2 \\ + \\ x^2)^2}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int x \\frac{1}{(a^2 \\ + \\ x^2)^2}d(a^2 \\ + \\ x^2)$$</p>\n<p>$$= \\ -\\frac{1}{2}\\int xd{\\frac{1}{x^2 \\ + \\ a^2}}$$</p>\n<p>$$分部\\Rightarrow -\\frac{1}{2}x\\frac{1}{a^2 \\ + \\ x^2} \\ + \\ \\frac{1}{2}\\int\\frac{1}{x^2 \\ + \\ a^2}dx$$</p>\n<p>$$= \\ -\\frac{1}{2}\\frac{x}{x^2 \\ + \\ a^2} \\ + \\ \\frac{1}{2}\\frac{1}{a}\\arctan{\\frac{x}{a}} \\ + \\ C$$</p>\n<h3 id=\"类题1-4\">类题1</h3>\n<p>$\\int \\frac{1}{(a^2 \\ + \\ x^2)^2}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I \\ = \\ \\int\\frac{1}{(a^2 \\ + \\ x^2)^2}dx$$</p>\n<p>$$ = \\ \\frac{1}{a^2}\\int\\frac{(a^2 \\ + \\ x^2) \\ - \\ x^2}{(a^2 \\ + \\ x^2)^2}dx$$</p>\n<p>$$= \\ \\frac{1}{a^2}\\int\\frac{1}{(a^2 \\ + \\ x^2)}dx \\ - \\ \\frac{1}{a^2}\\int\\frac{x^2}{(a^2 \\ + \\ x^2)^2}dx$$</p>\n<p>$$从而将本题归结于上一道题！$$</p>\n<h3 id=\"注-3\">[注]:</h3>\n<p>通过以上两题，可以推出所有$\\int\\frac{Bx \\ + \\ C}{(x^2 \\ + \\ px \\ + q)^2}dx$的积分的计算方法，其套路总结为——<strong>&quot;改造分子，拆分为两个积分 ==&gt; 对分母配方，换元 ==&gt; 归结计算</strong>$\\int\\frac{1}{(a^2 \\ + \\ t^2)}dt$<strong>&quot;</strong>。比如下面这道题——</p>\n<h3 id=\"类题2-3\">类题2</h3>\n<p>$\\int\\frac{x \\ + \\ 2}{(x^2 \\ + \\ 2x \\ + \\ 10)^2}$</p>\n<p><strong>[解]：</strong></p>\n<p>分析：由于<strong>分母求导</strong>后的$2x \\ + \\ 2$，所以我们尽量把<strong>分子凑成</strong>差不多的样子。</p>\n<p>$$I \\ = \\ \\int\\frac{\\frac{1}{2}(2x+2) +  1}{(x^2  +  2x  +  10)^2}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{2x  +  2}{(x^2  +  2x  +  10)^2}dx  +  \\int\\frac{1}{(x^2  +  2x  +  10)^2}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1}{(x^2 +  2x  +  10)^2}d(x^2  +  2x  +  10) +  \\int\\frac{1}{[(x + 1)^2  + 3^2]^2}d(x + 1)$$</p>\n<p>$$= \\ -\\frac{1}{2}\\frac{1}{x^2 + 2x + 10} + \\frac{1}{3}\\arctan\\frac{(x + 1)}{3}$$</p>\n<h2 id=\"总结：\">总结：</h2>\n<p>至此$\\int\\frac{A}{(x \\ - \\ a)^k}dx, \\ \\int\\frac{Bx \\ + \\ C}{x^2 \\ + \\ px \\ + \\ q}dx, \\ \\int\\frac{Bx \\ + \\ C}{(x^2 \\ + \\ px \\ + \\ q)^2}dx$这三类基本分式的积分我们<strong>都已学会</strong>，铺垫<strong>大功告成</strong>，所以对于一切有理函数的积分，我们就找到了完整的解题套路。</p>\n<p>下面看几道经典的例题——</p>\n<h3 id=\"例3-2\">例3</h3>\n<p>$\\int\\frac{3x \\ + \\ 6}{(x \\ - \\ 1)^2(x^2 \\ + \\ x \\ + 1)}dx \\ \\ (2019,10分)$</p>\n<p><strong>[解]：</strong></p>\n<p>$$\\frac{3x + 6}{(x - 1)^2(x^2 + x + 1)}$$</p>\n<p>$$= \\ \\frac{A}{x - 1} + \\frac{B}{(x - 1)^2} + \\frac{Cx + D}{x^2 + x + 1} \\ \\ (由前面的知识可以拆分为这样的式子)$$</p>\n<p>$$= \\ \\frac{A(x - 1)(x^2 + x + 1) + B(x^2 + x + 1) + (Cx + D)(x - 1)^2}{(x - 1)^2(x^2 + x + 1)}$$</p>\n<p>$$= \\ \\frac{A(x^3 - 1) + B(x^2 + x + 1) + (Cx + D)(x - 1)^2}{(x - 1)^2(x^2 + x + 1)}$$</p>\n<p>$$由于待定系数必须相等$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\nA + C = &amp; 0 \\\\<br>\nB + C(-2) + D = &amp; 0 \\\\<br>\nB + C = &amp; 3 \\\\<br>\n-A + B + D = &amp; 6 \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$解得$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\nA = &amp; -2 \\\\<br>\nB = &amp; 3 \\\\<br>\nC = &amp; 2 \\\\<br>\nD = &amp; 1 \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$I \\ = \\ (-2)\\int\\frac{1}{x - 1}dx + 3\\int\\frac{1}{(x - 1)^2}dx + \\int\\frac{2x + 1}{x^2 + x + 1}dx$$</p>\n<p>$$= \\ -2\\ln{|x - 1|} - 3\\frac{1}{x - 1} + \\ln{|x^2 + x + 1|} + C$$</p>\n<h3 id=\"例4-2\">例4</h3>\n<p>$\\int\\frac{1}{1 + x^3}dx$</p>\n<p>$$I \\ = \\ \\int\\frac{1}{(1 + x)(1 - x + x^2)}dx$$</p>\n<p>$$= \\ \\int(\\frac{A}{x + 1} + \\frac{Bx + C}{1 - x + x^2})dx$$</p>\n<p>$$= \\ \\int[\\frac{A(1 - x + x^2) + (Bx + C)(x + 1)}{(1 + x)(1 - x + x^2)}]dx$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\nA + B = &amp; 0 \\\\<br>\n-A + B + C = &amp; 0 \\\\<br>\nA + C = &amp; 1 \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$解得$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\nA = &amp; \\frac{1}{3} \\\\<br>\nB = &amp; -\\frac{1}{3} \\\\<br>\nC = &amp; \\frac{2}{3} \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$$= \\ \\int(\\frac{\\frac{1}{3}}{x + 1} + \\frac{-\\frac{1}{3}x + \\frac{2}{3}}{x^2 - x + 1})dx$$</p>\n<p>$$= \\ -\\frac{1}{3}\\ln{(x + 1)} - \\frac{1}{6}\\int\\frac{2x - 1 - 3}{x^2 - x + 1}dx$$</p>\n<p>$$= \\ -\\frac{1}{3}\\ln{(x + 1)} - \\frac{1}{6}\\int(\\frac{2x - 1}{x^2 - x + 1} + \\frac{3}{x^2 - x + 1})dx$$</p>\n<p>$$= \\ -\\frac{1}{3}\\ln{(x + 1)} - \\frac{1}{6}[\\int\\frac{1}{x^2 - x + 1}d(x^2 - x + 1) + 3\\int\\frac{1}{x^2 - x + 1}dx]$$</p>\n<p>$$= \\ -\\frac{1}{3}\\ln{(x + 1)} - \\frac{1}{6}\\ln|{x^2 - x + 1}| + \\frac{1}{2}\\int\\frac{1}{(x - \\frac{1}{2})^2 + \\frac{3}{4}}dx$$</p>\n<p>$$= \\ -\\frac{1}{3}\\ln{(x + 1)} - \\frac{1}{6}\\ln|{x^2 - x + 1}| + \\frac{1}{2}\\frac{1}{\\sqrt{\\frac{3}{4}}}\\arctan{\\frac{x - \\frac{1}{2}}{\\sqrt{\\frac{3}{4}}}}$$</p>\n<p>$$= \\ -\\frac{1}{3}\\ln{(x + 1)} - \\frac{1}{6}\\ln|{x^2 - x + 1}| + \\frac{1}{\\sqrt{3}}\\arctan{\\frac{2x - 1}{\\sqrt{3}}} + C$$</p>\n<h3 id=\"例5-2\">例5</h3>\n<p>若不定积分$\\int\\frac{x^2 + ax + 2}{(x + a)(x^2 + 2)}dx$的结果中不含反正切函数，求a</p>\n<p><strong>解：</strong></p>\n<p>$$\\frac{x^2 + ax + 2}{(x + 1)(x ^2 + 1)} $$</p>\n<p>$$= \\ \\frac{A}{x + 1} + \\frac{Bx + C}{x^2 + 1}$$</p>\n<p>$$= \\ \\frac{A}{x + 1} + \\frac{Bx}{x^2 + 1} + \\frac{C}{x^2 + 1}$$</p>\n<p>$$由于不含反正切函数，故\\frac{C}{x^2 + 1}中的系数C为0$$</p>\n<h2 id=\"有理函数积分的特殊解法\">有理函数积分的特殊解法</h2>\n<p>虽然从理论上而言，一切有理函数的积分都可以用上面的<strong>待定系数法去硬刚</strong>，但是，通法不一定是最优解法，对于某些题目，采用待定系数法的话，<strong>计算量大</strong>。</p>\n<p>很多有理函数有着自己的独特解法，这些解法不能一概而论，需要我们仔细分析被积函数的结构，具体问题具体分析。一下是几道抛砖引玉的例子——</p>\n<h3 id=\"例1-3\">例1</h3>\n<p>$求解： \\int\\frac{1}{1 - x^4}dx$</p>\n<h4 id=\"解法一：普通解法\">解法一：普通解法</h4>\n<p>$$I = \\ \\int\\frac{1}{(1 - x^2)(1 + x^2)}dx $$</p>\n<p>$$= \\ \\int\\frac{1}{(1 - x)(1 + x)(1 + x^2)}dx$$</p>\n<p>$$= \\ \\int(\\frac{A}{1 - x} + \\frac{B}{1 + x} + \\frac{Cx + D}{1 + x^2})$$</p>\n<p>$$…$$</p>\n<p>$$那么这样我说你就做的慢了$$</p>\n<h4 id=\"解法二：特殊解法\">解法二：特殊解法</h4>\n<p>$$I = \\ \\frac{1}{2}\\int\\frac{2}{(1 - x^2)(1 + x^2)}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{(1 - x^2) + (1 + x^2)}{(1 - x^2)(1 + x^2)}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\int(\\frac{1}{(1 + x^2)} + \\frac{1}{(1 - x^2)})dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\arctan{x} - \\frac{1}{2}\\int\\frac{1}{x^2 - 1}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\arctan{x} - \\frac{1}{2}\\int\\frac{1}{(x - 1)(x + 1)}dx$$</p>\n<p>$$= \\ \\frac{1}{2}\\arctan{x} - \\frac{1}{2}\\frac{1}{2}\\ln|\\frac{x - 1}{x + 1}|$$</p>\n<h3 id=\"类题1-5\">类题1</h3>\n<p>$\\int\\frac{1}{x^8(1 + x^2)}dx$</p>\n<h4 id=\"方法一-根据分母改造分子\">[方法一] 根据分母改造分子</h4>\n<p>$$I = \\ \\int\\frac{1}{x^8(1 + x^2)}dx$$</p>\n<p>$$= \\ \\int\\frac{(1 + x^2) - x^2}{x^8(1 + x^2)}$$</p>\n<p>$$ = \\ \\int\\frac{1}{x^8}dx - \\int\\frac{1}{x^6(1 + x^2)}dx$$</p>\n<p>$$= \\int\\frac{1}{x^8}dx - \\int\\frac{1}{x^6}dx + \\frac{1}{x^4(1 + x^2)}dx$$</p>\n<p>$$…(做相同处理即可得到答案)$$</p>\n<h4 id=\"方法二-倒代换\">[方法二] 倒代换</h4>\n<p>$$令x = \\frac{1}{t}，dx = (-\\frac{1}{t^2}dt)$$</p>\n<p>$$则I = \\ \\int\\frac{1}{x^8(1 + x^2)}dx$$</p>\n<p>$$= \\ \\int\\frac{t^{10}}{1 + t^2} * -\\frac{1}{t^2}dt$$</p>\n<p>$$= \\ -\\int\\frac{t^8 - 1 + 1}{1 + t^2}dt$$</p>\n<p>$$= \\ -\\int\\frac{(t^4 + 1)(t^2 + 1)(t^2 - 1) + 1}{1 + t^2}dt$$</p>\n<p>$$= \\ -\\int(t^4 + 1)(t^2 + 1)dt - \\int\\frac{1}{1 + t^2}dt$$</p>\n<p>$$一个是幂函数，一个是反正切函数解出即可$$</p>\n<p>**[注]：**倒代换一般适用于分母的次数远高于分子的次数的时候</p>\n<h3 id=\"类题2-4\">类题2</h3>\n<p>$\\int\\frac{1 + x^4}{1 + x^6}dx \\ \\ \\ \\ (最后一步就离谱！！)$</p>\n<p>$$I = \\ \\int\\frac{1 + x^4 - x^2 + x^2}{(1 + x^2)(1 - x^2 + x^4)}dx$$</p>\n<p>$$= \\ \\int(\\frac{1}{(1 + x^2)} + \\frac{x^2}{(1 + x^2)(1 - x^2 + x^4)})dx$$</p>\n<p>$$= \\ \\arctan{x} + \\int\\frac{x^2}{(1 + x^2)(1 - x^2 + x^4)}dx$$</p>\n<p>$$= \\ \\arctan{x} + \\int\\frac{x^2}{1 + x^6}dx$$</p>\n<p>$$= \\ \\arctan{x} + \\frac{1}{3}\\int\\frac{1}{1 + x^6}dx^3$$</p>\n<p>$$= \\ \\arctan{x} + \\frac{1}{3}arctan{x^3} + C$$</p>\n<h3 id=\"类题3-3\">类题3</h3>\n<p>$\\int\\frac{1}{x(x^3 + 27)}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{x^2}{x^3(x^3 + 27)}dx$$</p>\n<p>$$= \\ \\frac{1}{3}\\int\\frac{1}{x^3(x^3 + 27)}dx^3$$</p>\n<p>$$= \\ \\frac{1}{3}\\frac{1}{27}\\int(\\frac{1}{x^3} + \\frac{1}{x^3 + 27})dx^3$$</p>\n<p>$$= \\ \\frac{1}{81}\\ln|\\frac{x^3}{x^3 + 27}| + C$$</p>\n<h3 id=\"例2-3\">例2</h3>\n<p>$\\int\\frac{1 + x^2}{1 + x^4}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{1 + \\frac{1}{x^2}}{x^2 + \\frac{1}{x^2}}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{x^ + \\frac{1}{x^2}}d(x - \\frac{1}{x})$$</p>\n<p>$$= \\ \\int\\frac{1}{(x - \\frac{1}{x})^2 + 2}d(x - \\frac{1}{x})$$</p>\n<p>$$= \\ \\frac{1}{\\sqrt{2}}\\arctan{\\frac{x - \\frac{1}{x}}{\\sqrt{2}}} + C$$</p>\n<h4 id=\"注1\">[注1]</h4>\n<p>通过本题的启发，我们可以解决一切形如$\\int\\frac{1 \\pm x^2}{1 + kx^2 + x^4}dx$的题目</p>\n<h4 id=\"注2\">[注2]</h4>\n<p>本题也可以对分母<strong>强行</strong>因式分解，然后用常规的待定系数法进行裂项——</p>\n<p>$1 + x^4 = (1 + x^2)^2 - 2x^2 = (1 + x^2 - \\sqrt{2})(1 + x^2 + \\sqrt{2})$</p>\n<p>$故 \\ \\frac{1 + x^2}{1 + x^4} = \\frac{Ax + B}{1 + x^2 - \\sqrt{2}x} + \\frac{Cx + D}{1 + x^2 + \\sqrt{2}x} …$<strong>计算量巨大</strong></p>\n<h3 id=\"类题1-6\">类题1</h3>\n<p>$\\int\\frac{1 - x^2}{1 + x^4}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{\\frac{1}{x^2}  - 1}{x^2 + \\frac{1}{x^2}}dx$$</p>\n<p>$$= \\ -\\int\\frac{1}{x^2 + \\frac{1}{x^2}}d(\\frac{1}{x} + x)$$</p>\n<p>$$= \\ -\\frac{1}{(x + \\frac{1}{x})^2 - 2}d(\\frac{1}{x} + x)$$</p>\n<p>$$= \\ -\\frac{1}{2\\sqrt{2}}\\ln|{\\frac{x + \\frac{1}{x} - \\sqrt{2}}{x + \\frac{1}{x} + \\sqrt{2}}}| + C$$</p>\n<p>$$= \\ -\\frac{1}{2\\sqrt{2}}\\ln|{\\frac{x^2 + 1 - \\sqrt{2}x}{x^2 + 1 + \\sqrt{2}x}}| + C$$</p>\n<h3 id=\"注-4\">[注]</h3>\n<p>利用以上两题，可以求出积分$\\int\\frac{1}{1 + x^4}dx = \\frac{1}{2}\\int\\frac{1 + x^2}{1 + x^4}dx + \\int\\frac{1 - x^2}{1 + x^4}dx = …$</p>\n<p>至此可以解决的题型：$\\int\\frac{1 \\pm x^2}{1 + kx^2 + x^4}dx$</p>\n<h3 id=\"类题2-5\">类题2</h3>\n<p>$\\int\\frac{1}{1 + x^6}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{1}{(1 + x^2)(1 - x^2 + x^4)}dx$$</p>\n<p>$$= \\ \\int\\frac{(1 + x^2) - x^2}{(1 + x^2)(1 - x^2 + x^4)}dx$$</p>\n<p>$$= \\ \\int\\frac{1}{(1 - x^2 + x^4)}dx - \\int\\frac{x^2}{(1 + x^2)(1 - x^2 + x^4)}$$</p>\n<p>$$= \\ \\int\\frac{1}{(1 - x^2 + x^4)}dx - \\int\\frac{x^2}{1 + x^6}dx \\ \\ (将第二个式子中的分母变回去，积累出的经验)$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{(1 + x^2) + (1 - x^2)}{(1 - x^2 + x^4)}dx - \\frac{1}{3}\\int\\frac{1}{1 + x^6}d{x^3}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{(1 + x^2)}{(1 - x^2 + x^4)}dx + \\frac{1}{2}\\int\\frac{(1 - x^2)}{(1 - x^2 + x^4)}dx - \\frac{1}{3}\\int\\frac{1}{1 + (x^3)^2}d{x^3}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{(\\frac{1}{x^2} + 1)}{(\\frac{1}{x^2} - 1 + x^2)}dx + \\frac{1}{2}\\int\\frac{(\\frac{1}{x^2} - 1)}{(\\frac{1}{x^2} - 1 + x^2)}dx - \\frac{1}{3}\\arctan{x^3}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1}{(\\frac{1}{x^2} - 1 + x^2)}d{(x - \\frac{1}{x})} - \\frac{1}{2}\\int\\frac{1}{(\\frac{1}{x^2} - 1 + x^2)}d{(\\frac{1}{x} + 1)} - \\frac{1}{3}\\arctan{x^3}$$</p>\n<p>$$= \\ \\frac{1}{2}\\int\\frac{1}{(x - \\frac{1}{x})^2 + 1}d{(x - \\frac{1}{x})} - \\frac{1}{2}\\int\\frac{1}{((x + \\frac{1}{x})^2 - 3}d{(x + \\frac{1}{x})} - \\frac{1}{3}\\arctan{x^3}$$</p>\n<p>$$= \\ \\frac{1}{2}\\arctan{(x - \\frac{1}{x})} -\\frac{1}{2}\\frac{1}{2\\sqrt{3}}\\ln|{\\frac{x + \\frac{1}{x} - \\sqrt{3}}{x + \\frac{1}{x} + \\sqrt{3}}}| - \\frac{1}{3}\\arctan{x^3} + C$$</p>\n<h3 id=\"例3-3\">例3</h3>\n<p>$\\int\\frac{e^{3x} + e^x}{e^{4x} - e^{2x} + 1}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$I = \\int\\frac{e^{2x} + 1}{e^{4x} - e^{2x} + 1}de^x$$</p>\n<p>$$令t = e^x\\Longrightarrow \\int\\frac{t^2 + 1}{t^4 - t^2 + 1}dt$$</p>\n<p>$$= \\ \\int\\frac{1 + \\frac{1}{t^2}}{t^2 - 1 + \\frac{1}{t^2}}dt$$</p>\n<p>$$= \\ \\int\\frac{1}{(t - \\frac{1}{t})^2 + 1}d(t - \\frac{1}{t})$$</p>\n<p>$$= \\ \\arctan{(t - \\frac{1}{t})}$$</p>\n<p>$$= \\ \\arctan(e^x - e^{-x})$$</p>\n<h3 id=\"例4-3\">例4</h3>\n<p>$\\int\\frac{1}{\\sqrt{\\tan{x}}}dx$</p>\n<p><strong>换元法是用来打开局面的！</strong></p>\n<p><strong>[解]：</strong></p>\n<p>$$凑微分，分部积分法都不好做，考虑换元法$$</p>\n<p>$$令 \\sqrt{tanx} = t \\Longrightarrow x = \\arctan{t^2} \\Longrightarrow dx = \\frac{2t}{1 + (t^2)^2}dt = \\frac{2t}{1 + t^4}dt(复合求导法则)$$</p>\n<p>$$代入得I = \\int\\frac{1}{t}\\frac{2t}{1 + t^4}dt$$</p>\n<p>$$= \\ \\int\\frac{2}{1 + t^4}dt$$</p>\n<p>$$= \\ \\int\\frac{(1 + t^2) + (1 - t^2)}{1 + t^4}$$</p>\n<p>$$= \\ …$$</p>\n<h3 id=\"例5-3\">例5</h3>\n<p>$\\int\\sqrt{\\tan{x}}dx$</p>\n<p><strong>[解]：</strong></p>\n<p>$$令 \\sqrt{tanx} = t \\Longrightarrow x = \\arctan{t^2} \\Longrightarrow dx = \\frac{2t}{1 + (t^2)^2}dt = \\frac{2t}{1 + t^4}dt(复合求导法则)$$</p>\n<p>$$I = \\int{t}\\frac{2t}{1 + t^4}dt$$</p>\n<p>$$= \\ \\int\\frac{2t^2}{1 + t^4}dt$$</p>\n<p>$$= \\ \\int\\frac{(t^2 + 1) + (t^2 - 1)}{1 + t^4}dt$$</p>\n<p>$$…$$</p>\n<h1>完结撒花❀❀❀</h1>\n","categories":[],"tags":["高数"]},{"title":"常用库函数","url":"http://example.com/2022/03/29/常用库函数/","content":"<h1>常用库函数</h1>\n<h2 id=\"声明\">声明</h2>\n<p>都存在<code>#include &lt;algorithm&gt;</code>这个库中</p>\n<h2 id=\"reverse翻转\"><code>reverse</code>翻转</h2>\n<p>翻转一个<code>vector</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>());</span><br></pre></td></tr></table></figure>\n<p>翻转一个数组，元素存放在下标<code>1 ~ n</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"unique去重\"><code>unique</code>去重</h2>\n<p>返回去重（只去掉<strong>相邻</strong>的相同元素）之后的为迭代器（或指针），仍然为前闭后开，即这个迭代器是去重之后末尾元素的下一个位置。该函数常用于<strong>离散化</strong>，利用迭代器（或指针）的减法，可计算出去重后的元素个数。</p>\n<p>去重一个<code>vector</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a: 5 5 4 1 2 2 3</span></span><br><span class=\"line\"><span class=\"type\">int</span> m = <span class=\"built_in\">unique</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>()) - a.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">cout &lt;&lt; m &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">// m = 5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> t : a) cout &lt;&lt; t &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// a: 5 4 1 2 3 2 3</span></span><br></pre></td></tr></table></figure>\n<p>去重一个数组，元素存放在下标<code>1 ~ n</code>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">8</span>] = &#123;<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> n = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt = <span class=\"built_in\">unique</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>) - (a + <span class=\"number\">1</span>);</span><br><span class=\"line\">cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">// cnt = 5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> t : a) cout &lt;&lt; t &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// a : 0 5 4 1 2 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"random-shuffle随机打乱\"><code>random_shuffle</code>随机打乱</h2>\n<p>用法与<code>reverse</code>相同。</p>\n<h2 id=\"sort\"><code>sort</code></h2>\n<p>对两个迭代器（或指针）指定的部分进行快速排序。可以再第三个参数传入定义大小比较的函数，或者重载&quot;小于号&quot;运算符。</p>\n<p>把一个<code>int</code>数组（数组存放在下标<code>1 ~ n</code>）从大到小排序，传入比较函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[MAX_SIZE];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, cmp);</span><br></pre></td></tr></table></figure>\n<p>把自定义的结构体<code>vector</code>排序，重载&quot;小于号&quot;运算符：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Rec</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> id, x, y;    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;Rec&gt; a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"type\">const</span> Rec &amp;a, <span class=\"type\">const</span> Rec &amp;b)  <span class=\"comment\">// 重载小于号</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x || a.x == b.x &amp;&amp; a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(a.<span class=\"built_in\">begin</span>(), a.<span class=\"built_in\">end</span>());</span><br></pre></td></tr></table></figure>\n<h2 id=\"lower-bound-upper-bound二分\"><code>lower_bound/upper_bound</code>二分</h2>\n<p><code>lower_bound</code>的第三个参数传入一个元素<code>x</code>，在两个迭代器（指针）指定的部分上执行二分查找，返回指向第一个<strong>大于等于</strong><code>x</code>的元素的位置的迭代器（指针）。</p>\n<p><code>upper_bound</code>的用法和<code>lower_bound</code>大致相同，唯一的区间就是查找的第一个<strong>大于</strong><code>x</code>的元素。当然，两个迭代器（指针）指定的部分应该是<strong>提前排好序</strong>的。</p>\n<p>在有序<code>int</code>数组（元素放在下标<code>1 ~ n</code>）中查找大于等于<code>x</code>的最小整数的下标：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i = <span class=\"built_in\">lower_bound</span>(a + <span class=\"number\">1</span>, a + <span class=\"number\">1</span> + n, x) - a;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["算法小知识点"]},{"title":"浅谈位运算","url":"http://example.com/2022/03/28/浅谈位运算/","content":"<h1>位运算</h1>\n<h2 id=\"C-几种常用位运算简介\">C++ 几种常用位运算简介</h2>\n<h3 id=\"按位与-a-b-AND\"><strong>按位与</strong> <code>a &amp; b</code>  (AND)</h3>\n<p>法则：两者相同位<strong>都为</strong>$1$，则结果中改为为$1$；否则结果中改位为$0$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： <span class=\"number\">12</span> &amp; <span class=\"number\">6</span> = <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"number\">12</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"number\">6</span>: <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"number\">4</span>: <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"按位或-a-b-OR\"><strong>按位或</strong> <code>a | b</code>  (OR)</h3>\n<p>法则：两者相同位中<strong>有一个</strong>为$1$，则结果中该位为$1$；否则结果中该位为$0$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： <span class=\"number\">12</span> &amp; <span class=\"number\">6</span> = <span class=\"number\">14</span></span><br><span class=\"line\">  <span class=\"number\">12</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"number\">6</span>: <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"number\">14</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"按位异或-a-b-XOR\">按位异或 <code>a ^ b</code>  (XOR)</h3>\n<p>法则：两者相同位的<strong>值若不同</strong>，则结果中该位为$1$；否则结果中该位为$0$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： <span class=\"number\">12</span> &amp; <span class=\"number\">6</span> = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"number\">12</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"number\">6</span>: <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"number\">4</span>: <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"按位取反-a-NOT\"><strong>按位取反</strong><code>~a</code>  (NOT)</h3>\n<p>法则：该书中$0$的位置变为$1$，$1$的位置变为$0$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： </span><br><span class=\"line\">  <span class=\"number\">12</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"> ~<span class=\"number\">12</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"按位左移-a-b\">按位左移 <code>a &lt;&lt; b</code></h3>\n<p>法则：将该数$a$左移$b$位，<strong>正数左移变为正数，负数左移变为负数</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： <span class=\"number\">3</span> &lt;&lt; <span class=\"number\">2</span> = <span class=\"number\">12</span></span><br><span class=\"line\">   <span class=\"number\">3</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"number\">12</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>$a \\ &lt;&lt; \\ b \\ = \\ a \\ * \\ 2^b$</p>\n<h3 id=\"按位右移a-b\"><strong>按位右移</strong><code>a &gt;&gt; b</code></h3>\n<p>法则：将该数$a$右移$b$位，<strong>正数左移变为正数，负数左移变为负数。不论正负，都下取整</strong></p>\n<p>**</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： <span class=\"number\">13</span> &gt;&gt; <span class=\"number\">2</span> = <span class=\"number\">3</span></span><br><span class=\"line\">   <span class=\"number\">3</span>: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"number\">12</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>$a \\ &gt;&gt; \\ b \\ = \\ a \\ / \\ 2^b$</p>\n<h3 id=\"非-a\"><strong>非</strong><code>!a</code></h3>\n<p>法则：该数是$0$则为$1$；否则为$0$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例： !<span class=\"number\">0</span> = <span class=\"number\">1</span></span><br><span class=\"line\">    !<span class=\"number\">1</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    !<span class=\"number\">2</span> = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"负数表示\">负数表示</h2>\n<p>用<strong>补码</strong>表示负数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">∵ <span class=\"number\">-1</span> = <span class=\"number\">0</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">0</span> = <span class=\"number\">000.</span>.<span class=\"number\">.00</span></span><br><span class=\"line\">    <span class=\"number\">1</span> = <span class=\"number\">000.</span>.<span class=\"number\">.01</span></span><br><span class=\"line\">   <span class=\"number\">-1</span> = <span class=\"number\">111.</span>.<span class=\"number\">.11</span></span><br><span class=\"line\">同理：</span><br><span class=\"line\">    <span class=\"number\">-2</span> = <span class=\"number\">111.</span>.<span class=\"number\">.110</span></span><br><span class=\"line\">    <span class=\"number\">-3</span> = <span class=\"number\">111.</span>.<span class=\"number\">.101</span></span><br><span class=\"line\">    <span class=\"number\">-4</span> = <span class=\"number\">111.</span>.<span class=\"number\">.100</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    -x = ~x + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八进制与十六进制\">八进制与十六进制</h2>\n<p><strong>八进制</strong>数每一位用$0 \\ $~$ \\ 7$表示，每一位占二进制中的$3$位</p>\n<p>在$C ++$中，前面加<code>0</code>表示八进制数，例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"number\">015</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出：13</span></span><br></pre></td></tr></table></figure>\n<p><strong>十六进制</strong>数每一位用$0 \\ $~$ \\ f$表示（$a \\ - \\ f$分别表示$10 \\ - \\ 15$），每一位占二进制中的$4$位</p>\n<p>在$C++$中，前面加<code>0x</code>表示十六进制数，例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"number\">0xd</span>);</span><br><span class=\"line\"><span class=\"comment\">// 输出：13</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字节\">字节</h2>\n<p>一个字节为<strong>8位二进制数</strong>，也是<strong>2位十六进制数</strong>，即$00000000 \\ $~ $ \\ 11111111$</p>\n<p>一个<code>int</code>占$4$个字节，即<strong>32位二进制数</strong></p>\n<p>一个<code>long long</code>占8个字节，即<strong>64位二进制数</strong></p>\n<p><code>memset</code>按字节复制，故当<code>f</code>为<code>int</code>类数组时，<code>memset(f, 0x3f, sizeof f)</code>是将<code>f</code>赋值为<code>0x3f3f3f3f</code></p>\n<h2 id=\"位运算常用技巧\">位运算常用技巧</h2>\n<p>$(多用于状压DP)$</p>\n<p>将$ \\ x \\ $第$ \\ i \\ $位取反：<code>x ^= 1 &lt;&lt; i</code></p>\n<p>将$ \\ x \\ $第$ \\ i \\ $位制成$\\ 1$：<code>x |= 1 &lt;&lt; i</code></p>\n<p>将$ \\ x \\ $第$ \\ i \\ $位制成0： <code>x &amp;= -1 ^ 1 &lt;&lt; i</code>或<code>x &amp;= ~(1 &lt;&lt; i)</code></p>\n<p>取$ \\ x \\ $对$ \\ 2 \\ $取模的结果：<code>x &amp; 1</code></p>\n<p>取$ \\ x \\ $第$ \\ i \\ $位是否为$1$：<code>x &amp; 1 &lt;&lt; i</code>或<code>x &gt;&gt; i &amp; 1</code></p>\n<p>取$ \\ x \\ $的最后一位：<code>x &amp; -x</code></p>\n","categories":[],"tags":["算法小知识点"]},{"title":"浅谈STL","url":"http://example.com/2022/03/27/浅谈STL/","content":"<h1>vector</h1>\n<h2 id=\"声明-2\">声明</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span>   <span class=\"comment\">// 头文件</span></span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; a;      <span class=\"comment\">// 相当于一个长度动态变化的int数组</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; b[<span class=\"number\">233</span>]; <span class=\"comment\">// 相当于第一维长233，第二位长度动态变化的int数组</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">rec</span>&#123;…&#125;;</span><br><span class=\"line\">vector&lt;rec&gt; c;      <span class=\"comment\">// 自定义的结构体类型也可以保存在vector中</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"size-empty\"><code>size/empty</code></h2>\n<p><code>size</code>函数返回<code>vector</code>的实际长度（也就是包含的元素个数），<code>empty</code>函数返回一个<code>bool</code>类型，表明<code>vector</code>是否为空。二者的时间复杂度都是$O(1)$。</p>\n<p>所有的<strong>STL容器</strong>都支持这两个方法，含义也相同，后续我们就不在重复给出了。</p>\n<h2 id=\"clear\"><code>clear</code></h2>\n<p><code>clear</code>函数把<code>vector</code>清空。</p>\n<h2 id=\"迭代器\">迭代器</h2>\n<p>迭代器就好像<strong>STL容器</strong>的&quot;指针&quot;，可以用星号<code>*</code>操作符解除引用。</p>\n<p>一个保存<code>int</code>的<code>vector</code>的迭代器声明方法为：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure>\n<p><code>vector</code>的迭代器是&quot;随机访问迭代器&quot;，可以把<code>vector</code>的迭代器与一个整数相加减，其行为与指针的移动类似。可以把<code>vector</code>的两个迭代器相减，其结果也和指针相减类似，得到两个迭代器对应的下标之间的距离。</p>\n<h2 id=\"begin-end\">begin/end</h2>\n<p><code>begin</code>函数返回指向<code>vector</code>中第一个元素的迭代器。例如<code>a</code>是一个非空的<code>vector</code>，则<code>*a.begin()</code>与<code>a[0]</code>的作用相同。</p>\n<p>所有的容器都可以视作一个&quot;前闭后开&quot;的结构<strong>类似于[a.begin(), a.end())</strong> ，<code>end</code>函数返回<code>vector</code>的尾部，即第<code>n</code>个元素再往后的&quot;边界&quot;。<code>*a.end()</code>与<code>a[n]</code>都属于<strong>越界访问</strong>，其中<code>n = a.size()</code>。</p>\n<p>下面两份代码都遍历了<code>vector&lt;int&gt; a</code>，并输出它的所有元素。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); i ++)</span><br><span class=\"line\">    cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = a.<span class=\"built_in\">begin</span>(); it != a.<span class=\"built_in\">end</span>(); it ++)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n<h2 id=\"front-back\">front/back</h2>\n<p><code>front</code>函数返回<code>vector</code>的第一个元素，等价于<code>*a.begin()</code>和<code>a[0]</code>。</p>\n<p><code>back</code>函数返回<code>vector</code>的最后一个元素，等价于<code>*-- a.end()</code>和<code>a[a.size() - 1]</code></p>\n<h2 id=\"push-back-和pop-back\"><code>push_back()</code>和<code>pop_back()</code></h2>\n<p><code>a.push_back(x)</code>把元素x插入到<code>vector a</code>的尾部。</p>\n<p><code>a.pop_back()</code>删除<code>vector a</code>的最后一个元素</p>\n<h1>queue</h1>\n<h2 id=\"声明-3\">声明</h2>\n<p>头文件<code>queue</code>主要包括循环队列<code>queue</code>和优先队列<code>priority_queue</code>两个容器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">rec</span>&#123;…&#125;; queue&lt;rec&gt; q;                        <span class=\"comment\">//结构体rec中必须定义小于号</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; q;                              <span class=\"comment\">// 大根堆 将里面的元素从大到小排序</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; q;   <span class=\"comment\">// 小根堆 将里面的元素从小到大排序</span></span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;q;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环队列-queue\">循环队列 <code>queue</code></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push    <span class=\"comment\">// 从队尾插入</span></span><br><span class=\"line\">pop     <span class=\"comment\">// 从队头弹出</span></span><br><span class=\"line\">front   <span class=\"comment\">// 返回队头元素</span></span><br><span class=\"line\">back    <span class=\"comment\">// 返回队尾元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"优先队列-priority-queue\">优先队列 <code>priority_queue</code></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push    <span class=\"comment\">// 把元素插入堆</span></span><br><span class=\"line\">pop     <span class=\"comment\">// 删除堆顶元素</span></span><br><span class=\"line\">top     <span class=\"comment\">// 查询堆顶元素（最大值）</span></span><br></pre></td></tr></table></figure>\n<h1>stack</h1>\n<h2 id=\"声明-4\">声明</h2>\n<p>头文件<code>stack</code>包含栈。声明和前面的容器类似。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"操作\">操作</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push    <span class=\"comment\">// 向栈顶插入</span></span><br><span class=\"line\">pop     <span class=\"comment\">// 弹出栈顶元素</span></span><br></pre></td></tr></table></figure>\n<h1>deque</h1>\n<h2 id=\"声明-5\">声明</h2>\n<p>双端队列<code>deque</code>是一个支持在两端高效插入或删除元素的连续线性存储空间。它就像是<code>vector</code>和<code>queue</code>的结合。与<code>vector</code>相比，<code>deque</code>在头部增删元素仅需要 $O(1)$的时间；与<code>queue</code>相比，<code>deque</code>像数组一样支持随机访问。</p>\n<h2 id=\"操作-2\">操作</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]              <span class=\"comment\">// 随机访问</span></span><br><span class=\"line\">begin/end       <span class=\"comment\">// 返回deque的头/尾迭代器</span></span><br><span class=\"line\">front/back      <span class=\"comment\">// 队头/队尾元素</span></span><br><span class=\"line\">push_back       <span class=\"comment\">// 从队尾入队</span></span><br><span class=\"line\">push_front      <span class=\"comment\">// 从队头入队</span></span><br><span class=\"line\">pop_back        <span class=\"comment\">// 从队尾出队</span></span><br><span class=\"line\">pop_front       <span class=\"comment\">// 从队头出队</span></span><br><span class=\"line\">clear           <span class=\"comment\">// 清空队列</span></span><br></pre></td></tr></table></figure>\n<h1>set</h1>\n<p>头文件<code>set</code>主要包括<code>set</code>，<code>multiset</code>两个容器，分别是&quot;<strong>有序集合</strong>&quot;和&quot;<strong>有序多重集合</strong>&quot;，即前者的元素不能<strong>重复</strong>，而后者可以<strong>包含若干个相等的元素</strong>。<code>set</code>和<code>multiset</code>的内部实现是一颗红黑树，它们支持的函数基本相同。</p>\n<h2 id=\"声明-6\">声明</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">rec</span>&#123;…&#125;; set&lt;rec&gt; s;  <span class=\"comment\">// 结构体rec中必须定义小于号</span></span><br><span class=\"line\">multiset&lt;<span class=\"type\">double</span>&gt; s;</span><br></pre></td></tr></table></figure>\n<h2 id=\"size-empty-clear\"><code>size/empty/clear</code></h2>\n<p>与<code>vector</code>类似</p>\n<h2 id=\"迭代器-2\">迭代器</h2>\n<p><code>set</code>和<code>multiset</code>的迭代器称为&quot;双向访问迭代器&quot;，不支持&quot;随机访问&quot;，支持星号<code>*</code>解除引用，仅支持<code>++</code>和<code>--</code>两个与算数相关的操作。</p>\n<p>设<code>it</code>是一个迭代器，例如<code>set&lt;int&gt;::iterator it;</code></p>\n<p>若把<code>it ++</code>，则<code>it</code>会指向<strong>下一个</strong>元素。这里的“下一个”元素是指在元素从小到大排序的结果中，排在<code>it</code>下一名的元素。同理，若把<code>it --</code>，则it将会指向排在“上一个”的元素。</p>\n<h2 id=\"begin-end-2\"><code>begin/end</code></h2>\n<p>返回集合的首，尾迭代器，时间复杂度均为$O(1)$</p>\n<p><code>s.begin()</code>是指向集合中最小元素的迭代器。</p>\n<p><code>s.end()</code>是指向集合中最大元素的下一个位置的迭代器，换言之，就像<code>vector</code>一样，是一个<strong>前闭后开</strong>的形式。因此<code>-- s.end()</code>是指向集合中最大元素的迭代器。</p>\n<p><code>*s.begin()</code>返回集合中<strong>最小</strong>元素</p>\n<p><code>s.rbegin()</code>返回集合中<strong>最大</strong>元素</p>\n<h2 id=\"insert\"><code>insert</code></h2>\n<p><code>s.insert(x)</code>把一个元素<code>x</code>插入到集合<code>s</code>中，时间复杂度为$O(logn)$</p>\n<p>在<code>set</code>中，若元素已经存在，则不会重复插入该元素，对集合的状态无影响。</p>\n<h2 id=\"find\"><code>find</code></h2>\n<p><code>s.find(x)</code>在集合<code>s</code>中查找等于<code>x</code>的元素，并返回指向该元素的迭代器。若不存在，则返回<code>s.end()</code>。时间复杂度为$O(logn)$</p>\n<h2 id=\"lower-bound-upper-bound\"><code>lower_bound/upper_bound</code></h2>\n<p>这两个函数的用法与<code>find</code>类似，但查找的条件略有不同，时间复杂度为$O(logn)$</p>\n<p><code>s.lower_bound(x)</code>查找大于等于<code>x</code>的元素中最小的一个，并返回指向该元素的迭代器。</p>\n<h2 id=\"erase\"><code>erase</code></h2>\n<p>设<code>it</code>是一个迭代器，<code>s.erase(it)</code>从<code>s</code>中删除迭代器<code>it</code>指向的元素，时间复杂度为$O(logn)$</p>\n<p>设<code>x</code>是一个元素，<code>s.erase(x)</code>从<code>s</code>中删除所有等于<code>x</code>的元素，时间复杂度为$O(k \\ + \\ logn)$，其中$k$是被删除的元素个数。</p>\n<h2 id=\"count\"><code>count</code></h2>\n<p><code>s.count(x)</code>返回集合<code>s</code>中等于<code>s</code>的元素个数，时间复杂度$O(k \\ + \\ logn)$，其中$k$为元素<code>x</code>的个数。</p>\n<h1>unordered_set</h1>\n<h2 id=\"声明-7\">声明</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>它和<code>set</code>完全一样，不过内部是<strong>无序</strong>的，因此不能使用<code>lower_bound</code>和<code>upper_bound</code>。</p>\n<p>其余所有类似于<code>set</code>的操作时间复杂度都是$O(1)$。</p>\n<ul>\n<li>优点：效率更高</li>\n<li>缺点：不能支持二分，因为它是<strong>无序</strong>的。</li>\n</ul>\n<h1>map</h1>\n<p><code>map</code>容器是一个键值对<code>key-value</code>的映射，其内部实现是一颗以<code>key</code>为关键码的红黑树。<code>map</code>的<code>key</code>和<code>value</code>可以是任意类型，其中<code>key</code>必须定义小于号运算符。</p>\n<h2 id=\"声明-8\">声明</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;key_type, value_type&gt; name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例如：</span></span><br><span class=\"line\">map&lt;<span class=\"type\">long</span>, <span class=\"type\">long</span>, <span class=\"type\">bool</span>&gt; vis;</span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; hash;</span><br><span class=\"line\">map&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, vector&lt;<span class=\"type\">int</span>&gt;&gt; test;</span><br></pre></td></tr></table></figure>\n<h2 id=\"size-empty-clear-begin-end\"><code>size/empty/clear/begin/end</code></h2>\n<p>均与<code>set</code>类似</p>\n<h2 id=\"insert-erase\"><code>insert/erase</code></h2>\n<p>与<code>set</code>类似，但其参数均是<code>pair&lt;key_type, value_type&gt;</code>。</p>\n<h2 id=\"find-2\"><code>find</code></h2>\n<p><code>h.find(x)</code>在变量名为<code>h</code>的<code>map</code>中查找<code>key</code>为<code>x</code>的二元组。</p>\n<h2 id=\"操作符号\"><code>[]</code>操作符号</h2>\n<p><code>h[key]</code>返回<code>key</code>映射的<code>value</code>的引用，时间复杂度为 $O(logn)$。</p>\n<p><code>[]</code>操作符是<code>map</code>最吸引人的地方。我们可以很方便地通过<code>h[key]</code>来得到<code>key</code>对应的<code>value</code>，还可以对<code>h[key]</code>进行赋值操作，改变<code>key</code>对应的<code>value</code>。</p>\n<h2 id=\"遍历\">遍历</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;item : hash)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; item.first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; item.second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (unordered_map&lt;string, <span class=\"type\">double</span>&gt;::iterator it = hash.<span class=\"built_in\">begin</span>(); it != hash.<span class=\"built_in\">end</span>(); it ++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1>unordered_map</h1>\n<h2 id=\"声明-9\">声明</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>它和<code>map</code>完全一样，不过内部是<strong>无序</strong>的，因此不能使用<code>lower_bound</code>和<code>upper_bound</code>。</p>\n<p>其余所有类似于<code>map</code>的操作时间复杂度都是$O(1)$。</p>\n<ul>\n<li>优点：效率更高</li>\n<li>缺点：不能支持二分，因为它是<strong>无序</strong>的。</li>\n</ul>\n<p>但是我们<code>map</code>一般不用二分，所以常用<code>unordered_map</code></p>\n","categories":[],"tags":["算法小知识点"]},{"title":"泰勒公式","url":"http://example.com/2022/03/25/泰勒公式/","content":"<h1>等价无穷小的泰勒公式（x -&gt; 0）</h1>\n<p>$$\\sin{x} \\ = \\ x \\ - \\ \\frac{x^3}{3!} \\ + \\ o(x^3)$$</p>\n<p>$ \\ $</p>\n<p>$$\\cos{x} \\ = \\ 1 \\ - \\ \\frac{x^2}{2!} \\ + \\ \\frac{x^4}{4!} \\ + \\ o(x^4)$$</p>\n<p>$ \\ $</p>\n<p>$$\\arcsin{x} \\ = \\ x \\ + \\ \\frac{x^3}{3!} \\ + \\ o(x^3)$$</p>\n<p>$ \\ $</p>\n<p>$$\\tan{x} \\ = \\ x \\ + \\ \\frac{x^3}{3} + \\ o(x^3)$$</p>\n<p>$ \\ $</p>\n<p>$$\\arctan{x} \\ = \\ x \\ - \\ \\frac{x^3}{3} \\ + \\ o(x^3)$$</p>\n<p>$ \\ $</p>\n<p>$$\\ln(1 \\ + \\ x) \\ = \\ x \\ - \\ \\frac{x^2}{2} \\ + \\ \\frac{x^3}{3} \\ + \\ o(x^3)$$</p>\n<p>$ \\ $</p>\n<p>$$e^x \\ = \\ 1 \\ + \\ x \\ + \\ \\frac{x^2}{2!} \\ + \\ \\frac{x^3}{3!} \\ + \\ o(x^3)$$</p>\n<p>$ \\ $</p>\n<p>$$(1 \\ + \\ x)^{\\alpha} \\ = \\ 1 \\ + \\ \\alpha{x} \\ + \\ \\frac{\\alpha{(\\alpha \\ - \\ 1)}}{2!}{x^2} \\ + \\ o(x^2)$$</p>\n<p>$ \\ $</p>\n","categories":[],"tags":["高数"]},{"title":"等价无穷小公式","url":"http://example.com/2022/03/25/等价无穷小公式/","content":"<h1>等价无穷小</h1>\n<blockquote>\n<p>当 △ —&gt; 0 时</p>\n</blockquote>\n<p>$$\\sin{△} \\ \\sim \\ △$$</p>\n<p>$ \\ $</p>\n<p>$$\\tan{△} \\ \\sim \\ △$$</p>\n<p>$ \\ $</p>\n<p>$$\\ln{(1 \\ + \\ △)} \\ \\sim \\ △$$</p>\n<p>$ \\ $</p>\n<p>$$e^{△} \\ - \\ 1 \\ \\sim \\ △$$</p>\n<p>$ \\ $</p>\n<p>$$\\arcsin{△} \\ \\sim \\ △$$</p>\n<p>$ \\ $</p>\n<p>$$\\arctan{△} \\ \\sim \\ △$$</p>\n<p>$ \\ $</p>\n<p>$$\\log_a{(1 \\ + \\ △)} \\ \\sim \\ \\frac{△}{\\ln{a}}$$</p>\n<p>$ \\ $</p>\n<p>$$a^{△} \\ - \\ 1 \\ \\sim \\ △\\ln{a}$$</p>\n<p>$ \\ $</p>\n<p>$$1 \\ - \\ \\cos{△} \\ \\sim \\ \\frac{1}{2}{△}^2$$</p>\n<p>$ \\ $</p>\n<p>$$\\sqrt[n]{1 \\ + \\ △} \\ - \\ 1 \\ \\sim \\ \\frac{△}{n}$$</p>\n<p>$ \\ $</p>\n<p>$$△ \\ - \\ \\sin{△} \\ \\sim \\ \\frac{1}{6}{△}^3$$</p>\n<p>$ \\ $</p>\n<p>$$\\tan{△} \\ - \\ △ \\ \\sim \\ \\frac{1}{3}{△}^3$$</p>\n<p>$ \\ $</p>\n<p>$$(1 \\ + \\ △)^{\\alpha} \\ - \\ 1 \\ \\sim \\ \\alpha△$$</p>\n<p>$ \\ $</p>\n<p>$$\\arcsin{△} \\ - \\ △ \\ \\sim \\ \\frac{1}{6}{△}^3$$</p>\n<p>$ \\ $</p>\n<p>$$△ \\ - \\ \\arctan{△} \\ \\sim \\ \\frac{1}{3}{△}^3$$</p>\n<p>$ \\ $</p>\n<p>$$\\tan△ \\ - \\ \\sin△ \\ \\sim \\ \\frac{1}{2}{△}^3$$</p>\n<p>$ \\ $</p>\n<p>$$x^x \\ = \\ 1 \\ (x —&gt; 0^{+})$$</p>\n<p>$ \\ $<br>\n$ \\ $</p>\n<blockquote>\n<p>当 △ —&gt; 1 时</p>\n</blockquote>\n<p>$$\\ln{△} \\ = \\ △ \\ - \\ 1$$</p>\n","categories":[],"tags":["高数"]},{"title":"基本积分公式","url":"http://example.com/2022/03/24/基本积分公式/","content":"<h1>基本积分公式</h1>\n<p>$$1. \\ \\int{x^k}dx \\ = \\ \\frac{1}{k \\ + \\ 1}x^{k + 1} \\ + \\ C,k \\ne -1;$$</p>\n<p>$<br>\n\\left\\{<br>\n\\begin{matrix}<br>\n\\int{\\frac{1}{x^2}}dx = &amp; -\\frac{1}{x} + C \\\\<br>\n\\int{\\frac{1}{\\sqrt{x}}}dx = &amp; 2\\sqrt{x} + C \\\\<br>\n\\end{matrix}<br>\n\\right.<br>\n$</p>\n<p>$ \\ $</p>\n<p>$$2. \\ \\int{\\frac{1}{x}}dx \\ = \\ \\ln|x| \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ \\int{e^x}dx \\ = \\ e^x \\ + \\ C;\\int{a^x}dx \\ = \\ \\frac{a^x}{\\ln{a}} \\ + \\ C,a \\ &gt; 0且a \\ \\ne \\ 1$$</p>\n<p>$ \\ $</p>\n<p>$$4. \\ \\int{\\sin{x}}dx \\ = \\ -\\cos{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$5. \\ \\int{\\cos{x}}dx \\ = \\ \\sin{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$6. \\ \\int\\tan{x}dx \\ = \\ -\\ln|\\cos{x}| \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$7. \\ \\int{\\cot{x}}dx \\ = \\ \\ln|\\sin{x}| \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$8. \\ \\int\\frac{dx}{\\cos{x}} \\ = \\ \\int{\\sec{x}dx} \\ = \\ \\ln{|\\sec{x} \\ + \\ \\tan{x}| \\ + \\ C}$$</p>\n<p>$ \\ $</p>\n<p>$$9. \\ \\int\\frac{dx}{\\sin{x}} \\ = \\ \\int{\\csc{x}}dx \\ = \\ \\ln|\\csc{x} \\ - \\ \\cot{x}| \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$10. \\ \\int\\sec{^2x}dx \\ = \\ \\tan{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$11. \\ \\int\\csc{^2x}dx \\ = \\ -\\cot{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$12. \\ \\int{\\sec{x} \\tan{x}}dx \\ = \\ \\sec{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$13. \\ \\int{\\csc{x} \\cot{x}}dx \\ = \\ -\\csc{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$14. \\ \\int\\frac{1}{1 \\ + \\ x^2}dx \\ = \\ \\arctan{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$15. \\ \\int\\frac{1}{a^2 \\ + \\ x^2}dx \\ = \\ \\frac{1}{a}\\arctan{\\frac{x}{a}} \\ + \\ C(a \\ &gt; \\ 0)$$</p>\n<p>$ \\ $</p>\n<p>$$16. \\ \\int\\frac{1}{\\sqrt{1 \\ - \\ x^2}} \\ = \\ \\arcsin{x} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$17. \\ \\int\\frac{1}{\\sqrt{a^2 \\ - \\ x^2}} \\ = \\ \\arcsin{\\frac{x}{a}} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$18. \\ \\int\\frac{1}{\\sqrt{x^2 \\ + \\ a^2}}dx \\ = \\ \\ln{(x \\ + \\ \\sqrt{x^2 \\ + \\ a^2})} \\ + \\ C(常见 \\ a=1)$$</p>\n<p>$ \\ $</p>\n<p>$$19. \\ \\int\\frac{1}{\\sqrt{x^2 \\ - \\ a^2}}dx \\ = \\ \\ln{|x \\ + \\ \\sqrt{x^2 \\ - \\ a^2}|} \\ + \\ C(|x| \\ &gt; \\ |a|)$$</p>\n<p>$ \\ $</p>\n<p>$$20. \\ \\int\\frac{1}{x^2 \\ - \\ a^2}dx \\ = \\ \\frac{1}{2a}\\ln{|\\frac{x \\ - \\ a}{x \\ + \\ a}|} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$21. \\ \\int\\frac{1}{a^2 \\ - \\ x^2}dx \\ = \\ \\frac{1}{2a}\\ln{|\\frac{x \\ + \\ a}{x \\ - \\ a}|} \\ + \\ C$$</p>\n<p>$ \\ $</p>\n<p>$$22. \\ \\int\\sqrt{a^2 \\ - \\ x^2}dx \\ = \\ \\frac{a^2}{2}\\arcsin{\\frac{x}{a}} \\ + \\ \\frac{x}{2}\\sqrt{a^2 \\ - \\ x^2} \\ + \\ C(a \\ &gt; |x| \\ \\ge 0)$$</p>\n<p><strong>证明：</strong></p>\n<p>$求\\int\\sqrt{a^2 \\ - \\ x^2}dx(a \\ &gt; \\ 0)$</p>\n<p>$设x \\ = \\ a\\sin{t}$</p>\n<p>$则：dx \\ = \\ a\\cos{t}dt,t \\ = \\ \\arcsin{\\frac{x}{a}},-a \\ \\le x \\ \\le a,-\\frac{\\Pi}{2} \\ \\le \\ t \\ \\le \\ \\frac{\\Pi}{2}$</p>\n<p>$所以：$</p>\n<p>$\\int\\sqrt{a^2 \\ - \\ x^2}dx$</p>\n<p>$= \\ \\sqrt{a^2 \\ - \\ a^2\\sin{^2t}} \\ * \\ a\\cos{t}dt$</p>\n<p>$= \\ a^2\\int\\cos{^2t}dt$</p>\n<p>$= \\ \\frac{a^2}{2}\\int{(1 \\ + \\ \\cos{2t})}dt$</p>\n<p>$= \\ \\frac{a^2}{2}t \\ + \\ \\frac{a^2}{4}\\sin{2t} \\ + \\ C$</p>\n<p>$= \\ \\frac{a^2}{2}t \\ + \\ \\frac{a^2}{2}\\sin{t}\\cos{t} \\ + \\ C $</p>\n<p>$= \\ \\frac{a^2}{2}\\arcsin{\\frac{x}{a}} \\ + \\ \\frac{x}{2}\\sqrt{a^2 \\ - \\ x^2} \\ + \\ C(这里的转化看设的x \\ = \\ a\\sin{t}，\\sin{t} \\ = \\ \\frac{x}{a}, \\ cos{t} \\ = \\ \\frac{\\sqrt{a^2 \\ - \\ x^2}}{a})$</p>\n<p>$ \\ $</p>\n<p>$$23. \\ \\int\\sin{^2x}dx \\ = \\ \\frac{x}{2} \\ - \\ \\frac{\\sin{2x}}{4} \\ + \\ C(由此式子转化而来:\\sin{^2x} \\ = \\ \\frac{1 \\ - \\ \\cos{2x}}{2})$$</p>\n<p>$ \\ $</p>\n<p>$$24. \\ \\int\\cos{^2x}dx \\ = \\ \\frac{x}{2} \\ + \\ \\frac{\\sin{2x}}{4} \\ + \\ C(由此式子转化而来:\\sin{^2x} \\ = \\ \\frac{1 \\ + \\ \\cos{2x}}{2})$$</p>\n<p>$ \\ $</p>\n<p>$$25. \\ \\int\\tan{^2x} \\ = \\ \\tan{x} \\ - \\ x \\ + \\ C(\\tan{^2x} \\ = \\ \\sec{^2x} \\ - \\ 1)$$</p>\n<p>$ \\ $</p>\n<p>$$26. \\ \\int\\cot{^2x} \\ = \\ -\\cot{x} \\ - \\ x \\ + \\ C(\\cot{^2x} \\ = \\ \\csc{^2x} \\ - \\ 1)$$</p>\n<p>$ \\ $</p>\n<p>GGB！！！</p>\n","categories":[],"tags":["高数"]},{"title":"基本求导公式","url":"http://example.com/2022/03/23/基本求导公式/","content":"<h1>基本求导公式</h1>\n<p>$$1. \\ (x^\\alpha)^{\\prime} \\ = \\ ax^{a \\ - \\ 1}$$</p>\n<p>$ \\ $</p>\n<p>$$2. \\ (a^x)^{\\prime} \\ = \\ (a^x)\\ln{a} \\ \\ \\ (a&gt;0, \\ a \\neq 1)$$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ (e^x)^{\\prime} \\ = \\ e^x$$</p>\n<p>$ \\ $</p>\n<p>$$4. \\ (log_ax)^{\\prime} \\ = \\ \\frac{1}{x\\ln{a}} \\ \\ \\ (a&gt;0,a \\neq 1)$$</p>\n<p>$ \\ $</p>\n<p>$$5. \\ (\\ln{x})^{\\prime} \\ = \\ \\frac{1}{x}$$</p>\n<p>$ \\ $</p>\n<p>$$6. \\ (sinx)^{\\prime} \\ = \\ cosx$$</p>\n<p>$ \\ $</p>\n<p>$$7. \\ (cosx)^{\\prime} \\ = \\ -sinx$$</p>\n<p>$ \\ $</p>\n<p>$$8. \\ (\\arcsin{x})^{\\prime} \\ = \\ \\frac{1}{\\sqrt{1 \\ - \\ x^2}}$$</p>\n<p>$ \\ $</p>\n<p>$$9. \\ (\\arccos{x})^{\\prime} \\ = \\ -\\frac{1}{\\sqrt{1 \\ - \\ x^2}}$$</p>\n<p>$ \\ $</p>\n<p>$$10. \\ (\\tan{x})^{\\prime} \\ = \\ \\sec{^2x}$$</p>\n<p><strong>证明：</strong></p>\n<p>$(\\tan{x})^{\\prime}$</p>\n<p>$= \\ (\\frac{\\sin{x}}{\\cos{x}})^{\\prime}$</p>\n<p>$= \\ \\frac{\\cos{x} \\cos{x} \\ - \\ \\sin{x}(-\\sin{x})}{\\cos{^2x}}$</p>\n<p>$= \\ \\frac{1}{\\cos{^2x}}$</p>\n<p>$= \\ \\sec{^2x}$</p>\n<p>$ \\ $</p>\n<p>$$11. \\ (\\cot{x})^{\\prime} \\ = \\ -\\csc{^2x}$$</p>\n<p><strong>证明：</strong></p>\n<p>$(\\cot{x})^{\\prime}$</p>\n<p>$= \\ (\\frac{\\cos{x}}{\\sin{x}})^{\\prime}$</p>\n<p>$= \\ (\\frac{-\\sin{x} \\sin{x} \\ - \\ \\cos{x} \\cos{x}}{\\sin{^2x}})$</p>\n<p>$= \\ -\\frac{1}{\\sin{^2x}}$</p>\n<p>$= \\ -\\csc{^2x}$</p>\n<p>$ \\ $</p>\n<p>$$12. \\ (\\arctan{x})^{\\prime} \\ = \\ \\frac{1}{1 \\ + \\ x^2} \\ \\ \\ (暂时不会证明)$$</p>\n<p>$ \\ $</p>\n<p>$$13. \\ (arccot{x})^{\\prime} \\ = \\ -\\frac{1}{1 \\ + \\ x^2}$$</p>\n<p>$ \\ $</p>\n<p>$$14. \\ (\\sec{x})^{\\prime} \\ = \\ \\sec{x} \\tan{x}$$</p>\n<p><strong>证明：</strong></p>\n<p>$(\\sec{x})^{\\prime}$</p>\n<p>$= \\ (\\frac{1}{\\cos{x}})^{\\prime}$</p>\n<p>$= \\ \\frac{0 \\ - \\ (-\\sin{x})}{\\cos{^2x}}$</p>\n<p>$= \\ \\frac{sin{x}}{cos{x}} \\frac{1}{\\cos{x}}$</p>\n<p>$= \\ \\sec{x} \\tan{x}$</p>\n<p>$ \\ $</p>\n<p>$$15. \\ (\\csc{x})^{\\prime} \\ = \\ -\\csc{x} \\cot{x}$$</p>\n<p><strong>证明：</strong></p>\n<p>$(\\csc{x})^{\\prime}$</p>\n<p>$= \\ (\\frac{1}{\\sin{x}})^{\\prime}$</p>\n<p>$= \\ \\frac{0 \\ - \\ \\cos{x}}{\\sin{^2x}}$</p>\n<p>$= \\ -\\frac{\\cos{x}}{\\sin{x}} \\frac{1}{\\sin{x}}$</p>\n<p>$= \\ -\\csc{x} \\ \\cot{x}$</p>\n<p>$ \\ $</p>\n<p>$$16. \\ [\\ln{(x \\ + \\ \\sqrt{x^2 \\ + \\ 1}})]^{\\prime} \\ = \\ \\frac{1}{\\sqrt{x^2 \\ + \\ 1}}$$</p>\n<p><strong>证明：</strong></p>\n<p>$[\\ln{(x \\ + \\ \\sqrt{x^2 \\ + \\ 1}})]^{\\prime}$</p>\n<p>$= \\ \\frac{1 \\ + \\ \\frac{1}{2}\\frac{2x}{\\sqrt{x^2 \\ + \\ 1}}}{x \\ + \\ \\sqrt{x^2 \\ + \\ 1}}$</p>\n<p>$= \\ \\frac{1 \\ + \\ \\frac{x}{\\sqrt{x^2 \\ + \\ 1}}}{x \\ + \\ \\sqrt{x^2 \\ + \\ 1}}$</p>\n<p>$= \\ \\frac{\\frac{x \\ + \\ \\sqrt{x^2 \\ + \\ 1}}{\\sqrt{x^2 \\ + \\ 1}}}{x \\ + \\ \\sqrt{x^2 \\ + \\ 1}}$</p>\n<p>$= \\ \\frac{1}{\\sqrt{x^2 \\ + \\ 1}}$</p>\n<p>$ \\ $</p>\n<p>$$17. \\ [\\ln{(x \\ + \\ \\sqrt{x^2 \\ - \\ 1}})]^{\\prime} \\ = \\ \\frac{1}{\\sqrt{x^2 \\ - \\ 1}}$$</p>\n","categories":[],"tags":["高数"]},{"title":"三角公式","url":"http://example.com/2022/03/23/三角公式/","content":"<h2 id=\"三角函数\">三角函数</h2>\n<h3 id=\"三角函数的基本关系\">三角函数的基本关系</h3>\n<p>$$1. \\ csc\\alpha \\ = \\ \\frac{1}{sinα}$$</p>\n<p>$ \\ $</p>\n<p>$$2. \\ secα \\ = \\ \\frac{1}{cosα}$$</p>\n<p>$ \\ $</p>\n<p>$$3.\\ cot\\alpha \\ = \\ \\frac{1}{tan\\alpha}$$</p>\n<p>$ \\ $</p>\n<p>$$4.\\ tan\\alpha \\ = \\ \\frac{sin\\alpha}{cos\\alpha}$$</p>\n<p>$ \\ $</p>\n<p>$$5.\\ cot\\alpha \\ = \\ \\frac{cos\\alpha}{sin\\alpha}$$</p>\n<p>$ \\ $</p>\n<p>$$6.\\ sin^2{\\alpha} \\ + \\ cos^2{\\alpha} \\ = \\ 1$$</p>\n<p>$ \\ $</p>\n<p>$$7. \\ tan^2{\\alpha} \\ + \\ 1 \\  = \\ sec^2{\\alpha}$$</p>\n<p>$ \\ $</p>\n<p>$$8.\\ cot^2{\\alpha} \\ + \\ 1 \\ = \\ csc^2{\\alpha}$$</p>\n<hr>\n<h3 id=\"倍角公式\">倍角公式</h3>\n<p>$$1. \\ sin{2\\alpha} \\ = \\ 2sin\\alpha cos\\alpha$$</p>\n<p>$ \\ $</p>\n<p>$$2.\\ cos{2\\alpha} \\ = \\ cos^2\\alpha \\ - \\ sin^2\\alpha \\ = \\ 1 \\ - 2sin^2\\alpha \\ = \\ 2cos^2\\alpha \\ - \\ 1$$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ sin{3\\alpha} \\ = \\ -4sin^3\\alpha \\ + \\ 3sin\\alpha$$</p>\n<p><strong>证明：</strong></p>\n<p>$sin{3\\alpha}$</p>\n<p>$= \\ sin(\\alpha \\ + \\ 2\\alpha)$</p>\n<p>$= \\ sin\\alpha cos{2\\alpha} \\ + \\ sin{2\\alpha} cos\\alpha$</p>\n<p>$= \\ sin\\alpha (1 \\ - \\ 2sin^2\\alpha) \\ + \\ (2sin\\alpha cos\\alpha) cos\\alpha$</p>\n<p>$= \\ sin\\alpha \\ - \\ 2sin^3\\alpha \\ + \\ 2sin\\alpha cos^2\\alpha$</p>\n<p>$= \\ sin\\alpha \\ - \\ 2sin^3\\alpha \\ + \\ sin\\alpha(2cos^2\\alpha)$</p>\n<p>$= \\ sin\\alpha \\ - \\ 2sin^3\\alpha \\ + \\ sin\\alpha(2 \\ - \\ 2sin^2\\alpha)$</p>\n<p>$= \\ -4sin^3\\alpha \\ + \\ 3sin\\alpha$</p>\n<p>$ \\ $</p>\n<p>$$4. \\ cos3\\alpha \\ = \\ 4cos^3\\alpha \\ - \\ 3cos\\alpha$$</p>\n<p><strong>证明：</strong></p>\n<p>$cos3\\alpha$</p>\n<p>$= \\ cos(\\alpha \\ + \\ 2\\alpha)$</p>\n<p>$= \\ cos\\alpha cos2\\alpha - sin\\alpha sin2\\alpha$</p>\n<p>$= \\ cos\\alpha(2cos^2\\alpha \\ - \\ 1) \\ - \\ sin\\alpha (2sin\\alpha cos\\alpha)$</p>\n<p>$= \\ 3cos^3\\alpha \\ - \\ cos\\alpha \\ - \\ 2sin^2\\alpha cos\\alpha$</p>\n<p>$= \\ 3cos^3\\alpha \\ - \\ cos\\alpha \\ - \\ (2 \\ - \\ cos^2\\alpha) cos\\alpha$</p>\n<p>$= \\ 4cos^4 \\ - \\ 3cos\\alpha$</p>\n<p>$ \\ $</p>\n<p>$$5.\\ tan{2\\alpha} \\ = \\ \\frac{2tan\\alpha}{1 \\ - \\ tan^2\\alpha}$$</p>\n<p>$ \\ $</p>\n<p>$$6. \\ cos{2\\alpha \\ = \\ \\frac{1}{tan2\\alpha} \\ = \\ \\frac{1 \\ - \\ tan^2\\alpha}{2tan\\alpha}}$$</p>\n<hr>\n<h3 id=\"半角公式\">半角公式</h3>\n<p>$$1. \\ sin^2{\\frac{\\alpha}{2}} \\ = \\ \\frac{1}{2}(1 \\ - \\ cos\\alpha)(降幂公式)$$</p>\n<p><strong>证明：</strong></p>\n<p>$利用了 1 \\ - \\ cos2\\alpha \\ = \\ 2sin^2\\alpha(降幂公式)$</p>\n<p>$ \\ $</p>\n<p>$$2.\\ cos^2{\\frac{\\alpha}{2}} \\ = \\ \\frac{1 \\ + \\ cos\\alpha}{2}$$</p>\n<p><strong>证明：</strong></p>\n<p>$利用了2cos^2\\alpha \\ - \\ 1 \\ = \\ cos2\\alpha$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ sin\\frac{\\alpha}{2} \\ = \\ \\pm \\sqrt{\\frac{1 \\ - \\ cos\\alpha}{2}}$$</p>\n<p><strong>证明：</strong></p>\n<p>只是把1. 去掉平方了，但是注意要加$\\pm$号</p>\n<p>$ \\ $</p>\n<p>$$4. \\ cos\\frac{\\alpha}{2} \\ = \\ \\pm \\sqrt{\\frac{1 \\ + \\ cos\\alpha}{2}}$$</p>\n<p>$ \\ $</p>\n<p>$$5. \\ tan\\frac{\\alpha}{2} \\ = \\ \\pm \\sqrt{\\frac{1 \\ - \\ cos\\alpha}{1 \\ + \\ cos\\alpha}}$$</p>\n<p><strong>证明：</strong></p>\n<p>$tan\\frac{\\alpha}{2}$</p>\n<p>$= \\ \\frac{sin\\frac{\\alpha}{2}}{cos\\frac{\\alpha}{2}}$</p>\n<p>$= \\ \\frac{sin^2\\frac{\\alpha}{2}}{cos\\frac{\\alpha}{2} sin\\frac{\\alpha}{2}}$</p>\n<p>$= \\ \\frac{2sin^2\\frac{\\alpha}{2}}{2cos\\frac{\\alpha}{2} sin\\frac{\\alpha}{2}}$</p>\n<p>$= \\ \\frac{1 \\ - \\ cos\\alpha}{sin\\alpha}$</p>\n<p>$= \\ \\frac{(1 \\ - \\ cos\\alpha) \\ * \\ (1 \\ + \\ cos\\alpha)}{sin\\alpha \\ * \\ (1 \\ + \\ cos\\alpha)}$</p>\n<p>$= \\ \\frac{sin\\alpha}{1 \\ + \\ cos\\alpha}$</p>\n<p>$= \\ \\pm\\sqrt{\\frac{sin^2\\alpha}{(1 \\ + \\ cos\\alpha)^2}}$</p>\n<p>$= \\ \\pm\\sqrt{\\frac{1 \\ - \\ cos^2\\alpha}{(1 \\ + \\ cos\\alpha)^2}}$</p>\n<p>$= \\ \\pm\\sqrt{\\frac{1 \\ - \\ cos\\alpha}{1 \\ + \\ cos\\alpha}}$</p>\n<p>$ \\ $</p>\n<p>$$6. \\ cot\\frac{\\alpha}{2} \\ = \\ \\sqrt{\\frac{1 \\ + \\ cos\\alpha}{1 \\ - \\ cos\\alpha}}$$</p>\n<p><strong>证明：</strong></p>\n<p>同上，$ \\ cot\\alpha \\ 就是 \\ tan\\alpha \\ 的倒数$</p>\n<hr>\n<h3 id=\"和差公式\">和差公式</h3>\n<p>$$1. \\ sin(\\alpha \\ \\pm \\ \\beta) \\ = \\ sin\\alpha cos\\beta \\ \\pm \\ cos\\alpha sin\\beta$$</p>\n<p>$ \\ $</p>\n<p>$$2. \\ cos(\\alpha \\ \\pm \\ \\beta) \\ = \\ cos\\alpha cos\\beta \\ \\mp \\ sin\\alpha sin\\beta$$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ tan(\\alpha \\ + \\ \\beta) \\ = \\ \\frac{tan\\alpha \\ \\pm \\ tan\\beta}{1 \\ \\mp \\ tan\\alpha tan\\beta}$$</p>\n<p>$ \\ $</p>\n<p>$$4. \\ cot(\\alpha \\ + \\ \\beta) \\ = \\ \\frac{cot\\alpha cot\\beta \\ \\mp \\ 1}{cot\\beta \\ \\pm \\ cot\\alpha}$$</p>\n<hr>\n<h3 id=\"积化和差和与和差化积公式\">积化和差和与和差化积公式</h3>\n<h4 id=\"积化和差公式\">积化和差公式</h4>\n<p>$$1. \\ sin\\alpha cos\\beta \\ = \\ \\frac{1}{2}[sin(\\alpha \\ + \\ \\beta) \\ + \\ sin(\\alpha \\ - \\ \\beta)]$$</p>\n<p><strong>证明：</strong></p>\n<p>$\\frac{1}{2}[sin(\\alpha \\ + \\ \\beta) \\ + \\ sin(\\alpha \\ - \\ \\beta)]$</p>\n<p>$= \\ \\frac{1}{2}[sin\\alpha cos\\beta \\ + \\ cos\\alpha sin\\beta \\ + \\ sin\\alpha cos\\beta \\ - \\ cos\\alpha sin\\beta]$</p>\n<p>$= \\ \\frac{1}{2}(sin\\alpha cos\\beta \\ + \\ cos\\alpha sin\\beta)$</p>\n<p>$= \\ sin\\alpha cos\\beta$</p>\n<p>$ \\ $</p>\n<p>$$2.\\ cos\\alpha sin\\beta \\ = \\ \\frac{1}{2}[sin(\\alpha \\ + \\ \\beta) \\ - \\ sin(\\alpha \\ - \\ \\beta)]$$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ cos\\alpha cos\\beta \\ = \\ \\frac{1}{2}[cos(\\alpha \\ + \\ \\beta) \\ + \\ cos(\\alpha \\ - \\ \\beta)]$$</p>\n<p>$ \\ $</p>\n<p>$$4. \\ sin\\alpha sin\\beta \\ = \\ \\frac{1}{2}[cos(\\alpha \\ - \\ \\beta) \\ - \\ cos(\\alpha \\ + \\ \\beta)]$$</p>\n<hr>\n<h4 id=\"和差化积公式\">和差化积公式</h4>\n<p>$$1. \\ sin\\alpha \\ + \\ sin\\beta \\ = \\ 2sin\\frac{\\alpha \\ + \\ \\beta}{2} cos\\frac{\\alpha \\ - \\ \\beta}{2}$$</p>\n<p>$ \\ $</p>\n<p>$$2. \\ sin\\alpha \\ - \\ sin\\beta \\ = \\ 2sin\\frac{\\alpha \\ - \\ \\beta}{2} cos\\frac{\\alpha \\ + \\ \\beta}{2}$$</p>\n<p>$ \\ $</p>\n<p>$$3. \\ cos\\alpha \\ + \\ cos\\beta \\ = \\ 2cos\\frac{\\alpha \\ + \\ \\beta}{2} sin\\frac{\\alpha \\ - \\ \\beta}{2}$$</p>\n<p>$ \\ $</p>\n<p>$$4. \\ cos\\alpha \\ - \\ cos\\beta \\ = \\ {-}2sin\\frac{\\alpha \\ + \\ \\beta}{2}sin\\frac{\\alpha \\ - \\ \\beta}{2}$$</p>\n<p><strong>证明：</strong></p>\n<p>${-}2sin\\frac{\\alpha \\ + \\ \\beta}{2}sin\\frac{\\alpha \\ - \\ \\beta}{2}$</p>\n<p>$= \\ -2(sin\\frac{\\alpha}{2} cos\\frac{\\beta}{2} \\ + \\ cos\\frac{\\alpha}{2} sin\\frac{\\beta}{2})(sin\\frac{\\alpha}{2} cos\\frac{\\beta}{2} \\ - \\ cos\\frac{\\alpha}{2} sin\\frac{\\beta}{2})$</p>\n<p>$= \\ -2(sin^2\\frac{\\alpha}{2} cos^2\\frac{\\beta}{2} \\ - \\ sin\\frac{\\alpha}{2} cos\\frac{\\beta}{2}cos\\frac{\\alpha}{2} sin\\frac{\\beta}{2} \\ + \\ cos\\frac{\\alpha}{2} sin\\frac{\\beta}{2}sin\\frac{\\alpha}{2} cos\\frac{\\beta}{2} \\ - \\ cos^2\\frac{\\alpha}{2} sin^2\\frac{\\beta}{2})$</p>\n<p>$= \\ -2(sin^2\\frac{\\alpha}{2} cos^2\\frac{\\beta}{2} \\ - \\ cos^2\\frac{\\alpha}{2} sin^2\\frac{\\beta}{2})$</p>\n<p>$= \\ -2[(\\frac{1 \\ - \\ cos\\alpha}{2})(\\frac{1 \\ + \\ cos\\beta}{2}) \\ - \\ (\\frac{1 \\ + \\ cos\\alpha}{2})(\\frac{1 \\ - \\ cos\\beta}{2})]$</p>\n<p>$= \\ -\\frac{(1 \\ + \\ cos\\beta \\ - \\ cos\\alpha \\ - \\ cos\\alpha cos\\beta) \\ - \\ (1 \\ - \\ cos\\beta \\ + \\ cos\\alpha \\ - \\ cos\\alpha cos\\beta)}{2}$</p>\n<p>$= \\ -\\frac{2cos\\beta \\ - \\ 2cos\\alpha}{2}$</p>\n<p>$= \\ cos\\alpha \\ - \\ cos\\beta$</p>\n<hr>\n<h3 id=\"万能公式\">万能公式</h3>\n<p>若$u \\ = \\ tan\\frac{x}{2} \\ (-π \\ &lt; \\ x \\ &lt; π)$，则：</p>\n<p>$$sinx \\ = \\ \\frac{2u}{1 \\ + \\ u^2}, \\ \\ cosx \\ = \\ \\frac{1 \\ - \\ u^2}{1 \\ + \\ u ^2}$$</p>\n<p>😁</p>\n","categories":[],"tags":["高数"]},{"title":"","url":"http://example.com/link.json","content":"[{\"name\":\"彩色铅笔\",\"link\":\"https://www.colopen-blog.com/\",\"avatar\":\"https://www.colopen-blog.com/img/avatar.png\",\"descr\":\"彩铅的个人小屋\"}]","categories":[],"tags":[]},{"title":"关于","url":"http://example.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://example.com/css/custom.css","content":"/* 页脚与头图透明 */\n#footer {\n  background: transparent !important;\n}\n#page-header {\n  background: transparent !important;\n}\n\n/* 白天模式遮罩透明 */\n#footer::before {\n  background: transparent !important;\n}\n#page-header::before {\n  background: transparent !important;\n}\n\n/* 夜间模式遮罩透明 */\n[data-theme=\"dark\"] #footer::before {\n  background: transparent !important;\n}\n[data-theme=\"dark\"] #page-header::before {\n  background: transparent !important;\n}\n","categories":[],"tags":[]},{"title":"","url":"http://example.com/css/runtime.min.css","content":"div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}\n","categories":[],"tags":[]},{"title":"img","url":"http://example.com/img/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://example.com/js/runtime.js","content":"var now=new Date;function createtime(){now.setTime(now.getTime()+1e3);var e=new Date(\"03/01/2022 00:00:00\"),t=Math.trunc(234e8+(now-e)/1e3*17),a=(t/1496e5).toFixed(6),n=new Date(\"03/01/2022 00:00:00\"),s=(now-n)/1e3/60/60/24,o=Math.floor(s),r=(now-n)/1e3/60/60-24*o,i=Math.floor(r);1==String(i).length&&(i=\"0\"+i);var l=(now-n)/1e3/60-1440*o-60*i,b=Math.floor(l);1==String(b).length&&(b=\"0\"+b);var d=(now-n)/1e3-86400*o-3600*i-60*b,c=Math.round(d);1==String(c).length&&(c=\"0\"+c);let g=\"\";g=i<18&&i>=9?`<img class='boardsign' src='https://img.shields.io/badge/JasonQian的小屋-营业中-6adea8?style=social&logo=cakephp' title='~~~'><span class='textTip'> <br> <b>本站居然运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>我可是疯狂科学家——凤凰院廖能！欺骗世界这种 事情，简直是小菜一碟！✨</font></b> `:`<img class='boardsign' src='https://img.shields.io/badge/JasonQian的小屋-6adea8?style=social&logo=coffeescript' title='嘿嘿~'><span class='textTip'> <br> <b>本站居然运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>我可是疯狂科学家——凤凰院廖能！欺骗世界这种 事情，简直是小菜一碟！✨</font></b> `,document.getElementById(\"workboard\")&&(document.getElementById(\"workboard\").innerHTML=g)}setInterval((()=>{createtime()}),1e3);\n","categories":[],"tags":[]},{"title":"友情链接","url":"http://example.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"http://example.com/tags/index.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"http://example.com/categories/index.html","content":"","categories":[],"tags":[]}]